{"Runs": "200", "SwarmSource": "bzzr://bd5eb74241a60f90246a84b5e80dec153d0965de9b8ee833bfaf53a95fc2cc36", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SUPPLY_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"note\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"note_\",\"type\":\"string\"}],\"name\":\"setNote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"drop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"incNonce\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"NonceTick\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newNote\",\"type\":\"string\"}],\"name\":\"NoteChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"PerformingDrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.17+commit.bdeb9e52", "ConstructorArguments": "", "SourceCode": "pragma solidity ^0.4.13;\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\nlibrary SaferMath {\r\n  function mulX(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function divX(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SaferMath for uint256;\r\n  mapping(address => uint256) balances;\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue) returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue) returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract BLUECoin is StandardToken, Ownable {\r\n\r\n  string public constant name = \"Ethereum Blue\";\r\n  string public constant symbol = \"BLUE\";\r\n  uint8 public constant decimals = 8;\r\n\r\n  uint256 public constant SUPPLY_CAP = 42000000 * (10 ** uint256(decimals));\r\n\r\n  address NULL_ADDRESS = address(0);\r\n\r\n  uint public nonce = 0;\r\n\r\nevent NonceTick(uint nonce);\r\n  function incNonce() {\r\n    nonce += 1;\r\n    if(nonce > 100) {\r\n        nonce = 0;\r\n    }\r\n    NonceTick(nonce);\r\n  }\r\n\r\n  // Note intended to act as a source of authorized messaging from development team\r\n  event NoteChanged(string newNote);\r\n  string public note = \"Welcome to the future of cryptocurrency.\";\r\n  function setNote(string note_) public onlyOwner {\r\n      note = note_;\r\n      NoteChanged(note);\r\n  }\r\n  \r\n  event PerformingDrop(uint count);\r\n  function drop(address[] addresses, uint256 amount) public onlyOwner {\r\n    uint256 amt = amount * 10**8;\r\n    require(amt > 0);\r\n    require(amt <= SUPPLY_CAP);\r\n    PerformingDrop(addresses.length);\r\n    \r\n    // Maximum drop is 1000 addresses\r\n    assert(addresses.length <= 1000);\r\n    assert(balances[owner] >= amt * addresses.length);\r\n    for (uint i = 0; i < addresses.length; i++) {\r\n      address recipient = addresses[i];\r\n      if(recipient != NULL_ADDRESS) {\r\n        balances[owner] -= amt;\r\n        balances[recipient] += amt;\r\n        Transfer(owner, recipient, amt);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Constructor that gives msg.sender all of existing tokens..\r\n   */\r\n  function BLUECoin() {\r\n    totalSupply = SUPPLY_CAP;\r\n    balances[msg.sender] = SUPPLY_CAP;\r\n  }\r\n}", "OptimizationUsed": "1", "ContractName": "BLUECoin", "ByteCode": "0x606060405236156101045763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610109578063095ea7b3146101935780630cfccc83146101c957806318160ddd146101ee57806323b872dd1461020157806326d111f5146102295780632d7b299d1461023c578063313ce5671461028f5780633974874b146102b8578063661884631461030957806370a082311461032b5780638da5cb5b1461034a578063911475cc1461037957806395d89b411461038c578063a9059cbb1461039f578063affed0e0146103c1578063d73dd623146103d4578063dd62ed3e146103f6578063f2fde38b1461041b575b600080fd5b341561011457600080fd5b61011c61043a565b60405160208082528190810183818151815260200191508051906020019080838360005b83811015610158578082015183820152602001610140565b50505050905090810190601f1680156101855780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561019e57600080fd5b6101b5600160a060020a0360043516602435610471565b604051901515815260200160405180910390f35b34156101d457600080fd5b6101dc6104dd565b60405190815260200160405180910390f35b34156101f957600080fd5b6101dc6104e8565b341561020c57600080fd5b6101b5600160a060020a03600435811690602435166044356104ee565b341561023457600080fd5b61011c610618565b341561024757600080fd5b61028d60046024813581810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496506106b695505050505050565b005b341561029a57600080fd5b6102a2610792565b60405160ff909116815260200160405180910390f35b34156102c357600080fd5b61028d6004602481358181019083013580602081810201604051908101604052809392919081815260200183836020028082843750949650509335935061079792505050565b341561031457600080fd5b6101b5600160a060020a036004351660243561090b565b341561033657600080fd5b6101dc600160a060020a0360043516610a05565b341561035557600080fd5b61035d610a20565b604051600160a060020a03909116815260200160405180910390f35b341561038457600080fd5b61028d610a2f565b341561039757600080fd5b61011c610a80565b34156103aa57600080fd5b6101b5600160a060020a0360043516602435610ab7565b34156103cc57600080fd5b6101dc610b8d565b34156103df57600080fd5b6101b5600160a060020a0360043516602435610b93565b341561040157600080fd5b6101dc600160a060020a0360043581169060243516610c37565b341561042657600080fd5b61028d600160a060020a0360043516610c62565b60408051908101604052600d81527f457468657265756d20426c756500000000000000000000000000000000000000602082015281565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b660eebe0b40e800081565b60005481565b600080600160a060020a038416151561050657600080fd5b50600160a060020a0380851660008181526002602090815260408083203390951683529381528382205492825260019052919091205461054c908463ffffffff610cfd16565b600160a060020a038087166000908152600160205260408082209390935590861681522054610581908463ffffffff610d0f16565b600160a060020a0385166000908152600160205260409020556105aa818463ffffffff610cfd16565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3506001949350505050565b60068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106ae5780601f10610683576101008083540402835291602001916106ae565b820191906000526020600020905b81548152906001019060200180831161069157829003601f168201915b505050505081565b60035433600160a060020a039081169116146106d157600080fd5b60068180516106e4929160200190610d25565b507f29928852ccc0f94f50f6bbf315a9b4e2d2ded4c4f5de08857997daf086b754366006604051602080825282546002600019610100600184161502019091160490820181905281906040820190849080156107815780601f1061075657610100808354040283529160200191610781565b820191906000526020600020905b81548152906001019060200180831161076457829003601f168201915b50509250505060405180910390a150565b600881565b6003546000908190819033600160a060020a039081169116146107b957600080fd5b6305f5e10084029250600083116107cf57600080fd5b660eebe0b40e80008311156107e357600080fd5b7fd0707c61df60f834131065c6e5663fcae19010cdcd4f80af656fa5216107502d855160405190815260200160405180910390a16103e88551111561082457fe5b8451600354600160a060020a031660009081526001602052604090205490840290101561084d57fe5b600091505b84518210156109045784828151811061086757fe5b90602001906020020151600454909150600160a060020a038083169116146108f95760038054600160a060020a039081166000908152600160205260408082208054889003905584831680835291819020805488019055925490929116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a35b600190910190610852565b5050505050565b600160a060020a0333811660009081526002602090815260408083209386168352929052908120548083111561096857600160a060020a03338116600090815260026020908152604080832093881683529290529081205561099f565b610978818463ffffffff610cfd16565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b600160a060020a031660009081526001602052604090205490565b600354600160a060020a031681565b60058054600101908190556064901115610a495760006005555b7f69da1b4368a5f2483f8b2b6611d68efdedb8e61a34b9824a6e74ad0b96ee524a60055460405190815260200160405180910390a1565b60408051908101604052600481527f424c554500000000000000000000000000000000000000000000000000000000602082015281565b6000600160a060020a0383161515610ace57600080fd5b600160a060020a033316600090815260016020526040902054610af7908363ffffffff610cfd16565b600160a060020a033381166000908152600160205260408082209390935590851681522054610b2c908363ffffffff610d0f16565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b60055481565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054610bcb908363ffffffff610d0f16565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a03908116911614610c7d57600080fd5b600160a060020a0381161515610c9257600080fd5b600354600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600082821115610d0957fe5b50900390565b600082820183811015610d1e57fe5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610d6657805160ff1916838001178555610d93565b82800160010185558215610d93579182015b82811115610d93578251825591602001919060010190610d78565b50610d9f929150610da3565b5090565b610dbd91905b80821115610d9f5760008155600101610da9565b905600a165627a7a72305820bd5eb74241a60f90246a84b5e80dec153d0965de9b8ee833bfaf53a95fc2cc360029"}