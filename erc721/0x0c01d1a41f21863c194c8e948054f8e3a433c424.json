{"Runs": "200", "SwarmSource": "bzzr://63eab15e99ce79396ca201dae47531f576081147f4d5cc1d0b88cada254af7ee", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getTombDetail\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"buyAndCrave\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tombToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"changePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllTombs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getTombByOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.21+commit.dfe3193c", "ConstructorArguments": "", "SourceCode": "pragma solidity ^0.4.13;\r\n\r\ncontract ERC721 {\r\n    function implementsERC721() public pure returns (bool);\r\n    function totalSupply() public view returns (uint256 total);\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function ownerOf(uint256 _tokenId) public view returns (address owner);\r\n    function approve(address _to, uint256 _tokenId) public;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n    function transfer(address _to, uint256 _tokenId) public;\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    // Optional\r\n    // function name() public view returns (string name);\r\n    // function symbol() public view returns (string symbol);\r\n    // function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 tokenId);\r\n    // function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract TombAccessControl {\r\n    address public ownerAddress;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == ownerAddress);\r\n        _;\r\n    }\r\n\r\n    function withdrawBalance() external onlyOwner {\r\n        address contractAddress = this;\r\n        ownerAddress.transfer(contractAddress.balance);\r\n    }\r\n}\r\n\r\ncontract TombBase is TombAccessControl {\r\n    using SafeMath for uint256;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    struct Tomb {\r\n        // The timestamp from the block when this tomb came into existence.\r\n        address sculptor;\r\n        string data;\r\n    }\r\n\r\n    // An array containing all existing tomb\r\n    Tomb[] tombs;\r\n    mapping (uint => address) public tombToOwner;\r\n    mapping (address => uint) ownerTombCount;\r\n    mapping (uint => address) tombApprovals;\r\n\r\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\r\n        tombToOwner[_tokenId] = _to;\r\n        ownerTombCount[_to] = ownerTombCount[_to].add(1);\r\n        if (_from != address(0)) {\r\n            ownerTombCount[_from] = ownerTombCount[_from].sub(1);\r\n            delete tombApprovals[_tokenId];\r\n        }\r\n        emit Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    function _createTombWithData(address _owner, string givenData) internal returns (uint) {\r\n        Tomb memory _tomb = Tomb({\r\n            data: givenData,\r\n            sculptor: _owner\r\n        });\r\n        uint256 newTombId = (tombs.push(_tomb)).sub(1);\r\n        _transfer(0, _owner, newTombId);\r\n        return newTombId;\r\n    }\r\n\r\n    function getTombByOwner(address _owner) external view returns(uint[]) {\r\n        uint[] memory result = new uint[](ownerTombCount[_owner]);\r\n        uint counter = 0;\r\n        for (uint i = 0; i < tombs.length; i++) {\r\n            if (tombToOwner[i] == _owner) {\r\n                result[counter] = i;\r\n                counter++;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function getAllTombs() external view returns(uint[]) {\r\n        uint[] memory result = new uint[](tombs.length);\r\n        for (uint i = 0; i < tombs.length; i++) {\r\n            result[i] = i;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function getTombDetail(uint index) external view returns(address, address, string) {\r\n        return (tombToOwner[index], tombs[index].sculptor, tombs[index].data);\r\n    }\r\n}\r\n\r\ncontract TombOwnership is ERC721, TombBase {\r\n    /// @notice Name and symbol of the non fungible token, as defined in ERC721.\r\n    string public name = \"EtherFen\";\r\n    string public symbol = \"ETF\";\r\n\r\n    function implementsERC721() public pure returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint) {\r\n        return tombs.length;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 _balance) {\r\n        return ownerTombCount[_owner];\r\n    }\r\n\r\n    function ownerOf(uint256 _tokenId) public view returns (address _owner) {\r\n        return tombToOwner[_tokenId];\r\n    }\r\n\r\n    function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\r\n        _transfer(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    function approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\r\n        tombApprovals[_tokenId] = _to;\r\n        emit Approval(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public\r\n    {\r\n        require(_to != address(0));\r\n        require(_to != address(this));\r\n        require(tombApprovals[_tokenId] == msg.sender);\r\n        require(tombToOwner[_tokenId] == _from);\r\n        _transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    modifier onlyOwnerOf(uint256 _tokenId) {\r\n        require(tombToOwner[_tokenId] == msg.sender);\r\n        _;\r\n    }\r\n}\r\n\r\ncontract TombAction is TombOwnership {\r\n    uint256 currentPrice;\r\n\r\n    function buyAndCrave(string data) payable external {\r\n        if (msg.value < currentPrice) revert();\r\n        _createTombWithData(msg.sender, data);\r\n    }\r\n \r\n    function changePrice(uint256 newPrice) external onlyOwner {\r\n        //gwei to ether\r\n        uint256 gweiUnit = 1000000000;\r\n        currentPrice = newPrice.mul(gweiUnit);\r\n    }\r\n\r\n    function getPrice() external view returns(uint256) {\r\n        return currentPrice;\r\n    }\r\n}\r\n\r\ncontract TombCore is TombAction {\r\n    function TombCore() public {\r\n        ownerAddress = msg.sender;\r\n        currentPrice = 0.02 ether;\r\n    }\r\n}", "OptimizationUsed": "0", "ContractName": "TombCore", "ByteCode": "0x6060604052600436106100fc576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806301dee0251461010157806306fdde0314610203578063095ea7b3146102915780631051db34146102d357806318160ddd1461030057806323b872dd146103295780635fd8c7101461038a57806360f2e1c01461039f5780636352211e146103c257806370a08231146104255780638f84aa0914610472578063934206a4146104c757806395d89b411461052a57806398d5fdca146105b8578063a2b40d19146105e1578063a9059cbb14610604578063d1cb0f0f14610646578063d8966ad3146106b0575b600080fd5b341561010c57600080fd5b610122600480803590602001909190505061073e565b604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156101c65780820151818401526020810190506101ab565b50505050905090810190601f1680156101f35780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b341561020e57600080fd5b610216610887565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561025657808201518184015260208101905061023b565b50505050905090810190601f1680156102835780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561029c57600080fd5b6102d1600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610925565b005b34156102de57600080fd5b6102e6610a45565b604051808215151515815260200191505060405180910390f35b341561030b57600080fd5b610313610a4e565b6040518082815260200191505060405180910390f35b341561033457600080fd5b610388600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610a5b565b005b341561039557600080fd5b61039d610bbc565b005b6103c060048080359060200190820180359060200191909192905050610c97565b005b34156103cd57600080fd5b6103e36004808035906020019091905050610ce7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561043057600080fd5b61045c600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610d24565b6040518082815260200191505060405180910390f35b341561047d57600080fd5b610485610d6d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156104d257600080fd5b6104e86004808035906020019091905050610d92565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561053557600080fd5b61053d610dc5565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561057d578082015181840152602081019050610562565b50505050905090810190601f1680156105aa5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156105c357600080fd5b6105cb610e63565b6040518082815260200191505060405180910390f35b34156105ec57600080fd5b6106026004808035906020019091905050610e6d565b005b341561060f57600080fd5b610644600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610eee565b005b341561065157600080fd5b610659610f6c565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561069c578082015181840152602081019050610681565b505050509050019250505060405180910390f35b34156106bb57600080fd5b6106e7600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610fe8565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561072a57808201518184015260208101905061070f565b505050509050019250505060405180910390f35b6000806107496114c7565b6002600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660018581548110151561078c57fe5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166001868154811015156107cd57fe5b9060005260206000209060020201600101808054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108735780601f1061084857610100808354040283529160200191610873565b820191906000526020600020905b81548152906001019060200180831161085657829003601f168201915b505050505090509250925092509193909250565b60058054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561091d5780601f106108f25761010080835404028352916020019161091d565b820191906000526020600020905b81548152906001019060200180831161090057829003601f168201915b505050505081565b803373ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561099357600080fd5b826004600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b60006001905090565b6000600180549050905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610a9757600080fd5b3073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610ad257600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610b3f57600080fd5b8273ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610bac57600080fd5b610bb7838383611116565b505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c1957600080fd5b3090506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc8273ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f193505050501515610c9457600080fd5b50565b600754341015610ca657600080fd5b610ce23383838080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050611361565b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60068054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e5b5780601f10610e3057610100808354040283529160200191610e5b565b820191906000526020600020905b815481529060010190602001808311610e3e57829003601f168201915b505050505081565b6000600754905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610eca57600080fd5b633b9aca009050610ee4818361145590919063ffffffff16565b6007819055505050565b803373ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610f5c57600080fd5b610f67338484611116565b505050565b610f746114db565b610f7c6114db565b6000600180549050604051805910610f915750595b90808252806020026020018201604052509150600090505b600180549050811015610fe057808282815181101515610fc557fe5b90602001906020020181815250508080600101915050610fa9565b819250505090565b610ff06114db565b610ff86114db565b600080600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518059106110485750595b9080825280602002602001820160405250925060009150600090505b60018054905081101561110b578473ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156110fe578083838151811015156110e757fe5b906020019060200201818152505081806001019250505b8080600101915050611064565b829350505050919050565b816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506111bb6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461149090919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515611301576112876001600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546114ae90919063ffffffff16565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555b808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b600061136b6114ef565b600060408051908101604052808673ffffffffffffffffffffffffffffffffffffffff16815260200185815250915061143c60018080548060010182816113b29190611525565b9160005260206000209060020201600086909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101908051906020019061142b929190611557565b5050506114ae90919063ffffffff16565b905061144a60008683611116565b809250505092915050565b600080600084141561146a5760009150611489565b828402905082848281151561147b57fe5b0414151561148557fe5b8091505b5092915050565b60008082840190508381101515156114a457fe5b8091505092915050565b60008282111515156114bc57fe5b818303905092915050565b602060405190810160405280600081525090565b602060405190810160405280600081525090565b6040805190810160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200161151f6115d7565b81525090565b8154818355818115116115525760020281600202836000526020600020918201910161155191906115eb565b5b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061159857805160ff19168380011785556115c6565b828001600101855582156115c6579182015b828111156115c55782518255916020019190600101906115aa565b5b5090506115d39190611641565b5090565b602060405190810160405280600081525090565b61163e91905b8082111561163a57600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006116319190611666565b506002016115f1565b5090565b90565b61166391905b8082111561165f576000816000905550600101611647565b5090565b90565b50805460018160011615610100020316600290046000825580601f1061168c57506116ab565b601f0160209004906000526020600020908101906116aa9190611641565b5b505600a165627a7a7230582063eab15e99ce79396ca201dae47531f576081147f4d5cc1d0b88cada254af7ee0029"}