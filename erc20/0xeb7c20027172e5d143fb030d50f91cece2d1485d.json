{"Runs": "200", "SwarmSource": "bzzr://8305f2c61838438d8989e3e3335b9353d95fe6a1e0ed3e48e4ee9ced2b5a5cdb", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_toAddresses\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"multiPartyTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toAddresses\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"multiPartyTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TransferFrom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.17+commit.bdeb9e52", "ConstructorArguments": "", "SourceCode": "pragma solidity ^0.4.17;\r\n\r\nlibrary SafeMathMod {// Partial SafeMath Library\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require((c = a - b) < a);\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require((c = a + b) > a);\r\n    }\r\n}\r\n\r\ncontract EBTC {//is inherently ERC20\r\n    using SafeMathMod for uint256;\r\n\r\n    /**\r\n    * @constant name The name of the token\r\n    * @constant symbol  The symbol used to display the currency\r\n    * @constant decimals  The number of decimals used to dispay a balance\r\n    * @constant totalSupply The total number of tokens times 10^ of the number of decimals\r\n    * @constant MAX_UINT256 Magic number for unlimited allowance\r\n    * @storage balanceOf Holds the balances of all token holders\r\n    * @storage allowed Holds the allowable balance to be transferable by another address.\r\n    */\r\n\r\n    string constant public name = \"eBTC\";\r\n\r\n    string constant public symbol = \"EBTC\";\r\n\r\n    uint8 constant public decimals = 8;\r\n\r\n    uint256 constant public totalSupply = 21000000e8;\r\n\r\n    uint256 constant private MAX_UINT256 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n    mapping (address => uint256) public balanceOf;\r\n\r\n    mapping (address => mapping (address => uint256)) public allowed;\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    event TransferFrom(address indexed _spender, address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    function EBTC() public {balanceOf[msg.sender] = totalSupply;}\r\n\r\n    /**\r\n    * @notice send `_value` token to `_to` from `msg.sender`\r\n    *\r\n    * @param _to The address of the recipient\r\n    * @param _value The amount of token to be transferred\r\n    * @return Whether the transfer was successful or not\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        /* Ensures that tokens are not sent to address \"0x0\" */\r\n        require(_to != address(0));\r\n        /* Prevents sending tokens directly to contracts. */\r\n        require(isNotContract(_to));\r\n\r\n        /* SafeMathMOd.sub will throw if there is not enough balance and if the transfer value is 0. */\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    *\r\n    * @param _from The address of the sender\r\n    * @param _to The address of the recipient\r\n    * @param _value The amount of token to be transferred\r\n    * @return Whether the transfer was successful or not\r\n    */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        /* Ensures that tokens are not sent to address \"0x0\" */\r\n        require(_to != address(0));\r\n        /* Ensures tokens are not sent to this contract */\r\n        require(_to != address(this));\r\n        \r\n        uint256 allowance = allowed[_from][msg.sender];\r\n        /* Ensures sender has enough available allowance OR sender is balance holder allowing single transsaction send to contracts*/\r\n        require(_value <= allowance || _from == msg.sender);\r\n\r\n        /* Use SafeMathMod to add and subtract from the _to and _from addresses respectively. Prevents under/overflow and 0 transfers */\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);\r\n\r\n        /* Only reduce allowance if not MAX_UINT256 in order to save gas on unlimited allowance */\r\n        /* Balance holder does not need allowance to send from self. */\r\n        if (allowed[_from][msg.sender] != MAX_UINT256 && _from != msg.sender) {\r\n            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        }\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer the specified amounts of tokens to the specified addresses.\r\n    * @dev Be aware that there is no check for duplicate recipients.\r\n    *\r\n    * @param _toAddresses Receiver addresses.\r\n    * @param _amounts Amounts of tokens that will be transferred.\r\n    */\r\n    function multiPartyTransfer(address[] _toAddresses, uint256[] _amounts) public {\r\n        /* Ensures _toAddresses array is less than or equal to 255 */\r\n        require(_toAddresses.length <= 255);\r\n        /* Ensures _toAddress and _amounts have the same number of entries. */\r\n        require(_toAddresses.length == _amounts.length);\r\n\r\n        for (uint8 i = 0; i < _toAddresses.length; i++) {\r\n            transfer(_toAddresses[i], _amounts[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer the specified amounts of tokens to the specified addresses from authorized balance of sender.\r\n    * @dev Be aware that there is no check for duplicate recipients.\r\n    *\r\n    * @param _from The address of the sender\r\n    * @param _toAddresses The addresses of the recipients (MAX 255)\r\n    * @param _amounts The amounts of tokens to be transferred\r\n    */\r\n    function multiPartyTransferFrom(address _from, address[] _toAddresses, uint256[] _amounts) public {\r\n        /* Ensures _toAddresses array is less than or equal to 255 */\r\n        require(_toAddresses.length <= 255);\r\n        /* Ensures _toAddress and _amounts have the same number of entries. */\r\n        require(_toAddresses.length == _amounts.length);\r\n\r\n        for (uint8 i = 0; i < _toAddresses.length; i++) {\r\n            transferFrom(_from, _toAddresses[i], _amounts[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @notice `msg.sender` approves `_spender` to spend `_value` tokens\r\n    *\r\n    * @param _spender The address of the account able to transfer the tokens\r\n    * @param _value The amount of tokens to be approved for transfer\r\n    * @return Whether the approval was successful or not\r\n    */\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        /* Ensures address \"0x0\" is not assigned allowance. */\r\n        require(_spender != address(0));\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @param _owner The address of the account owning tokens\r\n    * @param _spender The address of the account able to transfer the tokens\r\n    * @return Amount of remaining tokens allowed to spent\r\n    */\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        remaining = allowed[_owner][_spender];\r\n    }\r\n\r\n    function isNotContract(address _addr) private view returns (bool) {\r\n        uint length;\r\n        assembly {\r\n        /* retrieve the size of the code on target address, this needs assembly */\r\n        length := extcodesize(_addr)\r\n        }\r\n        return (length == 0);\r\n    }\r\n\r\n    // revert on eth transfers to this contract\r\n    function() public payable {revert();}\r\n}", "OptimizationUsed": "0", "ContractName": "EBTC", "ByteCode": "0x606060405236156100b8576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100bd578063095ea7b31461014b57806318160ddd146101a557806323b872dd146101ce578063313ce567146102475780635c658165146102765780636e96433f146102e257806370a082311461039b57806395d89b41146103e8578063a9059cbb14610476578063b22c14c7146104d0578063dd62ed3e1461056a575b600080fd5b34156100c857600080fd5b6100d06105d6565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101105780820151818401526020810190506100f5565b50505050905090810190601f16801561013d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561015657600080fd5b61018b600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061060f565b604051808215151515815260200191505060405180910390f35b34156101b057600080fd5b6101b861073c565b6040518082815260200191505060405180910390f35b34156101d957600080fd5b61022d600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610747565b604051808215151515815260200191505060405180910390f35b341561025257600080fd5b61025a610c09565b604051808260ff1660ff16815260200191505060405180910390f35b341561028157600080fd5b6102cc600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610c0e565b6040518082815260200191505060405180910390f35b34156102ed57600080fd5b610399600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509190803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091905050610c33565b005b34156103a657600080fd5b6103d2600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610cba565b6040518082815260200191505060405180910390f35b34156103f357600080fd5b6103fb610cd2565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561043b578082015181840152602081019050610420565b50505050905090810190601f1680156104685780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561048157600080fd5b6104b6600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610d0b565b604051808215151515815260200191505060405180910390f35b34156104db57600080fd5b61056860048080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509190803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091905050610ef1565b005b341561057557600080fd5b6105c0600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610f76565b6040518082815260200191505060405180910390f35b6040805190810160405280600481526020017f654254430000000000000000000000000000000000000000000000000000000081525081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561064c57600080fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b660775f05a07400081565b600080600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415151561078657600080fd5b3073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141515156107c157600080fd5b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050808311158061087a57503373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16145b151561088557600080fd5b6108d6836000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610ffd90919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610969836000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461101890919063ffffffff16565b6000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414158015610a8357503373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614155b15610b9857610b1783600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461101890919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150509392505050565b600881565b6001602052816000526040600020602052806000526040600020600091509150505481565b600060ff835111151515610c4657600080fd5b81518351141515610c5657600080fd5b600090505b82518160ff161015610cb457610ca684848360ff16815181101515610c7c57fe5b90602001906020020151848460ff16815181101515610c9757fe5b90602001906020020151610747565b508080600101915050610c5b565b50505050565b60006020528060005260406000206000915090505481565b6040805190810160405280600481526020017f454254430000000000000000000000000000000000000000000000000000000081525081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610d4857600080fd5b610d5183611033565b1515610d5c57600080fd5b610dad826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461101890919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610e40826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610ffd90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600060ff835111151515610f0457600080fd5b81518351141515610f1457600080fd5b600090505b82518160ff161015610f7157610f63838260ff16815181101515610f3957fe5b90602001906020020151838360ff16815181101515610f5457fe5b90602001906020020151610d0b565b508080600101915050610f19565b505050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60008282840191508111151561101257600080fd5b92915050565b60008282840391508110151561102d57600080fd5b92915050565b600080823b9050600081149150509190505600a165627a7a723058208305f2c61838438d8989e3e3335b9353d95fe6a1e0ed3e48e4ee9ced2b5a5cdb0029"}