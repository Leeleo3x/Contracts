{"Runs": "200", "SwarmSource": "bzzr://4b697d3aa64f916ecc42d2a9da9b72646beda153a58942612cd9cd6fca6f5004", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"FT_TOKEN_SALE_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tdeActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unsoldVestingAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FT_OPERATIONAL_FUND\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_restart\",\"type\":\"bool\"}],\"name\":\"stopTde\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"shortenTde\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tdeIssuer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamVestingAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FT_TEAM_FUND\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startTde\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tdeStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fttIssued\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"capReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"extendTde\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operationalReserveAddress\",\"type\":\"address\"}],\"name\":\"setOperationalReserveAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operationalReserveAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tdeDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_fttAmount\",\"type\":\"uint256\"}],\"name\":\"issueFTT\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tdeIssuer\",\"type\":\"address\"}],\"name\":\"setTdeIssuer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tdeStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"FTTIssued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"TdeStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"stopTime\",\"type\":\"uint256\"}],\"name\":\"TdeStopped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"finalizeTime\",\"type\":\"uint256\"}],\"name\":\"TdeFinalized\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.18+commit.9cf6e910", "ConstructorArguments": "", "SourceCode": "pragma solidity ^0.4.18;\r\n\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    assert(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n    assert(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    assert(token.approve(spender, value));\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n\r\n    address public owner;\r\n\r\n    modifier onlyOwner {\r\n        require(isOwner(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        owner = _newOwner;\r\n    }\r\n\r\n    function isOwner(address _address) public constant returns (bool) {\r\n        return owner == _address;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title TokenVesting\r\n * @dev A token holder contract that can release its token balance gradually like a\r\n * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\r\n * owner.\r\n */\r\ncontract TokenVesting is Ownable {\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for ERC20Basic;\r\n\r\n  event Released(uint256 amount);\r\n  event Revoked();\r\n\r\n  // beneficiary of tokens after they are released\r\n  address public beneficiary;\r\n\r\n  uint256 public cliff;\r\n  uint256 public start;\r\n  uint256 public duration;\r\n\r\n  bool public revocable;\r\n\r\n  mapping (address => uint256) public released;\r\n  mapping (address => bool) public revoked;\r\n\r\n  /**\r\n   * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\r\n   * _beneficiary, gradually in a linear fashion until _start + _duration. By then all\r\n   * of the balance will have vested.\r\n   * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\r\n   * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\r\n   * @param _duration duration in seconds of the period in which the tokens will vest\r\n   * @param _revocable whether the vesting is revocable or not\r\n   */\r\n  function TokenVesting(address _beneficiary, uint256 _start, uint256 _cliff, uint256 _duration, bool _revocable) public {\r\n    require(_beneficiary != address(0));\r\n    require(_cliff <= _duration);\r\n\r\n    beneficiary = _beneficiary;\r\n    revocable = _revocable;\r\n    duration = _duration;\r\n    cliff = _start.add(_cliff);\r\n    start = _start;\r\n  }\r\n\r\n  /**\r\n   * @notice Transfers vested tokens to beneficiary.\r\n   * @param token ERC20 token which is being vested\r\n   */\r\n  function release(ERC20Basic token) public {\r\n    uint256 unreleased = releasableAmount(token);\r\n\r\n    require(unreleased > 0);\r\n\r\n    released[token] = released[token].add(unreleased);\r\n\r\n    token.safeTransfer(beneficiary, unreleased);\r\n\r\n    Released(unreleased);\r\n  }\r\n\r\n  /**\r\n   * @notice Allows the owner to revoke the vesting. Tokens already vested\r\n   * remain in the contract, the rest are returned to the owner.\r\n   * @param token ERC20 token which is being vested\r\n   */\r\n  function revoke(ERC20Basic token) public onlyOwner {\r\n    require(revocable);\r\n    require(!revoked[token]);\r\n\r\n    uint256 balance = token.balanceOf(this);\r\n\r\n    uint256 unreleased = releasableAmount(token);\r\n    uint256 refund = balance.sub(unreleased);\r\n\r\n    revoked[token] = true;\r\n\r\n    token.safeTransfer(owner, refund);\r\n\r\n    Revoked();\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the amount that has already vested but hasn't been released yet.\r\n   * @param token ERC20 token which is being vested\r\n   */\r\n  function releasableAmount(ERC20Basic token) public view returns (uint256) {\r\n    return vestedAmount(token).sub(released[token]);\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the amount that has already vested.\r\n   * @param token ERC20 token which is being vested\r\n   */\r\n  function vestedAmount(ERC20Basic token) public view returns (uint256) {\r\n    uint256 currentBalance = token.balanceOf(this);\r\n    uint256 totalBalance = currentBalance.add(released[token]);\r\n\r\n    if (now < cliff) {\r\n      return 0;\r\n    } else if (now >= start.add(duration) || revoked[token]) {\r\n      return totalBalance;\r\n    } else {\r\n      return totalBalance.mul(now.sub(start)).div(duration);\r\n    }\r\n  }\r\n}\r\n\r\ncontract FTT is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public totalSupply = 1000000000 * 10**uint256(decimals);\r\n    string public constant name = \"FarmaTrust Token\";\r\n    string public symbol = \"FTT\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    mapping(address => uint256) public balances;\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event FTTIssued(address indexed from, address indexed to, uint256 indexed amount, uint256 timestamp);\r\n    event TdeStarted(uint256 startTime);\r\n    event TdeStopped(uint256 stopTime);\r\n    event TdeFinalized(uint256 finalizeTime);\r\n\r\n    // Amount of FTT available during tok0x2Ec9F52A5e4E7B5e20C031C1870Fd952e1F01b3Een distribution event.\r\n    uint256 public constant FT_TOKEN_SALE_CAP = 600000000 * 10**uint256(decimals);\r\n\r\n    // Amount held for operational usage.\r\n    uint256 public FT_OPERATIONAL_FUND = totalSupply - FT_TOKEN_SALE_CAP;\r\n\r\n    // Amount held for team usage.\r\n    uint256 public FT_TEAM_FUND = FT_OPERATIONAL_FUND / 10;\r\n\r\n    // Amount of FTT issued.\r\n    uint256 public fttIssued = 0;\r\n\r\n    address public tdeIssuer = 0x2Ec9F52A5e4E7B5e20C031C1870Fd952e1F01b3E;\r\n    address public teamVestingAddress;\r\n    address public unsoldVestingAddress;\r\n    address public operationalReserveAddress;\r\n\r\n    bool public tdeActive;\r\n    bool public tdeStarted;\r\n    bool public isFinalized = false;\r\n    bool public capReached;\r\n    uint256 public tdeDuration = 60 days;\r\n    uint256 public tdeStartTime;\r\n\r\n    function FTT() public {\r\n\r\n    }\r\n\r\n    modifier onlyTdeIssuer {\r\n        require(msg.sender == tdeIssuer);\r\n        _;\r\n    }\r\n\r\n    modifier tdeRunning {\r\n        require(tdeActive && block.timestamp < tdeStartTime + tdeDuration);\r\n        _;\r\n    }\r\n\r\n    modifier tdeEnded {\r\n        require(((!tdeActive && block.timestamp > tdeStartTime + tdeDuration) && tdeStarted) || capReached);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows contract owner to start the TDE.\r\n     */\r\n    function startTde()\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(!isFinalized);\r\n        tdeActive = true;\r\n        tdeStarted = true;\r\n        if (tdeStartTime == 0) {\r\n            tdeStartTime = block.timestamp;\r\n        }\r\n        TdeStarted(tdeStartTime);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows contract owner to stop and optionally restart the TDE.\r\n     * @param _restart Resets the tdeStartTime if true.\r\n     */\r\n    function stopTde(bool _restart)\r\n        external\r\n        onlyOwner\r\n    {\r\n      tdeActive = false;\r\n      if (_restart) {\r\n        tdeStartTime = 0;\r\n      }\r\n      TdeStopped(block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows contract owner to increase TDE period.\r\n     * @param _time amount of time to increase TDE period by.\r\n     */\r\n    function extendTde(uint256 _time)\r\n        external\r\n        onlyOwner\r\n    {\r\n      tdeDuration = tdeDuration.add(_time);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows contract owner to reduce TDE period.\r\n     * @param _time amount of time to reduce TDE period by.\r\n     */\r\n    function shortenTde(uint256 _time)\r\n        external\r\n        onlyOwner\r\n    {\r\n      tdeDuration = tdeDuration.sub(_time);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows contract owner to set the FTT issuing authority.\r\n     * @param _tdeIssuer address of FTT issuing authority.\r\n     */\r\n    function setTdeIssuer(address _tdeIssuer)\r\n        external\r\n        onlyOwner\r\n    {\r\n        tdeIssuer = _tdeIssuer;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows contract owner to set the beneficiary of the FT operational reserve amount of FTT.\r\n     * @param _operationalReserveAddress address of FT operational reserve beneficiary.\r\n     */\r\n    function setOperationalReserveAddress(address _operationalReserveAddress)\r\n        external\r\n        onlyOwner\r\n        tdeRunning\r\n    {\r\n        operationalReserveAddress = _operationalReserveAddress;\r\n    }\r\n\r\n    /**\r\n     * @dev Issues FTT to entitled accounts.\r\n     * @param _user address to issue FTT to.\r\n     * @param _fttAmount amount of FTT to issue.\r\n     */\r\n    function issueFTT(address _user, uint256 _fttAmount)\r\n        public\r\n        onlyTdeIssuer\r\n        tdeRunning\r\n        returns(bool)\r\n    {\r\n        uint256 newAmountIssued = fttIssued.add(_fttAmount);\r\n        require(_user != address(0));\r\n        require(_fttAmount > 0);\r\n        require(newAmountIssued <= FT_TOKEN_SALE_CAP);\r\n\r\n        balances[_user] = balances[_user].add(_fttAmount);\r\n        fttIssued = newAmountIssued;\r\n        FTTIssued(tdeIssuer, _user, _fttAmount, block.timestamp);\r\n\r\n        if (fttIssued == FT_TOKEN_SALE_CAP) {\r\n            capReached = true;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns amount of FTT issued.\r\n     */\r\n    function fttIssued()\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return fttIssued;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the contract owner to finalize the TDE.\r\n     */\r\n    function finalize()\r\n        external\r\n        tdeEnded\r\n        onlyOwner\r\n    {\r\n        require(!isFinalized);\r\n\r\n        // Deposit team fund amount into team vesting contract.\r\n        uint256 teamVestingCliff = 15778476;  // 6 months\r\n        uint256 teamVestingDuration = 1 years;\r\n        TokenVesting teamVesting = new TokenVesting(owner, now, teamVestingCliff, teamVestingDuration, true);\r\n        teamVesting.transferOwnership(owner);\r\n        teamVestingAddress = address(teamVesting);\r\n        balances[teamVestingAddress] = FT_TEAM_FUND;\r\n\r\n        if (!capReached) {\r\n            // Deposit unsold FTT into unsold vesting contract.\r\n            uint256 unsoldVestingCliff = 3 years;\r\n            uint256 unsoldVestingDuration = 10 years;\r\n            TokenVesting unsoldVesting = new TokenVesting(owner, now, unsoldVestingCliff, unsoldVestingDuration, true);\r\n            unsoldVesting.transferOwnership(owner);\r\n            unsoldVestingAddress = address(unsoldVesting);\r\n            balances[unsoldVestingAddress] = FT_TOKEN_SALE_CAP - fttIssued;\r\n        }\r\n\r\n        // Allocate operational reserve of FTT.\r\n        balances[operationalReserveAddress] = FT_OPERATIONAL_FUND - FT_TEAM_FUND;\r\n\r\n        isFinalized = true;\r\n        TdeFinalized(block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another. Trading limited - requires the TDE to have ended.\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        public\r\n        returns (bool)\r\n    {\r\n        if (!isFinalized) return false;\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n     /**\r\n    * @dev Transfer token for a specified address.  Trading limited - requires the TDE to have ended.\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value)\r\n        public\r\n        returns (bool)\r\n    {\r\n        if (!isFinalized) return false;\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value)\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(_spender != address(0));\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner)\r\n        public\r\n        view\r\n        returns (uint256 balance)\r\n    {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value, it is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     */\r\n    function increaseApproval(address _spender, uint _addedValue)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n}", "OptimizationUsed": "0", "ContractName": "FTT", "ByteCode": "0x606060405260043610620001f2576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806267ba6914620001f757806303a5c8e7146200022357806306fdde03146200025357806309153f5714620002e7578063095ea7b3146200033f57806316ae4ec4146200039c57806318160ddd14620003c857806322b36d8814620003f457806323b872dd146200041c57806327e235e3146200049857806329784d9014620004e85780632b37d313146200050e5780632f54bf6e1462000566578063313ce56714620005ba5780633541fe9414620005ec5780633aa612b91462000644578063423592ce146200067057806344f0a4a814620006885780634a1fb24114620006b45780634bb278f314620006e05780634f93594514620006f857806366188463146200072857806370a082311462000785578063728b763c14620007d55780637508f14714620007fb5780638d4e408314620008375780638da5cb5b146200086757806395d89b4114620008bf578063972e61511462000953578063a327353514620009ab578063a9059cbb14620009d7578063c0f401631462000a34578063d73dd6231462000a91578063dd62ed3e1462000aee578063e1541bc31462000b5d578063f2fde38b1462000b99578063f6e7b7851462000bd5575b600080fd5b34156200020357600080fd5b6200020d62000c05565b6040518082815260200191505060405180910390f35b34156200022f57600080fd5b6200023962000c16565b604051808215151515815260200191505060405180910390f35b34156200025f57600080fd5b6200026962000c29565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015620002ab5780820151818401526020810190506200028e565b50505050905090810190601f168015620002d95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3415620002f357600080fd5b620002fd62000c62565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156200034b57600080fd5b62000382600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505062000c88565b604051808215151515815260200191505060405180910390f35b3415620003a857600080fd5b620003b262000db6565b6040518082815260200191505060405180910390f35b3415620003d457600080fd5b620003de62000dbc565b6040518082815260200191505060405180910390f35b34156200040057600080fd5b6200041a6004808035151590602001909190505062000dc2565b005b34156200042857600080fd5b6200047e600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505062000e3e565b604051808215151515815260200191505060405180910390f35b3415620004a457600080fd5b620004d2600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505062001229565b6040518082815260200191505060405180910390f35b3415620004f457600080fd5b6200050c600480803590602001909190505062001241565b005b34156200051a57600080fd5b6200052462001278565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156200057257600080fd5b620005a0600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506200129e565b604051808215151515815260200191505060405180910390f35b3415620005c657600080fd5b620005d0620012f7565b604051808260ff1660ff16815260200191505060405180910390f35b3415620005f857600080fd5b62000602620012fc565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156200065057600080fd5b6200065a62001322565b6040518082815260200191505060405180910390f35b34156200067c57600080fd5b6200068662001328565b005b34156200069457600080fd5b6200069e620013e1565b6040518082815260200191505060405180910390f35b3415620006c057600080fd5b620006ca620013e7565b6040518082815260200191505060405180910390f35b3415620006ec57600080fd5b620006f6620013f1565b005b34156200070457600080fd5b6200070e620019ca565b604051808215151515815260200191505060405180910390f35b34156200073457600080fd5b6200076b600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050620019dd565b604051808215151515815260200191505060405180910390f35b34156200079157600080fd5b620007bf600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505062001c72565b6040518082815260200191505060405180910390f35b3415620007e157600080fd5b620007f9600480803590602001909190505062001cbb565b005b34156200080757600080fd5b62000835600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505062001cf2565b005b34156200084357600080fd5b6200084d62001d7b565b604051808215151515815260200191505060405180910390f35b34156200087357600080fd5b6200087d62001d8e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415620008cb57600080fd5b620008d562001db3565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101562000917578082015181840152602081019050620008fa565b50505050905090810190601f168015620009455780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156200095f57600080fd5b6200096962001e55565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415620009b757600080fd5b620009c162001e7b565b6040518082815260200191505060405180910390f35b3415620009e357600080fd5b62000a1a600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505062001e81565b604051808215151515815260200191505060405180910390f35b341562000a4057600080fd5b62000a77600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050620020ce565b604051808215151515815260200191505060405180910390f35b341562000a9d57600080fd5b62000ad4600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505062002344565b604051808215151515815260200191505060405180910390f35b341562000afa57600080fd5b62000b47600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505062002542565b6040518082815260200191505060405180910390f35b341562000b6957600080fd5b62000b97600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050620025c9565b005b341562000ba557600080fd5b62000bd3600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505062002624565b005b341562000be157600080fd5b62000beb6200267e565b604051808215151515815260200191505060405180910390f35b601260ff16600a0a6323c346000281565b600b60149054906101000a900460ff1681565b6040805190810160405280601081526020017f4661726d61547275737420546f6b656e0000000000000000000000000000000081525081565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151562000cc657600080fd5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60055481565b60015481565b62000dcd336200129e565b151562000dd957600080fd5b6000600b60146101000a81548160ff021916908315150217905550801562000e04576000600d819055505b7f2fc17e4003679a5c62a754326774a8d5859ca8b778a4fc76600eb55f42995288426040518082815260200191505060405180910390a150565b6000600b60169054906101000a900460ff16151562000e61576000905062001222565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151562000e9e57600080fd5b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151562000eed57600080fd5b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151562000f7957600080fd5b62000fcd82600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546200269190919063ffffffff16565b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506200106482600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054620026ab90919063ffffffff16565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506200113882600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546200269190919063ffffffff16565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190505b9392505050565b60036020528060005260406000206000915090505481565b6200124c336200129e565b15156200125857600080fd5b6200126f81600c546200269190919063ffffffff16565b600c8190555050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008173ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16149050919050565b601281565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60065481565b62001333336200129e565b15156200133f57600080fd5b600b60169054906101000a900460ff161515156200135c57600080fd5b6001600b60146101000a81548160ff0219169083151502179055506001600b60156101000a81548160ff0219169083151502179055506000600d541415620013a65742600d819055505b7f4736b531619e035ffd67e6ab6f8f455e832f9b72ba4fd399a36c0ae737b784a7600d546040518082815260200191505060405180910390a1565b600d5481565b6000600754905090565b600080600080600080600b60149054906101000a900460ff161580156200141d5750600c54600d540142115b8015620014365750600b60159054906101000a900460ff165b806200144e5750600b60179054906101000a900460ff165b15156200145a57600080fd5b62001465336200129e565b15156200147157600080fd5b600b60169054906101000a900460ff161515156200148e57600080fd5b62f0c2ac95506301e1338094506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff164287876001620014cc620026ca565b808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018481526020018381526020018215151515815260200195505050505050604051809103906000f08015156200153957600080fd5b93508373ffffffffffffffffffffffffffffffffffffffff1663f2fde38b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1515620015f757600080fd5b6102c65a03f115156200160957600080fd5b50505083600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060065460036000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600b60179054906101000a900460ff16151562001904576305a39a8092506312cc030091506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1642848460016200170b620026ca565b808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018481526020018381526020018215151515815260200195505050505050604051809103906000f08015156200177857600080fd5b90508073ffffffffffffffffffffffffffffffffffffffff1663f2fde38b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15156200183657600080fd5b6102c65a03f115156200184857600080fd5b50505080600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600754601260ff16600a0a6323c34600020360036000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b6006546005540360036000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001600b60166101000a81548160ff0219169083151502179055507f3dfc42c8742b37f7302c02e189240dcda68f20c35b7b8a3158b4f056d6354e11426040518082815260200191505060405180910390a1505050505050565b600b60179054906101000a900460ff1681565b600080600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508083111562001af0576000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555062001b86565b62001b0583826200269190919063ffffffff16565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b62001cc6336200129e565b151562001cd257600080fd5b62001ce981600c54620026ab90919063ffffffff16565b600c8190555050565b62001cfd336200129e565b151562001d0957600080fd5b600b60149054906101000a900460ff16801562001d2b5750600c54600d540142105b151562001d3757600080fd5b80600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600b60169054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60028054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801562001e4d5780601f1062001e215761010080835404028352916020019162001e4d565b820191906000526020600020905b81548152906001019060200180831162001e2f57829003601f168201915b505050505081565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600c5481565b6000600b60169054906101000a900460ff16151562001ea45760009050620020c8565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151562001ee157600080fd5b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151562001f3057600080fd5b62001f8482600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546200269190919063ffffffff16565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506200201b82600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054620026ab90919063ffffffff16565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190505b92915050565b600080600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156200212e57600080fd5b600b60149054906101000a900460ff168015620021505750600c54600d540142105b15156200215c57600080fd5b6200217383600754620026ab90919063ffffffff16565b9050600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614151515620021b257600080fd5b600083111515620021c257600080fd5b601260ff16600a0a6323c34600028111151515620021df57600080fd5b6200223383600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054620026ab90919063ffffffff16565b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600781905550828473ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fa2f26fb27c0703469fd15b96714eda618ce4aced994b793ffb09396699057e03426040518082815260200191505060405180910390a4601260ff16600a0a6323c3460002600754141562002339576001600b60176101000a81548160ff0219169083151502179055505b600191505092915050565b6000620023d782600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054620026ab90919063ffffffff16565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b620025d4336200129e565b1515620025e057600080fd5b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6200262f336200129e565b15156200263b57600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600b60159054906101000a900460ff1681565b6000828211151515620026a057fe5b818303905092915050565b6000808284019050838110151515620026c057fe5b8091505092915050565b604051610eaa80620026dc8339019056006060604052341561000f57600080fd5b60405160a080610eaa83398101604052808051906020019091908051906020019091908051906020019091908051906020019091908051906020019091905050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16141515156100cb57600080fd5b8183111515156100da57600080fd5b84600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600560006101000a81548160ff0219169083151502179055508160048190555061015c838561017364010000000002610b97179091906401000000009004565b600281905550836003819055505050505050610191565b600080828401905083811015151561018757fe5b8091505092915050565b610d0a806101a06000396000f3006060604052600436106100d0576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630fb5a6b4146100d557806313d033c0146100fe5780631726cbc81461012757806319165587146101745780632f54bf6e146101ad578063384711cc146101fe57806338af3eed1461024b57806374a8f103146102a0578063872a7810146102d95780638da5cb5b146103065780639852595c1461035b578063be9a6555146103a8578063f2fde38b146103d1578063fa01dc061461040a575b600080fd5b34156100e057600080fd5b6100e861045b565b6040518082815260200191505060405180910390f35b341561010957600080fd5b610111610461565b6040518082815260200191505060405180910390f35b341561013257600080fd5b61015e600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610467565b6040518082815260200191505060405180910390f35b341561017f57600080fd5b6101ab600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506104ca565b005b34156101b857600080fd5b6101e4600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610603565b604051808215151515815260200191505060405180910390f35b341561020957600080fd5b610235600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061065c565b6040518082815260200191505060405180910390f35b341561025657600080fd5b61025e610848565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156102ab57600080fd5b6102d7600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061086e565b005b34156102e457600080fd5b6102ec610ab1565b604051808215151515815260200191505060405180910390f35b341561031157600080fd5b610319610ac4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561036657600080fd5b610392600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610ae9565b6040518082815260200191505060405180910390f35b34156103b357600080fd5b6103bb610b01565b6040518082815260200191505060405180910390f35b34156103dc57600080fd5b610408600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610b07565b005b341561041557600080fd5b610441600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610b5e565b604051808215151515815260200191505060405180910390f35b60045481565b60025481565b60006104c3600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546104b58461065c565b610b7e90919063ffffffff16565b9050919050565b60006104d582610467565b90506000811115156104e657600080fd5b61053881600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610b9790919063ffffffff16565b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506105c8600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828473ffffffffffffffffffffffffffffffffffffffff16610bb59092919063ffffffff16565b7ffb81f9b30d73d830c3544b34d827c08142579ee75710b490bab0b3995468c565816040518082815260200191505060405180910390a15050565b60008173ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16149050919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff166370a08231306000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561070457600080fd5b6102c65a03f1151561071557600080fd5b505050604051805190509150610773600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483610b9790919063ffffffff16565b90506002544210156107885760009250610841565b61079f600454600354610b9790919063ffffffff16565b421015806107f65750600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b1561080357809250610841565b61083e60045461083061082160035442610b7e90919063ffffffff16565b84610c8890919063ffffffff16565b610cc390919063ffffffff16565b92505b5050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600061087c33610603565b151561088757600080fd5b600560009054906101000a900460ff1615156108a257600080fd5b600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515156108fb57600080fd5b8373ffffffffffffffffffffffffffffffffffffffff166370a08231306000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561099e57600080fd5b6102c65a03f115156109af57600080fd5b5050506040518051905092506109c484610467565b91506109d98284610b7e90919063ffffffff16565b90506001600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610a7f6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828673ffffffffffffffffffffffffffffffffffffffff16610bb59092919063ffffffff16565b7f44825a4b2df8acb19ce4e1afba9aa850c8b65cdb7942e2078f27d0b0960efee660405160405180910390a150505050565b600560009054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60066020528060005260406000206000915090505481565b60035481565b610b1033610603565b1515610b1b57600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60076020528060005260406000206000915054906101000a900460ff1681565b6000828211151515610b8c57fe5b818303905092915050565b6000808284019050838110151515610bab57fe5b8091505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1515610c6057600080fd5b6102c65a03f11515610c7157600080fd5b505050604051805190501515610c8357fe5b505050565b6000806000841415610c9d5760009150610cbc565b8284029050828482811515610cae57fe5b04141515610cb857fe5b8091505b5092915050565b6000808284811515610cd157fe5b04905080915050929150505600a165627a7a723058200b95a5e1d768f393c33bb05b3e052b2eed63d57cd2dca6c050160c93cf5134c10029a165627a7a723058204b697d3aa64f916ecc42d2a9da9b72646beda153a58942612cd9cd6fca6f50040029"}