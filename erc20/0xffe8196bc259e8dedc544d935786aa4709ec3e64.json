{"Runs": "200", "SwarmSource": "bzzr://21b01ef0a7f805c8d51f17c1c17a824ad56b8a2bea15d93fa0acce9cc397c018", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"_queryAddress\",\"type\":\"address\"}],\"name\":\"isRestrictedAddress\",\"outputs\":[{\"name\":\"answer\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRestrictedAddress\",\"type\":\"address\"}],\"name\":\"editRestrictedAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"unfreezeTransfersUntil\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenFrozenUntilBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_frozenUntilBlock\",\"type\":\"uint256\"},{\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"freezeTransfersUntil\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_frozenUntilBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"TokenFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.11+commit.68ef5810", "ConstructorArguments": "", "SourceCode": "pragma solidity ^0.4.11;\r\n\r\ncontract owned {\r\n\r\n        address public owner;\r\n\r\n        function owned() {\r\n                owner = msg.sender;\r\n        }\r\n\r\n        modifier onlyOwner {\r\n                if (msg.sender == owner)\r\n                _;\r\n        }\r\n\r\n\r\n}\r\n\r\ncontract tokenRecipient {\r\n        function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData);\r\n}\r\n\r\ncontract IERC20Token {\r\n\r\n        /// @return total amount of tokens\r\n        function totalSupply() constant returns (uint256 totalSupply);\r\n\r\n        /// @param _owner The address from which the balance will be retrieved\r\n        /// @return The balance\r\n        function balanceOf(address _owner) constant returns (uint256 balance);\r\n\r\n        /// @notice send `_value` token to `_to` from `msg.sender`\r\n        /// @param _to The address of the recipient\r\n        /// @param _value The amount of token to be transferred\r\n        /// @return Whether the transfer was successful or not\r\n        function transfer(address _to, uint256 _value) returns (bool success);\r\n\r\n        /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n        /// @param _from The address of the sender\r\n        /// @param _to The address of the recipient\r\n        /// @param _value The amount of token to be transferred\r\n        /// @return Whether the transfer was successful or not\r\n        function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n\r\n        /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\r\n        /// @param _spender The address of the account able to transfer the tokens\r\n        /// @param _value The amount of wei to be approved for transfer\r\n        /// @return Whether the approval was successful or not\r\n        function approve(address _spender, uint256 _value) returns (bool success);\r\n\r\n        /// @param _owner The address of the account owning tokens\r\n        /// @param _spender The address of the account able to transfer the tokens\r\n        /// @return Amount of remaining tokens allowed to spent\r\n        function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n\r\n        event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n        event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n        event Burn(address indexed from, uint256 value);\r\n}\r\n\r\ncontract Hedge is IERC20Token, owned{\r\n\r\n        /* Public variables of the token */\r\n        string public standard = \"Hedge v1.0\";\r\n        string public name = \"Hedge\";\r\n        string public symbol = \"HDG\";\r\n        uint8 public decimals = 18;\r\n        uint256 public initialSupply = 50000000 * 10 ** 18;\r\n        uint256 public tokenFrozenUntilBlock;\r\n        uint256 public timeLock = block.timestamp + 180 days; //cofounders time lock\r\n\r\n        /* Private variables of the token */\r\n        uint256 supply = initialSupply;\r\n        mapping (address => uint256) balances;\r\n        mapping (address => mapping (address => uint256)) allowances;\r\n        mapping (address => bool) restrictedAddresses;\r\n\r\n        event TokenFrozen(uint256 _frozenUntilBlock, string _reason);\r\n\r\n        /* Initializes contract and  sets restricted addresses */\r\n        function Hedge() {\r\n                restrictedAddresses[0x0] = true;                        // Users cannot send tokens to 0x0 address\r\n                restrictedAddresses[address(this)] = true;      // Users cannot sent tokens to this contracts address\r\n                balances[msg.sender] = 50000000 * 10 ** 18;\r\n        }\r\n\r\n        /* Get total supply of issued coins */\r\n        function totalSupply() constant returns (uint256 totalSupply) {\r\n                return supply;\r\n        }\r\n\r\n        /* Get balance of specific address */\r\n        function balanceOf(address _owner) constant returns (uint256 balance) {\r\n                return balances[_owner];\r\n        }\r\n\r\n         function transferOwnership(address newOwner) onlyOwner {\r\n                require(transfer(newOwner, balances[msg.sender]));\r\n                owner = newOwner;\r\n        }\r\n\r\n        /* Send coins */\r\n        function transfer(address _to, uint256 _value) returns (bool success) {\r\n                require (block.number >= tokenFrozenUntilBlock) ;       // Throw is token is frozen in case of emergency\r\n                require (!restrictedAddresses[_to]) ;                // Prevent transfer to restricted addresses\r\n                require (balances[msg.sender] >= _value);           // Check if the sender has enough\r\n                require (balances[_to] + _value >= balances[_to]) ;  // Check for overflows\r\n                require (!(msg.sender == owner && block.timestamp < timeLock && (balances[msg.sender]-_value) < 10000000 * 10 ** 18));\r\n\r\n                balances[msg.sender] -= _value;                     // Subtract from the sender\r\n                balances[_to] += _value;                            // Add the same to the recipient\r\n                Transfer(msg.sender, _to, _value);                  // Notify anyone listening that this transfer took place\r\n                return true;\r\n        }\r\n\r\n        /* Allow another contract to spend some tokens in your behalf */\r\n        function approve(address _spender, uint256 _value) returns (bool success) {\r\n                require (block.number > tokenFrozenUntilBlock); // Throw is token is frozen in case of emergency\r\n                allowances[msg.sender][_spender] = _value;          // Set allowance\r\n                Approval(msg.sender, _spender, _value);             // Raise Approval event\r\n                return true;\r\n        }\r\n\r\n        /* Approve and then communicate the approved contract in a single tx */\r\n        function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\r\n                tokenRecipient spender = tokenRecipient(_spender);              // Cast spender to tokenRecipient contract\r\n                approve(_spender, _value);                                      // Set approval to contract for _value\r\n                spender.receiveApproval(msg.sender, _value, this, _extraData);  // Raise method on _spender contract\r\n                return true;\r\n        }\r\n\r\n        /* A contract attempts to get the coins */\r\n        function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n                require (block.number > tokenFrozenUntilBlock); // Throw is token is frozen in case of emergency\r\n                require (!restrictedAddresses[_to]);                // Prevent transfer to restricted addresses\r\n                require(balances[_from] >= _value);                // Check if the sender has enough\r\n                require (balances[_to] + _value >= balances[_to]);  // Check for overflows\r\n                require (_value <= allowances[_from][msg.sender]);  // Check allowance\r\n                require (!(_from == owner && block.timestamp < timeLock && (balances[_from]-_value) < 10000000 * 10 ** 18));\r\n                balances[_from] -= _value;                          // Subtract from the sender\r\n                balances[_to] += _value;                            // Add the same to the recipient\r\n                allowances[_from][msg.sender] -= _value;            // Deduct allowance for this address\r\n                Transfer(_from, _to, _value);                       // Notify anyone listening that this transfer took place\r\n                return true;\r\n        }\r\n\r\n        function burn(uint256 _value) returns (bool success) {\r\n                require(balances[msg.sender] >= _value);                 // Check if the sender has enough\r\n                balances[msg.sender] -= _value;                          // Subtract from the sender\r\n                supply-=_value;\r\n                Burn(msg.sender, _value);\r\n                return true;\r\n        }\r\n\r\n        function burnFrom(address _from, uint256 _value) returns (bool success) {\r\n                require(balances[_from] >= _value);                // Check if the targeted balance is enough\r\n                require(_value <= allowances[_from][msg.sender]);    // Check allowance\r\n                balances[_from] -= _value;                         // Subtract from the targeted balance\r\n                allowances[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\r\n                supply -= _value;                              // Update totalSupply\r\n                Burn(_from, _value);\r\n                return true;\r\n        }\r\n\r\n        /* Get the amount of remaining tokens to spend */\r\n        function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n                return allowances[_owner][_spender];\r\n        }\r\n\r\n\r\n\r\n        /* Stops all token transfers in case of emergency */\r\n        function freezeTransfersUntil(uint256 _frozenUntilBlock, string _reason) onlyOwner {\r\n                tokenFrozenUntilBlock = _frozenUntilBlock;\r\n                TokenFrozen(_frozenUntilBlock, _reason);\r\n        }\r\n\r\n        function unfreezeTransfersUntil(string _reason) onlyOwner {\r\n                tokenFrozenUntilBlock = 0;\r\n                TokenFrozen(0, _reason);\r\n        }\r\n\r\n        /* Owner can add new restricted address or removes one */\r\n        function editRestrictedAddress(address _newRestrictedAddress) onlyOwner {\r\n                restrictedAddresses[_newRestrictedAddress] = !restrictedAddresses[_newRestrictedAddress];\r\n        }\r\n\r\n        function isRestrictedAddress(address _queryAddress) constant returns (bool answer){\r\n                return restrictedAddresses[_queryAddress];\r\n        }\r\n}", "OptimizationUsed": "1", "ContractName": "Hedge", "ByteCode": "0x606060405236156101255763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166303c175ff811461012757806306fdde0314610157578063095ea7b3146101e757806318160ddd1461021a57806323b872dd1461023c578063313ce56714610275578063378dc3dc1461029b57806342966c68146102bd5780634ec883d1146102e45780635166b68f146103025780635a3b7e421461035a57806370a08231146103ea57806379cc6790146104185780638da5cb5b1461044b57806391a67e1e1461047757806395d89b4114610499578063a9059cbb14610529578063aa19ed771461055c578063cae9ca51146105b5578063d085835a1461062c578063dd62ed3e1461064e578063f2fde38b14610682575bfe5b341561012f57fe5b610143600160a060020a03600435166106a0565b604080519115158252519081900360200190f35b341561015f57fe5b6101676106c2565b6040805160208082528351818301528351919283929083019185019080838382156101ad575b8051825260208311156101ad57601f19909201916020918201910161018d565b505050905090810190601f1680156101d95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101ef57fe5b610143600160a060020a036004351660243561074d565b604080519115158252519081900360200190f35b341561022257fe5b61022a6107c6565b60408051918252519081900360200190f35b341561024457fe5b610143600160a060020a03600435811690602435166044356107cd565b604080519115158252519081900360200190f35b341561027d57fe5b610285610970565b6040805160ff9092168252519081900360200190f35b34156102a357fe5b61022a610979565b60408051918252519081900360200190f35b34156102c557fe5b61014360043561097f565b604080519115158252519081900360200190f35b34156102ec57fe5b610300600160a060020a0360043516610a0c565b005b341561030a57fe5b610300600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843750949650610a5195505050505050565b005b341561036257fe5b610167610b25565b6040805160208082528351818301528351919283929083019185019080838382156101ad575b8051825260208311156101ad57601f19909201916020918201910161018d565b505050905090810190601f1680156101d95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103f257fe5b61022a600160a060020a0360043516610bb2565b60408051918252519081900360200190f35b341561042057fe5b610143600160a060020a0360043516602435610bd1565b604080519115158252519081900360200190f35b341561045357fe5b61045b610cb1565b60408051600160a060020a039092168252519081900360200190f35b341561047f57fe5b61022a610cc0565b60408051918252519081900360200190f35b34156104a157fe5b610167610cc6565b6040805160208082528351818301528351919283929083019185019080838382156101ad575b8051825260208311156101ad57601f19909201916020918201910161018d565b505050905090810190601f1680156101d95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561053157fe5b610143600160a060020a0360043516602435610d54565b604080519115158252519081900360200190f35b341561056457fe5b60408051602060046024803582810135601f81018590048502860185019096528585526103009583359593946044949392909201918190840183828082843750949650610eaa95505050505050565b005b34156105bd57fe5b604080516020600460443581810135601f8101849004840285018401909552848452610143948235600160a060020a0316946024803595606494929391909201918190840183828082843750949650610f7d95505050505050565b604080519115158252519081900360200190f35b341561063457fe5b61022a6110b2565b60408051918252519081900360200190f35b341561065657fe5b61022a600160a060020a03600435811690602435166110b8565b60408051918252519081900360200190f35b341561068a57fe5b610300600160a060020a03600435166110e5565b005b600160a060020a0381166000908152600b602052604090205460ff165b919050565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156107455780601f1061071a57610100808354040283529160200191610745565b820191906000526020600020905b81548152906001019060200180831161072857829003601f168201915b505050505081565b600654600090431161075f5760006000fd5b600160a060020a033381166000818152600a6020908152604080832094881680845294825291829020869055815186815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a35060015b92915050565b6008545b90565b60065460009043116107df5760006000fd5b600160a060020a0383166000908152600b602052604090205460ff16156108065760006000fd5b600160a060020a0384166000908152600960205260409020548290101561082d5760006000fd5b600160a060020a03831660009081526009602052604090205482810110156108555760006000fd5b600160a060020a038085166000908152600a6020908152604080832033909416835292905220548211156108895760006000fd5b600054600160a060020a0385811691161480156108a7575060075442105b80156108d95750600160a060020a0384166000908152600960205260409020546a084595161401484a00000090839003105b156108e45760006000fd5b600160a060020a03808516600081815260096020908152604080832080548890039055878516808452818420805489019055848452600a83528184203390961684529482529182902080548790039055815186815291517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35060015b9392505050565b60045460ff1681565b60055481565b600160a060020a033316600090815260096020526040812054829010156109a65760006000fd5b600160a060020a03331660008181526009602090815260409182902080548690039055600880548690039055815185815291517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a25060015b919050565b60005433600160a060020a0390811691161415610a4c57600160a060020a0381166000908152600b60205260409020805460ff19811660ff909116151790555b5b5b50565b60005433600160a060020a0390811691161415610a4c5760006006819055507f6e3f7ba04d28a67d7a0a5559a2c6d933b1bc57e598867c94b9b7fca03d95a1366000826040518083815260200180602001828103825283818151815260200191508051906020019080838360008314610ae5575b805182526020831115610ae557601f199092019160209182019101610ac5565b505050905090810190601f168015610b115780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15b5b5b50565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107455780601f1061071a57610100808354040283529160200191610745565b820191906000526020600020905b81548152906001019060200180831161072857829003601f168201915b505050505081565b600160a060020a0381166000908152600960205260409020545b919050565b600160a060020a03821660009081526009602052604081205482901015610bf85760006000fd5b600160a060020a038084166000908152600a602090815260408083203390941683529290522054821115610c2c5760006000fd5b600160a060020a03808416600081815260096020908152604080832080548890039055600a825280832033909516835293815290839020805486900390556008805486900390558251858152925191927fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5929081900390910190a25060015b92915050565b600054600160a060020a031681565b60065481565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107455780601f1061071a57610100808354040283529160200191610745565b820191906000526020600020905b81548152906001019060200180831161072857829003601f168201915b505050505081565b600654600090431015610d675760006000fd5b600160a060020a0383166000908152600b602052604090205460ff1615610d8e5760006000fd5b600160a060020a03331660009081526009602052604090205482901015610db55760006000fd5b600160a060020a0383166000908152600960205260409020548281011015610ddd5760006000fd5b60005433600160a060020a039081169116148015610dfc575060075442105b8015610e2e5750600160a060020a0333166000908152600960205260409020546a084595161401484a00000090839003105b15610e395760006000fd5b600160a060020a03338116600081815260096020908152604080832080548890039055938716808352918490208054870190558351868152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35060015b92915050565b60005433600160a060020a0390811691161415610f7757816006819055507f6e3f7ba04d28a67d7a0a5559a2c6d933b1bc57e598867c94b9b7fca03d95a13682826040518083815260200180602001828103825283818151815260200191508051906020019080838360008314610f3c575b805182526020831115610f3c57601f199092019160209182019101610f1c565b505050905090810190601f168015610f685780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15b5b5b5050565b600083610f8a818561074d565b5080600160a060020a0316638f4ffcb1338630876040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a031681526020018060200182810382528381815181526020019150805190602001908083836000831461104a575b80518252602083111561104a57601f19909201916020918201910161102a565b505050905090810190601f1680156110765780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b151561109457fe5b6102c65a03f115156110a257fe5b505050600191505b509392505050565b60075481565b600160a060020a038083166000908152600a60209081526040808320938516835292905220545b92915050565b60005433600160a060020a0390811691161415610a4c57600160a060020a033316600090815260096020526040902054611120908290610d54565b151561112c5760006000fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b5b505600a165627a7a7230582021b01ef0a7f805c8d51f17c1c17a824ad56b8a2bea15d93fa0acce9cc397c0180029"}