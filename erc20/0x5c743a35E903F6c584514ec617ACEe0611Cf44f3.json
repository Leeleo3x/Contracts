{"Runs": "200", "SwarmSource": "bzzr://9c53a624ae4e2d22f18dc10dbac24e88d2c34de152b4565caceb293417674b39", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"nr\",\"type\":\"uint256\"}],\"name\":\"getCompanyAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pauseProposer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRemainingCompanyTokensAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"IS_SIGNATORY\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dest\",\"type\":\"address\"}],\"name\":\"approveBountyTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRemainingPartnerTokensAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dest\",\"type\":\"address\"}],\"name\":\"rejectCompanyAllocation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRemainingBountyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dest\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"proposeBountyTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dest\",\"type\":\"address\"}],\"name\":\"approvePartnerAllocation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dest\",\"type\":\"address\"},{\"name\":\"_tokensPerPeriod\",\"type\":\"uint256\"}],\"name\":\"proposeCompanyAllocation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dest\",\"type\":\"address\"}],\"name\":\"rejectPartnerAllocation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dest\",\"type\":\"address\"},{\"name\":\"_tokensPerPeriod\",\"type\":\"uint256\"}],\"name\":\"proposePartnerAllocation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"name\":\"_dest\",\"type\":\"address\"}],\"name\":\"erc20TokenTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INIT_DATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dest\",\"type\":\"address\"}],\"name\":\"rejectBountyTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"proposePauseChange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dest\",\"type\":\"address\"}],\"name\":\"approveCompanyAllocation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"approvePauseChange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nr\",\"type\":\"uint256\"}],\"name\":\"getPartnerAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nr\",\"type\":\"uint256\"}],\"name\":\"getBountyTransfers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"rejectPauseChange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"signatory0\",\"type\":\"address\"},{\"name\":\"signatory1\",\"type\":\"address\"},{\"name\":\"signatory2\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"LogPause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ERC223Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.19+commit.c4cbbb05", "ConstructorArguments": "0000000000000000000000009cd60f46bbde61dc8ce5c19877359feb68b2b6f200000000000000000000000051d6598b8461adf43676f8b58e070532fabadc95000000000000000000000000fc93b345a3df3f622684dc84ad34d98300e2f2a6", "SourceCode": "pragma solidity ^0.4.19;\r\n\r\ncontract ERC223ReceivingContract {\r\n  function tokenFallback(address _from, uint256 _value, bytes _data) public;\r\n}\r\n\r\ncontract ERC223Token {\r\n  using SafeMath for uint256;\r\n\r\n  // token constants\r\n  string public name;\r\n  bytes32 public symbol;\r\n  uint8 public decimals;\r\n  uint256 public totalSupply;\r\n\r\n  // token balances\r\n  mapping(address => uint256) public balanceOf;\r\n  // token spending allowance, used by transferFrom(), for compliance with ERC20\r\n  mapping (address => mapping(address => uint256)) internal allowances;\r\n\r\n  // Function that is called when a user or another contract wants to transfer funds.\r\n  function transfer(address to, uint256 value, bytes data) public returns (bool) {\r\n    require(balanceOf[msg.sender] >= value);\r\n    uint256 codeLength;\r\n\r\n    assembly {\r\n      // Retrieve the size of the code on target address, this needs assembly .\r\n      codeLength := extcodesize(to)\r\n    }\r\n\r\n    balanceOf[msg.sender] -= value;  // underflow checked by require() above\r\n    balanceOf[to] = balanceOf[to].add(value);\r\n    if (codeLength > 0) {\r\n      ERC223ReceivingContract receiver = ERC223ReceivingContract(to);\r\n      receiver.tokenFallback(msg.sender, value, data);\r\n    }\r\n    ERC223Transfer(msg.sender, to, value, data);\r\n    return true;\r\n  }\r\n\r\n  // Standard function transfer similar to ERC20 transfer with no _data.\r\n  // Added due to backwards compatibility reasons.\r\n  function transfer(address to, uint256 value) public returns (bool) {\r\n    require(balanceOf[msg.sender] >= value);\r\n    uint256 codeLength;\r\n    bytes memory empty;\r\n\r\n    assembly {\r\n      // Retrieve the size of the code on target address, this needs assembly.\r\n      codeLength := extcodesize(to)\r\n    }\r\n\r\n    balanceOf[msg.sender] -= value;  // underflow checked by require() above\r\n    balanceOf[to] = balanceOf[to].add(value);\r\n    if (codeLength > 0) {\r\n      ERC223ReceivingContract receiver = ERC223ReceivingContract(to);\r\n      receiver.tokenFallback(msg.sender, value, empty);\r\n    }\r\n    ERC223Transfer(msg.sender, to, value, empty);\r\n    // ERC20 compatible event:\r\n    Transfer(msg.sender, to, value);\r\n    return true;\r\n  }\r\n\r\n  // Send _value tokens to _to from _from on the condition it is approved by _from.\r\n  // Added for full compliance with ERC20\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n    require(_to != address(0));\r\n    require(_value <= balanceOf[_from]);\r\n    require(_value <= allowances[_from][msg.sender]);\r\n    bytes memory empty;\r\n\r\n    balanceOf[_from] = balanceOf[_from] -= _value;\r\n    allowances[_from][msg.sender] -= _value;\r\n    balanceOf[_to] = balanceOf[_to].add(_value);\r\n\r\n    // No need to call tokenFallback(), cause this is ERC20's solution to the same problem\r\n    // tokenFallback solves in ERC223. Just fire the ERC223 event for logs consistency.\r\n    ERC223Transfer(_from, _to, _value, empty);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n  // If this function is called again it overwrites the current allowance with _value.\r\n  function approve(address _spender, uint256 _value) public returns (bool success) {\r\n    allowances[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  // Returns the amount which _spender is still allowed to withdraw from _owner\r\n  function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n    return allowances[_owner][_spender];\r\n  }\r\n\r\n  event ERC223Transfer(address indexed from, address indexed to, uint256 value, bytes indexed data);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed from, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract ERC223MintableToken is ERC223Token {\r\n  uint256 public circulatingSupply;\r\n  function mint(address to, uint256 value) internal returns (bool) {\r\n    uint256 codeLength;\r\n\r\n    assembly {\r\n      // Retrieve the size of the code on target address, this needs assembly .\r\n      codeLength := extcodesize(to)\r\n    }\r\n\r\n    circulatingSupply += value;\r\n\r\n    balanceOf[to] += value;  // No safe math needed, won't exceed totalSupply.\r\n    if (codeLength > 0) {\r\n      ERC223ReceivingContract receiver = ERC223ReceivingContract(to);\r\n      bytes memory empty;\r\n      receiver.tokenFallback(msg.sender, value, empty);\r\n    }\r\n    Mint(to, value);\r\n    return true;\r\n  }\r\n\r\n  event Mint(address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20Token {\r\n  function balanceOf(address owner) public view returns (uint256 balance);\r\n  function transfer(address to, uint256 tokens) public returns (bool success);\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n}\r\n\r\ncontract BountyTokenAllocation is Ownable {\r\n\r\n  // This contract describes how the bounty tokens are allocated.\r\n  // After a bounty allocation was proposed by a signatory, another\r\n  // signatory must accept this allocation.\r\n\r\n  // Total amount of remaining tokens to be distributed\r\n  uint256 public remainingBountyTokens;\r\n\r\n  // Addresses which have a bounty allocation, in order of proposals\r\n  address[] public allocationAddressList;\r\n\r\n  // Possible split states: Proposed, Approved, Rejected\r\n  // Proposed is the initial state.\r\n  // Both Approved and Rejected are final states.\r\n  // The only possible transitions are:\r\n  // Proposed => Approved\r\n  // Proposed => Rejected\r\n\r\n  // keep map here of bounty proposals\r\n  mapping (address => Types.StructBountyAllocation) public bountyOf;\r\n\r\n  /**\r\n   * Bounty token allocation constructor.\r\n   *\r\n   * @param _remainingBountyTokens Total number of bounty tokens that will be\r\n   *                               allocated.\r\n   */\r\n  function BountyTokenAllocation(uint256 _remainingBountyTokens) Ownable() public {\r\n    remainingBountyTokens = _remainingBountyTokens;\r\n  }\r\n\r\n  /**\r\n   * Propose a bounty transfer\r\n   *\r\n   * @param _dest Address of bounty reciepent\r\n   * @param _amount Amount of tokens he will receive\r\n   */\r\n  function proposeBountyTransfer(address _dest, uint256 _amount) public onlyOwner {\r\n    require(_amount > 0);\r\n    require(_amount <= remainingBountyTokens);\r\n     // we can't overwrite existing proposal\r\n     // but we can overwrite rejected proposal with new values\r\n    require(bountyOf[_dest].proposalAddress == 0x0 || bountyOf[_dest].bountyState == Types.BountyState.Rejected);\r\n\r\n    if (bountyOf[_dest].bountyState != Types.BountyState.Rejected) {\r\n      allocationAddressList.push(_dest);\r\n    }\r\n\r\n    remainingBountyTokens = SafeMath.sub(remainingBountyTokens, _amount);\r\n    bountyOf[_dest] = Types.StructBountyAllocation({\r\n      amount: _amount,\r\n      proposalAddress: msg.sender,\r\n      bountyState: Types.BountyState.Proposed\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Approves a bounty transfer\r\n   *\r\n   * @param _dest Address of bounty reciepent\r\n   * @return amount of tokens which we approved\r\n   */\r\n  function approveBountyTransfer(address _approverAddress, address _dest) public onlyOwner returns (uint256) {\r\n    require(bountyOf[_dest].bountyState == Types.BountyState.Proposed);\r\n    require(bountyOf[_dest].proposalAddress != _approverAddress);\r\n\r\n    bountyOf[_dest].bountyState = Types.BountyState.Approved;\r\n    return bountyOf[_dest].amount;\r\n  }\r\n\r\n  /**\r\n   * Rejects a bounty transfer\r\n   *\r\n   * @param _dest Address of bounty reciepent for whom we are rejecting bounty transfer\r\n   */\r\n  function rejectBountyTransfer(address _dest) public onlyOwner {\r\n    var tmp = bountyOf[_dest];\r\n    require(tmp.bountyState == Types.BountyState.Proposed);\r\n\r\n    bountyOf[_dest].bountyState = Types.BountyState.Rejected;\r\n    remainingBountyTokens = remainingBountyTokens + bountyOf[_dest].amount;\r\n  }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n  function sub(uint256 a, uint256 b) pure internal returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) pure internal returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n  function min(uint256 a, uint256 b) pure internal returns (uint256) {\r\n    if(a > b)\r\n      return b;\r\n    else\r\n      return a;\r\n  }\r\n}\r\n\r\ncontract SignatoryOwnable {\r\n  mapping (address => bool) public IS_SIGNATORY;\r\n\r\n  function SignatoryOwnable(address signatory0, address signatory1, address signatory2) internal {\r\n    IS_SIGNATORY[signatory0] = true;\r\n    IS_SIGNATORY[signatory1] = true;\r\n    IS_SIGNATORY[signatory2] = true;\r\n  }\r\n\r\n  modifier onlySignatory() {\r\n    require(IS_SIGNATORY[msg.sender]);\r\n    _;\r\n  }\r\n}\r\n\r\ncontract SignatoryPausable is SignatoryOwnable {\r\n  bool public paused;  // == false by default\r\n  address public pauseProposer;  // == 0x0 (no proposal) by default\r\n\r\n  function SignatoryPausable(address signatory0, address signatory1, address signatory2)\r\n      SignatoryOwnable(signatory0, signatory1, signatory2)\r\n      internal {}\r\n\r\n  modifier whenPaused(bool status) {\r\n    require(paused == status);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev First signatory consent for contract pause state change.\r\n   */\r\n  function proposePauseChange(bool status) onlySignatory whenPaused(!status) public {\r\n    require(pauseProposer == 0x0);  // require there's no pending proposal already\r\n    pauseProposer = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Second signatory consent for contract pause state change, triggers the change.\r\n   */\r\n  function approvePauseChange(bool status) onlySignatory whenPaused(!status) public {\r\n    require(pauseProposer != 0x0);  // require that a change was already proposed\r\n    require(pauseProposer != msg.sender);  // approver must be different than proposer\r\n    pauseProposer = 0x0;\r\n    paused = status;\r\n    LogPause(paused);\r\n  }\r\n\r\n  /**\r\n   * @dev Reject pause status change proposal.\r\n   * Can also be called by the proposer, to cancel his proposal.\r\n   */\r\n  function rejectPauseChange(bool status) onlySignatory whenPaused(!status) public {\r\n    pauseProposer = 0x0;\r\n  }\r\n\r\n  event LogPause(bool status);\r\n}\r\n\r\ncontract ExyToken is ERC223MintableToken, SignatoryPausable {\r\n  using SafeMath for uint256;\r\n\r\n  VestingAllocation private partnerTokensAllocation;\r\n  VestingAllocation private companyTokensAllocation;\r\n  BountyTokenAllocation private bountyTokensAllocation;\r\n\r\n  /*\r\n   * ICO TOKENS\r\n   * 33% (including SEED TOKENS)\r\n   *\r\n   * Ico tokens are sent to the ICO_TOKEN_ADDRESS immediately\r\n   * after ExyToken initialization\r\n   */\r\n  uint256 private constant ICO_TOKENS = 14503506112248500000000000;\r\n  address private constant ICO_TOKENS_ADDRESS = 0x97c967524d1eacAEb375d4269bE4171581a289C7;\r\n  /*\r\n   * SEED TOKENS\r\n   * 33% (including ICO TOKENS)\r\n   *\r\n   * Seed tokens are sent to the SEED_TOKENS_ADDRESS immediately\r\n   * after ExyToken initialization\r\n   */\r\n  uint256 private constant SEED_TOKENS = 11700000000000000000000000;\r\n  address private constant SEED_TOKENS_ADDRESS = 0x7C32c7649aA1335271aF00cd4280f87166474778;\r\n\r\n  /*\r\n   * COMPANY TOKENS\r\n   * 33%\r\n   *\r\n   * Company tokens are being distrubited in 36 months\r\n   * Total tokens = COMPANY_TOKENS_PER_PERIOD * COMPANY_PERIODS\r\n   */\r\n  uint256 private constant COMPANY_TOKENS_PER_PERIOD = 727875169784680000000000;\r\n  uint256 private constant COMPANY_PERIODS = 36;\r\n  uint256 private constant MINUTES_IN_COMPANY_PERIOD = 60 * 24 * 365 / 12;\r\n\r\n  /*\r\n   * PARTNER TOKENS\r\n   * 30%\r\n   *\r\n   * Partner tokens are available after 18 months\r\n   * Total tokens = PARTNER_TOKENS_PER_PERIOD * PARTNER_PERIODS\r\n   */\r\n  uint256 private constant PARTNER_TOKENS_PER_PERIOD = 23821369192953200000000000;\r\n  uint256 private constant PARTNER_PERIODS = 1;\r\n  uint256 private constant MINUTES_IN_PARTNER_PERIOD = MINUTES_IN_COMPANY_PERIOD * 18; // MINUTES_IN_COMPANY_PERIOD equals one month (see declaration of MINUTES_IN_COMPANY_PERIOD constant)\r\n\r\n  /*\r\n   * BOUNTY TOKENS\r\n   * 3%\r\n   *\r\n   * Bounty tokens can be sent immediately after initialization\r\n   */\r\n  uint256 private constant BOUNTY_TOKENS = 2382136919295320000000000;\r\n\r\n  /*\r\n   * MARKETING COST TOKENS\r\n   * 1%\r\n   *\r\n   * Tokens are sent to the MARKETING_COST_ADDRESS immediately\r\n   * after ExyToken initialization\r\n   */\r\n  uint256 private constant MARKETING_COST_TOKENS = 794045639765106000000000;\r\n  address private constant MARKETING_COST_ADDRESS = 0xF133ef3BE68128c9Af16F5aF8F8707f7A7A51452;\r\n\r\n  uint256 public INIT_DATE;\r\n\r\n  string public constant name = \"Experty Token\";\r\n  bytes32 public constant symbol = \"EXY\";\r\n  uint8 public constant decimals = 18;\r\n  uint256 public constant totalSupply = (\r\n    COMPANY_TOKENS_PER_PERIOD * COMPANY_PERIODS +\r\n    PARTNER_TOKENS_PER_PERIOD * PARTNER_PERIODS +\r\n    BOUNTY_TOKENS + MARKETING_COST_TOKENS +\r\n    ICO_TOKENS + SEED_TOKENS);\r\n\r\n  /**\r\n   * ExyToken contructor.\r\n   *\r\n   * Exy token contains allocations of:\r\n   * - partnerTokensAllocation\r\n   * - companyTokensAllocation\r\n   * - bountyTokensAllocation\r\n   *\r\n   * param signatory0 Address of first signatory.\r\n   * param signatory1 Address of second signatory.\r\n   * param signatory2 Address of third signatory.\r\n   *\r\n   */\r\n  function ExyToken(address signatory0, address signatory1, address signatory2)\r\n      SignatoryPausable(signatory0, signatory1, signatory2)\r\n      public {\r\n\r\n    // NOTE: the contract is safe as long as this assignment is not changed nor updated.\r\n    // If, in the future, INIT_DATE could have a different value, calculations using its value\r\n    // should most likely use SafeMath.\r\n    INIT_DATE = block.timestamp;\r\n\r\n    companyTokensAllocation = new VestingAllocation(\r\n      COMPANY_TOKENS_PER_PERIOD,\r\n      COMPANY_PERIODS,\r\n      MINUTES_IN_COMPANY_PERIOD,\r\n      INIT_DATE);\r\n\r\n    partnerTokensAllocation = new VestingAllocation(\r\n      PARTNER_TOKENS_PER_PERIOD,\r\n      PARTNER_PERIODS,\r\n      MINUTES_IN_PARTNER_PERIOD,\r\n      INIT_DATE);\r\n\r\n    bountyTokensAllocation = new BountyTokenAllocation(\r\n      BOUNTY_TOKENS\r\n    );\r\n\r\n    // minting marketing cost tokens\r\n    mint(MARKETING_COST_ADDRESS, MARKETING_COST_TOKENS);\r\n\r\n    // minting ICO tokens\r\n    mint(ICO_TOKENS_ADDRESS, ICO_TOKENS);\r\n    // minting SEED tokens\r\n    mint(SEED_TOKENS_ADDRESS, SEED_TOKENS);\r\n  }\r\n\r\n  /**\r\n   * Transfer ERC20 tokens out of this contract, to avoid them being stuck here forever.\r\n   * Only one signatory decision needed, to minimize contract size since this is a rare case.\r\n   */\r\n  function erc20TokenTransfer(address _tokenAddr, address _dest) public onlySignatory {\r\n    ERC20Token token = ERC20Token(_tokenAddr);\r\n    token.transfer(_dest, token.balanceOf(address(this)));\r\n  }\r\n\r\n  /**\r\n   * Adds a proposition of a company token split to companyTokensAllocation\r\n   */\r\n  function proposeCompanyAllocation(address _dest, uint256 _tokensPerPeriod) public onlySignatory onlyPayloadSize(2 * 32) {\r\n    companyTokensAllocation.proposeAllocation(msg.sender, _dest, _tokensPerPeriod);\r\n  }\r\n\r\n  /**\r\n   * Approves a proposition of a company token split\r\n   */\r\n  function approveCompanyAllocation(address _dest) public onlySignatory {\r\n    companyTokensAllocation.approveAllocation(msg.sender, _dest);\r\n  }\r\n\r\n  /**\r\n   * Rejects a proposition of a company token split.\r\n   * it can reject only not approved method\r\n   */\r\n  function rejectCompanyAllocation(address _dest) public onlySignatory {\r\n    companyTokensAllocation.rejectAllocation(_dest);\r\n  }\r\n\r\n  /**\r\n   * Return number of remaining company tokens allocations\r\n   * @return Length of company allocations per period\r\n   */\r\n  function getRemainingCompanyTokensAllocation() public view returns (uint256) {\r\n    return companyTokensAllocation.remainingTokensPerPeriod();\r\n  }\r\n\r\n  /**\r\n   * Given the index of the company allocation in allocationAddressList\r\n   * we find its reciepent address and return struct with informations\r\n   * about this allocation\r\n   *\r\n   * @param nr Index of allocation in allocationAddressList\r\n   * @return Information about company alloction\r\n   */\r\n  function getCompanyAllocation(uint256 nr) public view returns (uint256, address, uint256, Types.AllocationState, address) {\r\n    address recipientAddress = companyTokensAllocation.allocationAddressList(nr);\r\n    var (tokensPerPeriod, proposalAddress, claimedPeriods, allocationState) = companyTokensAllocation.allocationOf(recipientAddress);\r\n    return (tokensPerPeriod, proposalAddress, claimedPeriods, allocationState, recipientAddress);\r\n  }\r\n\r\n  /**\r\n   * Adds a proposition of a partner token split to companyTokensAllocation\r\n   */\r\n  function proposePartnerAllocation(address _dest, uint256 _tokensPerPeriod) public onlySignatory onlyPayloadSize(2 * 32) {\r\n    partnerTokensAllocation.proposeAllocation(msg.sender, _dest, _tokensPerPeriod);\r\n  }\r\n\r\n  /**\r\n   * Approves a proposition of a partner token split\r\n   */\r\n  function approvePartnerAllocation(address _dest) public onlySignatory {\r\n    partnerTokensAllocation.approveAllocation(msg.sender, _dest);\r\n  }\r\n\r\n  /**\r\n   * Rejects a proposition of a partner token split.\r\n   * it can reject only not approved method\r\n   */\r\n  function rejectPartnerAllocation(address _dest) public onlySignatory {\r\n    partnerTokensAllocation.rejectAllocation(_dest);\r\n  }\r\n\r\n  /**\r\n   * Return number of remaining partner tokens allocations\r\n   * @return Length of partner allocations per period\r\n   */\r\n  function getRemainingPartnerTokensAllocation() public view returns (uint256) {\r\n    return partnerTokensAllocation.remainingTokensPerPeriod();\r\n  }\r\n\r\n  /**\r\n   * Given the index of the partner allocation in allocationAddressList\r\n   * we find its reciepent address and return struct with informations\r\n   * about this allocation\r\n   *\r\n   * @param nr Index of allocation in allocationAddressList\r\n   * @return Information about partner alloction\r\n   */\r\n  function getPartnerAllocation(uint256 nr) public view returns (uint256, address, uint256, Types.AllocationState, address) {\r\n    address recipientAddress = partnerTokensAllocation.allocationAddressList(nr);\r\n    var (tokensPerPeriod, proposalAddress, claimedPeriods, allocationState) = partnerTokensAllocation.allocationOf(recipientAddress);\r\n    return (tokensPerPeriod, proposalAddress, claimedPeriods, allocationState, recipientAddress);\r\n  }\r\n\r\n  function proposeBountyTransfer(address _dest, uint256 _amount) public onlySignatory onlyPayloadSize(2 * 32) {\r\n    bountyTokensAllocation.proposeBountyTransfer(_dest, _amount);\r\n  }\r\n\r\n  /**\r\n   * Approves a bounty transfer and mint tokens\r\n   *\r\n   * @param _dest Address of the bounty reciepent to whom we should mint token\r\n   */\r\n  function approveBountyTransfer(address _dest) public onlySignatory {\r\n    uint256 tokensToMint = bountyTokensAllocation.approveBountyTransfer(msg.sender, _dest);\r\n    mint(_dest, tokensToMint);\r\n  }\r\n\r\n  /**\r\n   * Rejects a proposition of a bounty token.\r\n   * it can reject only not approved method\r\n   */\r\n  function rejectBountyTransfer(address _dest) public onlySignatory {\r\n    bountyTokensAllocation.rejectBountyTransfer(_dest);\r\n  }\r\n\r\n  function getBountyTransfers(uint256 nr) public view returns (uint256, address, Types.BountyState, address) {\r\n    address recipientAddress = bountyTokensAllocation.allocationAddressList(nr);\r\n    var (amount, proposalAddress, bountyState) = bountyTokensAllocation.bountyOf(recipientAddress);\r\n    return (amount, proposalAddress, bountyState, recipientAddress);\r\n  }\r\n\r\n  /**\r\n   * Return number of remaining bounty tokens allocations\r\n   * @return Length of company allocations\r\n   */\r\n  function getRemainingBountyTokens() public view returns (uint256) {\r\n    return bountyTokensAllocation.remainingBountyTokens();\r\n  }\r\n\r\n  function claimTokens() public {\r\n    mint(\r\n      msg.sender,\r\n      partnerTokensAllocation.claimTokens(msg.sender) +\r\n      companyTokensAllocation.claimTokens(msg.sender)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Override the transfer and mint functions to respect pause state.\r\n   */\r\n  function transfer(address to, uint256 value, bytes data) public whenPaused(false) returns (bool) {\r\n    return super.transfer(to, value, data);\r\n  }\r\n\r\n  function transfer(address to, uint256 value) public whenPaused(false) returns (bool) {\r\n    return super.transfer(to, value);\r\n  }\r\n\r\n  function mint(address to, uint256 value) internal whenPaused(false) returns (bool) {\r\n    if (circulatingSupply.add(value) > totalSupply) {\r\n      paused = true;  // emergency pause, this should never happen!\r\n      return false;\r\n    }\r\n    return super.mint(to, value);\r\n  }\r\n\r\n  modifier onlyPayloadSize(uint size) {\r\n    assert(msg.data.length == size + 4);\r\n    _;\r\n  }\r\n\r\n}\r\n\r\ncontract Types {\r\n\r\n  // Possible split states: Proposed, Approved, Rejected\r\n  // Proposed is the initial state.\r\n  // Both Approved and Rejected are final states.\r\n  // The only possible transitions are:\r\n  // Proposed => Approved\r\n  // Proposed => Rejected\r\n  enum AllocationState {\r\n    Proposed,\r\n    Approved,\r\n    Rejected\r\n  }\r\n\r\n  // Structure used for storing company and partner allocations\r\n  struct StructVestingAllocation {\r\n    // How many tokens per period we want to pass\r\n    uint256 tokensPerPeriod;\r\n    // By whom was this split proposed. Another signatory must approve too\r\n    address proposerAddress;\r\n    // How many times did we release tokens\r\n    uint256 claimedPeriods;\r\n    // State of actual split.\r\n    AllocationState allocationState;\r\n  }\r\n\r\n  enum BountyState {\r\n    Proposed, // 0\r\n    Approved, // 1\r\n    Rejected  // 2\r\n  }\r\n\r\n  struct StructBountyAllocation {\r\n    // How many tokens send him or her\r\n    uint256 amount;\r\n    // By whom was this allocation proposed\r\n    address proposalAddress;\r\n    // State of actual split.\r\n    BountyState bountyState;\r\n  }\r\n}\r\n\r\ncontract VestingAllocation is Ownable {\r\n\r\n  // This contract describes how the tokens are being released in time\r\n\r\n  // Addresses which have a vesting allocation, in order of proposals\r\n  address[] public allocationAddressList;\r\n\r\n  // How many distributions periods there are\r\n  uint256 public periods;\r\n  // How long is one interval\r\n  uint256 public minutesInPeriod;\r\n  // Total amount of remaining tokens to be distributed\r\n  uint256 public remainingTokensPerPeriod;\r\n  // Total amount of all tokens\r\n  uint256 public totalSupply;\r\n  // Inital timestamp\r\n  uint256 public initTimestamp;\r\n\r\n  // For each address we can add exactly one possible split.\r\n  // If we try to add another proposal on existing address it will be rejected\r\n  mapping (address => Types.StructVestingAllocation) public allocationOf;\r\n\r\n  /**\r\n   * VestingAllocation contructor.\r\n   * RemainingTokensPerPeriod variable which represents\r\n   * the remaining amount of tokens to be distributed\r\n   *\r\n   */\r\n  function VestingAllocation(uint256 _tokensPerPeriod, uint256 _periods, uint256 _minutesInPeriod, uint256 _initalTimestamp) Ownable() public {\r\n    totalSupply = _tokensPerPeriod * _periods;\r\n    periods = _periods;\r\n    minutesInPeriod = _minutesInPeriod;\r\n    remainingTokensPerPeriod = _tokensPerPeriod;\r\n    initTimestamp = _initalTimestamp;\r\n  }\r\n\r\n  /**\r\n   * Propose split method adds proposal to the splits Array.\r\n   *\r\n   * @param _dest              - address of the new receiver\r\n   * @param _tokensPerPeriod   - how many tokens we are giving to dest\r\n   */\r\n  function proposeAllocation(address _proposerAddress, address _dest, uint256 _tokensPerPeriod) public onlyOwner {\r\n    require(_tokensPerPeriod > 0);\r\n    require(_tokensPerPeriod <= remainingTokensPerPeriod);\r\n    // In solidity there is no \"exist\" method on a map key.\r\n    // We can't overwrite existing proposal, so we are checking if it is the default value (0x0)\r\n    // Add `allocationOf[_dest].allocationState == Types.AllocationState.Rejected` for possibility to overwrite rejected allocation\r\n    require(allocationOf[_dest].proposerAddress == 0x0 || allocationOf[_dest].allocationState == Types.AllocationState.Rejected);\r\n\r\n    if (allocationOf[_dest].allocationState != Types.AllocationState.Rejected) {\r\n      allocationAddressList.push(_dest);\r\n    }\r\n\r\n    remainingTokensPerPeriod = remainingTokensPerPeriod - _tokensPerPeriod;\r\n    allocationOf[_dest] = Types.StructVestingAllocation({\r\n      tokensPerPeriod: _tokensPerPeriod,\r\n      allocationState: Types.AllocationState.Proposed,\r\n      proposerAddress: _proposerAddress,\r\n      claimedPeriods: 0\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Approves the split allocation, so it can be claimed after periods\r\n   *\r\n   * @param _address - address for the split\r\n   */\r\n  function approveAllocation(address _approverAddress, address _address) public onlyOwner {\r\n    require(allocationOf[_address].allocationState == Types.AllocationState.Proposed);\r\n    require(allocationOf[_address].proposerAddress != _approverAddress);\r\n    allocationOf[_address].allocationState = Types.AllocationState.Approved;\r\n  }\r\n\r\n /**\r\n   * Rejects the split allocation\r\n   *\r\n   * @param _address - address for the split to be rejected\r\n   */\r\n  function rejectAllocation(address _address) public onlyOwner {\r\n    var tmp = allocationOf[_address];\r\n    require(tmp.allocationState == Types.AllocationState.Proposed);\r\n    allocationOf[_address].allocationState = Types.AllocationState.Rejected;\r\n    remainingTokensPerPeriod = remainingTokensPerPeriod + tmp.tokensPerPeriod;\r\n  }\r\n\r\n  function claimTokens(address _address) public returns (uint256) {\r\n    Types.StructVestingAllocation storage alloc = allocationOf[_address];\r\n    if (alloc.allocationState == Types.AllocationState.Approved) {\r\n      uint256 periodsElapsed = SafeMath.min((block.timestamp - initTimestamp) / (minutesInPeriod * 1 minutes), periods);\r\n      uint256 tokens = (periodsElapsed - alloc.claimedPeriods) * alloc.tokensPerPeriod;\r\n      alloc.claimedPeriods = periodsElapsed;\r\n      return tokens;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n}", "OptimizationUsed": "1", "ContractName": "ExyToken", "ByteCode": "0x60606040526004361061019c5763ffffffff60e060020a60003504166224eb4b81146101a157806305763ff71461021357806306fdde0314610242578063095ea7b3146102cc5780630d032623146103025780630d65e3e71461032757806318160ddd1461034657806323b872dd14610359578063257ef52214610381578063313ce567146103a257806344f96b36146103cb57806348c54b9d146103de5780634a7e00de146103f1578063552a41a3146104105780635c975abb14610423578063639bd0bf146104365780636da246ac1461045857806370a08231146104775780638c0e299a146104965780639358928b146104b8578063950f9813146104cb57806395d89b41146104ea578063a47fcc7c146104fd578063a9059cbb1461051f578063b07ee0d214610541578063b642d58f14610566578063be0f27cf14610579578063be45fd6214610598578063c06fff76146105fd578063ce158ba214610615578063da26c24114610634578063dc5b87cf1461064c578063dd62ed3e14610662578063e78d630614610687578063e981c803146106f1575b600080fd5b34156101ac57600080fd5b6101b7600435610709565b604051858152600160a060020a038516602082015260408101849052606081018360028111156101e357fe5b60ff16815260200182600160a060020a0316600160a060020a031681526020019550505050505060405180910390f35b341561021e57600080fd5b610226610837565b604051600160a060020a03909116815260200160405180910390f35b341561024d57600080fd5b61025561084b565b60405160208082528190810183818151815260200191508051906020019080838360005b83811015610291578082015183820152602001610279565b50505050905090810190601f1680156102be5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156102d757600080fd5b6102ee600160a060020a0360043516602435610882565b604051901515815260200160405180910390f35b341561030d57600080fd5b6103156108ee565b60405190815260200160405180910390f35b341561033257600080fd5b6102ee600160a060020a0360043516610957565b341561035157600080fd5b61031561096c565b341561036457600080fd5b6102ee600160a060020a036004358116906024351660443561097b565b341561038c57600080fd5b6103a0600160a060020a0360043516610b57565b005b34156103ad57600080fd5b6103b5610c0b565b60405160ff909116815260200160405180910390f35b34156103d657600080fd5b610315610c10565b34156103e957600080fd5b6103a0610c5a565b34156103fc57600080fd5b6103a0600160a060020a0360043516610d52565b341561041b57600080fd5b610315610de0565b341561042e57600080fd5b6102ee610e2a565b341561044157600080fd5b6103a0600160a060020a0360043516602435610e33565b341561046357600080fd5b6103a0600160a060020a0360043516610ed5565b341561048257600080fd5b610315600160a060020a0360043516610f54565b34156104a157600080fd5b6103a0600160a060020a0360043516602435610f66565b34156104c357600080fd5b610315610ffc565b34156104d657600080fd5b6103a0600160a060020a0360043516611002565b34156104f557600080fd5b610315611079565b341561050857600080fd5b6103a0600160a060020a036004351660243561109d565b341561052a57600080fd5b6102ee600160a060020a0360043516602435611133565b341561054c57600080fd5b6103a0600160a060020a036004358116906024351661115c565b341561057157600080fd5b61031561126a565b341561058457600080fd5b6103a0600160a060020a0360043516611270565b34156105a357600080fd5b6102ee60048035600160a060020a03169060248035919060649060443590810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496506112e795505050505050565b341561060857600080fd5b6103a06004351515611310565b341561062057600080fd5b6103a0600160a060020a0360043516611399565b341561063f57600080fd5b6103a06004351515611418565b341561065757600080fd5b6101b76004356114f2565b341561066d57600080fd5b610315600160a060020a03600435811690602435166115dc565b341561069257600080fd5b61069d600435611607565b604051848152600160a060020a0384166020820152604081018360028111156106c257fe5b60ff16815260200182600160a060020a0316600160a060020a0316815260200194505050505060405180910390f35b34156106fc57600080fd5b6103a06004351515611719565b600080600080600080600080600080600a60009054906101000a9004600160a060020a0316600160a060020a0316634f22bcf88c60006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b151561077c57600080fd5b6102c65a03f1151561078d57600080fd5b5050506040518051600a54909650600160a060020a0316905063a4f82f278660006040516080015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401608060405180830381600087803b15156107f357600080fd5b6102c65a03f1151561080457600080fd5b5050506040518051906020018051906020018051906020018051939f929e50909c50919a50959850949650505050505050565b6008546101009004600160a060020a031681565b60408051908101604052600d81527f4578706572747920546f6b656e00000000000000000000000000000000000000602082015281565b600160a060020a03338116600081815260056020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b600a54600090600160a060020a0316636db6626882604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561093857600080fd5b6102c65a03f1151561094957600080fd5b505050604051805191505090565b60076020526000908152604090205460ff1681565b6a41ae9209d689ea12740c0081565b6000610985611dd8565b600160a060020a038416151561099a57600080fd5b600160a060020a0385166000908152600460205260409020548311156109bf57600080fd5b600160a060020a03808616600090815260056020908152604080832033909416835292905220548311156109f257600080fd5b600160a060020a038086166000908152600460208181526040808420805489900390556005825280842033861685528252808420805489900390559388168352522054610a45908463ffffffff61177816565b600160a060020a03851660009081526004602052604090819020919091558190518082805190602001908083835b60208310610a925780518252601f199092019160209182019101610a73565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051809103902084600160a060020a031686600160a060020a03167f9bfafdc2ae8835972d7b64ef3f8f307165ac22ceffde4a742c52da5487f45fd18660405190815260200160405180910390a483600160a060020a031685600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8560405190815260200160405180910390a3506001949350505050565b600160a060020a03331660009081526007602052604081205460ff161515610b7e57600080fd5b600b54600160a060020a031663849a7337338460006040516020015260405160e060020a63ffffffff8516028152600160a060020a03928316600482015291166024820152604401602060405180830381600087803b1515610bdf57600080fd5b6102c65a03f11515610bf057600080fd5b505050604051805190509050610c06828261178e565b505050565b601281565b600954600090600160a060020a0316636db6626882604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561093857600080fd5b600a54610d4f903390600160a060020a031663df8de3e78260006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610cb957600080fd5b6102c65a03f11515610cca57600080fd5b5050506040518051600954909150600160a060020a031663df8de3e73360006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610d2e57600080fd5b6102c65a03f11515610d3f57600080fd5b505050604051805190500161178e565b50565b600160a060020a03331660009081526007602052604090205460ff161515610d7957600080fd5b600a54600160a060020a031663bd9521788260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401600060405180830381600087803b1515610dc957600080fd5b6102c65a03f11515610dda57600080fd5b50505050565b600b54600090600160a060020a03166378f8eea882604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561093857600080fd5b60085460ff1681565b600160a060020a03331660009081526007602052604090205460ff161515610e5a57600080fd5b604036604414610e6657fe5b600b54600160a060020a031663639bd0bf848460405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b1515610ebc57600080fd5b6102c65a03f11515610ecd57600080fd5b505050505050565b600160a060020a03331660009081526007602052604090205460ff161515610efc57600080fd5b600954600160a060020a0316631a62c928338360405160e060020a63ffffffff8516028152600160a060020a03928316600482015291166024820152604401600060405180830381600087803b1515610dc957600080fd5b60046020526000908152604090205481565b600160a060020a03331660009081526007602052604090205460ff161515610f8d57600080fd5b604036604414610f9957fe5b600a54600160a060020a03166339b8e0ff33858560405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401600060405180830381600087803b1515610ebc57600080fd5b60065481565b600160a060020a03331660009081526007602052604090205460ff16151561102957600080fd5b600954600160a060020a031663bd9521788260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401600060405180830381600087803b1515610dc957600080fd5b7f455859000000000000000000000000000000000000000000000000000000000081565b600160a060020a03331660009081526007602052604090205460ff1615156110c457600080fd5b6040366044146110d057fe5b600954600160a060020a03166339b8e0ff33858560405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401600060405180830381600087803b1515610ebc57600080fd5b600854600090819060ff161561114857600080fd5b61115284846117e9565b91505b5092915050565b600160a060020a03331660009081526007602052604081205460ff16151561118357600080fd5b5081600160a060020a03811663a9059cbb83826370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156111e357600080fd5b6102c65a03f115156111f457600080fd5b5050506040518051905060006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561124a57600080fd5b6102c65a03f1151561125b57600080fd5b50505060405180515050505050565b600c5481565b600160a060020a03331660009081526007602052604090205460ff16151561129757600080fd5b600b54600160a060020a031663be0f27cf8260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401600060405180830381600087803b1515610dc957600080fd5b600854600090819060ff16156112fc57600080fd5b611307858585611a52565b95945050505050565b600160a060020a03331660009081526007602052604090205460ff16151561133757600080fd5b60085481159060ff161515811461134d57600080fd5b6008546101009004600160a060020a03161561136857600080fd5b50506008805474ffffffffffffffffffffffffffffffffffffffff00191661010033600160a060020a031602179055565b600160a060020a03331660009081526007602052604090205460ff1615156113c057600080fd5b600a54600160a060020a0316631a62c928338360405160e060020a63ffffffff8516028152600160a060020a03928316600482015291166024820152604401600060405180830381600087803b1515610dc957600080fd5b600160a060020a03331660009081526007602052604090205460ff16151561143f57600080fd5b60085481159060ff161515811461145557600080fd5b6008546101009004600160a060020a0316151561147157600080fd5b60085433600160a060020a0390811661010090920416141561149257600080fd5b6008805474ffffffffffffffffffffffffffffffffffffffffff191683151517908190557fdd7221e8fae38eadd917726db6aa1477e63320aea2609f225f90fe8bb2ff60109060ff16604051901515815260200160405180910390a15050565b600080600080600080600080600080600960009054906101000a9004600160a060020a0316600160a060020a0316634f22bcf88c60006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b151561156557600080fd5b6102c65a03f1151561157657600080fd5b5050506040518051600954909650600160a060020a0316905063a4f82f278660006040516080015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401608060405180830381600087803b15156107f357600080fd5b600160a060020a03918216600090815260056020908152604080832093909416825291909152205490565b600b546000908190819081908190819081908190600160a060020a0316634f22bcf88a836040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b151561166857600080fd5b6102c65a03f1151561167957600080fd5b5050506040518051600b54909550600160a060020a0316905063944129438560006040516060015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401606060405180830381600087803b15156116df57600080fd5b6102c65a03f115156116f057600080fd5b5050506040518051906020018051906020018051929c919b509199509497509395505050505050565b600160a060020a03331660009081526007602052604090205460ff16151561174057600080fd5b60085481159060ff161515811461175657600080fd5b50506008805474ffffffffffffffffffffffffffffffffffffffff0019169055565b60008282018381101561178757fe5b9392505050565b600854600090819060ff16156117a357600080fd5b6006546a41ae9209d689ea12740c00906117c3908563ffffffff61177816565b11156117df576008805460ff1916600117905560009150611155565b6111528484611c6d565b6000806117f4611dd8565b600160a060020a0333166000908152600460205260408120548590101561181a57600080fd5b600160a060020a033381166000908152600460205260408082208054899003905591881681522054863b9350611856908663ffffffff61177816565b600160a060020a03871660009081526004602052604081209190915583111561195c575084600160a060020a03811663c0ee0b8a3387856040518463ffffffff1660e060020a0281526004018084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156118fa5780820151838201526020016118e2565b50505050905090810190601f1680156119275780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b151561194757600080fd5b6102c65a03f1151561195857600080fd5b5050505b816040518082805190602001908083835b6020831061198c5780518252601f19909201916020918201910161196d565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051809103902086600160a060020a031633600160a060020a03167f9bfafdc2ae8835972d7b64ef3f8f307165ac22ceffde4a742c52da5487f45fd18860405190815260200160405180910390a485600160a060020a031633600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8760405190815260200160405180910390a350600195945050505050565b600160a060020a0333166000908152600460205260408120548190819085901015611a7c57600080fd5b600160a060020a033381166000908152600460205260408082208054899003905591881681522054863b9250611ab8908663ffffffff61177816565b600160a060020a038716600090815260046020526040812091909155821115611bbe575084600160a060020a03811663c0ee0b8a3387876040518463ffffffff1660e060020a0281526004018084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611b5c578082015183820152602001611b44565b50505050905090810190601f168015611b895780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b1515611ba957600080fd5b6102c65a03f11515611bba57600080fd5b5050505b836040518082805190602001908083835b60208310611bee5780518252601f199092019160209182019101611bcf565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051809103902086600160a060020a031633600160a060020a03167f9bfafdc2ae8835972d7b64ef3f8f307165ac22ceffde4a742c52da5487f45fd18860405190815260200160405180910390a450600195945050505050565b6000806000611c7a611dd8565b6006805486019055600160a060020a0386166000908152600460205260408120805487019055863b9350831115611d8f5785915081600160a060020a031663c0ee0b8a3387846040518463ffffffff1660e060020a0281526004018084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611d2d578082015183820152602001611d15565b50505050905090810190601f168015611d5a5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b1515611d7a57600080fd5b6102c65a03f11515611d8b57600080fd5b5050505b85600160a060020a03167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968858660405190815260200160405180910390a250600195945050505050565b602060405190810160405260008152905600a165627a7a72305820c6b5b93f81635d029ed4e4d7909447c00dc112261f92251ee46c94f78b20b9a80029"}