{"Runs": "200", "SwarmSource": "bzzr://db7b59610dc981e6ccd9b5119776d8b0ec944796aa725ebc346ae46236312797", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_participant\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferTokenTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishDistribution\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokensPerEth\",\"type\":\"uint256\"}],\"name\":\"updateTokensPerEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributionFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferTokenToMultiple\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensPerEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_PURCHASE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"withdrawForeignTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Distr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DistrFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"Airdrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_tokensPerEth\",\"type\":\"uint256\"}],\"name\":\"TokensPerEthUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.21+commit.dfe3193c", "ConstructorArguments": "", "SourceCode": "/**\r\n * @title CyberMusic Project\r\n * @team GoshiSoft\r\n */\r\npragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract ForeignToken {\r\n    function balanceOf(address _owner) constant public returns (uint256);\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n}\r\n\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) public constant returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public constant returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract CyberMusicToken is ERC20 {\r\n    \r\n    using SafeMath for uint256;\r\n    address owner = msg.sender;\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;    \r\n\r\n    string public constant name = \"CyberMusic\";\r\n    string public constant symbol = \"CYMT\";\r\n    uint public constant decimals = 8;\r\n    \r\n    uint256 public totalSupply = 20000000000e8;\r\n    uint256 public totalDistributed = 0;    \r\n    uint256 public constant MIN_PURCHASE = 1 ether / 100;\r\n    uint256 public tokensPerEth = 20000000e8;\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    \r\n    event Distr(address indexed to, uint256 amount);\r\n    event DistrFinished();\r\n\r\n    event Airdrop(address indexed _owner, uint _amount, uint _balance);\r\n\r\n    event TokensPerEthUpdated(uint _tokensPerEth);\r\n    \r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    bool public distributionFinished = false;\r\n    \r\n    modifier canDistr() {\r\n        require(!distributionFinished);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    \r\n    function CyberMusicToken () public {\r\n        owner = msg.sender;\r\n        uint256 devTokens = 2000000000e8;\r\n        distr(owner, devTokens);        \r\n    }\r\n    \r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n    \r\n\r\n    function finishDistribution() onlyOwner canDistr public returns (bool) {\r\n        distributionFinished = true;\r\n        emit DistrFinished();\r\n        return true;\r\n    }\r\n    \r\n    function distr(address _to, uint256 _amount) canDistr private returns (bool) {\r\n        totalDistributed = totalDistributed.add(_amount);        \r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Distr(_to, _amount);\r\n        emit Transfer(address(0), _to, _amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function doAirdrop(address _participant, uint _amount) internal {\r\n\r\n        require( _amount > 0 );      \r\n\r\n        require( totalDistributed < totalSupply );\r\n        \r\n        balances[_participant] = balances[_participant].add(_amount);\r\n        totalDistributed = totalDistributed.add(_amount);\r\n\r\n        if (totalDistributed >= totalSupply) {\r\n            distributionFinished = true;\r\n        }\r\n\r\n        // log\r\n        emit Airdrop(_participant, _amount, balances[_participant]);\r\n        emit Transfer(address(0), _participant, _amount);\r\n    }\r\n\r\n    function transferTokenTo(address _participant, uint _amount) public onlyOwner {        \r\n        doAirdrop(_participant, _amount);\r\n    }\r\n\r\n    function transferTokenToMultiple(address[] _addresses, uint _amount) public onlyOwner {        \r\n        for (uint i = 0; i < _addresses.length; i++) doAirdrop(_addresses[i], _amount);\r\n    }\r\n\r\n    function updateTokensPerEth(uint _tokensPerEth) public onlyOwner {        \r\n        tokensPerEth = _tokensPerEth;\r\n        emit TokensPerEthUpdated(_tokensPerEth);\r\n    }\r\n           \r\n    function () external payable {\r\n        getTokens();\r\n     }\r\n    \r\n    function getTokens() payable canDistr  public {\r\n        uint256 tokens = 0;\r\n\r\n        // minimum contribution\r\n        require( msg.value >= MIN_PURCHASE );\r\n\r\n        require( msg.value > 0 );\r\n\r\n        // get baseline number of tokens\r\n        tokens = tokensPerEth.mul(msg.value) / 1 ether;        \r\n        address investor = msg.sender;\r\n        \r\n        if (tokens > 0) {\r\n            distr(investor, tokens);\r\n        }\r\n\r\n        if (totalDistributed >= totalSupply) {\r\n            distributionFinished = true;\r\n        }\r\n    }\r\n\r\n    function balanceOf(address _owner) constant public returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    // mitigates the ERC20 short address attack\r\n    modifier onlyPayloadSize(uint size) {\r\n        assert(msg.data.length >= size + 4);\r\n        _;\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {\r\n\r\n        require(_to != address(0));\r\n        require(_amount <= balances[msg.sender]);\r\n        \r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {\r\n\r\n        require(_to != address(0));\r\n        require(_amount <= balances[_from]);\r\n        require(_amount <= allowed[_from][msg.sender]);\r\n        \r\n        balances[_from] = balances[_from].sub(_amount);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Transfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n    \r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        // mitigates the ERC20 spend/approval race condition\r\n        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    \r\n    function allowance(address _owner, address _spender) constant public returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n    function getTokenBalance(address tokenAddress, address who) constant public returns (uint){\r\n        ForeignToken t = ForeignToken(tokenAddress);\r\n        uint bal = t.balanceOf(who);\r\n        return bal;\r\n    }\r\n    \r\n    function withdraw() onlyOwner public {\r\n        address myAddress = this;\r\n        uint256 etherBalance = myAddress.balance;\r\n        owner.transfer(etherBalance);\r\n    }\r\n    \r\n    function burn(uint256 _value) onlyOwner public {\r\n        require(_value <= balances[msg.sender]);\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        totalDistributed = totalDistributed.sub(_value);\r\n        emit Burn(burner, _value);\r\n    }\r\n    \r\n    function withdrawForeignTokens(address _tokenContract) onlyOwner public returns (bool) {\r\n        ForeignToken token = ForeignToken(_tokenContract);\r\n        uint256 amount = token.balanceOf(address(this));\r\n        return token.transfer(owner, amount);\r\n    }\r\n}", "OptimizationUsed": "1", "ContractName": "CyberMusicToken", "ByteCode": "0x6060604052600436106101195763ffffffff60e060020a60003504166306fdde038114610123578063095ea7b3146101ad57806318160ddd146101e357806323b872dd14610208578063313ce567146102305780633ccfd60b1461024357806342966c681461025657806370a082311461026c5780638144650a1461028b57806395d89b41146102ad5780639b1cbccc146102c05780639ea407be146102d3578063a9059cbb146102e9578063aa6ca80814610119578063c108d5421461030b578063c3888bce1461031e578063c489744b1461036f578063cbdd69b514610394578063d439390c146103a7578063dd62ed3e146103ba578063e58fc54c146103df578063efca2eed146103fe578063f2fde38b14610411575b610121610430565b005b341561012e57600080fd5b6101366104c8565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561017257808201518382015260200161015a565b50505050905090810190601f16801561019f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101b857600080fd5b6101cf600160a060020a03600435166024356104ff565b604051901515815260200160405180910390f35b34156101ee57600080fd5b6101f66105ab565b60405190815260200160405180910390f35b341561021357600080fd5b6101cf600160a060020a03600435811690602435166044356105b1565b341561023b57600080fd5b6101f661072f565b341561024e57600080fd5b610121610734565b341561026157600080fd5b610121600435610790565b341561027757600080fd5b6101f6600160a060020a036004351661087e565b341561029657600080fd5b610121600160a060020a0360043516602435610899565b34156102b857600080fd5b6101366108be565b34156102cb57600080fd5b6101cf6108f5565b34156102de57600080fd5b610121600435610962565b34156102f457600080fd5b6101cf600160a060020a03600435166024356109b8565b341561031657600080fd5b6101cf610aaf565b341561032957600080fd5b61012160046024813581810190830135806020818102016040519081016040528093929190818152602001838360200280828437509496505093359350610ab892505050565b341561037a57600080fd5b6101f6600160a060020a0360043581169060243516610b0f565b341561039f57600080fd5b6101f6610b80565b34156103b257600080fd5b6101f6610b86565b34156103c557600080fd5b6101f6600160a060020a0360043581169060243516610b91565b34156103ea57600080fd5b6101cf600160a060020a0360043516610bbc565b341561040957600080fd5b6101f6610cc0565b341561041c57600080fd5b610121600160a060020a0360043516610cc6565b600754600090819060ff161561044557600080fd5b60009150662386f26fc1000034101561045d57600080fd5b6000341161046a57600080fd5b600654670de0b6b3a764000090610487903463ffffffff610d1c16565b81151561049057fe5b04915033905060008211156104ab576104a98183610d45565b505b600454600554106104c4576007805460ff191660011790555b5050565b60408051908101604052600a81527f43796265724d7573696300000000000000000000000000000000000000000000602082015281565b600081158015906105345750600160a060020a0333811660009081526003602090815260408083209387168352929052205415155b15610541575060006105a5565b600160a060020a03338116600081815260036020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b60045481565b6000606060643610156105c057fe5b600160a060020a03841615156105d557600080fd5b600160a060020a0385166000908152600260205260409020548311156105fa57600080fd5b600160a060020a038086166000908152600360209081526040808320339094168352929052205483111561062d57600080fd5b600160a060020a038516600090815260026020526040902054610656908463ffffffff610e1f16565b600160a060020a0380871660009081526002602090815260408083209490945560038152838220339093168252919091522054610699908463ffffffff610e1f16565b600160a060020a03808716600090815260036020908152604080832033851684528252808320949094559187168152600290915220546106df908463ffffffff610e3116565b600160a060020a0380861660008181526002602052604090819020939093559190871690600080516020610f538339815191529086905190815260200160405180910390a3506001949350505050565b600881565b600154600090819033600160a060020a0390811691161461075457600080fd5b50506001543090600160a060020a0380831631911681156108fc0282604051600060405180830381858888f1935050505015156104c457600080fd5b60015460009033600160a060020a039081169116146107ae57600080fd5b600160a060020a0333166000908152600260205260409020548211156107d357600080fd5b5033600160a060020a0381166000908152600260205260409020546107f89083610e1f565b600160a060020a038216600090815260026020526040902055600454610824908363ffffffff610e1f16565b60045560055461083a908363ffffffff610e1f16565b600555600160a060020a0381167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58360405190815260200160405180910390a25050565b600160a060020a031660009081526002602052604090205490565b60015433600160a060020a039081169116146108b457600080fd5b6104c48282610e3e565b60408051908101604052600481527f43594d5400000000000000000000000000000000000000000000000000000000602082015281565b60015460009033600160a060020a0390811691161461091357600080fd5b60075460ff161561092357600080fd5b6007805460ff191660011790557f7f95d919e78bdebe8a285e6e33357c2fcb65ccf66e72d7573f9f8f6caad0c4cc60405160405180910390a150600190565b60015433600160a060020a0390811691161461097d57600080fd5b60068190557ff7729fa834bbef70b6d3257c2317a562aa88b56c81b544814f93dc5963a2c0038160405190815260200160405180910390a150565b6000604060443610156109c757fe5b600160a060020a03841615156109dc57600080fd5b600160a060020a033316600090815260026020526040902054831115610a0157600080fd5b600160a060020a033316600090815260026020526040902054610a2a908463ffffffff610e1f16565b600160a060020a033381166000908152600260205260408082209390935590861681522054610a5f908463ffffffff610e3116565b600160a060020a038086166000818152600260205260409081902093909355913390911690600080516020610f538339815191529086905190815260200160405180910390a35060019392505050565b60075460ff1681565b60015460009033600160a060020a03908116911614610ad657600080fd5b5060005b8251811015610b0a57610b02838281518110610af257fe5b9060200190602002015183610e3e565b600101610ada565b505050565b60008281600160a060020a0382166370a082318560405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610b6157600080fd5b5af11515610b6e57600080fd5b50505060405180519695505050505050565b60065481565b662386f26fc1000081565b600160a060020a03918216600090815260036020908152604080832093909416825291909152205490565b6001546000908190819033600160a060020a03908116911614610bde57600080fd5b83915081600160a060020a03166370a082313060405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610c2f57600080fd5b5af11515610c3c57600080fd5b5050506040518051600154909250600160a060020a03808516925063a9059cbb91168360405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610ca257600080fd5b5af11515610caf57600080fd5b505050604051805195945050505050565b60055481565b60015433600160a060020a03908116911614610ce157600080fd5b600160a060020a03811615610d19576001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b50565b6000821515610d2d575060006105a5565b50818102818382811515610d3d57fe5b04146105a557fe5b60075460009060ff1615610d5857600080fd5b600554610d6b908363ffffffff610e3116565b600555600160a060020a038316600090815260026020526040902054610d97908363ffffffff610e3116565b600160a060020a0384166000818152600260205260409081902092909255907f8940c4b8e215f8822c5c8f0056c12652c746cbc57eedbd2a440b175971d47a779084905190815260200160405180910390a2600160a060020a0383166000600080516020610f538339815191528460405190815260200160405180910390a350600192915050565b600082821115610e2b57fe5b50900390565b818101828110156105a557fe5b60008111610e4b57600080fd5b60045460055410610e5b57600080fd5b600160a060020a038216600090815260026020526040902054610e84908263ffffffff610e3116565b600160a060020a038316600090815260026020526040902055600554610eb0908263ffffffff610e3116565b60058190556004549010610ecc576007805460ff191660011790555b600160a060020a03821660008181526002602052604090819020547fada993ad066837289fe186cd37227aa338d27519a8a1547472ecb9831486d272918491905191825260208201526040908101905180910390a2600160a060020a0382166000600080516020610f538339815191528360405190815260200160405180910390a350505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820db7b59610dc981e6ccd9b5119776d8b0ec944796aa725ebc346ae462363127970029"}