{"Runs": "200", "SwarmSource": "bzzr://5f7a254d806fa9ff8c580a808cca8c678c215855888e07972849443107f2d489", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_uriPrefix\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"InterfaceId_ERC165\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getProperties\",\"outputs\":[{\"name\":\"attrs\",\"type\":\"uint256\"},{\"name\":\"compIds\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_attributes\",\"type\":\"uint256\"},{\"name\":\"_componentIds\",\"type\":\"uint256[]\"}],\"name\":\"updateAttributes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"bulkTransferable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_attributes\",\"type\":\"uint256\"},{\"name\":\"_componentIds\",\"type\":\"uint256[]\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"create\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_storage\",\"type\":\"address\"}],\"name\":\"updateStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"listTokens\",\"outputs\":[{\"name\":\"tokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getOwnedTokenData\",\"outputs\":[{\"name\":\"tokens\",\"type\":\"uint256[]\"},{\"name\":\"attrs\",\"type\":\"uint256[]\"},{\"name\":\"componentIds\",\"type\":\"uint256[]\"},{\"name\":\"isTransferable\",\"type\":\"bool[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mergeTokenIds\",\"type\":\"uint256[]\"},{\"name\":\"_targetTokenId\",\"type\":\"uint256\"},{\"name\":\"_targetAttributes\",\"type\":\"uint256\"}],\"name\":\"mergeTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isTransferable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"name\":\"_attributes\",\"type\":\"uint256[]\"},{\"name\":\"_owners\",\"type\":\"address[]\"}],\"name\":\"bulk\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getControllers\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proxyRegistryAddress\",\"type\":\"address\"}],\"name\":\"setProxyRegistryAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"removeTransferable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"bulkRemoveTransferable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"listTransferableTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"removeController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"setTransferable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_storage\",\"type\":\"address\"},{\"name\":\"_uriPrefix\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.24+commit.e67f0147", "ConstructorArguments": "00000000000000000000000008a9683c51b55cb756452bdd38f395bc92295cff0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000002b68747470733a2f2f6170692e63727970746f62656173746965732e636f6d2f6170692f6f70656e7365612f000000000000000000000000000000000000000000", "SourceCode": "pragma solidity ^0.4.24;\r\n\r\n// File: node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: node_modules/openzeppelin-solidity/contracts/introspection/ERC165.sol\r\n\r\n/**\r\n * @title ERC165\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n */\r\ninterface ERC165 {\r\n\r\n  /**\r\n   * @notice Query if a contract implements an interface\r\n   * @param _interfaceId The interface identifier, as specified in ERC-165\r\n   * @dev Interface identification is specified in ERC-165. This function\r\n   * uses less than 30,000 gas.\r\n   */\r\n  function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool);\r\n}\r\n\r\n// File: node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721Basic.sol\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic interface\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Basic is ERC165 {\r\n  event Transfer(\r\n    address indexed _from,\r\n    address indexed _to,\r\n    uint256 indexed _tokenId\r\n  );\r\n  event Approval(\r\n    address indexed _owner,\r\n    address indexed _approved,\r\n    uint256 indexed _tokenId\r\n  );\r\n  event ApprovalForAll(\r\n    address indexed _owner,\r\n    address indexed _operator,\r\n    bool _approved\r\n  );\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 _balance);\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n  function exists(uint256 _tokenId) public view returns (bool _exists);\r\n\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function getApproved(uint256 _tokenId)\r\n    public view returns (address _operator);\r\n\r\n  function setApprovalForAll(address _operator, bool _approved) public;\r\n  function isApprovedForAll(address _owner, address _operator)\r\n    public view returns (bool);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId)\r\n    public;\r\n\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public;\r\n}\r\n\r\n// File: contracts/ERC721.sol\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Enumerable is ERC721Basic {\r\n    function totalSupply() public view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Metadata is ERC721Basic {\r\n    function name() external view returns (string _name);\r\n    function symbol() external view returns (string _symbol);\r\n    function tokenURI(uint256 _tokenId) public view returns (string);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\r\n}\r\n\r\n// File: node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721Receiver.sol\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ncontract ERC721Receiver {\r\n  /**\r\n   * @dev Magic value to be returned upon successful reception of an NFT\r\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`,\r\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n   */\r\n  bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n  /**\r\n   * @notice Handle the receipt of an NFT\r\n   * @dev The ERC721 smart contract calls this function on the recipient\r\n   * after a `safetransfer`. This function MAY throw to revert and reject the\r\n   * transfer. Return of other than the magic value MUST result in the \r\n   * transaction being reverted.\r\n   * Note: the contract address is always the message sender.\r\n   * @param _operator The address which called `safeTransferFrom` function\r\n   * @param _from The address which previously owned the token\r\n   * @param _tokenId The NFT identifier which is being transfered\r\n   * @param _data Additional data with no specified format\r\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n   */\r\n  function onERC721Received(\r\n    address _operator,\r\n    address _from,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n    returns(bytes4);\r\n}\r\n\r\n// File: node_modules/openzeppelin-solidity/contracts/AddressUtils.sol\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   * as the code is not actually created until after the constructor finishes.\r\n   * @param addr address to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address addr) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(addr) }\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\n// File: node_modules/openzeppelin-solidity/contracts/introspection/SupportsInterfaceWithLookup.sol\r\n\r\n/**\r\n * @title SupportsInterfaceWithLookup\r\n * @author Matt Condon (@shrugs)\r\n * @dev Implements ERC165 using a lookup table.\r\n */\r\ncontract SupportsInterfaceWithLookup is ERC165 {\r\n  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\r\n  /**\r\n   * 0x01ffc9a7 ===\r\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\r\n   */\r\n\r\n  /**\r\n   * @dev a mapping of interface id to whether or not it's supported\r\n   */\r\n  mapping(bytes4 => bool) internal supportedInterfaces;\r\n\r\n  /**\r\n   * @dev A contract implementing SupportsInterfaceWithLookup\r\n   * implement ERC165 itself\r\n   */\r\n  constructor()\r\n    public\r\n  {\r\n    _registerInterface(InterfaceId_ERC165);\r\n  }\r\n\r\n  /**\r\n   * @dev implement supportsInterface(bytes4) using a lookup table\r\n   */\r\n  function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool)\r\n  {\r\n    return supportedInterfaces[_interfaceId];\r\n  }\r\n\r\n  /**\r\n   * @dev private method for registering an interface\r\n   */\r\n  function _registerInterface(bytes4 _interfaceId)\r\n    internal\r\n  {\r\n    require(_interfaceId != 0xffffffff);\r\n    supportedInterfaces[_interfaceId] = true;\r\n  }\r\n}\r\n\r\n// File: contracts/ERC721BasicToken.sol\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic implementation\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721BasicToken is SupportsInterfaceWithLookup, ERC721Basic {\r\n\r\n    bytes4 private constant InterfaceId_ERC721 = 0x80ac58cd;\r\n    /*\r\n    * 0x80ac58cd ===\r\n    *   bytes4(keccak256('balanceOf(address)')) ^\r\n    *   bytes4(keccak256('ownerOf(uint256)')) ^\r\n    *   bytes4(keccak256('approve(address,uint256)')) ^\r\n    *   bytes4(keccak256('getApproved(uint256)')) ^\r\n    *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\r\n    *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\r\n    *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n    *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\r\n    *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\r\n    */\r\n\r\n    bytes4 private constant InterfaceId_ERC721Exists = 0x4f558e79;\r\n    /*\r\n    * 0x4f558e79 ===\r\n    *   bytes4(keccak256('exists(uint256)'))\r\n    */\r\n\r\n    using SafeMath for uint256;\r\n    using AddressUtils for address;\r\n\r\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n    // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n    bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n    // Mapping from token ID to owner\r\n    mapping (uint256 => address) internal tokenOwner;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping (uint256 => address) internal tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping (address => mapping (address => bool)) internal operatorApprovals;\r\n\r\n    /**\r\n    * @dev Guarantees msg.sender is owner of the given token\r\n    * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\r\n    */\r\n    modifier onlyOwnerOf(uint256 _tokenId) {\r\n        require(ownerOf(_tokenId) == msg.sender);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\r\n    * @param _tokenId uint256 ID of the token to validate\r\n    */\r\n    modifier canTransfer(uint256 _tokenId) {\r\n        require(isApprovedOrOwner(msg.sender, _tokenId)); //, \"canTransfer\"\r\n        _;\r\n    }\r\n\r\n    constructor()\r\n        public\r\n    {\r\n        // register the supported interfaces to conform to ERC721 via ERC165\r\n        _registerInterface(InterfaceId_ERC721);\r\n        _registerInterface(InterfaceId_ERC721Exists);\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address\r\n    * @param _owner address to query the balance of\r\n    * @return uint256 representing the amount owned by the passed address\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256);\r\n\r\n    /**\r\n    * @dev Gets the owner of the specified token ID\r\n    * @param _tokenId uint256 ID of the token to query the owner of\r\n    * @return owner address currently marked as the owner of the given token ID\r\n    */\r\n    function ownerOf(uint256 _tokenId) public view returns (address) {\r\n        address owner = tokenOwner[_tokenId];\r\n        require(owner != address(0));\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns whether the specified token exists\r\n    * @param _tokenId uint256 ID of the token to query the existence of\r\n    * @return whether the token exists\r\n    */\r\n    function exists(uint256 _tokenId) public view returns (bool) {\r\n        address owner = tokenOwner[_tokenId];\r\n        return owner != address(0);\r\n    }\r\n\r\n    /**\r\n    * @dev Approves another address to transfer the given token ID\r\n    * The zero address indicates there is no approved address.\r\n    * There can only be one approved address per token at a given time.\r\n    * Can only be called by the token owner or an approved operator.\r\n    * @param _to address to be approved for the given token ID\r\n    * @param _tokenId uint256 ID of the token to be approved\r\n    */\r\n    function approve(address _to, uint256 _tokenId) public {\r\n        address owner = ownerOf(_tokenId);\r\n        require(_to != owner); //, \"_to eq owner\"\r\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n        tokenApprovals[_tokenId] = _to;\r\n        emit Approval(owner, _to, _tokenId);\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the approved address for a token ID, or zero if no address set\r\n    * @param _tokenId uint256 ID of the token to query the approval of\r\n    * @return address currently approved for the given token ID\r\n    */\r\n    function getApproved(uint256 _tokenId) public view returns (address) {\r\n        return tokenApprovals[_tokenId];\r\n    }\r\n\r\n    /**\r\n    * @dev Sets or unsets the approval of a given operator\r\n    * An operator is allowed to transfer all tokens of the sender on their behalf\r\n    * @param _to operator address to set the approval\r\n    * @param _approved representing the status of the approval to be set\r\n    */\r\n    function setApprovalForAll(address _to, bool _approved) public {\r\n        require(_to != msg.sender);\r\n        operatorApprovals[msg.sender][_to] = _approved;\r\n        emit ApprovalForAll(msg.sender, _to, _approved);\r\n    }\r\n\r\n    /**\r\n    * @dev Tells whether an operator is approved by a given owner\r\n    * @param _owner owner address which you want to query the approval of\r\n    * @param _operator operator address which you want to query the approval of\r\n    * @return bool whether the given operator is approved by the given owner\r\n    */\r\n    function isApprovedForAll(\r\n        address _owner,\r\n        address _operator\r\n    )\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return operatorApprovals[_owner][_operator];\r\n    }\r\n\r\n    /**\r\n    * @dev Transfers the ownership of a given token ID to another address\r\n    * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\r\n    * Requires the msg sender to be the owner, approved, or operator\r\n    * @param _from current owner of the token\r\n    * @param _to address to receive the ownership of the given token ID\r\n    * @param _tokenId uint256 ID of the token to be transferred\r\n    */\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n        public\r\n        canTransfer(_tokenId)\r\n    {\r\n        require(_from != address(0)); //, \"transferFrom 1\"\r\n        require(_to != address(0)); //, \"transferFrom 2\"\r\n\r\n        clearApproval(_from, _tokenId);\r\n        removeTokenFrom(_from, _tokenId);\r\n        addTokenTo(_to, _tokenId);\r\n\r\n        emit Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    /**\r\n    * @dev Safely transfers the ownership of a given token ID to another address\r\n    * If the target address is a contract, it must implement `onERC721Received`,\r\n    * which is called upon a safe transfer, and return the magic value\r\n    * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n    * the transfer is reverted.\r\n    *\r\n    * Requires the msg sender to be the owner, approved, or operator\r\n    * @param _from current owner of the token\r\n    * @param _to address to receive the ownership of the given token ID\r\n    * @param _tokenId uint256 ID of the token to be transferred\r\n    */\r\n    function safeTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n        public\r\n        canTransfer(_tokenId)\r\n    {\r\n        // solium-disable-next-line arg-overflow\r\n        safeTransferFrom(_from, _to, _tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n    * @dev Safely transfers the ownership of a given token ID to another address\r\n    * If the target address is a contract, it must implement `onERC721Received`,\r\n    * which is called upon a safe transfer, and return the magic value\r\n    * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n    * the transfer is reverted.\r\n    * Requires the msg sender to be the owner, approved, or operator\r\n    * @param _from current owner of the token\r\n    * @param _to address to receive the ownership of the given token ID\r\n    * @param _tokenId uint256 ID of the token to be transferred\r\n    * @param _data bytes data to send along with a safe transfer check\r\n    */\r\n    function safeTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId,\r\n        bytes _data\r\n    )\r\n        public\r\n        canTransfer(_tokenId)\r\n    {\r\n        transferFrom(_from, _to, _tokenId);\r\n        // solium-disable-next-line arg-overflow\r\n        require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\r\n    }\r\n\r\n    /**\r\n    * @dev Returns whether the given spender can transfer a given token ID\r\n    * @param _spender address of the spender to query\r\n    * @param _tokenId uint256 ID of the token to be transferred\r\n    * @return bool whether the msg.sender is approved for the given token ID,\r\n    *  is an operator of the owner, or is the owner of the token\r\n    */\r\n    function isApprovedOrOwner(\r\n        address _spender,\r\n        uint256 _tokenId\r\n    )\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        address owner = ownerOf(_tokenId);\r\n        // Disable solium check because of\r\n        // https://github.com/duaraghav8/Solium/issues/175\r\n        // solium-disable-next-line operator-whitespace\r\n        return (\r\n        _spender == owner ||\r\n        getApproved(_tokenId) == _spender ||\r\n        isApprovedForAll(owner, _spender)\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to mint a new token\r\n    * Reverts if the given token ID already exists\r\n    * @param _to The address that will own the minted token\r\n    * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n    */\r\n    function _mint(address _to, uint256 _tokenId) internal {\r\n        require(_to != address(0));\r\n        addTokenTo(_to, _tokenId);\r\n        emit Transfer(address(0), _to, _tokenId);\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to burn a specific token\r\n    * Reverts if the token does not exist\r\n    * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n    */\r\n    function _burn(address _owner, uint256 _tokenId) internal {\r\n        clearApproval(_owner, _tokenId);\r\n        removeTokenFrom(_owner, _tokenId);\r\n        emit Transfer(_owner, address(0), _tokenId);\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to clear current approval of a given token ID\r\n    * Reverts if the given address is not indeed the owner of the token\r\n    * @param _owner owner of the token\r\n    * @param _tokenId uint256 ID of the token to be transferred\r\n    */\r\n    function clearApproval(address _owner, uint256 _tokenId) internal {\r\n        require(ownerOf(_tokenId) == _owner); //, \"clearApproval\"\r\n        if (tokenApprovals[_tokenId] != address(0)) {\r\n            tokenApprovals[_tokenId] = address(0);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to add a token ID to the list of a given address\r\n    * @param _to address representing the new owner of the given token ID\r\n    * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n    */\r\n    function addTokenTo(address _to, uint256 _tokenId) internal {\r\n        require(tokenOwner[_tokenId] == address(0)); //, \"addTokenTo\"\r\n        tokenOwner[_tokenId] = _to;\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to remove a token ID from the list of a given address\r\n    * @param _from address representing the previous owner of the given token ID\r\n    * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n    */\r\n    function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n        require(ownerOf(_tokenId) == _from); //, \"removeTokenFrom\"\r\n        tokenOwner[_tokenId] = address(0);\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to invoke `onERC721Received` on a target address\r\n    * The call is not executed if the target address is not a contract\r\n    * @param _from address representing the previous owner of the given token ID\r\n    * @param _to target address that will receive the tokens\r\n    * @param _tokenId uint256 ID of the token to be transferred\r\n    * @param _data bytes optional data to send along with the call\r\n    * @return whether the call correctly returned the expected magic value\r\n    */\r\n    function checkAndCallSafeTransfer(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId,\r\n        bytes _data\r\n    )\r\n        internal\r\n        returns (bool)\r\n    {\r\n        if (!_to.isContract()) {\r\n            return true;\r\n        }\r\n        bytes4 retval = ERC721Receiver(_to).onERC721Received(\r\n        msg.sender, _from, _tokenId, _data);\r\n        return (retval == ERC721_RECEIVED);\r\n    }\r\n}\r\n\r\n// File: contracts/IEntityStorage.sol\r\n\r\ninterface IEntityStorage {\r\n    function storeBulk(uint256[] _tokenIds, uint256[] _attributes) external;\r\n    function store(uint256 _tokenId, uint256 _attributes, uint256[] _componentIds) external;\r\n    function remove(uint256 _tokenId) external;\r\n    function list() external view returns (uint256[] tokenIds);\r\n    function getAttributes(uint256 _tokenId) external view returns (uint256 attrs, uint256[] compIds);\r\n    function updateAttributes(uint256 _tokenId, uint256 _attributes, uint256[] _componentIds) external;\r\n    function totalSupply() external view returns (uint256);\r\n}\r\n\r\n// File: contracts/ERC721Token.sol\r\n\r\n/**\r\n * @title Full ERC721 Token\r\n * This implementation includes all the required and some optional functionality of the ERC721 standard\r\n * Moreover, it includes approve all functionality using operator terminology\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md Customized to support non-transferability.\r\n */\r\ncontract ERC721Token is SupportsInterfaceWithLookup, ERC721BasicToken, ERC721 {\r\n\r\n    IEntityStorage internal cbStorage;\r\n\r\n    bytes4 private constant InterfaceId_ERC721Enumerable = 0x780e9d63;\r\n    /**\r\n    * 0x780e9d63 ===\r\n    *   bytes4(keccak256('totalSupply()')) ^\r\n    *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\r\n    *   bytes4(keccak256('tokenByIndex(uint256)'))\r\n    */\r\n\r\n    bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\r\n    /**\r\n    * 0x5b5e139f ===\r\n    *   bytes4(keccak256('name()')) ^\r\n    *   bytes4(keccak256('symbol()')) ^\r\n    *   bytes4(keccak256('tokenURI(uint256)'))\r\n    */\r\n\r\n    string internal uriPrefix;\r\n\r\n    // Token name\r\n    string internal name_;\r\n\r\n    // Token symbol\r\n    string internal symbol_;\r\n\r\n    // Mapping from owner to list of owned token IDs\r\n    mapping(address => uint256[]) internal ownedTokens;\r\n    \r\n    // Array with transferable Tokens\r\n    uint256[] internal transferableTokens;\r\n\r\n    /**\r\n    * @dev Constructor function\r\n    */\r\n    constructor(string _name, string _symbol, string _uriPrefix, address _storage) public {\r\n        require(_storage != address(0), \"Storage Address is required\");\r\n        name_ = _name;\r\n        symbol_ = _symbol;\r\n\r\n        // register the supported interfaces to conform to ERC721 via ERC165\r\n        _registerInterface(InterfaceId_ERC721Enumerable);\r\n        _registerInterface(InterfaceId_ERC721Metadata);\r\n        cbStorage = IEntityStorage(_storage);\r\n        uriPrefix = _uriPrefix;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the token name\r\n    * @return string representing the token name\r\n    */\r\n    function name() external view returns (string) {\r\n        return name_;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the token symbol\r\n    * @return string representing the token symbol\r\n    */\r\n    function symbol() external view returns (string) {\r\n        return symbol_;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns an URI for a given token ID\r\n    * Throws if the token ID does not exist. May return an empty string.\r\n    * @param _tokenId uint256 ID of the token to query\r\n    */\r\n    function tokenURI(uint256 _tokenId) public view returns (string) {\r\n        require(exists(_tokenId));\r\n        return strConcat(uriPrefix, uintToString(_tokenId));\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the total amount of tokens stored by the contract\r\n    * @return uint256 representing the total amount of tokens\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return cbStorage.totalSupply();\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to add a token ID to the list owned by a given address\r\n    * @param _to address representing the new owner of the token ID\r\n    * @param _tokenId uint256 ID of the token to be added \r\n    */\r\n    function addTokenTo(address _to, uint256 _tokenId) internal {\r\n        super.addTokenTo(_to, _tokenId);\r\n        ownedTokens[_to].push(_tokenId);\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to remove a token ID from the list owned by a given address\r\n    * @param _from address representing the previous owner of the token ID\r\n    * @param _tokenId uint256 ID of the token to be removed\r\n    */\r\n    function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n        super.removeTokenFrom(_from, _tokenId);\r\n\r\n        uint256 tokenIndex = 0;\r\n        while (ownedTokens[_from][tokenIndex] != _tokenId && tokenIndex < ownedTokens[_from].length) {\r\n            tokenIndex++;\r\n        }\r\n        // Reorg allTokens array\r\n        uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\r\n        uint256 lastToken = ownedTokens[_from][lastTokenIndex];\r\n\r\n        ownedTokens[_from][tokenIndex] = lastToken;\r\n        ownedTokens[_from][lastTokenIndex] = 0;\r\n\r\n        ownedTokens[_from].length--;\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to burn a specific token\r\n    * Reverts if the token does not exist, or is marked transferable\r\n    * @param _owner owner address of the token being burned\r\n    * @param _tokenId uint256 ID of the token being burned \r\n    */\r\n    function _burn(address _owner, uint256 _tokenId) internal {\r\n        // cannot burn a token that is up for sale\r\n        require(!isTransferable(_tokenId)); //, \"_burn\"\r\n        super._burn(_owner, _tokenId);\r\n        cbStorage.remove(_tokenId);\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the number of tokens owned by the specified address\r\n    * @param _owner address of the token owner\r\n    * @return uint256 the number of tokens owned \r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        require(_owner != address(0));\r\n        return ownedTokens[_owner].length;\r\n    }\r\n\r\n        /**\r\n    * @dev List all token Ids that can be transfered\r\n    * @return array of token IDs\r\n    */\r\n    function listTransferableTokens() public view returns(uint256[]) {\r\n        return transferableTokens;\r\n    } \r\n\r\n    /**\r\n    * @dev Is Token Transferable\r\n    * @param _tokenId uint256 ID of the token\r\n    * @return bool is tokenId transferable \r\n    */\r\n    function isTransferable(uint256 _tokenId) public view returns (bool) {\r\n        for (uint256 index = 0; index < transferableTokens.length; index++) {\r\n            if (transferableTokens[index] == _tokenId) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns whether the given spender can transfer a given token ID\r\n    * @param _spender address of the spender to query\r\n    * @param _tokenId uint256 ID of the token to be transferred\r\n    * @return bool whether the token is transferable and msg.sender is approved for the given token ID,\r\n    *  is an operator of the owner, or is the owner of the token\r\n    */\r\n    function isApprovedOrOwner(address _spender, uint256 _tokenId) internal view returns (bool) {\r\n        address owner = ownerOf(_tokenId);\r\n        if (isTransferable(_tokenId)) {\r\n            return (_spender == owner || getApproved(_tokenId) == _spender || isApprovedForAll(owner, _spender));\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n    * Converts a uint, such aa a token ID number, to a string\r\n    */\r\n    function uintToString(uint v) internal pure returns (string str) {\r\n        uint maxlength = 100;\r\n        bytes memory reversed = new bytes(maxlength);\r\n        uint i = 0;\r\n        while (v != 0) {\r\n            uint remainder = v % 10;\r\n            v = v / 10;\r\n            reversed[i++] = byte(48 + remainder);\r\n        }\r\n        bytes memory s = new bytes(i);\r\n        for (uint j = 0; j < i; j++) {\r\n            s[j] = reversed[i - 1 - j];\r\n        }\r\n        str = string(s);\r\n    }\r\n\r\n    /**\r\n    * Basic smashing together of strings.\r\n    */\r\n    function strConcat(string _a, string _b)internal pure returns (string) {\r\n        bytes memory _ba = bytes(_a);\r\n        bytes memory _bb = bytes(_b);\r\n        string memory ab = new string(_ba.length + _bb.length);\r\n        bytes memory ba = bytes(ab);\r\n        uint k = 0;\r\n        for (uint i = 0; i < _ba.length; i++) ba[k++] = _ba[i];\r\n        for (i = 0; i < _bb.length; i++) ba[k++] = _bb[i];\r\n        return string(ba);\r\n    }\r\n}\r\n\r\n// File: contracts/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n    address public newOwner;\r\n    \r\n    // mapping for creature Type to Sale\r\n    address[] internal controllers;\r\n    //mapping(address => address) internal controllers;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n   /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n   \r\n    /**\r\n    * @dev Throws if called by any account that's not a superuser.\r\n    */\r\n    modifier onlyController() {\r\n        require(isController(msg.sender), \"only Controller\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnerOrController() {\r\n        require(msg.sender == owner || isController(msg.sender), \"only Owner Or Controller\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"sender address must be the owner's address\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param _newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(address(0) != _newOwner, \"new owner address must not be the owner's address\");\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the new owner to confirm that they are taking control of the contract..tr\r\n    */\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner, \"sender address must not be the new owner's address\");\r\n        emit OwnershipTransferred(owner, msg.sender);\r\n        owner = msg.sender;\r\n        newOwner = address(0);\r\n    }\r\n\r\n    function isController(address _controller) internal view returns(bool) {\r\n        for (uint8 index = 0; index < controllers.length; index++) {\r\n            if (controllers[index] == _controller) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function getControllers() public onlyOwner view returns(address[]) {\r\n        return controllers;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows a new controllers to be added\r\n    * @param _controller The address controller.\r\n    */\r\n    function addController(address _controller) public onlyOwner {\r\n        require(address(0) != _controller, \"controller address must not be 0\");\r\n        require(_controller != owner, \"controller address must not be the owner's address\");\r\n        for (uint8 index = 0; index < controllers.length; index++) {\r\n            if (controllers[index] == _controller) {\r\n                return;\r\n            }\r\n        }\r\n        controllers.push(_controller);\r\n    }\r\n\r\n    /**\r\n    * @dev Allows a new controllers to be added\r\n    * @param _controller The address controller.\r\n    */\r\n    function removeController(address _controller) public onlyOwner {\r\n        require(address(0) != _controller, \"controller address must not be 0\");\r\n        for (uint8 index = 0; index < controllers.length; index++) {\r\n            if (controllers[index] == _controller) {\r\n                delete controllers[index];\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/ICryptoBeastiesToken.sol\r\n\r\ninterface ICryptoBeastiesToken {\r\n    function bulk(uint256[] _tokenIds, uint256[] _attributes, address[] _owners) external;\r\n    function create(uint256 _tokenId, uint256 _attributes, uint256[] _componentIds, address _owner) external;\r\n    function tokensOfOwner(address _owner) external view returns (uint256[] tokens);\r\n    function getProperties(uint256 _tokenId) external view returns (uint256 attrs, uint256[] compIds); \r\n    function updateAttributes(uint256 _tokenId, uint256 _attributes, uint256[] _componentIds) external; \r\n    function updateStorage(address _storage) external;\r\n    function listTokens() external view returns (uint256[] tokens);\r\n    function setURI(string _uriPrefix) external;\r\n    function setTransferable(uint256 _tokenId) external;\r\n    function removeTransferable(uint256 _tokenId) external;\r\n}\r\n\r\n// File: contracts/CryptoBeastiesToken.sol\r\n\r\n/**\r\n * @title CryptoBeasties Full ERC721 Token\r\n * This implementation includes all the required and some optional functionality of the ERC721 standard,\r\n * plus references a separate storage contract for recording the game-specific data for each token. \r\n * CryptoBeasties content and source code is Copyright (C) 2018 PlayStakes LLC, All rights reserved.\r\n */\r\ncontract CryptoBeastiesToken is ERC721Token, Ownable, ICryptoBeastiesToken { \r\n    using SafeMath for uint256;\r\n\r\n    address proxyRegistryAddress;\r\n\r\n    /**\r\n    * @dev Constructor function\r\n    * @param _storage address for Creature Storage\r\n    * @param _uriPrefix string for url prefix\r\n    */\r\n    constructor(address _storage, string _uriPrefix) \r\n        ERC721Token(\"CryptoBeasties Token\", \"CRYB\", _uriPrefix, _storage) public {\r\n        proxyRegistryAddress = address(0);\r\n    }\r\n\r\n    /**\r\n    * @dev Set a Proxy Registry Address, to be used by 3rd-party marketplaces.\r\n    * @param _proxyRegistryAddress Address of the marketplace's proxy registry address\r\n    */\r\n    function setProxyRegistryAddress(address _proxyRegistryAddress) external onlyOwnerOrController {\r\n        proxyRegistryAddress = _proxyRegistryAddress;\r\n    }\r\n\r\n    /**\r\n    * @dev Bulk load a number of tokens, as a way of reducing gas fees and migration time.\r\n    * @param _tokenIds Array of tokenIds\r\n    * @param _attributes Matching array of CryptoBeasties attributes\r\n    * @param _owners Matching array of token owner addresses\r\n    */\r\n    function bulk(uint256[] _tokenIds, uint256[] _attributes, address[] _owners) external onlyOwnerOrController {\r\n        for (uint index = 0; index < _tokenIds.length; index++) {\r\n            ownedTokens[_owners[index]].push(_tokenIds[index]);\r\n            tokenOwner[_tokenIds[index]] = _owners[index];\r\n            emit Transfer(address(0), _owners[index], _tokenIds[index]);\r\n        }\r\n        cbStorage.storeBulk(_tokenIds, _attributes);\r\n    }\r\n\r\n    /**\r\n    * @dev Create CryptoBeasties Token \r\n    * @param _tokenId ID of the new token\r\n    * @param _attributes CryptoBeasties attributes\r\n    * @param _owner address of the token owner\r\n    */\r\n    function create(uint256 _tokenId, uint256 _attributes, uint256[] _componentIds, address _owner) external onlyOwnerOrController {\r\n        require(!super.exists(_tokenId));\r\n        require(_owner != address(0));\r\n        require(_attributes > 0); \r\n        super._mint(_owner, _tokenId);\r\n        cbStorage.store(_tokenId, _attributes, _componentIds);\r\n    }\r\n\r\n   /**\r\n   * Override isApprovedForAll to whitelist a 3rd-party marketplace's proxy accounts to enable gas-less listings.\r\n   */\r\n    function isApprovedForAll(\r\n        address owner,\r\n        address operator\r\n    )\r\n    public\r\n    view\r\n    returns (bool)\r\n    {\r\n        if (proxyRegistryAddress != address(0)) {\r\n            ProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);\r\n            if (proxyRegistry.proxies(owner) == operator) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return super.isApprovedForAll(owner, operator);\r\n    }\r\n\r\n    /**\r\n    * @dev List all token ids for a owner\r\n    * @param _owner address of the token owner\r\n    */\r\n    function tokensOfOwner(address _owner) external view returns (uint256[]) {\r\n        return ownedTokens[_owner];\r\n    }\r\n    \r\n    /**\r\n    * @dev List all token ids, an array of their attributes and an array componentIds (i.e. PowerStones)\r\n    * @param _owner address for the given token ID\r\n    */\r\n    function getOwnedTokenData(\r\n        address _owner\r\n        ) \r\n        public \r\n        view \r\n        returns \r\n        (\r\n            uint256[] tokens, \r\n            uint256[] attrs, \r\n            uint256[] componentIds, \r\n            bool[] isTransferable\r\n        ) {\r\n\r\n        uint256[] memory tokenIds = this.tokensOfOwner(_owner);\r\n        uint256[] memory attribs = new uint256[](tokenIds.length);\r\n        uint256[] memory firstCompIds = new uint256[](tokenIds.length);\r\n        bool[] memory transferable = new bool[](tokenIds.length);\r\n        \r\n        uint256[] memory compIds;\r\n\r\n        for (uint i = 0; i < tokenIds.length; i++) {\r\n            (attribs[i], compIds) = cbStorage.getAttributes(tokenIds[i]);\r\n            transferable[i] = this.isTransferable(tokenIds[i]);\r\n            if (compIds.length > 0)\r\n            {\r\n                firstCompIds[i] = compIds[0];\r\n            }\r\n        }\r\n        return (tokenIds, attribs, firstCompIds, transferable);\r\n    }\r\n\r\n    /**\r\n    * @dev Get attributes and Component Ids (i.e. PowerStones) CryptoBeastie\r\n    * @param _tokenId uint256 for the given token\r\n    */\r\n    function getProperties(uint256 _tokenId) external view returns (uint256 attrs, uint256[] compIds) {\r\n        return cbStorage.getAttributes(_tokenId);\r\n    }\r\n\r\n    /**\r\n    * @dev attributes and Component Ids (i.e. PowerStones) CryptoBeastie\r\n    * @param _tokenId uint256 for the given token\r\n    * @param _attributes Cryptobeasties attributes\r\n    * @param _componentIds Array of Cryptobeasties componentIds (i.e. PowerStones)\r\n    */\r\n    function updateAttributes(uint256 _tokenId, uint256 _attributes, uint256[] _componentIds) external {\r\n        require(ownerOf(_tokenId) == msg.sender || owner == msg.sender || isController(msg.sender)); //, \"token owner\"\r\n        cbStorage.updateAttributes(_tokenId, _attributes, _componentIds);\r\n    }\r\n\r\n    /**\r\n    * @dev Update the reference to the CryptoBeasties storage contract\r\n    * @param _storage address for CryptoBeasties storage contract\r\n    */\r\n    function updateStorage(address _storage) external  onlyOwnerOrController {\r\n        cbStorage = IEntityStorage(_storage);\r\n    }\r\n\r\n    /**\r\n    * @dev List all of the CryptoBeasties token Ids held in the Storage Contract\r\n    */\r\n    function listTokens() external view returns (uint256[] tokens) {\r\n        return cbStorage.list();\r\n    }\r\n\r\n    /**\r\n    * @dev Update the URI prefix\r\n    * @param _uriPrefix string for url prefix\r\n    */\r\n    function setURI(string _uriPrefix) external onlyOwnerOrController {\r\n        uriPrefix = _uriPrefix;\r\n    }\r\n\r\n    /**\r\n    * @dev Bulk setup of token Ids that can be transferred\r\n    * @param _tokenIds array of token Ids that will be set for transfer\r\n    */\r\n    function bulkTransferable(uint256[] _tokenIds) external {\r\n        address _owner = ownerOf(_tokenIds[0]);\r\n        require(_owner == msg.sender || owner == msg.sender || isController(msg.sender)); //, \"token owner\"\r\n        for (uint256 index = 0; index < _tokenIds.length; index++) {\r\n            if (_owner == msg.sender) {\r\n                require(ownerOf(_tokenIds[index]) == _owner); //, \"token owner\"\r\n            } \r\n            transferableTokens.push(_tokenIds[index]);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Set a Token Id that can be transfer\r\n    * @param _tokenId Token Id that will be set for transfer\r\n    */\r\n    function setTransferable(uint256 _tokenId) external {\r\n        require(ownerOf(_tokenId) == msg.sender || owner == msg.sender || isController(msg.sender)); //, \"token owner\"\r\n        transferableTokens.push(_tokenId);\r\n    }\r\n\r\n    /**\r\n    * @dev Bulk remove transferability of token Ids\r\n    * @param _tokenIds array of token Ids that will be removed for transfer\r\n    */\r\n    function bulkRemoveTransferable(uint256[] _tokenIds) external {\r\n        address _owner = ownerOf(_tokenIds[0]);\r\n        require(_owner == msg.sender || owner == msg.sender || isController(msg.sender)); //, \"token owner\"\r\n        for (uint256 index = 0; index < _tokenIds.length; index++) {\r\n            if (_owner == msg.sender) {\r\n                require(ownerOf(_tokenIds[index]) == _owner); //, \"token owner\"\r\n            }\r\n            _removeTransfer(_tokenIds[index]);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev A token Id that will be removed from transfer\r\n    * @param _tokenId Token Id that will be removed for transfer\r\n    */\r\n    function removeTransferable(uint256 _tokenId) external {\r\n        require(ownerOf(_tokenId) == msg.sender || owner == msg.sender || isController(msg.sender)); //, \"token owner\"\r\n        _removeTransfer(_tokenId);\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to remove transferability of a token Id\r\n    * @param _tokenId Token Id that will be removed for Transfer\r\n    */\r\n    function _removeTransfer(uint256 _tokenId) internal {\r\n        uint256 tokenIndex = 0;\r\n        while (transferableTokens[tokenIndex] != _tokenId && tokenIndex < transferableTokens.length) {\r\n            tokenIndex++;\r\n        }\r\n\r\n        // Reorg allTokens array\r\n        uint256 lastTokenIndex = transferableTokens.length.sub(1);\r\n        uint256 lastToken = transferableTokens[lastTokenIndex];\r\n\r\n        transferableTokens[tokenIndex] = lastToken;\r\n        transferableTokens[lastTokenIndex] = 0;\r\n\r\n        transferableTokens.length--;\r\n    }\r\n\r\n    /**\r\n    * @dev Support merging multiple tokens into one, to increase XP and level-up the target.\r\n    * @param _mergeTokenIds Array of tokens to be removed and merged into the target\r\n    * @param _targetTokenId The token whose attributes will be improved by the merge\r\n    * @param _targetAttributes The new improved attributes for the target token\r\n    */\r\n    function mergeTokens(uint256[] _mergeTokenIds, uint256 _targetTokenId, uint256 _targetAttributes) external {\r\n        address _owner = ownerOf(_targetTokenId);\r\n        require(_owner == msg.sender || owner == msg.sender || isController(msg.sender)); //, \"token owner\"\r\n        require(_mergeTokenIds.length > 0); //, \"mergeTokens\"\r\n        require(!isTransferable(_targetTokenId)); // cannot target a token that is up for sale\r\n\r\n\r\n        // remove merge material tokens\r\n        for (uint256 index = 0; index < _mergeTokenIds.length; index++) {\r\n            require(ownerOf(_mergeTokenIds[index]) == _owner); //, \"array\"\r\n            _burn(_owner, _mergeTokenIds[index]);\r\n        }\r\n\r\n        // update target token\r\n        uint256 attribs;\r\n        uint256[] memory compIds;\r\n        (attribs, compIds) = cbStorage.getAttributes(_targetTokenId);\r\n        cbStorage.updateAttributes(_targetTokenId, _targetAttributes, compIds);\r\n    }\r\n}\r\n\r\ncontract OwnableDelegateProxy { }\r\n\r\ncontract ProxyRegistry {\r\n    mapping(address => OwnableDelegateProxy) public proxies;\r\n}", "OptimizationUsed": "0", "ContractName": "CryptoBeastiesToken", "ByteCode": "0x6080604052600436106101ee576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806301ffc9a7146101f357806302fe53051461025757806306fdde0314610292578063081812fc14610322578063095ea7b31461038f57806318160ddd146103dc57806319fa8f50146104075780631b8ca2171461047057806323b872dd146104f957806326665c0f1461056657806342842e0e146105b557806342d6bb61146106225780634f558e791461065d578063521558a3146106a2578063588f64e1146107115780636352211e1461075457806370a08231146107c15780637488ff761461081857806379ba5097146108845780638462151c1461089b5780638928d0a3146109335780638da5cb5b14610aa35780638dbc7df814610afa57806395d89b4114610b49578063a22cb46514610bd9578063a7fc7a0714610c28578063b256456914610c6b578063b3dc8f8e14610cb0578063b4e8a6c414610d1b578063b88d4fde14610d87578063c87b56dd14610e3a578063d26ea6c014610ee0578063d4ee1d9014610f23578063d9b074ee14610f7a578063da3ee10514610fa7578063e985e9c514610fe2578063ec27efb51461105d578063f2fde38b146110c9578063f6a74ed71461110c578063fb5160381461114f575b600080fd5b3480156101ff57600080fd5b5061023d60048036038101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916906020019092919050505061117c565b604051808215151515815260200191505060405180910390f35b34801561026357600080fd5b506102906004803603810190808035906020019082018035906020019190919293919293905050506111e3565b005b34801561029e57600080fd5b506102a76112ce565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102e75780820151818401526020810190506102cc565b50505050905090810190601f1680156103145780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561032e57600080fd5b5061034d60048036038101908080359060200190929190505050611370565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561039b57600080fd5b506103da600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506113ad565b005b3480156103e857600080fd5b506103f16114f2565b6040518082815260200191505060405180910390f35b34801561041357600080fd5b5061041c6115ba565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b34801561047c57600080fd5b5061049b600480360381019080803590602001909291905050506115e1565b6040518083815260200180602001828103825283818151815260200191508051906020019060200280838360005b838110156104e45780820151818401526020810190506104c9565b50505050905001935050505060405180910390f35b34801561050557600080fd5b50610564600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061171a565b005b34801561057257600080fd5b506105b36004803603810190808035906020019092919080359060200190929190803590602001908201803590602001919091929391929390505050611827565b005b3480156105c157600080fd5b50610620600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506119ad565b005b34801561062e57600080fd5b5061065b6004803603810190808035906020019082018035906020019190919293919293905050506119e5565b005b34801561066957600080fd5b5061068860048036038101908080359060200190929190505050611b98565b604051808215151515815260200191505060405180910390f35b3480156106ae57600080fd5b5061070f6004803603810190808035906020019092919080359060200190929190803590602001908201803590602001919091929391929390803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611c0a565b005b34801561071d57600080fd5b50610752600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611e26565b005b34801561076057600080fd5b5061077f60048036038101908080359060200190929190505050611f3f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156107cd57600080fd5b50610802600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611fbd565b6040518082815260200191505060405180910390f35b34801561082457600080fd5b5061082d612044565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610870578082015181840152602081019050610855565b505050509050019250505060405180910390f35b34801561089057600080fd5b50610899612162565b005b3480156108a757600080fd5b506108dc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061234e565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561091f578082015181840152602081019050610904565b505050509050019250505060405180910390f35b34801561093f57600080fd5b50610974600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506123e5565b6040518080602001806020018060200180602001858103855289818151815260200191508051906020019060200280838360005b838110156109c35780820151818401526020810190506109a8565b50505050905001858103845288818151815260200191508051906020019060200280838360005b83811015610a055780820151818401526020810190506109ea565b50505050905001858103835287818151815260200191508051906020019060200280838360005b83811015610a47578082015181840152602081019050610a2c565b50505050905001858103825286818151815260200191508051906020019060200280838360005b83811015610a89578082015181840152602081019050610a6e565b505050509050019850505050505050505060405180910390f35b348015610aaf57600080fd5b50610ab8612876565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610b0657600080fd5b50610b47600480360381019080803590602001908201803590602001919091929391929390803590602001909291908035906020019092919050505061289c565b005b348015610b5557600080fd5b50610b5e612c40565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610b9e578082015181840152602081019050610b83565b50505050905090810190601f168015610bcb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610be557600080fd5b50610c26600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050612ce2565b005b348015610c3457600080fd5b50610c69600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612e1e565b005b348015610c7757600080fd5b50610c966004803603810190808035906020019092919050505061319e565b604051808215151515815260200191505060405180910390f35b348015610cbc57600080fd5b50610d196004803603810190808035906020019082018035906020019190919293919293908035906020019082018035906020019190919293919293908035906020019082018035906020019190919293919293905050506131f5565b005b348015610d2757600080fd5b50610d306135ae565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610d73578082015181840152602081019050610d58565b505050509050019250505060405180910390f35b348015610d9357600080fd5b50610e38600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050613727565b005b348015610e4657600080fd5b50610e6560048036038101908080359060200190929190505050613766565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610ea5578082015181840152602081019050610e8a565b50505050905090810190601f168015610ed25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610eec57600080fd5b50610f21600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061382f565b005b348015610f2f57600080fd5b50610f38613948565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610f8657600080fd5b50610fa56004803603810190808035906020019092919050505061396e565b005b348015610fb357600080fd5b50610fe0600480360381019080803590602001908201803590602001919091929391929390505050613a24565b005b348015610fee57600080fd5b50611043600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613bb4565b604051808215151515815260200191505060405180910390f35b34801561106957600080fd5b50611072613d5b565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156110b557808201518184015260208101905061109a565b505050509050019250505060405180910390f35b3480156110d557600080fd5b5061110a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613db3565b005b34801561111857600080fd5b5061114d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613fad565b005b34801561115b57600080fd5b5061117a60048036038101908080359060200190929190505050614215565b005b6000806000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806112445750611243336142ee565b5b15156112b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f6f6e6c79204f776e6572204f7220436f6e74726f6c6c6572000000000000000081525060200191505060405180910390fd5b8181600591906112c99291906152f8565b505050565b606060068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113665780601f1061133b57610100808354040283529160200191611366565b820191906000526020600020905b81548152906001019060200180831161134957829003601f168201915b5050505050905090565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006113b882611f3f565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156113f557600080fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061143557506114348133613bb4565b5b151561144057600080fd5b826002600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561157a57600080fd5b505af115801561158e573d6000803e3d6000fd5b505050506040513d60208110156115a457600080fd5b8101908080519060200190929190505050905090565b6301ffc9a77c01000000000000000000000000000000000000000000000000000000000281565b60006060600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634378a6e3846040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b15801561167657600080fd5b505af115801561168a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060408110156116b457600080fd5b810190808051906020019092919080516401000000008111156116d657600080fd5b828101905060208101848111156116ec57600080fd5b815185602082028301116401000000008211171561170957600080fd5b505092919050505091509150915091565b806117253382614397565b151561173057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415151561176c57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156117a857600080fd5b6117b28483614444565b6117bc8483614547565b6117c683836147d6565b818373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a450505050565b3373ffffffffffffffffffffffffffffffffffffffff1661184785611f3f565b73ffffffffffffffffffffffffffffffffffffffff1614806118b657503373ffffffffffffffffffffffffffffffffffffffff16600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b806118c657506118c5336142ee565b5b15156118d157600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166326665c0f858585856040518563ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180858152602001848152602001806020018281038252848482818152602001925060200280828437820191505095505050505050600060405180830381600087803b15801561198f57600080fd5b505af11580156119a3573d6000803e3d6000fd5b5050505050505050565b806119b83382614397565b15156119c357600080fd5b6119df8484846020604051908101604052806000815250613727565b50505050565b600080611a068484600081811015156119fa57fe5b90506020020135611f3f565b91503373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161480611a8f57503373ffffffffffffffffffffffffffffffffffffffff16600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b80611a9f5750611a9e336142ee565b5b1515611aaa57600080fd5b600090505b83839050811015611b92573373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611b45578173ffffffffffffffffffffffffffffffffffffffff16611b228585848181101515611b1657fe5b90506020020135611f3f565b73ffffffffffffffffffffffffffffffffffffffff16141515611b4457600080fd5b5b60098484838181101515611b5557fe5b9050602002013590806001815401808255809150509060018203906000526020600020016000909192909190915055508080600101915050611aaf565b50505050565b6000806001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415915050919050565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611c6b5750611c6a336142ee565b5b1515611cdf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f6f6e6c79204f776e6572204f7220436f6e74726f6c6c6572000000000000000081525060200191505060405180910390fd5b611ce885611b98565b151515611cf457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611d3057600080fd5b600084111515611d3f57600080fd5b611d49818661484d565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a59c5b34868686866040518563ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180858152602001848152602001806020018281038252848482818152602001925060200280828437820191505095505050505050600060405180830381600087803b158015611e0757600080fd5b505af1158015611e1b573d6000803e3d6000fd5b505050505050505050565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611e875750611e86336142ee565b5b1515611efb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f6f6e6c79204f776e6572204f7220436f6e74726f6c6c6572000000000000000081525060200191505060405180910390fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611fb457600080fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515611ffa57600080fd5b600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b6060600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630f560cd76040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b1580156120cc57600080fd5b505af11580156120e0573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561210a57600080fd5b81019080805164010000000081111561212257600080fd5b8281019050602081018481111561213857600080fd5b815185602082028301116401000000008211171561215557600080fd5b5050929190505050905090565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561224d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260328152602001807f73656e6465722061646472657373206d757374206e6f7420626520746865206e81526020017f6577206f776e657227732061646472657373000000000000000000000000000081525060400191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a333600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6060600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156123d957602002820191906000526020600020905b8154815260200190600101908083116123c5575b50505050509050919050565b606080606080606080606080606060003073ffffffffffffffffffffffffffffffffffffffff16638462151c8c6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561249057600080fd5b505af11580156124a4573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060208110156124ce57600080fd5b8101908080516401000000008111156124e657600080fd5b828101905060208101848111156124fc57600080fd5b815185602082028301116401000000008211171561251957600080fd5b5050929190505050955085516040519080825280602002602001820160405280156125535781602001602082028038833980820191505090505b50945085516040519080825280602002602001820160405280156125865781602001602082028038833980820191505090505b50935085516040519080825280602002602001820160405280156125b95781602001602082028038833980820191505090505b509250600090505b855181101561285d57600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634378a6e3878381518110151561261657fe5b906020019060200201516040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b15801561267257600080fd5b505af1158015612686573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060408110156126b057600080fd5b810190808051906020019092919080516401000000008111156126d257600080fd5b828101905060208101848111156126e857600080fd5b815185602082028301116401000000008211171561270557600080fd5b5050929190505050868381518110151561271b57fe5b9060200190602002018194508281525050503073ffffffffffffffffffffffffffffffffffffffff1663b2564569878381518110151561275757fe5b906020019060200201516040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b1580156127b357600080fd5b505af11580156127c7573d6000803e3d6000fd5b505050506040513d60208110156127dd57600080fd5b810190808051906020019092919050505083828151811015156127fc57fe5b90602001906020020190151590811515815250506000825111156128505781600081518110151561282957fe5b90602001906020020151848281518110151561284157fe5b90602001906020020181815250505b80806001019150506125c1565b8585858599509950995099505050505050509193509193565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600060606128ac86611f3f565b93503373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061293557503373ffffffffffffffffffffffffffffffffffffffff16600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b806129455750612944336142ee565b5b151561295057600080fd5b60008888905011151561296257600080fd5b61296b8661319e565b15151561297757600080fd5b600092505b87879050831015612a08578373ffffffffffffffffffffffffffffffffffffffff166129bb89898681811015156129af57fe5b90506020020135611f3f565b73ffffffffffffffffffffffffffffffffffffffff161415156129dd57600080fd5b6129fb8489898681811015156129ef57fe5b905060200201356148f3565b828060010193505061297c565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634378a6e3876040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b158015612a9957600080fd5b505af1158015612aad573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506040811015612ad757600080fd5b81019080805190602001909291908051640100000000811115612af957600080fd5b82810190506020810184811115612b0f57600080fd5b8151856020820283011164010000000082111715612b2c57600080fd5b50509291905050508092508193505050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166326665c0f8787846040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018084815260200183815260200180602001828103825283818151815260200191508051906020019060200280838360005b83811015612bf7578082015181840152602081019050612bdc565b50505050905001945050505050600060405180830381600087803b158015612c1e57600080fd5b505af1158015612c32573d6000803e3d6000fd5b505050505050505050505050565b606060078054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612cd85780601f10612cad57610100808354040283529160200191612cd8565b820191906000526020600020905b815481529060010190602001808311612cbb57829003601f168201915b5050505050905090565b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515612d1d57600080fd5b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051808215151515815260200191505060405180910390a35050565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612f0b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001807f73656e6465722061646472657373206d75737420626520746865206f776e657281526020017f277320616464726573730000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff1614151515612fb0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f636f6e74726f6c6c65722061646472657373206d757374206e6f74206265203081525060200191505060405180910390fd5b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561309c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260328152602001807f636f6e74726f6c6c65722061646472657373206d757374206e6f74206265207481526020017f6865206f776e657227732061646472657373000000000000000000000000000081525060400191505060405180910390fd5b600090505b600c805490508160ff161015613133578173ffffffffffffffffffffffffffffffffffffffff16600c8260ff168154811015156130da57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156131265761319a565b80806001019150506130a1565b600c8290806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b5050565b600080600090505b6009805490508110156131ea57826009828154811015156131c357fe5b906000526020600020015414156131dd57600191506131ef565b80806001019150506131a6565b600091505b50919050565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806132585750613257336142ee565b5b15156132cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f6f6e6c79204f776e6572204f7220436f6e74726f6c6c6572000000000000000081525060200191505060405180910390fd5b600090505b868690508110156134ba576008600084848481811015156132ee57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020878783818110151561335357fe5b905060200201359080600181540180825580915050906001820390600052602060002001600090919290919091505550828282818110151561339157fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff166001600089898581811015156133c057fe5b90506020020135815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550868682818110151561342157fe5b90506020020135838383818110151561343657fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a480806001019150506132d1565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631f800f75888888886040518563ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018060200183810383528787828181526020019250602002808284378201915050838103825285858281815260200192506020028082843782019150509650505050505050600060405180830381600087803b15801561358d57600080fd5b505af11580156135a1573d6000803e3d6000fd5b5050505050505050505050565b6060600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561369b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001807f73656e6465722061646472657373206d75737420626520746865206f776e657281526020017f277320616464726573730000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600c80548060200260200160405190810160405280929190818152602001828054801561371d57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116136d3575b5050505050905090565b816137323382614397565b151561373d57600080fd5b61374885858561171a565b613754858585856149bf565b151561375f57600080fd5b5050505050565b606061377182611b98565b151561377c57600080fd5b61382860058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156138155780601f106137ea57610100808354040283529160200191613815565b820191906000526020600020905b8154815290600101906020018083116137f857829003601f168201915b505050505061382384614be1565b614dbe565b9050919050565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480613890575061388f336142ee565b5b1515613904576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f6f6e6c79204f776e6572204f7220436f6e74726f6c6c6572000000000000000081525060200191505060405180910390fd5b80600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b3373ffffffffffffffffffffffffffffffffffffffff1661398e82611f3f565b73ffffffffffffffffffffffffffffffffffffffff1614806139fd57503373ffffffffffffffffffffffffffffffffffffffff16600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b80613a0d5750613a0c336142ee565b5b1515613a1857600080fd5b613a2181614f8f565b50565b600080613a45848460008181101515613a3957fe5b90506020020135611f3f565b91503373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161480613ace57503373ffffffffffffffffffffffffffffffffffffffff16600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b80613ade5750613add336142ee565b5b1515613ae957600080fd5b600090505b83839050811015613bae573373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415613b84578173ffffffffffffffffffffffffffffffffffffffff16613b618585848181101515613b5557fe5b90506020020135611f3f565b73ffffffffffffffffffffffffffffffffffffffff16141515613b8357600080fd5b5b613ba18484838181101515613b9557fe5b90506020020135614f8f565b8080600101915050613aee565b50505050565b600080600073ffffffffffffffffffffffffffffffffffffffff16600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515613d4757600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663c4552791866040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015613ce657600080fd5b505af1158015613cfa573d6000803e3d6000fd5b505050506040513d6020811015613d1057600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff161415613d465760019150613d54565b5b613d518484615067565b91505b5092915050565b60606009805480602002602001604051908101604052809291908181526020018280548015613da957602002820191906000526020600020905b815481526020019060010190808311613d95575b5050505050905090565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515613e9e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001807f73656e6465722061646472657373206d75737420626520746865206f776e657281526020017f277320616464726573730000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff1614151515613f69576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001807f6e6577206f776e65722061646472657373206d757374206e6f7420626520746881526020017f65206f776e65722773206164647265737300000000000000000000000000000081525060400191505060405180910390fd5b80600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561409a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001807f73656e6465722061646472657373206d75737420626520746865206f776e657281526020017f277320616464726573730000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff161415151561413f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f636f6e74726f6c6c65722061646472657373206d757374206e6f74206265203081525060200191505060405180910390fd5b600090505b600c805490508160ff161015614211578173ffffffffffffffffffffffffffffffffffffffff16600c8260ff1681548110151561417d57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561420457600c8160ff168154811015156141d657fe5b9060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555b8080600101915050614144565b5050565b3373ffffffffffffffffffffffffffffffffffffffff1661423582611f3f565b73ffffffffffffffffffffffffffffffffffffffff1614806142a457503373ffffffffffffffffffffffffffffffffffffffff16600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b806142b457506142b3336142ee565b5b15156142bf57600080fd5b600981908060018154018082558091505090600182039060005260206000200160009091929091909150555050565b600080600090505b600c805490508160ff16101561438c578273ffffffffffffffffffffffffffffffffffffffff16600c8260ff1681548110151561432f57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561437f5760019150614391565b80806001019150506142f6565b600091505b50919050565b6000806143a383611f3f565b90506143ae8361319e565b15614438578073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061442057508373ffffffffffffffffffffffffffffffffffffffff1661440884611370565b73ffffffffffffffffffffffffffffffffffffffff16145b8061443157506144308185613bb4565b5b915061443d565b600091505b5092915050565b8173ffffffffffffffffffffffffffffffffffffffff1661446482611f3f565b73ffffffffffffffffffffffffffffffffffffffff1614151561448657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156145435760006002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5050565b600080600061455685856150fb565b600092505b83600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020848154811015156145a857fe5b9060005260206000200154141580156146025750600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905083105b1561461457828060010193505061455b565b61466a6001600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905061519490919063ffffffff16565b9150600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811015156146b857fe5b9060005260206000200154905080600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208481548110151561471257fe5b90600052602060002001819055506000600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208381548110151561476e57fe5b9060005260206000200181905550600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054809190600190036147ce9190615378565b505050505050565b6147e082826151ad565b600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190806001815401808255809150509060018203906000526020600020016000909192909190915055505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561488957600080fd5b61489382826147d6565b808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b6148fc8161319e565b15151561490857600080fd5b6149128282615271565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634cc82215826040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b1580156149a357600080fd5b505af11580156149b7573d6000803e3d6000fd5b505050505050565b6000806149e18573ffffffffffffffffffffffffffffffffffffffff166152e5565b15156149f05760019150614bd8565b8473ffffffffffffffffffffffffffffffffffffffff1663150b7a02338887876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015614ae5578082015181840152602081019050614aca565b50505050905090810190601f168015614b125780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015614b3457600080fd5b505af1158015614b48573d6000803e3d6000fd5b505050506040513d6020811015614b5e57600080fd5b8101908080519060200190929190505050905063150b7a027c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505b50949350505050565b6060600060606000806060600060649550856040519080825280601f01601f191660200182016040528015614c255781602001602082028038833980820191505090505b509450600093505b600088141515614cc457600a88811515614c4357fe5b069250600a88811515614c5257fe5b049750826030017f0100000000000000000000000000000000000000000000000000000000000000028585806001019650815181101515614c8f57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350614c2d565b836040519080825280601f01601f191660200182016040528015614cf75781602001602082028038833980820191505090505b509150600090505b83811015614db05784816001860303815181101515614d1a57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000028282815181101515614d7357fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050614cff565b819650505050505050919050565b606080606080606060008088955087945084518651016040519080825280601f01601f191660200182016040528015614e065781602001602082028038833980820191505090505b50935083925060009150600090505b8551811015614ec8578581815181101515614e2c57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000028383806001019450815181101515614e8b57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050614e15565b600090505b8451811015614f80578481815181101515614ee457fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000028383806001019450815181101515614f4357fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050614ecd565b82965050505050505092915050565b60008060008092505b83600984815481101515614fa857fe5b906000526020600020015414158015614fc5575060098054905083105b15614fd7578280600101935050614f98565b614ff0600160098054905061519490919063ffffffff16565b915060098281548110151561500157fe5b906000526020600020015490508060098481548110151561501e57fe5b9060005260206000200181905550600060098381548110151561503d57fe5b906000526020600020018190555060098054809190600190036150609190615378565b5050505050565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b8173ffffffffffffffffffffffffffffffffffffffff1661511b82611f3f565b73ffffffffffffffffffffffffffffffffffffffff1614151561513d57600080fd5b60006001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60008282111515156151a257fe5b818303905092915050565b600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561521b57600080fd5b816001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b61527b8282614444565b6152858282614547565b80600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b600080823b905060008111915050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061533957803560ff1916838001178555615367565b82800160010185558215615367579182015b8281111561536657823582559160200191906001019061534b565b5b50905061537491906153a4565b5090565b81548183558181111561539f5781836000526020600020918201910161539e91906153a4565b5b505050565b6153c691905b808211156153c25760008160009055506001016153aa565b5090565b905600a165627a7a723058205f7a254d806fa9ff8c580a808cca8c678c215855888e07972849443107f2d4890029"}