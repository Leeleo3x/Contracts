{"Runs": "200", "SwarmSource": "bzzr://6fca65b952a9e3998264743663b8396d0a4eb2e6b7580ab4ca78c0e485ae40ab", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"_jingleId\",\"type\":\"uint256\"}],\"name\":\"getSamplesForJingle\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_jingleId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_marketplace\",\"type\":\"address\"}],\"name\":\"setMarketplaceContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numOfJingles\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_jingleId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cryptoJingles\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"soundEffects\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getAllJingles\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"jingles\",\"type\":\"uint256[5]\"},{\"name\":\"jingleTypes\",\"type\":\"uint256[5]\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"author\",\"type\":\"string\"}],\"name\":\"composeJingle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_jingleId\",\"type\":\"uint256\"},{\"name\":\"_effectParams\",\"type\":\"uint256[]\"}],\"name\":\"addSoundEffect\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_jingleId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_jingleId\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approveAndSell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_jingleId\",\"type\":\"uint256\"}],\"name\":\"getMetaInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_jingleId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"jinglesInfo\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"author\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cryptoJingles\",\"type\":\"address\"}],\"name\":\"setCryptoJinglesContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"uniqueJingles\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketplaceContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"jingleId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"effectParams\",\"type\":\"uint256[]\"}],\"name\":\"EffectAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"jingleId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"samples\",\"type\":\"uint256[5]\"},{\"indexed\":false,\"name\":\"jingleTypes\",\"type\":\"uint256[5]\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"author\",\"type\":\"string\"}],\"name\":\"Composed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.19+commit.c4cbbb05", "ConstructorArguments": "", "SourceCode": "pragma solidity ^0.4.18;\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract ERC721 {\r\n    function implementsERC721() public pure returns (bool);\r\n    function totalSupply() public view returns (uint256 total);\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function ownerOf(uint256 _tokenId) public view returns (address owner);\r\n    function approve(address _to, uint256 _tokenId) public;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n    function transfer(address _to, uint256 _tokenId) public;\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n}\r\n\r\ncontract SampleStorage is Ownable {\r\n    \r\n    struct Sample {\r\n        string ipfsHash;\r\n        uint rarity;\r\n    }\r\n    \r\n    mapping (uint => Sample) sampleTypes;\r\n    \r\n    uint public numOfSampleTypes;\r\n    \r\n    uint public numOfCommon;\r\n    uint public numOfRare;\r\n    uint public numOfLegendary;\r\n    uint public numOfMythical;\r\n    \r\n    function addNewSampleType(string _ipfsHash, uint _rarityType) public onlyOwner {\r\n        \r\n        if (_rarityType == 0) {\r\n            numOfCommon++;\r\n        } else if (_rarityType == 1) {\r\n            numOfRare++;\r\n        } else if(_rarityType == 2) {\r\n            numOfLegendary++;\r\n        } else if(_rarityType == 3) {\r\n            numOfMythical++;\r\n        }\r\n        \r\n        sampleTypes[numOfSampleTypes] = Sample({\r\n           ipfsHash: _ipfsHash,\r\n           rarity: _rarityType\r\n        });\r\n        \r\n        numOfSampleTypes++;\r\n    }\r\n    \r\n    function getType(uint _randomNum) public view returns (uint) {\r\n        uint range = 0;\r\n        \r\n        if (_randomNum > 0 && _randomNum < 600) {\r\n            range = 600 / numOfCommon;\r\n            return _randomNum / range;\r\n            \r\n        } else if(_randomNum >= 600 && _randomNum < 900) {\r\n            range = 300 / numOfRare;\r\n            return _randomNum / range;\r\n        } else {\r\n            range = 100 / numOfLegendary;\r\n            return _randomNum / range;\r\n        }\r\n    }\r\n    \r\n}\r\n\r\ncontract Jingle is Ownable, ERC721 {\r\n    \r\n    struct MetaInfo {\r\n        string name;\r\n        string author;\r\n    }\r\n    \r\n    mapping (uint => address) internal tokensForOwner;\r\n    mapping (uint => address) internal tokensForApproved;\r\n    mapping (address => uint[]) internal tokensOwned;\r\n    mapping (uint => uint) internal tokenPosInArr;\r\n    \r\n    mapping(uint => uint[]) internal samplesInJingle;\r\n    mapping(uint => MetaInfo) public jinglesInfo;\r\n    \r\n    mapping(bytes32 => bool) public uniqueJingles;\r\n    \r\n    mapping(uint => uint[]) public soundEffects;\r\n    \r\n    uint public numOfJingles;\r\n    \r\n    address public cryptoJingles;\r\n    Marketplace public marketplaceContract;\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event EffectAdded(uint indexed jingleId, uint[] effectParams);\r\n    event Composed(uint indexed jingleId, address indexed owner, \r\n                uint[5] samples, uint[5] jingleTypes, string name, string author);\r\n    \r\n    modifier onlyCryptoJingles() {\r\n        require(msg.sender == cryptoJingles);\r\n        _;\r\n    }\r\n    \r\n    function Jingle() public {\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _jingleId) public {\r\n        require(tokensForOwner[_jingleId] != 0x0);\r\n        require(tokensForOwner[_jingleId] == msg.sender);\r\n        \r\n        tokensForApproved[_jingleId] = 0x0;\r\n        \r\n        removeJingle(msg.sender, _jingleId);\r\n        addJingle(_to, _jingleId);\r\n        \r\n        Approval(msg.sender, 0, _jingleId);\r\n        Transfer(msg.sender, _to, _jingleId);\r\n    }\r\n    \r\n    \r\n    function approve(address _to, uint256 _jingleId) public {\r\n        require(tokensForOwner[_jingleId] != 0x0);\r\n        require(ownerOf(_jingleId) == msg.sender);\r\n        require(_to != msg.sender);\r\n        \r\n        if (_getApproved(_jingleId) != 0x0 || _to != 0x0) {\r\n            tokensForApproved[_jingleId] = _to;\r\n            Approval(msg.sender, _to, _jingleId);\r\n        }\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _jingleId) public {\r\n        require(tokensForOwner[_jingleId] != 0x0);\r\n        require(_getApproved(_jingleId) == msg.sender);\r\n        require(ownerOf(_jingleId) == _from);\r\n        require(_to != 0x0);\r\n        \r\n        tokensForApproved[_jingleId] = 0x0;\r\n        \r\n        removeJingle(_from, _jingleId);\r\n        addJingle(_to, _jingleId);\r\n        \r\n        Approval(_from, 0, _jingleId);\r\n        Transfer(_from, _to, _jingleId);\r\n        \r\n    }\r\n    \r\n    function approveAndSell(uint _jingleId, uint _amount) public {\r\n        approve(address(marketplaceContract), _jingleId);\r\n        \r\n        marketplaceContract.sell(msg.sender, _jingleId, _amount);\r\n    }\r\n    \r\n    function composeJingle(address _owner, uint[5] jingles, \r\n            uint[5] jingleTypes, string name, string author) public onlyCryptoJingles {\r\n        \r\n        uint _jingleId = numOfJingles;\r\n        \r\n        uniqueJingles[keccak256(jingles)] = true;\r\n        \r\n        tokensForOwner[_jingleId] = _owner;\r\n        \r\n        tokensOwned[_owner].push(_jingleId);\r\n        \r\n        samplesInJingle[_jingleId] = jingles;\r\n        \r\n        tokenPosInArr[_jingleId] = tokensOwned[_owner].length - 1;\r\n        \r\n        if (bytes(author).length == 0) {\r\n            author = \"Soundtoshi Nakajingles\";\r\n        }\r\n        \r\n        jinglesInfo[numOfJingles] = MetaInfo({\r\n            name: name,\r\n            author: author\r\n        });\r\n        \r\n        Composed(numOfJingles, _owner, jingles, jingleTypes, name, author);\r\n        \r\n        numOfJingles++;\r\n    }\r\n    \r\n    function addSoundEffect(uint _jingleId, uint[] _effectParams) external {\r\n        require(msg.sender == ownerOf(_jingleId));\r\n        \r\n        soundEffects[_jingleId] = _effectParams;\r\n        \r\n        EffectAdded(_jingleId, _effectParams);\r\n    }\r\n    \r\n    function implementsERC721() public pure returns (bool) {\r\n        return true;\r\n    }\r\n    \r\n    function totalSupply() public view returns (uint256) {\r\n        return numOfJingles;\r\n    }\r\n    \r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return tokensOwned[_owner].length;\r\n    }\r\n    \r\n    function ownerOf(uint256 _jingleId) public view returns (address) {\r\n        return tokensForOwner[_jingleId];\r\n    }\r\n    \r\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\r\n        return tokensOwned[_owner][_index];\r\n    }\r\n    \r\n    function getSamplesForJingle(uint _jingleId) external view returns(uint[]) {\r\n        return samplesInJingle[_jingleId];\r\n    }\r\n    \r\n    function getAllJingles(address _owner) external view returns(uint[]) {\r\n        return tokensOwned[_owner];\r\n    }\r\n    \r\n    function getMetaInfo(uint _jingleId) external view returns(string, string) {\r\n        return (jinglesInfo[_jingleId].name, jinglesInfo[_jingleId].author);\r\n    }\r\n    \r\n    function _getApproved(uint _jingleId) internal view returns (address) {\r\n        return tokensForApproved[_jingleId];\r\n    }\r\n    \r\n     // Internal functions of the contract\r\n    \r\n    function addJingle(address _owner, uint _jingleId) internal {\r\n        tokensForOwner[_jingleId] = _owner;\r\n        \r\n        tokensOwned[_owner].push(_jingleId);\r\n        \r\n        tokenPosInArr[_jingleId] = tokensOwned[_owner].length - 1;\r\n    }\r\n    \r\n    // find who owns that jingle and at what position is it in the owners arr \r\n    // Swap that token with the last one in arr and delete the end of arr\r\n    function removeJingle(address _owner, uint _jingleId) internal {\r\n        uint length = tokensOwned[_owner].length;\r\n        uint index = tokenPosInArr[_jingleId];\r\n        uint swapToken = tokensOwned[_owner][length - 1];\r\n\r\n        tokensOwned[_owner][index] = swapToken;\r\n        tokenPosInArr[swapToken] = index;\r\n\r\n        delete tokensOwned[_owner][length - 1];\r\n        tokensOwned[_owner].length--;\r\n    }\r\n    \r\n    // Owner functions \r\n    function setCryptoJinglesContract(address _cryptoJingles) public onlyOwner {\r\n        require(cryptoJingles == 0x0);\r\n        \r\n        cryptoJingles = _cryptoJingles;\r\n    }\r\n    \r\n    function setMarketplaceContract(address _marketplace) public onlyOwner {\r\n        require(address(marketplaceContract) == 0x0);\r\n        \r\n        marketplaceContract = Marketplace(_marketplace);\r\n    }\r\n}\r\n\r\ncontract Sample is Ownable {\r\n    \r\n    mapping (uint => address) internal tokensForOwner;\r\n    mapping (address => uint[]) internal tokensOwned;\r\n    mapping (uint => uint) internal tokenPosInArr;\r\n    \r\n    mapping (uint => uint) public tokenType;\r\n    \r\n    uint public numOfSamples;\r\n    \r\n    address public cryptoJingles;\r\n\r\n    SampleStorage public sampleStorage;\r\n    \r\n    event Mint(address indexed _to, uint256 indexed _tokenId);\r\n    \r\n    modifier onlyCryptoJingles() {\r\n        require(msg.sender == cryptoJingles);\r\n        _;\r\n    }\r\n    \r\n    function Sample(address _sampleStorage) public {\r\n        sampleStorage = SampleStorage(_sampleStorage);\r\n    }\r\n    \r\n    function mint(address _owner, uint _randomNum) public onlyCryptoJingles {\r\n        \r\n        uint sampleType = sampleStorage.getType(_randomNum);\r\n        \r\n        addSample(_owner, sampleType, numOfSamples);\r\n        \r\n        Mint(_owner, numOfSamples);\r\n        \r\n        numOfSamples++;\r\n    }\r\n    \r\n    //TODO: check this again\r\n    // find who owns that sample and at what position is it in the owners arr \r\n    // Swap that token with the last one in arr and delete the end of arr\r\n    function removeSample(address _owner, uint _sampleId) public onlyCryptoJingles {\r\n        uint length = tokensOwned[_owner].length;\r\n        uint index = tokenPosInArr[_sampleId];\r\n        uint swapToken = tokensOwned[_owner][length - 1];\r\n\r\n        tokensOwned[_owner][index] = swapToken;\r\n        tokenPosInArr[swapToken] = index;\r\n\r\n        delete tokensOwned[_owner][length - 1];\r\n        tokensOwned[_owner].length--;\r\n        \r\n        tokensForOwner[_sampleId] = 0x0;\r\n        \r\n    }\r\n    \r\n    function getSamplesForOwner(address _owner) public constant returns (uint[]) {\r\n        return tokensOwned[_owner];\r\n    }\r\n    \r\n    function getTokenType(uint _sampleId) public constant returns (uint) {\r\n        return tokenType[_sampleId];\r\n    }\r\n    \r\n    function isTokenOwner(uint _tokenId, address _user) public constant returns(bool) {\r\n        return tokensForOwner[_tokenId] == _user;\r\n    }\r\n    \r\n    function getAllSamplesForOwner(address _owner) public constant returns(uint[]) {\r\n        uint[] memory samples = tokensOwned[_owner];\r\n        \r\n        uint[] memory usersSamples = new uint[](samples.length * 2);\r\n        \r\n        uint j = 0;\r\n        \r\n        for(uint i = 0; i < samples.length; ++i) {\r\n            usersSamples[j] = samples[i];\r\n            usersSamples[j + 1] = tokenType[samples[i]];\r\n            j += 2;\r\n        }\r\n        \r\n        return usersSamples;\r\n    }\r\n    \r\n    // Internal functions of the contract\r\n    \r\n    function addSample(address _owner, uint _sampleType, uint _sampleId) internal {\r\n        tokensForOwner[_sampleId] = _owner;\r\n        \r\n        tokensOwned[_owner].push(_sampleId);\r\n        \r\n        tokenType[_sampleId] = _sampleType;\r\n        \r\n        tokenPosInArr[_sampleId] = tokensOwned[_owner].length - 1;\r\n    }\r\n    \r\n     // Owner functions \r\n    // Set the crypto jingles contract can \r\n    function setCryptoJinglesContract(address _cryptoJingles) public onlyOwner {\r\n        require(cryptoJingles == 0x0);\r\n        \r\n        cryptoJingles = _cryptoJingles;\r\n    }\r\n}\r\n\r\ncontract CryptoJingles is Ownable {\r\n    \r\n    struct Purchase {\r\n        address user;\r\n        uint blockNumber;\r\n        bool revealed;\r\n        uint numSamples;\r\n        bool exists;\r\n    }\r\n    \r\n    event Purchased(address indexed user, uint blockNumber, uint numJingles, uint numOfPurchases);\r\n    event JinglesOpened(address byWhom, address jingleOwner, uint currBlockNumber);\r\n    \r\n    mapping (uint => bool) public isAlreadyUsed;\r\n    \r\n    mapping(address => string) public authors;\r\n\r\n    uint numOfPurchases;\r\n    \r\n    uint MAX_SAMPLES_PER_PURCHASE = 15;\r\n    uint SAMPLE_PRICE = 10 ** 15;\r\n    uint SAMPLES_PER_JINGLE = 5;\r\n    uint NUM_SAMPLE_RANGE = 1000;\r\n    \r\n    Sample public sampleContract;\r\n    Jingle public jingleContract;\r\n    \r\n    function CryptoJingles(address _sample, address _jingle) public {\r\n        numOfPurchases = 0;\r\n        sampleContract = Sample(_sample);\r\n        jingleContract = Jingle(_jingle);\r\n    }\r\n    \r\n    function buySamples(uint _numSamples, address _to) public payable {\r\n        require(_numSamples <= MAX_SAMPLES_PER_PURCHASE);\r\n        require(msg.value >= (SAMPLE_PRICE * _numSamples));\r\n        \r\n         for (uint i = 0; i < _numSamples; ++i) {\r\n            \r\n            bytes32 blockHash = block.blockhash(block.number - 1);\r\n            \r\n            uint randomNum = randomGen(blockHash, i);\r\n            sampleContract.mint(_to, randomNum);\r\n        }\r\n        \r\n        Purchased(_to, block.number, _numSamples, numOfPurchases);\r\n        \r\n        numOfPurchases++;\r\n    }\r\n    \r\n    function composeJingle(string name, uint[5] samples) public {\r\n        require(jingleContract.uniqueJingles(keccak256(samples)) == false);\r\n        \r\n        //check if you own all the 5 samples \r\n        for (uint i = 0; i < SAMPLES_PER_JINGLE; ++i) {\r\n            bool isOwner = sampleContract.isTokenOwner(samples[i], msg.sender);\r\n            \r\n            require(isOwner == true && isAlreadyUsed[samples[i]] == false);\r\n            \r\n            isAlreadyUsed[samples[i]] = true;\r\n        }\r\n        \r\n        uint[5] memory sampleTypes;\r\n        \r\n        // remove all the samples from your Ownership\r\n        for (uint j = 0; j < SAMPLES_PER_JINGLE; ++j) {\r\n            sampleTypes[j] = sampleContract.tokenType(samples[j]);\r\n            sampleContract.removeSample(msg.sender, samples[j]);\r\n        }\r\n        \r\n        //create a new jingle containing those 5 samples\r\n        jingleContract.composeJingle(msg.sender, samples, sampleTypes, name, authors[msg.sender]);\r\n    }\r\n    \r\n    // Addresses can set their name when composing jingles\r\n    function setAuthorName(string _name) public {\r\n        authors[msg.sender] = _name;\r\n    }\r\n    \r\n    function randomGen(bytes32 blockHash, uint seed) constant public returns (uint randomNumber) {\r\n        return (uint(keccak256(blockHash, block.timestamp, numOfPurchases, seed )) % NUM_SAMPLE_RANGE);\r\n    }\r\n    \r\n    // The only ether kept on this contract are owner money for samples\r\n    function withdraw(uint _amount) public onlyOwner {\r\n        require(_amount <= this.balance);\r\n        \r\n        msg.sender.transfer(_amount);\r\n    }\r\n    \r\n}\r\n\r\ncontract Marketplace is Ownable {\r\n    \r\n    modifier onlyJingle() {\r\n        require(msg.sender == address(jingleContract));\r\n        _;\r\n    }\r\n    \r\n    struct Order {\r\n        uint price;\r\n        address seller;\r\n        uint timestamp;\r\n        bool exists;\r\n    }\r\n    \r\n    event SellOrder(address owner, uint jingleId, uint price);\r\n    event Bought(uint jingleId, address buyer, uint price);\r\n    event Canceled(address owner, uint jingleId);\r\n    \r\n    uint public numOrders;\r\n    uint public ownerBalance;\r\n    \r\n    uint OWNERS_CUT = 3; // 3 percent of every sale goes to owner\r\n    \r\n    mapping (uint => Order) public sellOrders;\r\n    mapping(uint => uint) public positionOfJingle;\r\n    \r\n    uint[] public jinglesOnSale;\r\n    \r\n    Jingle public jingleContract;\r\n    \r\n    function Marketplace(address _jingle) public {\r\n        jingleContract = Jingle(_jingle);\r\n        ownerBalance = 0;\r\n    }\r\n\r\n    function sell(address _owner, uint _jingleId, uint _amount) public onlyJingle {\r\n        require(_amount > 100);\r\n        require(sellOrders[_jingleId].exists == false);\r\n        \r\n        sellOrders[_jingleId] = Order({\r\n           price: _amount,\r\n           seller: _owner,\r\n           timestamp: now,\r\n           exists: true\r\n        });\r\n        \r\n        numOrders++;\r\n        \r\n        // set for iterating\r\n        jinglesOnSale.push(_jingleId);\r\n        positionOfJingle[_jingleId] = jinglesOnSale.length - 1;\r\n        \r\n        //transfer ownership \r\n        jingleContract.transferFrom(_owner, this, _jingleId);\r\n        \r\n        //Fire an sell event\r\n        SellOrder(_owner, _jingleId, _amount);\r\n    }\r\n    \r\n    function buy(uint _jingleId) public payable {\r\n        require(sellOrders[_jingleId].exists == true);\r\n        require(msg.value >= sellOrders[_jingleId].price);\r\n        \r\n        sellOrders[_jingleId].exists = false;\r\n        \r\n        numOrders--;\r\n        \r\n        //delete stuff for iterating \r\n        removeOrder(_jingleId);\r\n        \r\n        //transfer ownership \r\n        jingleContract.transfer(msg.sender, _jingleId);\r\n        \r\n        // transfer money to seller\r\n        uint price = sellOrders[_jingleId].price;\r\n        \r\n        uint threePercent = (price / 100) * OWNERS_CUT;\r\n        \r\n        sellOrders[_jingleId].seller.transfer(price - threePercent);\r\n        \r\n        ownerBalance += threePercent;\r\n        \r\n        //fire and event\r\n        Bought(_jingleId, msg.sender, msg.value);\r\n    }\r\n    \r\n    function cancel(uint _jingleId) public {\r\n        require(sellOrders[_jingleId].exists == true);\r\n        require(sellOrders[_jingleId].seller == msg.sender);\r\n        \r\n        sellOrders[_jingleId].exists = false;\r\n        \r\n        numOrders--;\r\n        \r\n        //delete stuff for iterating \r\n        removeOrder(_jingleId);\r\n        \r\n        jingleContract.transfer(msg.sender, _jingleId);\r\n        \r\n        //fire and event\r\n        Canceled(msg.sender, _jingleId);\r\n    }\r\n    \r\n    function removeOrder(uint _jingleId) internal {\r\n        uint length = jinglesOnSale.length;\r\n        uint index = positionOfJingle[_jingleId];\r\n        uint lastOne = jinglesOnSale[length - 1];\r\n\r\n        jinglesOnSale[index] = lastOne;\r\n        positionOfJingle[lastOne] = index;\r\n\r\n        delete jinglesOnSale[length - 1];\r\n        jinglesOnSale.length--;\r\n    }\r\n    \r\n    //Owners functions \r\n    function withdraw(uint _amount) public onlyOwner {\r\n        require(_amount <= ownerBalance);\r\n        \r\n        msg.sender.transfer(_amount);\r\n    }\r\n    \r\n}", "OptimizationUsed": "1", "ContractName": "Jingle", "ByteCode": "0x60606040526004361061013d5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663085bcb348114610142578063095ea7b3146101ab5780631051db34146101cf5780631102610e146101f657806318160ddd14610215578063210ab6af1461023a57806323b872dd1461024d5780632535b150146102755780632f745c59146102a457806342e296d3146102c657806349ee2ae1146102df5780635a059a44146102fe578063626a0e1c146103ec5780636352211e1461040e5780636f2feb0a1461042457806370a082311461043d578063785330461461045c5780638da5cb5b14610553578063a9059cbb14610566578063b78e4bfd14610588578063ba1803c1146106a1578063cfac2280146106c0578063d1bb5cf1146106d6578063f2fde38b146106e9575b600080fd5b341561014d57600080fd5b610158600435610708565b60405160208082528190810183818151815260200191508051906020019060200280838360005b8381101561019757808201518382015260200161017f565b505050509050019250505060405180910390f35b34156101b657600080fd5b6101cd600160a060020a0360043516602435610779565b005b34156101da57600080fd5b6101e2610873565b604051901515815260200160405180910390f35b341561020157600080fd5b6101cd600160a060020a0360043516610879565b341561022057600080fd5b6102286108cc565b60405190815260200160405180910390f35b341561024557600080fd5b6102286108d2565b341561025857600080fd5b6101cd600160a060020a03600435811690602435166044356108d8565b341561028057600080fd5b610288610a0b565b604051600160a060020a03909116815260200160405180910390f35b34156102af57600080fd5b610228600160a060020a0360043516602435610a1a565b34156102d157600080fd5b610228600435602435610a52565b34156102ea57600080fd5b610158600160a060020a0360043516610a80565b341561030957600080fd5b6101cd60048035600160a060020a03169060c46024600560a06040519081016040529190828260a080828437820191505050505091908060a001906005806020026040519081016040529190828260a0808284375093959460208082019550903586018082019450359250829150601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f016020809104026020016040519081016040528181529291906020840183838082843750949650610b0195505050505050565b34156103f757600080fd5b6101cd600480359060248035908101910135610e32565b341561041957600080fd5b610288600435610ecc565b341561042f57600080fd5b6101cd600435602435610ee7565b341561044857600080fd5b610228600160a060020a0360043516610f8d565b341561046757600080fd5b610472600435610fa8565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b838110156104b357808201518382015260200161049b565b50505050905090810190601f1680156104e05780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b838110156105165780820151838201526020016104fe565b50505050905090810190601f1680156105435780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b341561055e57600080fd5b610288611125565b341561057157600080fd5b6101cd600160a060020a0360043516602435611134565b341561059357600080fd5b61059e60043561122c565b60405160408082528354600260001961010060018416150201909116049082018190528190602082019060608301908690801561061c5780601f106105f15761010080835404028352916020019161061c565b820191906000526020600020905b8154815290600101906020018083116105ff57829003601f168201915b50508381038252845460026000196101006001841615020190911604808252602090910190859080156106905780601f1061066557610100808354040283529160200191610690565b820191906000526020600020905b81548152906001019060200180831161067357829003601f168201915b505094505050505060405180910390f35b34156106ac57600080fd5b6101cd600160a060020a0360043516611241565b34156106cb57600080fd5b6101e2600435611294565b34156106e157600080fd5b6102886112a9565b34156106f457600080fd5b6101cd600160a060020a03600435166112b8565b6107106114db565b6005600083815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561076d57602002820191906000526020600020905b815481526020019060010190808311610759575b50505050509050919050565b600081815260016020526040902054600160a060020a0316151561079c57600080fd5b33600160a060020a03166107af82610ecc565b600160a060020a0316146107c257600080fd5b33600160a060020a031682600160a060020a0316141515156107e357600080fd5b6107ec81611346565b600160a060020a031615158061080a5750600160a060020a03821615155b1561086f57600081815260026020526040908190208054600160a060020a031916600160a060020a03858116918217909255839290913316907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925905160405180910390a45b5050565b60015b90565b60005433600160a060020a0390811691161461089457600080fd5b600b54600160a060020a0316156108aa57600080fd5b600b8054600160a060020a031916600160a060020a0392909216919091179055565b60095490565b60095481565b600081815260016020526040902054600160a060020a031615156108fb57600080fd5b33600160a060020a031661090e82611346565b600160a060020a03161461092157600080fd5b82600160a060020a031661093482610ecc565b600160a060020a03161461094757600080fd5b600160a060020a038216151561095c57600080fd5b60008181526002602052604090208054600160a060020a03191690556109828382611361565b61098c8282611455565b80600084600160a060020a03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a48082600160a060020a031684600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b600a54600160a060020a031681565b600160a060020a0382166000908152600360205260408120805483908110610a3e57fe5b906000526020600020900154905092915050565b600860205281600052604060002081815481101515610a6d57fe5b6000918252602090912001549150829050565b610a886114db565b6003600083600160a060020a0316600160a060020a0316815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561076d57602002820191906000526020600020908154815260200190600101908083116107595750505050509050919050565b600a5460009033600160a060020a03908116911614610b1f57600080fd5b5060095460016007600087604051808260a080838360005b83811015610b4f578082015183820152602001610b37565b50505050905001915050604051908190039020815260208082019290925260409081016000908120805460ff19169415159490941790935583835260018083528184208054600160a060020a031916600160a060020a038c1690811790915584526003909252909120805490918101610bc883826114ed565b5060009182526020808320919091018390558282526005908190526040909120610bf3918790611516565b50600160a060020a0386166000908152600360209081526040808320548484526004909252909120600019909101905581511515610c625760408051908101604052601681527f536f756e64746f736869204e616b616a696e676c657300000000000000000000602082015291505b60408051908101604090815284825260208083018590526009546000908152600690915220815181908051610c9b929160200190611561565b50602082015181600101908051610cb6929160200190611561565b5090505085600160a060020a03166009547ff694211ca8ba6e3337bc7673a5d0eac47dfeccd1c87d198e471953a140f0855787878787604051808560a080838360005b83811015610d11578082015183820152602001610cf9565b5050505090500184600560200280838360005b83811015610d3c578082015183820152602001610d24565b505050509050018060200180602001838103835285818151815260200191508051906020019080838360005b83811015610d80578082015183820152602001610d68565b50505050905090810190601f168015610dad5780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b83811015610de3578082015183820152602001610dcb565b50505050905090810190601f168015610e105780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a3505060098054600101905550505050565b610e3b83610ecc565b600160a060020a031633600160a060020a0316141515610e5a57600080fd5b6000838152600860205260409020610e739083836115ce565b50827f30bfeded473cedfa7ea40edf6683ace99afa63d247ad6b2dca254b47550d3e12838360405160208082528082018390528190604082019085908502808284378201915050935050505060405180910390a2505050565b600090815260016020526040902054600160a060020a031690565b600b54610efd90600160a060020a031683610779565b600b54600160a060020a0316636a2724623384846040517c010000000000000000000000000000000000000000000000000000000063ffffffff8616028152600160a060020a03909316600484015260248301919091526044820152606401600060405180830381600087803b1515610f7557600080fd5b6102c65a03f11515610f8657600080fd5b5050505050565b600160a060020a031660009081526003602052604090205490565b610fb06114db565b610fb86114db565b6006600084815260200190815260200160002060000160066000858152602001908152602001600020600101818054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110795780601f1061104e57610100808354040283529160200191611079565b820191906000526020600020905b81548152906001019060200180831161105c57829003601f168201915b50505050509150808054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111155780601f106110ea57610100808354040283529160200191611115565b820191906000526020600020905b8154815290600101906020018083116110f857829003601f168201915b5050505050905091509150915091565b600054600160a060020a031681565b600081815260016020526040902054600160a060020a0316151561115757600080fd5b60008181526001602052604090205433600160a060020a0390811691161461117e57600080fd5b60008181526002602052604090208054600160a060020a03191690556111a43382611361565b6111ae8282611455565b80600033600160a060020a03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a48082600160a060020a031633600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b60066020526000908152604090206001810182565b60005433600160a060020a0390811691161461125c57600080fd5b600a54600160a060020a03161561127257600080fd5b600a8054600160a060020a031916600160a060020a0392909216919091179055565b60076020526000908152604090205460ff1681565b600b54600160a060020a031681565b60005433600160a060020a039081169116146112d357600080fd5b600160a060020a03811615156112e857600080fd5b600054600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008054600160a060020a031916600160a060020a0392909216919091179055565b600090815260026020526040902054600160a060020a031690565b600160a060020a0382166000818152600360208181526040808420805487865260048452918520549585529290915292919060001984018481106113a157fe5b6000918252602080832090910154600160a060020a03881683526003909152604090912080549192508291849081106113d657fe5b6000918252602080832090910192909255828152600482526040808220859055600160a060020a03881682526003909252208054600019850190811061141857fe5b60009182526020808320909101829055600160a060020a0387168252600390526040902080549061144d9060001983016114ed565b505050505050565b60008181526001602081815260408084208054600160a060020a031916600160a060020a0388169081179091558452600390915290912080549091810161149c83826114ed565b506000918252602080832091909101839055600160a060020a039093168152600383526040808220549282526004909352919091206000199091019055565b60206040519081016040526000815290565b81548183558181151161151157600083815260209020611511918101908301611609565b505050565b828054828255906000526020600020908101928215611551579160200282015b82811115611551578251825591602001919060010190611536565b5061155d929150611609565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106115a257805160ff1916838001178555611551565b828001600101855582156115515791820182811115611551578251825591602001919060010190611536565b828054828255906000526020600020908101928215611551579160200282015b828111156115515782358255916020019190600101906115ee565b61087691905b8082111561155d576000815560010161160f5600a165627a7a723058206fca65b952a9e3998264743663b8396d0a4eb2e6b7580ab4ca78c0e485ae40ab0029"}