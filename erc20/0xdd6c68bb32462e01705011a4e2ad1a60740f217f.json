{"Runs": "0", "SwarmSource": "bzzr://81828f9ae489ed77919587782a892cfe871396b934c3819f5804c4d9732b6c1e", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setTransferAgent\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setReleaseAgent\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintAgents\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setMintAgent\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setTokenInformation\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseTokenTransfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeMaster\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUpgradeState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"transferAgents\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"released\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canUpgrade\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"addApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUpgraded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releaseAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"setUpgradeAgent\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"subApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_master\",\"type\":\"address\"}],\"name\":\"changeUpgradeMaster\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isToken\",\"outputs\":[{\"name\":\"weAre\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_initialSupply\",\"type\":\"uint256\"},{\"name\":\"_decimals\",\"type\":\"uint8\"},{\"name\":\"_multisig\",\"type\":\"address\"},{\"name\":\"_mintable\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"newSymbol\",\"type\":\"string\"}],\"name\":\"UpdatedTokenInformation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"UpgradeAgentSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"MintingAgentChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.13+commit.fb4cb1a", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f000000000000000000000000800E1Dcc20D95e60fF8B3106e6EaA1cB73D5D16f00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000007487562696974730000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034842540000000000000000000000000000000000000000000000000000000000", "SourceCode": "pragma solidity ^0.4.13;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control \r\n * functions, this simplifies the implementation of \"user permissions\". \r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /** \r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner. \r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to. \r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    require(newOwner != address(0));\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal returns (uint) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint a, uint b) internal constant returns (uint) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint a, uint b) internal constant returns (uint) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20Basic {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint);\r\n  function transfer(address to, uint value) public returns (bool ok);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint);\r\n  function transferFrom(address from, address to, uint value) public returns (bool ok);\r\n  function approve(address spender, uint value) public returns (bool ok);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n/**\r\n * A token that defines fractional units as decimals.\r\n */\r\ncontract FractionalERC20 is ERC20 {\r\n\r\n  uint8 public decimals;\r\n\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint;\r\n\r\n  mapping(address => uint) balances;\r\n\r\n  /**\r\n   * Obsolete. Removed this check based on:\r\n   * https://blog.coinfabrik.com/smart-contract-short-address-attack-mitigation-failure/\r\n   * @dev Fix for the ERC20 short address attack.\r\n   *\r\n   * modifier onlyPayloadSize(uint size) {\r\n   *    require(msg.data.length >= size + 4);\r\n   *    _;\r\n   * }\r\n   */\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint _value) public returns (bool success) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint balance) {\r\n    return balances[_owner];\r\n  }\r\n  \r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract StandardToken is BasicToken, ERC20 {\r\n\r\n  /* Token supply got increased and a new owner received these tokens */\r\n  event Minted(address receiver, uint amount);\r\n\r\n  mapping (address => mapping (address => uint)) allowed;\r\n\r\n  /* Interface declaration */\r\n  function isToken() public constant returns (bool weAre) {\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\r\n    uint _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require(_value <= _allowance);\r\n    // SafeMath uses assert instead of require though, beware when using an analysis tool\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint _value) public returns (bool success) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses'\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require (_value == 0 || allowed[msg.sender][_spender] == 0);\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * Atomic increment of approved spending\r\n   *\r\n   * Works around https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   */\r\n  function addApproval(address _spender, uint _addedValue) public\r\n  returns (bool success) {\r\n      uint oldValue = allowed[msg.sender][_spender];\r\n      allowed[msg.sender][_spender] = oldValue.add(_addedValue);\r\n      Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n      return true;\r\n  }\r\n\r\n  /**\r\n   * Atomic decrement of approved spending.\r\n   *\r\n   * Works around https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   */\r\n  function subApproval(address _spender, uint _subtractedValue) public\r\n  returns (bool success) {\r\n\r\n      uint oldVal = allowed[msg.sender][_spender];\r\n\r\n      if (_subtractedValue > oldVal) {\r\n          allowed[msg.sender][_spender] = 0;\r\n      } else {\r\n          allowed[msg.sender][_spender] = oldVal.sub(_subtractedValue);\r\n      }\r\n      Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n      return true;\r\n  }\r\n  \r\n}\r\n\r\n/**\r\n * Define interface for releasing the token transfer after a successful crowdsale.\r\n */\r\ncontract ReleasableToken is StandardToken, Ownable {\r\n\r\n  /* The finalizer contract that allows lifting the transfer limits on this token */\r\n  address public releaseAgent;\r\n\r\n  /** A crowdsale contract can release us to the wild if ICO success. If false we are are in transfer lock up period.*/\r\n  bool public released = false;\r\n\r\n  /** Map of agents that are allowed to transfer tokens regardless of the lock down period. These are crowdsale contracts and possible the team multisig itself. */\r\n  mapping (address => bool) public transferAgents;\r\n\r\n  /**\r\n   * Set the contract that can call release and make the token transferable.\r\n   *\r\n   * Since the owner of this contract is (or should be) the crowdsale,\r\n   * it can only be called by a corresponding exposed API in the crowdsale contract in case of input error.\r\n   */\r\n  function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public {\r\n    // We don't do interface check here as we might want to have a normal wallet address to act as a release agent.\r\n    releaseAgent = addr;\r\n  }\r\n\r\n  /**\r\n   * Owner can allow a particular address (e.g. a crowdsale contract) to transfer tokens despite the lock up period.\r\n   */\r\n  function setTransferAgent(address addr, bool state) onlyOwner inReleaseState(false) public {\r\n    transferAgents[addr] = state;\r\n  }\r\n\r\n  /**\r\n   * One way function to release the tokens into the wild.\r\n   *\r\n   * Can be called only from the release agent that should typically be the finalize agent ICO contract.\r\n   * In the scope of the crowdsale, it is only called if the crowdsale has been a success (first milestone reached).\r\n   */\r\n  function releaseTokenTransfer() public onlyReleaseAgent {\r\n    released = true;\r\n  }\r\n\r\n  /**\r\n   * Limit token transfer until the crowdsale is over.\r\n   */\r\n  modifier canTransfer(address _sender) {\r\n    require(released || transferAgents[_sender]);\r\n    _;\r\n  }\r\n\r\n  /** The function can be called only before or after the tokens have been released */\r\n  modifier inReleaseState(bool releaseState) {\r\n    require(releaseState == released);\r\n    _;\r\n  }\r\n\r\n  /** The function can be called only by a whitelisted release agent. */\r\n  modifier onlyReleaseAgent() {\r\n    require(msg.sender == releaseAgent);\r\n    _;\r\n  }\r\n\r\n  /** We restrict transfer by overriding it */\r\n  function transfer(address _to, uint _value) public canTransfer(msg.sender) returns (bool success) {\r\n    // Call StandardToken.transfer()\r\n   return super.transfer(_to, _value);\r\n  }\r\n\r\n  /** We restrict transferFrom by overriding it */\r\n  function transferFrom(address _from, address _to, uint _value) public canTransfer(_from) returns (bool success) {\r\n    // Call StandardToken.transferForm()\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * A token that can increase its supply by another contract.\r\n *\r\n * This allows uncapped crowdsale by dynamically increasing the supply when money pours in.\r\n * Only mint agents, contracts whitelisted by owner, can mint new tokens.\r\n *\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n\r\n  using SafeMath for uint;\r\n\r\n  bool public mintingFinished = false;\r\n\r\n  /** List of agents that are allowed to create new tokens */\r\n  mapping (address => bool) public mintAgents;\r\n\r\n  event MintingAgentChanged(address addr, bool state);\r\n\r\n\r\n  function MintableToken(uint _initialSupply, address _multisig, bool _mintable) internal {\r\n    require(_multisig != address(0));\r\n    // Cannot create a token without supply and no minting\r\n    require(_mintable || _initialSupply != 0);\r\n    // Create initially all balance on the team multisig\r\n    if (_initialSupply > 0)\r\n        mintInternal(_multisig, _initialSupply);\r\n    // No more new supply allowed after the token creation\r\n    mintingFinished = !_mintable;\r\n  }\r\n\r\n  /**\r\n   * Create new tokens and allocate them to an address.\r\n   *\r\n   * Only callable by a crowdsale contract (mint agent).\r\n   */\r\n  function mint(address receiver, uint amount) onlyMintAgent public {\r\n    mintInternal(receiver, amount);\r\n  }\r\n\r\n  function mintInternal(address receiver, uint amount) canMint private {\r\n    totalSupply = totalSupply.add(amount);\r\n    balances[receiver] = balances[receiver].add(amount);\r\n\r\n    // Removed because this may be confused with anonymous transfers in the upcoming fork.\r\n    // This will make the mint transaction appear in EtherScan.io\r\n    // We can remove this after there is a standardized minting event\r\n    // Transfer(0, receiver, amount);\r\n\r\n    Minted(receiver, amount);\r\n  }\r\n\r\n  /**\r\n   * Owner can allow a crowdsale contract to mint new tokens.\r\n   */\r\n  function setMintAgent(address addr, bool state) onlyOwner canMint public {\r\n    mintAgents[addr] = state;\r\n    MintingAgentChanged(addr, state);\r\n  }\r\n\r\n  modifier onlyMintAgent() {\r\n    // Only mint agents are allowed to mint new tokens\r\n    require(mintAgents[msg.sender]);\r\n    _;\r\n  }\r\n\r\n  /** Make sure we are not done yet. */\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n}\r\n\r\n/**\r\n * Upgrade agent transfers tokens to a new contract.\r\n * Upgrade agent itself can be the token contract, or just a middle man contract doing the heavy lifting.\r\n *\r\n * The Upgrade agent is the interface used to implement a token\r\n * migration in the case of an emergency.\r\n * The function upgradeFrom has to implement the part of the creation\r\n * of new tokens on behalf of the user doing the upgrade.\r\n *\r\n * The new token can implement this interface directly, or use.\r\n */\r\ncontract UpgradeAgent {\r\n\r\n  /** This value should be the same as the original token's total supply */\r\n  uint public originalSupply;\r\n\r\n  /** Interface to ensure the contract is correctly configured */\r\n  function isUpgradeAgent() public constant returns (bool) {\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  Upgrade an account\r\n\r\n  When the token contract is in the upgrade status the each user will\r\n  have to call `upgrade(value)` function from UpgradeableToken.\r\n\r\n  The upgrade function adjust the balance of the user and the supply\r\n  of the previous token and then call `upgradeFrom(value)`.\r\n\r\n  The UpgradeAgent is the responsible to create the tokens for the user\r\n  in the new contract.\r\n\r\n  * @param _from Account to upgrade.\r\n  * @param _value Tokens to upgrade.\r\n\r\n  */\r\n  function upgradeFrom(address _from, uint _value) public;\r\n\r\n}\r\n\r\n/**\r\n * A token upgrade mechanism where users can opt-in amount of tokens to the next smart contract revision.\r\n *\r\n */\r\ncontract UpgradeableToken is StandardToken {\r\n\r\n  /** Contract / person who can set the upgrade path. This can be the same as team multisig wallet, as what it is with its default value. */\r\n  address public upgradeMaster;\r\n\r\n  /** The next contract where the tokens will be migrated. */\r\n  UpgradeAgent public upgradeAgent;\r\n\r\n  /** How many tokens we have upgraded by now. */\r\n  uint public totalUpgraded;\r\n\r\n  /**\r\n   * Upgrade states.\r\n   *\r\n   * - NotAllowed: The child contract has not reached a condition where the upgrade can bgun\r\n   * - WaitingForAgent: Token allows upgrade, but we don't have a new agent yet\r\n   * - ReadyToUpgrade: The agent is set, but not a single token has been upgraded yet\r\n   * - Upgrading: Upgrade agent is set and the balance holders can upgrade their tokens\r\n   *\r\n   */\r\n  enum UpgradeState {Unknown, NotAllowed, WaitingForAgent, ReadyToUpgrade, Upgrading}\r\n\r\n  /**\r\n   * Somebody has upgraded some of his tokens.\r\n   */\r\n  event Upgrade(address indexed _from, address indexed _to, uint _value);\r\n\r\n  /**\r\n   * New upgrade agent available.\r\n   */\r\n  event UpgradeAgentSet(address agent);\r\n\r\n  /**\r\n   * Do not allow construction without upgrade master set.\r\n   */\r\n  function UpgradeableToken(address _upgradeMaster) {\r\n    setUpgradeMaster(_upgradeMaster);\r\n  }\r\n\r\n  /**\r\n   * Allow the token holder to upgrade some of their tokens to a new contract.\r\n   */\r\n  function upgrade(uint value) public {\r\n    UpgradeState state = getUpgradeState();\r\n    // Ensure it's not called in a bad state\r\n    require(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading);\r\n\r\n    // Validate input value.\r\n    require(value != 0);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(value);\r\n\r\n    // Take tokens out from circulation\r\n    totalSupply = totalSupply.sub(value);\r\n    totalUpgraded = totalUpgraded.add(value);\r\n\r\n    // Upgrade agent reissues the tokens\r\n    upgradeAgent.upgradeFrom(msg.sender, value);\r\n    Upgrade(msg.sender, upgradeAgent, value);\r\n  }\r\n\r\n  /**\r\n   * Set an upgrade agent that handles the upgrade process\r\n   */\r\n  function setUpgradeAgent(address agent) external {\r\n    // Check whether the token is in a state that we could think of upgrading\r\n    require(canUpgrade());\r\n\r\n    require(agent != 0x0);\r\n    // Only a master can designate the next agent\r\n    require(msg.sender == upgradeMaster);\r\n    // Upgrade has already begun for an agent\r\n    require(getUpgradeState() != UpgradeState.Upgrading);\r\n\r\n    upgradeAgent = UpgradeAgent(agent);\r\n\r\n    // Bad interface\r\n    require(upgradeAgent.isUpgradeAgent());\r\n    // Make sure that token supplies match in source and target\r\n    require(upgradeAgent.originalSupply() == totalSupply);\r\n\r\n    UpgradeAgentSet(upgradeAgent);\r\n  }\r\n\r\n  /**\r\n   * Get the state of the token upgrade.\r\n   */\r\n  function getUpgradeState() public constant returns(UpgradeState) {\r\n    if (!canUpgrade()) return UpgradeState.NotAllowed;\r\n    else if (address(upgradeAgent) == 0x00) return UpgradeState.WaitingForAgent;\r\n    else if (totalUpgraded == 0) return UpgradeState.ReadyToUpgrade;\r\n    else return UpgradeState.Upgrading;\r\n  }\r\n\r\n  /**\r\n   * Change the upgrade master.\r\n   *\r\n   * This allows us to set a new owner for the upgrade mechanism.\r\n   */\r\n  function changeUpgradeMaster(address new_master) public {\r\n    require(msg.sender == upgradeMaster);\r\n    setUpgradeMaster(new_master);\r\n  }\r\n\r\n  /**\r\n   * Internal upgrade master setter.\r\n   */\r\n  function setUpgradeMaster(address new_master) private {\r\n    require(new_master != 0x0);\r\n    upgradeMaster = new_master;\r\n  }\r\n\r\n  /**\r\n   * Child contract can enable to provide the condition when the upgrade can begin.\r\n   */\r\n  function canUpgrade() public constant returns(bool) {\r\n     return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * A crowdsale token.\r\n *\r\n * An ERC-20 token designed specifically for crowdsales with investor protection and further development path.\r\n *\r\n * - The token transfer() is disabled until the crowdsale is over\r\n * - The token contract gives an opt-in upgrade path to a new contract\r\n * - The same token can be part of several crowdsales through the approve() mechanism\r\n * - The token can be capped (supply set in the constructor) or uncapped (crowdsale contract can mint new tokens)\r\n *\r\n */\r\ncontract CrowdsaleToken is ReleasableToken, MintableToken, UpgradeableToken, FractionalERC20 {\r\n\r\n  event UpdatedTokenInformation(string newName, string newSymbol);\r\n\r\n  string public name;\r\n\r\n  string public symbol;\r\n\r\n  /**\r\n   * Construct the token.\r\n   *\r\n   * This token must be created through a team multisig wallet, so that it is owned by that wallet.\r\n   *\r\n   * @param _name Token name\r\n   * @param _symbol Token symbol - typically it's all caps\r\n   * @param _initialSupply How many tokens we start with\r\n   * @param _decimals Number of decimal places\r\n   * @param _mintable Are new tokens created over the crowdsale or do we distribute only the initial supply? Note that when the token becomes transferable the minting always ends.\r\n   */\r\n  function CrowdsaleToken(string _name, string _symbol, uint _initialSupply, uint8 _decimals, address _multisig, bool _mintable)\r\n    UpgradeableToken(_multisig) MintableToken(_initialSupply, _multisig, _mintable) {\r\n    name = _name;\r\n    symbol = _symbol;\r\n    decimals = _decimals;\r\n  }\r\n\r\n  /**\r\n   * When token is released to be transferable, prohibit new token creation.\r\n   */\r\n  function releaseTokenTransfer() public onlyReleaseAgent {\r\n    mintingFinished = true;\r\n    super.releaseTokenTransfer();\r\n  }\r\n\r\n  /**\r\n   * Allow upgrade agent functionality to kick in only if the crowdsale was a success.\r\n   */\r\n  function canUpgrade() public constant returns(bool) {\r\n    return released && super.canUpgrade();\r\n  }\r\n\r\n  /**\r\n   * Owner can update token information here\r\n   */\r\n  function setTokenInformation(string _name, string _symbol) onlyOwner {\r\n    name = _name;\r\n    symbol = _symbol;\r\n\r\n    UpdatedTokenInformation(name, symbol);\r\n  }\r\n\r\n}", "OptimizationUsed": "1", "ContractName": "CrowdsaleToken", "ByteCode": "0x606060405236156101855763ffffffff60e060020a60003504166302f652a3811461018a57806305d2035b146101b057806306fdde03146101d7578063095ea7b31461026257806318160ddd1461029857806323b872dd146102bd57806329ff4f53146102f9578063313ce5671461031a57806340c10f191461034357806342c1867b14610367578063432146751461039a57806345977d03146103c05780634eee966f146103d85780635de4ccb01461046d5780635f412d4f1461049c578063600440cb146104b157806370a08231146104e05780638444b39114610511578063867c2857146105485780638da5cb5b1461057b57806395d89b41146105aa57806396132521146106355780639738968c1461065c578063a9059cbb14610683578063ac3cb72c146106b9578063c752ff62146106ef578063d1f276d314610714578063d7e7088a14610743578063dd62ed3e14610764578063e2301d021461079b578063ea56a44d146107d1578063eefa597b146107f2578063f2fde38b14610819575b600080fd5b341561019557600080fd5b6101ae600160a060020a0360043516602435151561083a565b005b34156101bb57600080fd5b6101c361089b565b604051901515815260200160405180910390f35b34156101e257600080fd5b6101ea6108a4565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156102275780820151818401525b60200161020e565b50505050905090810190601f1680156102545780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561026d57600080fd5b6101c3600160a060020a0360043516602435610942565b604051901515815260200160405180910390f35b34156102a357600080fd5b6102ab6109d7565b60405190815260200160405180910390f35b34156102c857600080fd5b6101c3600160a060020a03600435811690602435166044356109dd565b604051901515815260200160405180910390f35b341561030457600080fd5b6101ae600160a060020a0360043516610a34565b005b341561032557600080fd5b61032d610a8b565b60405160ff909116815260200160405180910390f35b341561034e57600080fd5b6101ae600160a060020a0360043516602435610a94565b005b341561037257600080fd5b6101c3600160a060020a0360043516610acb565b604051901515815260200160405180910390f35b34156103a557600080fd5b6101ae600160a060020a03600435166024351515610ae0565b005b34156103cb57600080fd5b6101ae600435610b7f565b005b34156103e357600080fd5b6101ae60046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f016020809104026020016040519081016040528181529291906020840183838082843750949650610ceb95505050505050565b005b341561047857600080fd5b610480610e5b565b604051600160a060020a03909116815260200160405180910390f35b34156104a757600080fd5b6101ae610e6a565b005b34156104bc57600080fd5b610480610e9e565b604051600160a060020a03909116815260200160405180910390f35b34156104eb57600080fd5b6102ab600160a060020a0360043516610ead565b60405190815260200160405180910390f35b341561051c57600080fd5b610524610ecc565b6040518082600481111561053457fe5b60ff16815260200191505060405180910390f35b341561055357600080fd5b6101c3600160a060020a0360043516610f19565b604051901515815260200160405180910390f35b341561058657600080fd5b610480610f2e565b604051600160a060020a03909116815260200160405180910390f35b34156105b557600080fd5b6101ea610f3d565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156102275780820151818401525b60200161020e565b50505050905090810190601f1680156102545780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561064057600080fd5b6101c3610fdb565b604051901515815260200160405180910390f35b341561066757600080fd5b6101c3610feb565b604051901515815260200160405180910390f35b341561068e57600080fd5b6101c3600160a060020a0360043516602435611011565b604051901515815260200160405180910390f35b34156106c457600080fd5b6101c3600160a060020a0360043516602435611066565b604051901515815260200160405180910390f35b34156106fa57600080fd5b6102ab6110fb565b60405190815260200160405180910390f35b341561071f57600080fd5b610480611101565b604051600160a060020a03909116815260200160405180910390f35b341561074e57600080fd5b6101ae600160a060020a0360043516611110565b005b341561076f57600080fd5b6102ab600160a060020a03600435811690602435166112bc565b60405190815260200160405180910390f35b34156107a657600080fd5b6101c3600160a060020a03600435166024356112e9565b604051901515815260200160405180910390f35b34156107dc57600080fd5b6101ae600160a060020a03600435166113d3565b005b34156107fd57600080fd5b6101c36113fb565b604051901515815260200160405180910390f35b341561082457600080fd5b6101ae600160a060020a0360043516611401565b005b60035433600160a060020a0390811691161461085557600080fd5b60045460009060a060020a900460ff161561086f57600080fd5b600160a060020a0383166000908152600560205260409020805460ff19168315151790555b5b505b5050565b60065460ff1681565b600c8054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561093a5780601f1061090f5761010080835404028352916020019161093a565b820191906000526020600020905b81548152906001019060200180831161091d57829003601f168201915b505050505081565b60008115806109745750600160a060020a03338116600090815260026020908152604080832093871683529290522054155b151561097f57600080fd5b600160a060020a033381166000818152600260209081526040808320948816808452949091529081902085905560008051602061181a8339815191529085905190815260200160405180910390a35060015b92915050565b60005481565b600454600090849060a060020a900460ff1680610a125750600160a060020a03811660009081526005602052604090205460ff165b1515610a1d57600080fd5b610a28858585611451565b91505b5b509392505050565b60035433600160a060020a03908116911614610a4f57600080fd5b60045460009060a060020a900460ff1615610a6957600080fd5b60048054600160a060020a031916600160a060020a0384161790555b5b505b50565b600b5460ff1681565b600160a060020a03331660009081526007602052604090205460ff161515610abb57600080fd5b6108978282611554565b5b5b5050565b60076020526000908152604090205460ff1681565b60035433600160a060020a03908116911614610afb57600080fd5b60065460ff1615610b0b57600080fd5b600160a060020a03821660009081526007602052604090819020805460ff19168315151790557f4b0adf6c802794c7dde28a08a4e07131abcff3bf9603cd71f14f90bec7865efa908390839051600160a060020a039092168252151560208201526040908101905180910390a15b5b5b5050565b6000610b89610ecc565b905060035b816004811115610b9a57fe5b1480610bb2575060045b816004811115610bb057fe5b145b1515610bbd57600080fd5b811515610bc957600080fd5b600160a060020a033316600090815260016020526040902054610bf2908363ffffffff61160b16565b600160a060020a03331660009081526001602052604081209190915554610c1f908363ffffffff61160b16565b600055600a54610c35908363ffffffff61162216565b600a55600954600160a060020a031663753e88e5338460405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b1515610c8e57600080fd5b6102c65a03f11515610c9f57600080fd5b5050600954600160a060020a03908116915033167f7e5c344a8141a805725cb476f76c6953b842222b967edd1f78ddb6e8b3f397ac8460405190815260200160405180910390a35b5050565b60035433600160a060020a03908116911614610d0657600080fd5b600c828051610d19929160200190611759565b50600d818051610d2d929160200190611759565b507fd131ab1e6f279deea74e13a18477e13e2107deb6dc8ae955648948be5841fb46600c600d604051604080825283546002600019610100600184161502019091160490820181905281906020820190606083019086908015610dd15780601f10610da657610100808354040283529160200191610dd1565b820191906000526020600020905b815481529060010190602001808311610db457829003601f168201915b5050838103825284546002600019610100600184161502019091160480825260209091019085908015610e455780601f10610e1a57610100808354040283529160200191610e45565b820191906000526020600020905b815481529060010190602001808311610e2857829003601f168201915b505094505050505060405180910390a15b5b5050565b600954600160a060020a031681565b60045433600160a060020a03908116911614610e8557600080fd5b6006805460ff19166001179055610e9a61163c565b5b5b565b600854600160a060020a031681565b600160a060020a0381166000908152600160205260409020545b919050565b6000610ed6610feb565b1515610ee457506001610f13565b600954600160a060020a03161515610efe57506002610f13565b600a541515610f0f57506003610f13565b5060045b5b5b5b90565b60056020526000908152604090205460ff1681565b600354600160a060020a031681565b600d8054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561093a5780601f1061090f5761010080835404028352916020019161093a565b820191906000526020600020905b81548152906001019060200180831161091d57829003601f168201915b505050505081565b60045460a060020a900460ff1681565b60045460009060a060020a900460ff16801561100a575061100a6113fb565b5b90505b90565b600454600090339060a060020a900460ff16806110465750600160a060020a03811660009081526005602052604090205460ff165b151561105157600080fd5b61105b8484611677565b91505b5b5092915050565b600160a060020a03338116600090815260026020908152604080832093861683529290529081205461109e818463ffffffff61162216565b600160a060020a033381166000818152600260209081526040808320948a1680845294909152908190208490559192909160008051602061181a83398151915291905190815260200160405180910390a3600191505b5092915050565b600a5481565b600454600160a060020a031681565b611118610feb565b151561112357600080fd5b600160a060020a038116151561113857600080fd5b60085433600160a060020a0390811691161461115357600080fd5b60045b61115e610ecc565b600481111561116957fe5b141561117457600080fd5b60098054600160a060020a031916600160a060020a038381169190911791829055166361d3d7a66000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156111d257600080fd5b6102c65a03f115156111e357600080fd5b5050506040518051905015156111f857600080fd5b600080546009549091600160a060020a0390911690634b2ba0dd90604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561124857600080fd5b6102c65a03f1151561125957600080fd5b5050506040518051905014151561126f57600080fd5b6009547f7845d5aa74cc410e35571258d954f23b82276e160fe8c188fa80566580f279cc90600160a060020a0316604051600160a060020a03909116815260200160405180910390a15b50565b600160a060020a038083166000908152600260209081526040808320938516835292905220545b92915050565b600160a060020a0333811660009081526002602090815260408083209386168352929052908120548083111561134657600160a060020a03338116600090815260026020908152604080832093881683529290529081205561137d565b61109e818463ffffffff61160b16565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a03338116600081815260026020908152604080832094891680845294909152908190205460008051602061181a833981519152915190815260200160405180910390a3600191505b5092915050565b60085433600160a060020a039081169116146113ee57600080fd5b610a8881611725565b5b50565b60015b90565b60035433600160a060020a0390811691161461141c57600080fd5b600160a060020a038116151561143157600080fd5b60038054600160a060020a031916600160a060020a0383161790555b5b50565b600160a060020a038084166000908152600260209081526040808320338516845282528083205493861683526001909152812054909190611498908463ffffffff61162216565b600160a060020a0380861660009081526001602052604080822093909355908716815220546114cd908463ffffffff61160b16565b600160a060020a0386166000908152600160205260409020556114f6818463ffffffff61160b16565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616916000805160206117fa8339815191529086905190815260200160405180910390a3600191505b509392505050565b60065460ff161561156457600080fd5b600054611577908263ffffffff61162216565b6000908155600160a060020a0383168152600160205260409020546115a2908263ffffffff61162216565b600160a060020a03831660009081526001602052604090819020919091557f30385c845b448a36257a6a1716e6ad2e1bc2cbe333cde1e69fe849ad6511adfe908390839051600160a060020a03909216825260208201526040908101905180910390a15b5b5050565b60008282111561161757fe5b508082035b92915050565b60008282018381101561163157fe5b8091505b5092915050565b60045433600160a060020a0390811691161461165757600080fd5b6004805460a060020a60ff02191660a060020a1790555b5b565b60015b90565b600160a060020a0333166000908152600160205260408120546116a0908363ffffffff61160b16565b600160a060020a0333811660009081526001602052604080822093909355908516815220546116d5908363ffffffff61162216565b600160a060020a0380851660008181526001602052604090819020939093559133909116906000805160206117fa8339815191529085905190815260200160405180910390a35060015b92915050565b600160a060020a038116151561173a57600080fd5b60088054600160a060020a031916600160a060020a0383161790555b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061179a57805160ff19168380011785556117c7565b828001600101855582156117c7579182015b828111156117c75782518255916020019190600101906117ac565b5b506117d49291506117d8565b5090565b610f1391905b808211156117d457600081556001016117de565b5090565b905600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925a165627a7a7230582081828f9ae489ed77919587782a892cfe871396b934c3819f5804c4d9732b6c1e0029"}