{"Runs": "200", "SwarmSource": "bzzr://d982c0e3231a5f7f7e53408560057d035af171c2cfa306af55514c66b3347633", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"InterfaceId_ERC165\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"data1\",\"type\":\"uint8\"},{\"name\":\"data2\",\"type\":\"uint8\"},{\"name\":\"data3\",\"type\":\"uint64\"},{\"name\":\"data4\",\"type\":\"uint64\"}],\"name\":\"create\",\"outputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"get\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"data1\",\"type\":\"uint8\"},{\"name\":\"data2\",\"type\":\"uint8\"},{\"name\":\"data3\",\"type\":\"uint64\"},{\"name\":\"data4\",\"type\":\"uint64\"},{\"name\":\"startBlock\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_data1\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_data2\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_data3\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"_data4\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"_startBlock\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"Create\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.24+commit.e67f0147", "ConstructorArguments": "", "SourceCode": "pragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title ERC165\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n */\r\ninterface ERC165 {\r\n\r\n  function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool);\r\n}\r\n\r\n\r\n\r\ncontract SupportsInterfaceWithLookup is ERC165 {\r\n  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\r\n\r\n  mapping(bytes4 => bool) internal supportedInterfaces;\r\n\r\n  constructor()\r\n    public\r\n  {\r\n    _registerInterface(InterfaceId_ERC165);\r\n  }\r\n\r\n  function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool)\r\n  {\r\n    return supportedInterfaces[_interfaceId];\r\n  }\r\n\r\n  function _registerInterface(bytes4 _interfaceId)\r\n    internal\r\n  {\r\n    require(_interfaceId != 0xffffffff);\r\n    supportedInterfaces[_interfaceId] = true;\r\n  }\r\n}\r\n\r\n\r\ncontract ERC721Basic is ERC165 {\r\n\r\n  bytes4 internal constant InterfaceId_ERC721 = 0x80ac58cd;\r\n\r\n  bytes4 internal constant InterfaceId_ERC721Exists = 0x4f558e79;\r\n\r\n  bytes4 internal constant InterfaceId_ERC721Enumerable = 0x780e9d63;\r\n\r\n  bytes4 internal constant InterfaceId_ERC721Metadata = 0x5b5e139f;\r\n\r\n  event Transfer(\r\n    address indexed _from,\r\n    address indexed _to,\r\n    uint256 indexed _tokenId\r\n  );\r\n  event Approval(\r\n    address indexed _owner,\r\n    address indexed _approved,\r\n    uint256 indexed _tokenId\r\n  );\r\n  event ApprovalForAll(\r\n    address indexed _owner,\r\n    address indexed _operator,\r\n    bool _approved\r\n  );\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 _balance);\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n  function exists(uint256 _tokenId) public view returns (bool _exists);\r\n\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function getApproved(uint256 _tokenId)\r\n    public view returns (address _operator);\r\n\r\n  function setApprovalForAll(address _operator, bool _approved) public;\r\n  function isApprovedForAll(address _owner, address _operator)\r\n    public view returns (bool);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId)\r\n    public;\r\n\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public;\r\n}\r\n\r\n\r\n\r\ncontract ERC721Enumerable is ERC721Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function tokenOfOwnerByIndex(\r\n    address _owner,\r\n    uint256 _index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256 _tokenId);\r\n\r\n  function tokenByIndex(uint256 _index) public view returns (uint256);\r\n}\r\n\r\n\r\ncontract ERC721Metadata is ERC721Basic {\r\n  function name() external view returns (string _name);\r\n  function symbol() external view returns (string _symbol);\r\n  function tokenURI(uint256 _tokenId) public view returns (string);\r\n}\r\n\r\n\r\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\r\n}\r\n\r\n\r\n\r\n\r\ncontract ERC721Receiver {\r\n\r\n  bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n  function onERC721Received(\r\n    address _operator,\r\n    address _from,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n    returns(bytes4);\r\n}\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n    return a / b;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\nlibrary AddressUtils {\r\n\r\n\r\n  function isContract(address addr) internal view returns (bool) {\r\n    uint256 size;\r\n    assembly { size := extcodesize(addr) }\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract ERC721BasicToken is SupportsInterfaceWithLookup, ERC721Basic {\r\n\r\n  using SafeMath for uint256;\r\n  using AddressUtils for address;\r\n\r\n  bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n  mapping (uint256 => address) internal tokenOwner;\r\n  mapping (uint256 => address) internal tokenApprovals;\r\n  mapping (address => uint256) internal ownedTokensCount;\r\n  mapping (address => mapping (address => bool)) internal operatorApprovals;\r\n\r\n  constructor()\r\n    public\r\n  {\r\n    _registerInterface(InterfaceId_ERC721);\r\n    _registerInterface(InterfaceId_ERC721Exists);\r\n  }\r\n\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    require(_owner != address(0));\r\n    return ownedTokensCount[_owner];\r\n  }\r\n\r\n  function ownerOf(uint256 _tokenId) public view returns (address) {\r\n    address owner = tokenOwner[_tokenId];\r\n    require(owner != address(0));\r\n    return owner;\r\n  }\r\n\r\n  function exists(uint256 _tokenId) public view returns (bool) {\r\n    address owner = tokenOwner[_tokenId];\r\n    return owner != address(0);\r\n  }\r\n\r\n  function approve(address _to, uint256 _tokenId) public {\r\n    address owner = ownerOf(_tokenId);\r\n    require(_to != owner);\r\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n    tokenApprovals[_tokenId] = _to;\r\n    emit Approval(owner, _to, _tokenId);\r\n  }\r\n\r\n  function getApproved(uint256 _tokenId) public view returns (address) {\r\n    return tokenApprovals[_tokenId];\r\n  }\r\n\r\n  function setApprovalForAll(address _to, bool _approved) public {\r\n    require(_to != msg.sender);\r\n    operatorApprovals[msg.sender][_to] = _approved;\r\n    emit ApprovalForAll(msg.sender, _to, _approved);\r\n  }\r\n\r\n  function isApprovedForAll(\r\n    address _owner,\r\n    address _operator\r\n  )\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return operatorApprovals[_owner][_operator];\r\n  }\r\n\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n  {\r\n    require(isApprovedOrOwner(msg.sender, _tokenId));\r\n    require(_from != address(0));\r\n    require(_to != address(0));\r\n\r\n    clearApproval(_from, _tokenId);\r\n    removeTokenFrom(_from, _tokenId);\r\n    addTokenTo(_to, _tokenId);\r\n\r\n    emit Transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n  {\r\n    // solium-disable-next-line arg-overflow\r\n    safeTransferFrom(_from, _to, _tokenId, \"\");\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n  {\r\n    transferFrom(_from, _to, _tokenId);\r\n    // solium-disable-next-line arg-overflow\r\n    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\r\n  }\r\n\r\n  function isApprovedOrOwner(\r\n    address _spender,\r\n    uint256 _tokenId\r\n  )\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    address owner = ownerOf(_tokenId);\r\n    return (\r\n      _spender == owner ||\r\n      getApproved(_tokenId) == _spender ||\r\n      isApprovedForAll(owner, _spender)\r\n    );\r\n  }\r\n\r\n\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    require(_to != address(0));\r\n    addTokenTo(_to, _tokenId);\r\n    emit Transfer(address(0), _to, _tokenId);\r\n  }\r\n\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    clearApproval(_owner, _tokenId);\r\n    removeTokenFrom(_owner, _tokenId);\r\n    emit Transfer(_owner, address(0), _tokenId);\r\n  }\r\n\r\n  function clearApproval(address _owner, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _owner);\r\n    if (tokenApprovals[_tokenId] != address(0)) {\r\n      tokenApprovals[_tokenId] = address(0);\r\n    }\r\n  }\r\n\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    require(tokenOwner[_tokenId] == address(0));\r\n    tokenOwner[_tokenId] = _to;\r\n    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\r\n  }\r\n\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _from);\r\n    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\r\n    tokenOwner[_tokenId] = address(0);\r\n  }\r\n\r\n  function checkAndCallSafeTransfer(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    internal\r\n    returns (bool)\r\n  {\r\n    if (!_to.isContract()) {\r\n      return true;\r\n    }\r\n    bytes4 retval = ERC721Receiver(_to).onERC721Received(\r\n      msg.sender, _from, _tokenId, _data);\r\n    return (retval == ERC721_RECEIVED);\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ERC721Token is SupportsInterfaceWithLookup, ERC721BasicToken, ERC721 {\r\n\r\n  // Token name\r\n  string internal name_;\r\n\r\n  // Token symbol\r\n  string internal symbol_;\r\n\r\n  // Mapping from owner to list of owned token IDs\r\n  mapping(address => uint256[]) internal ownedTokens;\r\n\r\n  // Mapping from token ID to index of the owner tokens list\r\n  mapping(uint256 => uint256) internal ownedTokensIndex;\r\n\r\n  // Array with all token ids, used for enumeration\r\n  uint256[] internal allTokens;\r\n\r\n  // Mapping from token id to position in the allTokens array\r\n  mapping(uint256 => uint256) internal allTokensIndex;\r\n\r\n  // Optional mapping for token URIs\r\n  mapping(uint256 => string) internal tokenURIs;\r\n\r\n  constructor(string _name, string _symbol) public {\r\n    name_ = _name;\r\n    symbol_ = _symbol;\r\n\r\n    // register the supported interfaces to conform to ERC721 via ERC165\r\n    _registerInterface(InterfaceId_ERC721Enumerable);\r\n    _registerInterface(InterfaceId_ERC721Metadata);\r\n  }\r\n\r\n  function name() external view returns (string) {\r\n    return name_;\r\n  }\r\n\r\n  function symbol() external view returns (string) {\r\n    return symbol_;\r\n  }\r\n\r\n  function tokenURI(uint256 _tokenId) public view returns (string) {\r\n    require(exists(_tokenId));\r\n    return tokenURIs[_tokenId];\r\n  }\r\n\r\n  function tokenOfOwnerByIndex(\r\n    address _owner,\r\n    uint256 _index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    require(_index < balanceOf(_owner));\r\n    return ownedTokens[_owner][_index];\r\n  }\r\n\r\n  function totalSupply() public view returns (uint256) {\r\n    return allTokens.length;\r\n  }\r\n\r\n  function tokenByIndex(uint256 _index) public view returns (uint256) {\r\n    require(_index < totalSupply());\r\n    return allTokens[_index];\r\n  }\r\n\r\n\r\n  function _setTokenURI(uint256 _tokenId, string _uri) internal {\r\n    require(exists(_tokenId));\r\n    tokenURIs[_tokenId] = _uri;\r\n  }\r\n\r\n\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    super.addTokenTo(_to, _tokenId);\r\n    uint256 length = ownedTokens[_to].length;\r\n    ownedTokens[_to].push(_tokenId);\r\n    ownedTokensIndex[_tokenId] = length;\r\n  }\r\n\r\n\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    super.removeTokenFrom(_from, _tokenId);\r\n\r\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\r\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\r\n\r\n    ownedTokens[_from][tokenIndex] = lastToken;\r\n    ownedTokens[_from].length--; // This also deletes the contents at the last position of the array\r\n\r\n    ownedTokensIndex[_tokenId] = 0;\r\n    ownedTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    super._mint(_to, _tokenId);\r\n\r\n    allTokensIndex[_tokenId] = allTokens.length;\r\n    allTokens.push(_tokenId);\r\n  }\r\n\r\n\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    super._burn(_owner, _tokenId);\r\n\r\n    if (bytes(tokenURIs[_tokenId]).length != 0) {\r\n      delete tokenURIs[_tokenId];\r\n    }\r\n\r\n    uint256 tokenIndex = allTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = allTokens.length.sub(1);\r\n    uint256 lastToken = allTokens[lastTokenIndex];\r\n\r\n    allTokens[tokenIndex] = lastToken;\r\n    allTokens[lastTokenIndex] = 0;\r\n\r\n    allTokens.length--;\r\n    allTokensIndex[_tokenId] = 0;\r\n    allTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract lettertoken205 is ERC721Token {\r\n\r\n  constructor() public ERC721Token(\"lettertoken205\",\"lettertoken205\") { }\r\n\r\n  struct Token{\r\n    uint8 data1;\r\n    uint8 data2;\r\n    uint64 data3;\r\n    uint64 data4;\r\n    uint64 startBlock;\r\n  }\r\n\r\n  Token[] private tokens;\r\n\r\n  function create(uint8 data1, uint8 data2,uint64 data3, uint64 data4) public returns (uint256 _tokenId) {\r\n\r\n    string memory tokenUri = createTokenUri(data1,data2,data3,data4);\r\n\r\n    Token memory _newToken = Token({\r\n        data1: data1,\r\n        data2: data2,\r\n        data3: data3,\r\n        data4: data4,\r\n        startBlock: uint64(block.number)\r\n    });\r\n    _tokenId = tokens.push(_newToken) - 1;\r\n    _mint(msg.sender,_tokenId);\r\n    _setTokenURI(_tokenId, tokenUri);\r\n    tokenUri=strConcat(tokenUri,\"-\");\r\n    string memory tokenIdb=uint2str(_tokenId);\r\n    tokenUri=strConcat(tokenUri, tokenIdb);\r\n    emit Create(_tokenId,msg.sender,data1,data2,data3,data4,_newToken.startBlock,tokenUri);\r\n    return _tokenId;\r\n  }\r\n\r\n  event Create(\r\n    uint _id,\r\n    address indexed _owner,\r\n    uint8 _data1,\r\n    uint8 _data2,\r\n    uint64 _data3,\r\n    uint64 _data4,\r\n    uint64 _startBlock,\r\n    string _uri\r\n  );\r\n\r\n  function get(uint256 _id) public view returns (address owner,uint8 data1,uint8 data2,uint64 data3,uint64 data4,uint64 startBlock) {\r\n    return (\r\n      tokenOwner[_id],\r\n      tokens[_id].data1,\r\n      tokens[_id].data2,\r\n      tokens[_id].data3,\r\n      tokens[_id].data4,\r\n      tokens[_id].startBlock\r\n    );\r\n  }\r\n\r\n  function tokensOfOwner(address _owner) public view returns(uint256[]) {\r\n    return ownedTokens[_owner];\r\n  }\r\n\r\n  function createTokenUri(uint8 data1,uint8 data2,uint64 data3,uint64 data4) internal pure returns (string){\r\n    string memory uri = \"https://www.millionetherwords.com/exchange/displaytoken/?s=\";\r\n    uri = appendUint8ToString(uri,data1);\r\n    uri = strConcat(uri,\"-\");\r\n    uri = appendUint8ToString(uri,data2);\r\n    uri = strConcat(uri,\"-\");\r\n    string memory data3b=uint2str(data3);\r\n    uri = strConcat(uri,data3b);\r\n    uri = strConcat(uri,\"-\");\r\n    string memory data4b=uint2str(data4);\r\n    uri = strConcat(uri,data4b);\r\n   \r\n    uri = strConcat(uri,\".png\");\r\n    return uri;\r\n  }\r\n\r\nfunction uint2str(uint i) internal pure returns (string){\r\n    if (i == 0) return \"0\";\r\n    uint j = i;\r\n    uint length;\r\n    while (j != 0){\r\n        length++;\r\n        j /= 10;\r\n    }\r\n    bytes memory bstr = new bytes(length);\r\n    uint k = length - 1;\r\n    while (i != 0){\r\n        bstr[k--] = byte(48 + i % 10);\r\n        i /= 10;\r\n    }\r\n    return string(bstr);\r\n}\r\n\r\n  function appendUint8ToString(string inStr, uint8 v) internal pure returns (string str) {\r\n        uint maxlength = 100;\r\n        bytes memory reversed = new bytes(maxlength);\r\n        uint i = 0;\r\n        while (v != 0) {\r\n            uint remainder = v % 10;\r\n            v = v / 10;\r\n            reversed[i++] = byte(48 + remainder);\r\n        }\r\n        bytes memory inStrb = bytes(inStr);\r\n        bytes memory s = new bytes(inStrb.length + i);\r\n        uint j;\r\n        for (j = 0; j < inStrb.length; j++) {\r\n            s[j] = inStrb[j];\r\n        }\r\n        for (j = 0; j < i; j++) {\r\n            s[j + inStrb.length] = reversed[i - 1 - j];\r\n        }\r\n        str = string(s);\r\n    }\r\n\r\n    function strConcat(string _a, string _b) internal pure returns (string) {\r\n        bytes memory _ba = bytes(_a);\r\n        bytes memory _bb = bytes(_b);\r\n        string memory ab = new string(_ba.length + _bb.length);\r\n        bytes memory bab = bytes(ab);\r\n        uint k = 0;\r\n        for (uint i = 0; i < _ba.length; i++) bab[k++] = _ba[i];\r\n        for (i = 0; i < _bb.length; i++) bab[k++] = _bb[i];\r\n        return string(bab);\r\n    }\r\n\r\n}", "OptimizationUsed": "1", "ContractName": "lettertoken205", "ByteCode": "0x60806040526004361061011c5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301ffc9a7811461012157806306fdde0314610157578063081812fc146101e1578063095ea7b31461021557806318160ddd1461023b57806319fa8f501461026257806323b872dd146102945780632c57fdf4146102be5780632f745c59146102f257806342842e0e146103165780634f558e79146103405780634f6ccce7146103585780636352211e1461037057806370a08231146103885780638462151c146103a95780639507d39a1461041a57806395d89b4114610481578063a22cb46514610496578063b88d4fde146104bc578063c87b56dd1461052b578063e985e9c514610543575b600080fd5b34801561012d57600080fd5b50610143600160e060020a03196004351661056a565b604080519115158252519081900360200190f35b34801561016357600080fd5b5061016c610589565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101a657818101518382015260200161018e565b50505050905090810190601f1680156101d35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101ed57600080fd5b506101f9600435610620565b60408051600160a060020a039092168252519081900360200190f35b34801561022157600080fd5b50610239600160a060020a036004351660243561063b565b005b34801561024757600080fd5b506102506106f1565b60408051918252519081900360200190f35b34801561026e57600080fd5b506102776106f7565b60408051600160e060020a03199092168252519081900360200190f35b3480156102a057600080fd5b50610239600160a060020a036004358116906024351660443561071b565b3480156102ca57600080fd5b5061025060ff6004358116906024351667ffffffffffffffff604435811690606435166107be565b3480156102fe57600080fd5b50610250600160a060020a0360043516602435610a80565b34801561032257600080fd5b50610239600160a060020a0360043581169060243516604435610acd565b34801561034c57600080fd5b50610143600435610aee565b34801561036457600080fd5b50610250600435610b0b565b34801561037c57600080fd5b506101f9600435610b40565b34801561039457600080fd5b50610250600160a060020a0360043516610b6a565b3480156103b557600080fd5b506103ca600160a060020a0360043516610b9d565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156104065781810151838201526020016103ee565b505050509050019250505060405180910390f35b34801561042657600080fd5b50610432600435610c09565b60408051600160a060020a03909716875260ff9586166020880152939094168584015267ffffffffffffffff9182166060860152811660808501529190911660a0830152519081900360c00190f35b34801561048d57600080fd5b5061016c610d28565b3480156104a257600080fd5b50610239600160a060020a03600435166024351515610d89565b3480156104c857600080fd5b50604080516020601f60643560048181013592830184900484028501840190955281845261023994600160a060020a038135811695602480359092169560443595369560849401918190840183828082843750949750610e0d9650505050505050565b34801561053757600080fd5b5061016c600435610e35565b34801561054f57600080fd5b50610143600160a060020a0360043581169060243516610ee0565b600160e060020a03191660009081526020819052604090205460ff1690565b60058054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156106155780601f106105ea57610100808354040283529160200191610615565b820191906000526020600020905b8154815290600101906020018083116105f857829003601f168201915b505050505090505b90565b600090815260026020526040902054600160a060020a031690565b600061064682610b40565b9050600160a060020a03838116908216141561066157600080fd5b33600160a060020a038216148061067d575061067d8133610ee0565b151561068857600080fd5b600082815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b60095490565b7f01ffc9a70000000000000000000000000000000000000000000000000000000081565b6107253382610f0e565b151561073057600080fd5b600160a060020a038316151561074557600080fd5b600160a060020a038216151561075a57600080fd5b6107648382610f6d565b61076e8382610fde565b61077882826110e5565b8082600160a060020a031684600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b600060606107ca6119e4565b60606107d88888888861112e565b6040805160a08101825260ff8b811682528a81166020830190815267ffffffffffffffff8b81169484019485528a81166060850190815243821660808601908152600c805460018101825560009190915286517fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c782018054965199519451935160ff199097169188169190911761ff00191661010099909716989098029590951769ffffffffffffffff0000191662010000928416929092029190911771ffffffffffffffff0000000000000000000019166a0100000000000000000000918316919091021779ffffffffffffffff00000000000000000000000000000000000019167201000000000000000000000000000000000000929091169190910217909255909550909350915061090d33856112aa565b61091784846112f9565b61093d8360408051908101604052806001815260200160f860020a602d0281525061132c565b92506109488461144b565b9050610954838261132c565b925033600160a060020a03167f7e6961a1f13ed98ce5f1af2a41a35ccaf0a70c1c1f2e50cb8d567bfc45791e53858a8a8a8a88608001518a604051808881526020018760ff1660ff1681526020018660ff1660ff1681526020018567ffffffffffffffff1667ffffffffffffffff1681526020018467ffffffffffffffff1667ffffffffffffffff1681526020018367ffffffffffffffff1667ffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610a35578181015183820152602001610a1d565b50505050905090810190601f168015610a625780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390a2505050949350505050565b6000610a8b83610b6a565b8210610a9657600080fd5b600160a060020a0383166000908152600760205260409020805483908110610aba57fe5b9060005260206000200154905092915050565b610ae98383836020604051908101604052806000815250610e0d565b505050565b600090815260016020526040902054600160a060020a0316151590565b6000610b156106f1565b8210610b2057600080fd5b6009805483908110610b2e57fe5b90600052602060002001549050919050565b600081815260016020526040812054600160a060020a0316801515610b6457600080fd5b92915050565b6000600160a060020a0382161515610b8157600080fd5b50600160a060020a031660009081526003602052604090205490565b600160a060020a038116600090815260076020908152604091829020805483518184028101840190945280845260609392830182828015610bfd57602002820191906000526020600020905b815481526020019060010190808311610be9575b50505050509050919050565b600081815260016020526040812054600c805483928392839283928392600160a060020a039091169189908110610c3c57fe5b600091825260209091200154600c805460ff909216918a908110610c5c57fe5b9060005260206000200160000160019054906101000a900460ff16600c8a815481101515610c8657fe5b9060005260206000200160000160029054906101000a900467ffffffffffffffff16600c8b815481101515610cb757fe5b90600052602060002001600001600a9054906101000a900467ffffffffffffffff16600c8c815481101515610ce857fe5b600091825260209091200154949c939b5091995097509550720100000000000000000000000000000000000090910467ffffffffffffffff169350915050565b60068054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156106155780601f106105ea57610100808354040283529160200191610615565b600160a060020a038216331415610d9f57600080fd5b336000818152600460209081526040808320600160a060020a03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b610e1884848461071b565b610e248484848461153e565b1515610e2f57600080fd5b50505050565b6060610e4082610aee565b1515610e4b57600080fd5b6000828152600b602090815260409182902080548351601f600260001961010060018616150201909316929092049182018490048402810184019094528084529091830182828015610bfd5780601f10610eb357610100808354040283529160200191610bfd565b820191906000526020600020905b815481529060010190602001808311610ec15750939695505050505050565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205460ff1690565b600080610f1a83610b40565b905080600160a060020a031684600160a060020a03161480610f55575083600160a060020a0316610f4a84610620565b600160a060020a0316145b80610f655750610f658185610ee0565b949350505050565b81600160a060020a0316610f8082610b40565b600160a060020a031614610f9357600080fd5b600081815260026020526040902054600160a060020a031615610fda576000818152600260205260409020805473ffffffffffffffffffffffffffffffffffffffff191690555b5050565b6000806000610fed85856116ab565b600084815260086020908152604080832054600160a060020a038916845260079092529091205490935061102890600163ffffffff61174116565b600160a060020a03861660009081526007602052604090208054919350908390811061105057fe5b90600052602060002001549050806007600087600160a060020a0316600160a060020a031681526020019081526020016000208481548110151561109057fe5b6000918252602080832090910192909255600160a060020a03871681526007909152604090208054906110c7906000198301611a12565b50600093845260086020526040808520859055908452909220555050565b60006110f18383611753565b50600160a060020a039091166000908152600760209081526040808320805460018101825590845282842081018590559383526008909152902055565b6040805160608181018352603b82527f68747470733a2f2f7777772e6d696c6c696f6e6574686572776f7264732e636f60208301527f6d2f65786368616e67652f646973706c6179746f6b656e2f3f733d000000000092820192909252818061119783896117e3565b92506111bf8360408051908101604052806001815260200160f860020a602d0281525061132c565b92506111cb83886117e3565b92506111f38360408051908101604052806001815260200160f860020a602d0281525061132c565b92506112088667ffffffffffffffff1661144b565b9150611214838361132c565b925061123c8360408051908101604052806001815260200160f860020a602d0281525061132c565b92506112518567ffffffffffffffff1661144b565b905061125d838261132c565b925061129e836040805190810160405280600481526020017f2e706e670000000000000000000000000000000000000000000000000000000081525061132c565b98975050505050505050565b6112b48282611974565b600980546000838152600a60205260408120829055600182018355919091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af015550565b61130282610aee565b151561130d57600080fd5b6000828152600b602090815260409091208251610ae992840190611a36565b606080606080606060008088955087945084518651016040519080825280601f01601f19166020018201604052801561136f578160200160208202803883390190505b50935083925060009150600090505b85518110156113dc57858181518110151561139557fe5b90602001015160f860020a900460f860020a0283838060010194508151811015156113bc57fe5b906020010190600160f860020a031916908160001a90535060010161137e565b5060005b845181101561143e5784818151811015156113f757fe5b90602001015160f860020a900460f860020a02838380600101945081518110151561141e57fe5b906020010190600160f860020a031916908160001a9053506001016113e0565b5090979650505050505050565b606060008082818515156114945760408051808201909152600181527f300000000000000000000000000000000000000000000000000000000000000060208201529450611535565b8593505b83156114af57600190920191600a84049350611498565b826040519080825280601f01601f1916602001820160405280156114dd578160200160208202803883390190505b5091505060001982015b851561153157815160001982019160f860020a6030600a8a06010291849190811061150e57fe5b906020010190600160f860020a031916908160001a905350600a860495506114e7565b8194505b50505050919050565b60008061155385600160a060020a03166119cf565b151561156257600191506116a2565b6040517f150b7a020000000000000000000000000000000000000000000000000000000081523360048201818152600160a060020a03898116602485015260448401889052608060648501908152875160848601528751918a169463150b7a0294938c938b938b93909160a490910190602085019080838360005b838110156115f55781810151838201526020016115dd565b50505050905090810190601f1680156116225780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561164457600080fd5b505af1158015611658573d6000803e3d6000fd5b505050506040513d602081101561166e57600080fd5b5051600160e060020a031981167f150b7a020000000000000000000000000000000000000000000000000000000014925090505b50949350505050565b81600160a060020a03166116be82610b40565b600160a060020a0316146116d157600080fd5b600160a060020a0382166000908152600360205260409020546116fb90600163ffffffff61174116565b600160a060020a03909216600090815260036020908152604080832094909455918152600190915220805473ffffffffffffffffffffffffffffffffffffffff19169055565b60008282111561174d57fe5b50900390565b600081815260016020526040902054600160a060020a03161561177557600080fd5b6000818152600160208181526040808420805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03881690811790915584526003909152909120546117c3916119d7565b600160a060020a0390921660009081526003602052604090209190915550565b60408051606480825260a0820190925260609190829060009081908390819083908760208201610c8080388339019050509550600094505b60ff891615611870578551600a60ff9a8b168181049b60018901989290910616955060f860020a603087010291889190811061185357fe5b906020010190600160f860020a031916908160001a90535061181b565b899250848351016040519080825280601f01601f1916602001820160405280156118a4578160200160208202803883390190505b509150600090505b82518110156119045782818151811015156118c357fe5b90602001015160f860020a900460f860020a0282828151811015156118e457fe5b906020010190600160f860020a031916908160001a9053506001016118ac565b5060005b84811015611967578581600187030381518110151561192357fe5b90602001015160f860020a900460f860020a02828451830181518110151561194757fe5b906020010190600160f860020a031916908160001a905350600101611908565b5098975050505050505050565b600160a060020a038216151561198957600080fd5b61199382826110e5565b6040518190600160a060020a038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000903b1190565b81810182811015610b6457fe5b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b815481835581811115610ae957600083815260209020610ae9918101908301611ab4565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611a7757805160ff1916838001178555611aa4565b82800160010185558215611aa4579182015b82811115611aa4578251825591602001919060010190611a89565b50611ab0929150611ab4565b5090565b61061d91905b80821115611ab05760008155600101611aba5600a165627a7a72305820d982c0e3231a5f7f7e53408560057d035af171c2cfa306af55514c66b33476330029"}