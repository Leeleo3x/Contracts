{"Runs": "200", "SwarmSource": "bzzr://1cd4d15cf4bccf55185ebaacd1c87f1c14406b39a057562dc9f14697c323344f", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentEthBlock\",\"outputs\":[{\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialSupplyPerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalGenesisAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"availableBalanceOf\",\"outputs\":[{\"name\":\"Balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTotalSupply\",\"outputs\":[{\"name\":\"maxSupply\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founderFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstWeek\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address[]\"}],\"name\":\"setGenesisAddressArray\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preMinedFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentGenesisAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"soldCoins\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondWeek\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startSale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thirdWeek\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"genesisAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardPerBlockPerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentBlock\",\"outputs\":[{\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialBlockCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"CreateEVN\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.11+commit.68ef5810", "ConstructorArguments": "", "SourceCode": "pragma solidity ^0.4.11;\r\n\r\n/* taking ideas from FirstBlood token */\r\ncontract SafeMath {\r\n\r\nfunction safeAdd(uint256 x, uint256 y) internal returns(uint256) {\r\nuint256 z = x + y;\r\n      assert((z >= x) && (z >= y));\r\n      return z;\r\n    }\r\n\r\n    function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {\r\n      assert(x >= y);\r\n      uint256 z = x - y;\r\n      return z;\r\n    }\r\n\r\n    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\r\n      uint256 z = x * y;\r\n      assert((x == 0)||(z/x == y));\r\n      return z;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract EvenCoin is SafeMath {\r\n\r\n    // metadata\r\n    string public constant name = \"EvenCoin\";\r\n    string public constant symbol = \"EVN\";\r\n    uint256 public constant decimals = 18;\r\n    string public version = \"1.0\";\r\n\r\n    // contracts\r\n    address public founder;      // deposit address for ETH for EvenCoin\r\n    // crowdsale parameters\r\n    bool public isFinalized;              // switched to true in operational state\r\n    bool public saleStarted; //switched to true during ICO\r\n    uint public firstWeek;\r\n    uint public secondWeek;\r\n    uint public thirdWeek;\r\n    uint256 public soldCoins;\r\n    uint256 public totalGenesisAddresses;\r\n    uint256 public currentGenesisAddresses;\r\n    uint256 public initialSupplyPerAddress;\r\n    uint256 public initialBlockCount;\r\n    uint256 private minedBlocks;\r\n    uint256 public rewardPerBlockPerAddress;\r\n    uint256 private availableAmount;\r\n    uint256 private availableBalance;\r\n    uint256 private totalMaxAvailableAmount;\r\n    uint256 public constant founderFund = 5 * (10**6) * 10**decimals;   // 12.5m EvenCoin reserved for Owners\r\n    uint256 public constant preMinedFund = 10 * (10**6) * 10**decimals;   // 12.5m EvenCoin reserved for Promotion, Exchange etc.\r\n    uint256 public tokenExchangeRate = 2000; //  EvenCoin tokens per 1 ETH\r\n    mapping (address => uint256) balances;\r\n    mapping (address => bool) public genesisAddress;\r\n\r\n\r\n    // events\r\n    event CreateEVN(address indexed _to, uint256 _value);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    // constructor\r\n    function EvenCoin()\r\n    {\r\n      isFinalized = false;                   //controls pre through crowdsale state\r\n      saleStarted = false;\r\n      soldCoins = 0;\r\n      founder = '0x9e8De5BE5B046D2c85db22324260D624E0ddadF4';\r\n      initialSupplyPerAddress = 21250 * 10**decimals;\r\n      rewardPerBlockPerAddress = 898444106206663;\r\n      totalGenesisAddresses = 4000;\r\n      currentGenesisAddresses = 0;\r\n      initialBlockCount = 0;\r\n      balances[founder] = founderFund;    // Deposit tokens for Owners\r\n      CreateEVN(founder, founderFund);  // logs Owners deposit\r\n\r\n\r\n\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function currentEthBlock() constant returns (uint256 blockNumber)\r\n    {\r\n    \treturn block.number;\r\n    }\r\n\r\n    function currentBlock() constant returns (uint256 blockNumber)\r\n    {\r\n      if(initialBlockCount == 0){\r\n        return 0;\r\n      }\r\n      else{\r\n      return block.number - initialBlockCount;\r\n    }\r\n    }\r\n\r\n    function setGenesisAddressArray(address[] _address) public returns (bool success)\r\n    {\r\n      if(initialBlockCount == 0) throw;\r\n      uint256 tempGenesisAddresses = currentGenesisAddresses + _address.length;\r\n      if (tempGenesisAddresses <= totalGenesisAddresses )\r\n    \t{\r\n    \t\tif (msg.sender == founder)\r\n    \t\t{\r\n          currentGenesisAddresses = currentGenesisAddresses + _address.length;\r\n    \t\t\tfor (uint i = 0; i < _address.length; i++)\r\n    \t\t\t{\r\n    \t\t\t\tbalances[_address[i]] = initialSupplyPerAddress;\r\n    \t\t\t\tgenesisAddress[_address[i]] = true;\r\n    \t\t\t}\r\n    \t\t\treturn true;\r\n    \t\t}\r\n    \t}\r\n    \treturn false;\r\n    }\r\n\r\n    function availableBalanceOf(address _address) constant returns (uint256 Balance)\r\n    {\r\n    \tif (genesisAddress[_address])\r\n    \t{\r\n    \t\tminedBlocks = block.number - initialBlockCount;\r\n        if(minedBlocks % 2 != 0){\r\n          minedBlocks = minedBlocks - 1;\r\n        }\r\n\r\n    \t\tif (minedBlocks >= 23652000) return balances[_address];\r\n    \t\t  availableAmount = rewardPerBlockPerAddress*minedBlocks;\r\n    \t\t  totalMaxAvailableAmount = initialSupplyPerAddress - availableAmount;\r\n          availableBalance = balances[_address] - totalMaxAvailableAmount;\r\n          return availableBalance;\r\n    \t}\r\n    \telse {\r\n    \t\treturn balances[_address];\r\n      }\r\n    }\r\n\r\n    function totalSupply() constant returns (uint256 totalSupply)\r\n    {\r\n      if (initialBlockCount != 0)\r\n      {\r\n      minedBlocks = block.number - initialBlockCount;\r\n      if(minedBlocks % 2 != 0){\r\n        minedBlocks = minedBlocks - 1;\r\n      }\r\n    \tavailableAmount = rewardPerBlockPerAddress*minedBlocks;\r\n    }\r\n    else{\r\n      availableAmount = 0;\r\n    }\r\n    \treturn availableAmount*totalGenesisAddresses+founderFund+preMinedFund;\r\n    }\r\n\r\n    function maxTotalSupply() constant returns (uint256 maxSupply)\r\n    {\r\n    \treturn initialSupplyPerAddress*totalGenesisAddresses+founderFund+preMinedFund;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value)\r\n    {\r\n      if (genesisAddress[_to]) throw;\r\n\r\n      if (balances[msg.sender] < _value) throw;\r\n\r\n      if (balances[_to] + _value < balances[_to]) throw;\r\n\r\n      if (genesisAddress[msg.sender])\r\n      {\r\n    \t   minedBlocks = block.number - initialBlockCount;\r\n         if(minedBlocks % 2 != 0){\r\n           minedBlocks = minedBlocks - 1;\r\n         }\r\n    \t    if (minedBlocks < 23652000)\r\n    \t     {\r\n    \t\t       availableAmount = rewardPerBlockPerAddress*minedBlocks;\r\n    \t\t       totalMaxAvailableAmount = initialSupplyPerAddress - availableAmount;\r\n    \t\t       availableBalance = balances[msg.sender] - totalMaxAvailableAmount;\r\n    \t\t       if (_value > availableBalance) throw;\r\n    \t     }\r\n      }\r\n      balances[msg.sender] -= _value;\r\n      balances[_to] += _value;\r\n      Transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    /// @dev Accepts ether and creates new EVN tokens.\r\n    function () payable {\r\n      //bool isPreSale = true;\r\n      if (isFinalized) throw;\r\n      if (!saleStarted) throw;\r\n      if (msg.value == 0) throw;\r\n      //change exchange rate based on duration\r\n      if (now > firstWeek && now < secondWeek){\r\n        tokenExchangeRate = 1500;\r\n      }\r\n      else if (now > secondWeek && now < thirdWeek){\r\n        tokenExchangeRate = 1000;\r\n      }\r\n      else if (now > thirdWeek){\r\n        tokenExchangeRate = 500;\r\n      }\r\n      //create tokens\r\n      uint256 tokens = safeMult(msg.value, tokenExchangeRate); // check that we're not over totals\r\n      uint256 checkedSupply = safeAdd(soldCoins, tokens);\r\n\r\n      // return money if something goes wrong\r\n      if (preMinedFund < checkedSupply) throw;  // odd fractions won't be found\r\n      soldCoins = checkedSupply;\r\n      //All good. start the transfer\r\n      balances[msg.sender] += tokens;  // safeAdd not needed\r\n      CreateEVN(msg.sender, tokens);  // logs token creation\r\n    }\r\n\r\n    /// EvenCoin Ends the funding period and sends the ETH home\r\n    function finalize() external {\r\n      if (isFinalized) throw;\r\n      if (msg.sender != founder) throw; // locks finalize to the ultimate ETH owner\r\n      if (soldCoins < preMinedFund){\r\n        uint256 remainingTokens = safeSubtract(preMinedFund, soldCoins);\r\n        uint256 checkedSupply = safeAdd(soldCoins, remainingTokens);\r\n        if (preMinedFund < checkedSupply) throw;\r\n        soldCoins = checkedSupply;\r\n        balances[msg.sender] += remainingTokens;\r\n        CreateEVN(msg.sender, remainingTokens);\r\n      }\r\n      // move to operational\r\n      if(!founder.send(this.balance)) throw;\r\n      isFinalized = true;  // send the eth to EvenCoin\r\n      if (block.number % 2 != 0){\r\n        initialBlockCount = safeAdd(block.number, 1);\r\n      }\r\n      else{\r\n        initialBlockCount = block.number;\r\n      }\r\n    }\r\n\r\n    function startSale() external {\r\n      if(saleStarted) throw;\r\n      if (msg.sender != founder) throw; // locks start sale to the ultimate ETH owner\r\n      firstWeek = now + 1 weeks; //sets duration of first cutoff\r\n      secondWeek = firstWeek + 1 weeks; //sets duration of second cutoff\r\n      thirdWeek = secondWeek + 1 weeks; //sets duration of third cutoff\r\n      saleStarted = true; //start the sale\r\n    }\r\n\r\n\r\n}", "OptimizationUsed": "0", "ContractName": "EvenCoin", "ByteCode": "0x6060604052361561017e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461030857806309f6c607146103a15780630ccde0b1146103c757806318160ddd146103ed5780631cc542041461041357806325d998bb146104395780632ab4d05214610483578063313ce567146104a95780634172d080146104cf5780634bb278f3146104f55780634d853ee51461050757806354fd4d50146105595780635c474f9e146105f257806370a082311461061c57806375071c4c146106665780637ad77fd91461068c5780637e5713d9146106b2578063813df488146107215780638d4e40831461074757806395d89b411461077157806397b4ddac1461080a578063a3fcafb914610830578063a9059cbb14610856578063aa8713dd14610895578063b66a0e5d146108bb578063bb5e9eab146108cd578063d95efb98146108f3578063e00686e414610941578063e12ed13c14610967578063e5f65c711461098d575b6103065b60006000600160149054906101000a900460ff16156101a15760006000fd5b600160159054906101000a900460ff1615156101bd5760006000fd5b60003414156101cc5760006000fd5b600254421180156101de575060035442105b156101f1576105dc600f8190555061022c565b60035442118015610203575060045442105b15610216576103e8600f8190555061022b565b60045442111561022a576101f4600f819055505b5b5b61023834600f546109b3565b9150610246600554836109e8565b9050806012600a0a6298968002101561025f5760006000fd5b8060058190555081601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055503373ffffffffffffffffffffffffffffffffffffffff167fa8f2ab870366f0c8083b7dfae6795427b7f91ec2bb1dd4e0510d9101c1652635836040518082815260200191505060405180910390a25b5050565b005b341561031057fe5b610318610a14565b6040518080602001828103825283818151815260200191508051906020019080838360008314610367575b80518252602083111561036757602082019150602081019050602083039250610343565b505050905090810190601f1680156103935780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103a957fe5b6103b1610a4e565b6040518082815260200191505060405180910390f35b34156103cf57fe5b6103d7610a57565b6040518082815260200191505060405180910390f35b34156103f557fe5b6103fd610a5d565b6040518082815260200191505060405180910390f35b341561041b57fe5b610423610ad9565b6040518082815260200191505060405180910390f35b341561044157fe5b61046d600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610adf565b6040518082815260200191505060405180910390f35b341561048b57fe5b610493610c74565b6040518082815260200191505060405180910390f35b34156104b157fe5b6104b9610c99565b6040518082815260200191505060405180910390f35b34156104d757fe5b6104df610c9e565b6040518082815260200191505060405180910390f35b34156104fd57fe5b610505610ca4565b005b341561050f57fe5b610517610ee3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561056157fe5b610569610f09565b60405180806020018281038252838181518152602001915080519060200190808383600083146105b8575b8051825260208311156105b857602082019150602081019050602083039250610594565b505050905090810190601f1680156105e45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156105fa57fe5b610602610fa7565b604051808215151515815260200191505060405180910390f35b341561062457fe5b610650600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610fba565b6040518082815260200191505060405180910390f35b341561066e57fe5b610676611004565b6040518082815260200191505060405180910390f35b341561069457fe5b61069c611011565b6040518082815260200191505060405180910390f35b34156106ba57fe5b610707600480803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091905050611017565b604051808215151515815260200191505060405180910390f35b341561072957fe5b6107316111a1565b6040518082815260200191505060405180910390f35b341561074f57fe5b6107576111ae565b604051808215151515815260200191505060405180910390f35b341561077957fe5b6107816111c1565b60405180806020018281038252838181518152602001915080519060200190808383600083146107d0575b8051825260208311156107d0576020820191506020810190506020830392506107ac565b505050905090810190601f1680156107fc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561081257fe5b61081a6111fb565b6040518082815260200191505060405180910390f35b341561083857fe5b610840611201565b6040518082815260200191505060405180910390f35b341561085e57fe5b610893600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611207565b005b341561089d57fe5b6108a5611544565b6040518082815260200191505060405180910390f35b34156108c357fe5b6108cb61154a565b005b34156108d557fe5b6108dd611608565b6040518082815260200191505060405180910390f35b34156108fb57fe5b610927600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061160e565b604051808215151515815260200191505060405180910390f35b341561094957fe5b61095161162e565b6040518082815260200191505060405180910390f35b341561096f57fe5b610977611634565b6040518082815260200191505060405180910390f35b341561099557fe5b61099d61165a565b6040518082815260200191505060405180910390f35b60006000828402905060008414806109d557508284828115156109d257fe5b04145b15156109dd57fe5b8091505b5092915050565b600060008284019050838110158015610a015750828110155b1515610a0957fe5b8091505b5092915050565b604060405190810160405280600881526020017f4576656e436f696e00000000000000000000000000000000000000000000000081525081565b60004390505b90565b60085481565b60006000600954141515610aad576009544303600a8190555060006002600a54811515610a8657fe5b06141515610a9b576001600a5403600a819055505b600a54600b5402600c81905550610ab6565b6000600c819055505b6012600a0a62989680026012600a0a624c4b4002600654600c5402010190505b90565b60065481565b6000601160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610c27576009544303600a8190555060006002600a54811515610b4e57fe5b06141515610b63576001600a5403600a819055505b630168e6a0600a54101515610bb957601060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050610c6f565b600a54600b5402600c81905550600c5460085403600e81905550600e54601060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205403600d81905550600d549050610c6f565b601060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050610c6f565b5b919050565b60006012600a0a62989680026012600a0a624c4b400260065460085402010190505b90565b601281565b600f5481565b60006000600160149054906101000a900460ff1615610cc35760006000fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d205760006000fd5b6012600a0a62989680026005541015610e1257610d486012600a0a6298968002600554611660565b9150610d56600554836109e8565b9050806012600a0a62989680021015610d6f5760006000fd5b8060058190555081601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055503373ffffffffffffffffffffffffffffffffffffffff167fa8f2ab870366f0c8083b7dfae6795427b7f91ec2bb1dd4e0510d9101c1652635836040518082815260200191505060405180910390a25b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051809050600060405180830381858888f193505050501515610e8f5760006000fd5b6001600160146101000a81548160ff0219169083151502179055506000600243811515610eb857fe5b06141515610ed657610ecb4360016109e8565b600981905550610ede565b436009819055505b5b5050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f9f5780601f10610f7457610100808354040283529160200191610f9f565b820191906000526020600020905b815481529060010190602001808311610f8257829003601f168201915b505050505081565b600160159054906101000a900460ff1681565b6000601060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b6012600a0a624c4b400281565b60025481565b6000600060006000600954141561102e5760006000fd5b83516007540191506006548211151561119557600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561119457835160075401600781905550600090505b835181101561118b576008546010600086848151811015156110c657fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600160116000868481518110151561112257fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b80806001019150506110a8565b6001925061119a565b5b600092505b5050919050565b6012600a0a629896800281565b600160149054906101000a900460ff1681565b604060405190810160405280600381526020017f45564e000000000000000000000000000000000000000000000000000000000081525081565b60075481565b60055481565b601160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561125f5760006000fd5b80601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156112ac5760006000fd5b601060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481601060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401101561133a5760006000fd5b601160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611440576009544303600a8190555060006002600a548115156113a757fe5b061415156113bc576001600a5403600a819055505b630168e6a0600a54101561143f57600a54600b5402600c81905550600c5460085403600e81905550600e54601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205403600d81905550600d5481111561143e5760006000fd5b5b5b80601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555080601060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35b5050565b60035481565b600160159054906101000a900460ff16156115655760006000fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156115c25760006000fd5b62093a80420160028190555062093a806002540160038190555062093a80600354016004819055506001600160156101000a81548160ff0219169083151502179055505b565b60045481565b60116020528060005260406000206000915054906101000a900460ff1681565b600b5481565b60006000600954141561164a5760009050611657565b60095443039050611657565b5b90565b60095481565b6000600082841015151561167057fe5b82840390508091505b50929150505600a165627a7a723058201cd4d15cf4bccf55185ebaacd1c87f1c14406b39a057562dc9f14697c323344f0029"}