{"Runs": "200", "SwarmSource": "bzzr://583a73863371959fe752d9c72ecb34a8c05ad55f36f8330a9d88e5cfb50245a4", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_start\",\"type\":\"uint64\"},{\"name\":\"_cliff\",\"type\":\"uint64\"},{\"name\":\"_vesting\",\"type\":\"uint64\"}],\"name\":\"grantVestedTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"tokenGrantsCount\",\"outputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"spendableBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"setCanCreateGrants\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"grants\",\"outputs\":[{\"name\":\"granter\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"cliff\",\"type\":\"uint64\"},{\"name\":\"vesting\",\"type\":\"uint64\"},{\"name\":\"start\",\"type\":\"uint64\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newController\",\"type\":\"address\"}],\"name\":\"changeController\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_grantId\",\"type\":\"uint256\"}],\"name\":\"tokenGrant\",\"outputs\":[{\"name\":\"granter\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"vested\",\"type\":\"uint256\"},{\"name\":\"start\",\"type\":\"uint64\"},{\"name\":\"cliff\",\"type\":\"uint64\"},{\"name\":\"vesting\",\"type\":\"uint64\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cloneTokenName\",\"type\":\"string\"},{\"name\":\"_cloneDecimalUnits\",\"type\":\"uint8\"},{\"name\":\"_cloneTokenSymbol\",\"type\":\"string\"},{\"name\":\"_snapshotBlock\",\"type\":\"uint256\"},{\"name\":\"_transfersEnabled\",\"type\":\"bool\"}],\"name\":\"createCloneToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"lastTokenIsTransferableDate\",\"outputs\":[{\"name\":\"date\",\"type\":\"uint64\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"parentToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"generateTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transfersEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"parentSnapShotBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"},{\"name\":\"time\",\"type\":\"uint64\"}],\"name\":\"transferableTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"destroyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_grantId\",\"type\":\"uint256\"}],\"name\":\"revokeTokenGrant\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transfersEnabled\",\"type\":\"bool\"}],\"name\":\"enableTransfers\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newWhitelister\",\"type\":\"address\"}],\"name\":\"changeVestingWhitelister\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenFactory\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"start\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"cliff\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"vesting\",\"type\":\"uint64\"}],\"name\":\"NewTokenGrant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_cloneToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_snapshotBlock\",\"type\":\"uint256\"}],\"name\":\"NewCloneToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.8+commit.60cc1668", "ConstructorArguments": "00000000000000000000000013d685a2fd10fbffca36a394970b81fdadf7ba8d", "SourceCode": "pragma solidity ^0.4.8;\r\n\r\ncontract ERC20 {\r\n  function totalSupply() constant returns (uint);\r\n  function balanceOf(address who) constant returns (uint);\r\n  function allowance(address owner, address spender) constant returns (uint);\r\n\r\n  function transfer(address to, uint value) returns (bool ok);\r\n  function transferFrom(address from, address to, uint value) returns (bool ok);\r\n  function approve(address spender, uint value) returns (bool ok);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n\r\ncontract SafeMath {\r\n  function safeMul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function safeDiv(uint a, uint b) internal returns (uint) {\r\n    assert(b > 0);\r\n    uint c = a / b;\r\n    assert(a == b * c + a % b);\r\n    return c;\r\n  }\r\n\r\n  function safeSub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function safeAdd(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c>=a && c>=b);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function assert(bool assertion) internal {\r\n    if (!assertion) {\r\n      throw;\r\n    }\r\n  }\r\n}\r\ncontract ApproveAndCallReceiver {\r\n    function receiveApproval(address _from, uint256 _amount, address _token, bytes _data);\r\n}\r\n\r\ncontract Controlled {\r\n    /// @notice The address of the controller is the only address that can call\r\n    ///  a function with this modifier\r\n    modifier onlyController { if (msg.sender != controller) throw; _; }\r\n\r\n    address public controller;\r\n\r\n    function Controlled() { controller = msg.sender;}\r\n\r\n    /// @notice Changes the controller of the contract\r\n    /// @param _newController The new controller of the contract\r\n    function changeController(address _newController) onlyController {\r\n        controller = _newController;\r\n    }\r\n}\r\ncontract AbstractSale {\r\n  function saleFinalized() constant returns (bool);\r\n}\r\n\r\ncontract SaleWallet {\r\n  // Public variables\r\n  address public multisig;\r\n  uint public finalBlock;\r\n  AbstractSale public tokenSale;\r\n\r\n  // @dev Constructor initializes public variables\r\n  // @param _multisig The address of the multisig that will receive the funds\r\n  // @param _finalBlock Block after which the multisig can request the funds\r\n  function SaleWallet(address _multisig, uint _finalBlock, address _tokenSale) {\r\n    multisig = _multisig;\r\n    finalBlock = _finalBlock;\r\n    tokenSale = AbstractSale(_tokenSale);\r\n  }\r\n\r\n  // @dev Receive all sent funds without any further logic\r\n  function () public payable {}\r\n\r\n  // @dev Withdraw function sends all the funds to the wallet if conditions are correct\r\n  function withdraw() public {\r\n    if (msg.sender != multisig) throw;                       // Only the multisig can request it\r\n    if (block.number > finalBlock) return doWithdraw();      // Allow after the final block\r\n    if (tokenSale.saleFinalized()) return doWithdraw();      // Allow when sale is finalized\r\n  }\r\n\r\n  function doWithdraw() internal {\r\n    if (!multisig.send(this.balance)) throw;\r\n  }\r\n}\r\n\r\ncontract Controller {\r\n    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\r\n    /// @param _owner The address that sent the ether to create tokens\r\n    /// @return True if the ether is accepted, false if it throws\r\n    function proxyPayment(address _owner) payable returns(bool);\r\n\r\n    /// @notice Notifies the controller about a token transfer allowing the\r\n    ///  controller to react if desired\r\n    /// @param _from The origin of the transfer\r\n    /// @param _to The destination of the transfer\r\n    /// @param _amount The amount of the transfer\r\n    /// @return False if the controller does not authorize the transfer\r\n    function onTransfer(address _from, address _to, uint _amount) returns(bool);\r\n\r\n    /// @notice Notifies the controller about an approval allowing the\r\n    ///  controller to react if desired\r\n    /// @param _owner The address that calls `approve()`\r\n    /// @param _spender The spender in the `approve()` call\r\n    /// @param _amount The amount in the `approve()` call\r\n    /// @return False if the controller does not authorize the approval\r\n    function onApprove(address _owner, address _spender, uint _amount)\r\n        returns(bool);\r\n}\r\n\r\ncontract ANPlaceholder is Controller {\r\n  address public sale;\r\n  ANT public token;\r\n\r\n  function ANPlaceholder(address _sale, address _ant) {\r\n    sale = _sale;\r\n    token = ANT(_ant);\r\n  }\r\n\r\n  function changeController(address network) public {\r\n    if (msg.sender != sale) throw;\r\n    token.changeController(network);\r\n    suicide(network);\r\n  }\r\n\r\n  // In between the sale and the network. Default settings for allowing token transfers.\r\n  function proxyPayment(address _owner) payable public returns (bool) {\r\n    throw;\r\n    return false;\r\n  }\r\n\r\n  function onTransfer(address _from, address _to, uint _amount) public returns (bool) {\r\n    return true;\r\n  }\r\n\r\n  function onApprove(address _owner, address _spender, uint _amount) public returns (bool) {\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\ncontract MiniMeToken is ERC20, Controlled {\r\n    string public name;                //The Token's name: e.g. DigixDAO Tokens\r\n    uint8 public decimals;             //Number of decimals of the smallest unit\r\n    string public symbol;              //An identifier: e.g. REP\r\n    string public version = 'MMT_0.1'; //An arbitrary versioning scheme\r\n\r\n\r\n    /// @dev `Checkpoint` is the structure that attaches a block number to a\r\n    ///  given value, the block number attached is the one that last changed the\r\n    ///  value\r\n    struct  Checkpoint {\r\n\r\n        // `fromBlock` is the block number that the value was generated from\r\n        uint128 fromBlock;\r\n\r\n        // `value` is the amount of tokens at a specific block number\r\n        uint128 value;\r\n    }\r\n\r\n    // `parentToken` is the Token address that was cloned to produce this token;\r\n    //  it will be 0x0 for a token that was not cloned\r\n    MiniMeToken public parentToken;\r\n\r\n    // `parentSnapShotBlock` is the block number from the Parent Token that was\r\n    //  used to determine the initial distribution of the Clone Token\r\n    uint public parentSnapShotBlock;\r\n\r\n    // `creationBlock` is the block number that the Clone Token was created\r\n    uint public creationBlock;\r\n\r\n    // `balances` is the map that tracks the balance of each address, in this\r\n    //  contract when the balance changes the block number that the change\r\n    //  occurred is also included in the map\r\n    mapping (address => Checkpoint[]) balances;\r\n\r\n    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    // Tracks the history of the `totalSupply` of the token\r\n    Checkpoint[] totalSupplyHistory;\r\n\r\n    // Flag that determines if the token is transferable or not.\r\n    bool public transfersEnabled;\r\n\r\n    // The factory used to create new clone tokens\r\n    MiniMeTokenFactory public tokenFactory;\r\n\r\n////////////////\r\n// Constructor\r\n////////////////\r\n\r\n    /// @notice Constructor to create a MiniMeToken\r\n    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\r\n    ///  will create the Clone token contracts, the token factory needs to be\r\n    ///  deployed first\r\n    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\r\n    ///  new token\r\n    /// @param _parentSnapShotBlock Block of the parent token that will\r\n    ///  determine the initial distribution of the clone token, set to 0 if it\r\n    ///  is a new token\r\n    /// @param _tokenName Name of the new token\r\n    /// @param _decimalUnits Number of decimals of the new token\r\n    /// @param _tokenSymbol Token Symbol for the new token\r\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\r\n    function MiniMeToken(\r\n        address _tokenFactory,\r\n        address _parentToken,\r\n        uint _parentSnapShotBlock,\r\n        string _tokenName,\r\n        uint8 _decimalUnits,\r\n        string _tokenSymbol,\r\n        bool _transfersEnabled\r\n    ) {\r\n        tokenFactory = MiniMeTokenFactory(_tokenFactory);\r\n        name = _tokenName;                                 // Set the name\r\n        decimals = _decimalUnits;                          // Set the decimals\r\n        symbol = _tokenSymbol;                             // Set the symbol\r\n        parentToken = MiniMeToken(_parentToken);\r\n        parentSnapShotBlock = _parentSnapShotBlock;\r\n        transfersEnabled = _transfersEnabled;\r\n        creationBlock = block.number;\r\n    }\r\n\r\n\r\n///////////////////\r\n// ERC20 Methods\r\n///////////////////\r\n\r\n    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _amount) returns (bool success) {\r\n        if (!transfersEnabled) throw;\r\n        return doTransfer(msg.sender, _to, _amount);\r\n    }\r\n\r\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\r\n    ///  is approved by `_from`\r\n    /// @param _from The address holding the tokens being transferred\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be transferred\r\n    /// @return True if the transfer was successful\r\n    function transferFrom(address _from, address _to, uint256 _amount\r\n    ) returns (bool success) {\r\n\r\n        // The controller of this contract can move tokens around at will,\r\n        //  this is important to recognize! Confirm that you trust the\r\n        //  controller of this contract, which in most situations should be\r\n        //  another open source smart contract or 0x0\r\n        if (msg.sender != controller) {\r\n            if (!transfersEnabled) throw;\r\n\r\n            // The standard ERC 20 transferFrom functionality\r\n            if (allowed[_from][msg.sender] < _amount) throw;\r\n            allowed[_from][msg.sender] -= _amount;\r\n        }\r\n        return doTransfer(_from, _to, _amount);\r\n    }\r\n\r\n    /// @dev This is the actual transfer function in the token contract, it can\r\n    ///  only be called by other functions in this contract.\r\n    /// @param _from The address holding the tokens being transferred\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be transferred\r\n    /// @return True if the transfer was successful\r\n    function doTransfer(address _from, address _to, uint _amount\r\n    ) internal returns(bool) {\r\n\r\n           if (_amount == 0) {\r\n               return true;\r\n           }\r\n\r\n           // Do not allow transfer to 0x0 or the token contract itself\r\n           if ((_to == 0) || (_to == address(this))) throw;\r\n\r\n           // If the amount being transfered is more than the balance of the\r\n           //  account the transfer returns false\r\n           var previousBalanceFrom = balanceOfAt(_from, block.number);\r\n           if (previousBalanceFrom < _amount) {\r\n               throw;\r\n           }\r\n\r\n           // Alerts the token controller of the transfer\r\n           if (isContract(controller)) {\r\n               if (!Controller(controller).onTransfer(_from, _to, _amount)) throw;\r\n           }\r\n\r\n           // First update the balance array with the new value for the address\r\n           //  sending the tokens\r\n           updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\r\n\r\n           // Then update the balance array with the new value for the address\r\n           //  receiving the tokens\r\n           var previousBalanceTo = balanceOfAt(_to, block.number);\r\n           if (previousBalanceTo + _amount < previousBalanceTo) throw; // Check for overflow\r\n           updateValueAtNow(balances[_to], previousBalanceTo + _amount);\r\n\r\n           // An event to make the transfer easy to find on the blockchain\r\n           Transfer(_from, _to, _amount);\r\n\r\n           return true;\r\n    }\r\n\r\n    /// @param _owner The address that's balance is being requested\r\n    /// @return The balance of `_owner` at the current block\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balanceOfAt(_owner, block.number);\r\n    }\r\n\r\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\r\n    ///  its behalf. This is a modified version of the ERC20 approve function\r\n    ///  to be a little bit safer\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _amount The amount of tokens to be approved for transfer\r\n    /// @return True if the approval was successful\r\n    function approve(address _spender, uint256 _amount) returns (bool success) {\r\n        if (!transfersEnabled) throw;\r\n\r\n        // To change the approve amount you first have to reduce the addresses\u00b4\r\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        if ((_amount!=0) && (allowed[msg.sender][_spender] !=0)) throw;\r\n\r\n        // Alerts the token controller of the approve function call\r\n        if (isContract(controller)) {\r\n            if (!Controller(controller).onApprove(msg.sender, _spender, _amount))\r\n                throw;\r\n        }\r\n\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    /// @dev This function makes it easy to read the `allowed[]` map\r\n    /// @param _owner The address of the account that owns the token\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\r\n    ///  to spend\r\n    function allowance(address _owner, address _spender\r\n    ) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\r\n    ///  its behalf, and then a function is triggered in the contract that is\r\n    ///  being approved, `_spender`. This allows users to use their tokens to\r\n    ///  interact with contracts in one function call instead of two\r\n    /// @param _spender The address of the contract able to transfer the tokens\r\n    /// @param _amount The amount of tokens to be approved for transfer\r\n    /// @return True if the function call was successful\r\n    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\r\n    ) returns (bool success) {\r\n        approve(_spender, _amount);\r\n\r\n        // This portion is copied from ConsenSys's Standard Token Contract. It\r\n        //  calls the receiveApproval function that is part of the contract that\r\n        //  is being approved (`_spender`). The function should look like:\r\n        //  `receiveApproval(address _from, uint256 _amount, address\r\n        //  _tokenContract, bytes _extraData)` It is assumed that the call\r\n        //  *should* succeed, otherwise the plain vanilla approve would be used\r\n        ApproveAndCallReceiver(_spender).receiveApproval(\r\n           msg.sender,\r\n           _amount,\r\n           this,\r\n           _extraData\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /// @dev This function makes it easy to get the total number of tokens\r\n    /// @return The total number of tokens\r\n    function totalSupply() constant returns (uint) {\r\n        return totalSupplyAt(block.number);\r\n    }\r\n\r\n\r\n////////////////\r\n// Query balance and totalSupply in History\r\n////////////////\r\n\r\n    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @param _blockNumber The block number when the balance is queried\r\n    /// @return The balance at `_blockNumber`\r\n    function balanceOfAt(address _owner, uint _blockNumber) constant\r\n        returns (uint) {\r\n\r\n        // These next few lines are used when the balance of the token is\r\n        //  requested before a check point was ever created for this token, it\r\n        //  requires that the `parentToken.balanceOfAt` be queried at the\r\n        //  genesis block for that token as this contains initial balance of\r\n        //  this token\r\n        if ((balances[_owner].length == 0)\r\n            || (balances[_owner][0].fromBlock > _blockNumber)) {\r\n            if (address(parentToken) != 0) {\r\n                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\r\n            } else {\r\n                // Has no parent\r\n                return 0;\r\n            }\r\n\r\n        // This will return the expected balance during normal situations\r\n        } else {\r\n            return getValueAt(balances[_owner], _blockNumber);\r\n        }\r\n    }\r\n\r\n    /// @notice Total amount of tokens at a specific `_blockNumber`.\r\n    /// @param _blockNumber The block number when the totalSupply is queried\r\n    /// @return The total amount of tokens at `_blockNumber`\r\n    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\r\n\r\n        // These next few lines are used when the totalSupply of the token is\r\n        //  requested before a check point was ever created for this token, it\r\n        //  requires that the `parentToken.totalSupplyAt` be queried at the\r\n        //  genesis block for this token as that contains totalSupply of this\r\n        //  token at this block number.\r\n        if ((totalSupplyHistory.length == 0)\r\n            || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\r\n            if (address(parentToken) != 0) {\r\n                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\r\n            } else {\r\n                return 0;\r\n            }\r\n\r\n        // This will return the expected totalSupply during normal situations\r\n        } else {\r\n            return getValueAt(totalSupplyHistory, _blockNumber);\r\n        }\r\n    }\r\n\r\n    function min(uint a, uint b) internal returns (uint) {\r\n      return a < b ? a : b;\r\n    }\r\n\r\n////////////////\r\n// Clone Token Method\r\n////////////////\r\n\r\n    /// @notice Creates a new clone token with the initial distribution being\r\n    ///  this token at `_snapshotBlock`\r\n    /// @param _cloneTokenName Name of the clone token\r\n    /// @param _cloneDecimalUnits Number of decimals of the smallest unit\r\n    /// @param _cloneTokenSymbol Symbol of the clone token\r\n    /// @param _snapshotBlock Block when the distribution of the parent token is\r\n    ///  copied to set the initial distribution of the new clone token;\r\n    ///  if the block is higher than the actual block, the current block is used\r\n    /// @param _transfersEnabled True if transfers are allowed in the clone\r\n    /// @return The address of the new MiniMeToken Contract\r\n    function createCloneToken(\r\n        string _cloneTokenName,\r\n        uint8 _cloneDecimalUnits,\r\n        string _cloneTokenSymbol,\r\n        uint _snapshotBlock,\r\n        bool _transfersEnabled\r\n        ) returns(address) {\r\n        if (_snapshotBlock > block.number) _snapshotBlock = block.number;\r\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\r\n            this,\r\n            _snapshotBlock,\r\n            _cloneTokenName,\r\n            _cloneDecimalUnits,\r\n            _cloneTokenSymbol,\r\n            _transfersEnabled\r\n            );\r\n\r\n        cloneToken.changeController(msg.sender);\r\n\r\n        // An event to make the token easy to find on the blockchain\r\n        NewCloneToken(address(cloneToken), _snapshotBlock);\r\n        return address(cloneToken);\r\n    }\r\n\r\n////////////////\r\n// Generate and destroy tokens\r\n////////////////\r\n\r\n    /// @notice Generates `_amount` tokens that are assigned to `_owner`\r\n    /// @param _owner The address that will be assigned the new tokens\r\n    /// @param _amount The quantity of tokens generated\r\n    /// @return True if the tokens are generated correctly\r\n    function generateTokens(address _owner, uint _amount\r\n    ) onlyController returns (bool) {\r\n        uint curTotalSupply = getValueAt(totalSupplyHistory, block.number);\r\n        if (curTotalSupply + _amount < curTotalSupply) throw; // Check for overflow\r\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\r\n        var previousBalanceTo = balanceOf(_owner);\r\n        if (previousBalanceTo + _amount < previousBalanceTo) throw; // Check for overflow\r\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\r\n        Transfer(0, _owner, _amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    /// @notice Burns `_amount` tokens from `_owner`\r\n    /// @param _owner The address that will lose the tokens\r\n    /// @param _amount The quantity of tokens to burn\r\n    /// @return True if the tokens are burned correctly\r\n    function destroyTokens(address _owner, uint _amount\r\n    ) onlyController returns (bool) {\r\n        uint curTotalSupply = getValueAt(totalSupplyHistory, block.number);\r\n        if (curTotalSupply < _amount) throw;\r\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\r\n        var previousBalanceFrom = balanceOf(_owner);\r\n        if (previousBalanceFrom < _amount) throw;\r\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\r\n        Transfer(_owner, 0, _amount);\r\n        return true;\r\n    }\r\n\r\n////////////////\r\n// Enable tokens transfers\r\n////////////////\r\n\r\n\r\n    /// @notice Enables token holders to transfer their tokens freely if true\r\n    /// @param _transfersEnabled True if transfers are allowed in the clone\r\n    function enableTransfers(bool _transfersEnabled) onlyController {\r\n        transfersEnabled = _transfersEnabled;\r\n    }\r\n\r\n////////////////\r\n// Internal helper functions to query and set a value in a snapshot array\r\n////////////////\r\n\r\n    /// @dev `getValueAt` retrieves the number of tokens at a given block number\r\n    /// @param checkpoints The history of values being queried\r\n    /// @param _block The block number to retrieve the value at\r\n    /// @return The number of tokens being queried\r\n    function getValueAt(Checkpoint[] storage checkpoints, uint _block\r\n    ) constant internal returns (uint) {\r\n        if (checkpoints.length == 0) return 0;\r\n\r\n        // Shortcut for the actual value\r\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\r\n            return checkpoints[checkpoints.length-1].value;\r\n        if (_block < checkpoints[0].fromBlock) return 0;\r\n\r\n        // Binary search of the value in the array\r\n        uint min = 0;\r\n        uint max = checkpoints.length-1;\r\n        while (max > min) {\r\n            uint mid = (max + min + 1)/ 2;\r\n            if (checkpoints[mid].fromBlock<=_block) {\r\n                min = mid;\r\n            } else {\r\n                max = mid-1;\r\n            }\r\n        }\r\n        return checkpoints[min].value;\r\n    }\r\n\r\n    /// @dev `updateValueAtNow` used to update the `balances` map and the\r\n    ///  `totalSupplyHistory`\r\n    /// @param checkpoints The history of data being updated\r\n    /// @param _value The new number of tokens\r\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\r\n    ) internal  {\r\n        if ((checkpoints.length == 0)\r\n        || (checkpoints[checkpoints.length -1].fromBlock < block.number)) {\r\n               Checkpoint newCheckPoint = checkpoints[ checkpoints.length++ ];\r\n               newCheckPoint.fromBlock =  uint128(block.number);\r\n               newCheckPoint.value = uint128(_value);\r\n           } else {\r\n               Checkpoint oldCheckPoint = checkpoints[checkpoints.length-1];\r\n               oldCheckPoint.value = uint128(_value);\r\n           }\r\n    }\r\n\r\n    /// @dev Internal function to determine if an address is a contract\r\n    /// @param _addr The address being queried\r\n    /// @return True if `_addr` is a contract\r\n    function isContract(address _addr) constant internal returns(bool) {\r\n        uint size;\r\n        if (_addr == 0) return false;\r\n        assembly {\r\n            size := extcodesize(_addr)\r\n        }\r\n        return size>0;\r\n    }\r\n\r\n    /// @notice The fallback function: If the contract's controller has not been\r\n    ///  set to 0, then the `proxyPayment` method is called which relays the\r\n    ///  ether and creates tokens as described in the token controller contract\r\n    function ()  payable {\r\n        if (isContract(controller)) {\r\n            if (! Controller(controller).proxyPayment.value(msg.value)(msg.sender))\r\n                throw;\r\n        } else {\r\n            throw;\r\n        }\r\n    }\r\n\r\n\r\n////////////////\r\n// Events\r\n////////////////\r\n    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\r\n}\r\n\r\n\r\n////////////////\r\n// MiniMeTokenFactory\r\n////////////////\r\n\r\n/// @dev This contract is used to generate clone contracts from a contract.\r\n///  In solidity this is the way to create a contract from a contract of the\r\n///  same class\r\ncontract MiniMeTokenFactory {\r\n\r\n    /// @notice Update the DApp by creating a new token with new functionalities\r\n    ///  the msg.sender becomes the controller of this clone token\r\n    /// @param _parentToken Address of the token being cloned\r\n    /// @param _snapshotBlock Block of the parent token that will\r\n    ///  determine the initial distribution of the clone token\r\n    /// @param _tokenName Name of the new token\r\n    /// @param _decimalUnits Number of decimals of the new token\r\n    /// @param _tokenSymbol Token Symbol for the new token\r\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\r\n    /// @return The address of the new token contract\r\n    function createCloneToken(\r\n        address _parentToken,\r\n        uint _snapshotBlock,\r\n        string _tokenName,\r\n        uint8 _decimalUnits,\r\n        string _tokenSymbol,\r\n        bool _transfersEnabled\r\n    ) returns (MiniMeToken) {\r\n        MiniMeToken newToken = new MiniMeToken(\r\n            this,\r\n            _parentToken,\r\n            _snapshotBlock,\r\n            _tokenName,\r\n            _decimalUnits,\r\n            _tokenSymbol,\r\n            _transfersEnabled\r\n            );\r\n\r\n        newToken.changeController(msg.sender);\r\n        return newToken;\r\n    }\r\n}\r\n\r\n\r\n/*\r\n    Copyright 2017, Jorge Izquierdo (Aragon Foundation)\r\n\r\n    Based on VestedToken.sol from https://github.com/OpenZeppelin/zeppelin-solidity\r\n\r\n    SafeMath \u2013 Copyright (c) 2016 Smart Contract Solutions, Inc.\r\n    MiniMeToken \u2013 Copyright 2017, Jordi Baylina (Giveth)\r\n */\r\n\r\n// @dev MiniMeIrrevocableVestedToken is a derived version of MiniMeToken adding the\r\n// ability to createTokenGrants which are basically a transfer that limits the\r\n// receiver of the tokens how can he spend them over time.\r\n\r\n// For simplicity, token grants are not saved in MiniMe type checkpoints.\r\n// Vanilla cloning ANT will clone it into a MiniMeToken without vesting.\r\n// More complex cloning could account for past vesting calendars.\r\n\r\ncontract MiniMeIrrevocableVestedToken is MiniMeToken, SafeMath {\r\n  // Keep the struct at 2 sstores (1 slot for value + 64 * 3 (dates) + 20 (address) = 2 slots (2nd slot is 212 bytes, lower than 256))\r\n  struct TokenGrant {\r\n    address granter;\r\n    uint256 value;\r\n    uint64 cliff;\r\n    uint64 vesting;\r\n    uint64 start;\r\n  }\r\n\r\n  event NewTokenGrant(address indexed from, address indexed to, uint256 value, uint64 start, uint64 cliff, uint64 vesting);\r\n\r\n  mapping (address => TokenGrant[]) public grants;\r\n\r\n  mapping (address => bool) canCreateGrants;\r\n  address vestingWhitelister;\r\n\r\n  modifier canTransfer(address _sender, uint _value) {\r\n    if (_value > spendableBalanceOf(_sender)) throw;\r\n    _;\r\n  }\r\n\r\n  modifier onlyVestingWhitelister {\r\n    if (msg.sender != vestingWhitelister) throw;\r\n    _;\r\n  }\r\n\r\n  function MiniMeIrrevocableVestedToken (\r\n      address _tokenFactory,\r\n      address _parentToken,\r\n      uint _parentSnapShotBlock,\r\n      string _tokenName,\r\n      uint8 _decimalUnits,\r\n      string _tokenSymbol,\r\n      bool _transfersEnabled\r\n  ) MiniMeToken(_tokenFactory, _parentToken, _parentSnapShotBlock, _tokenName, _decimalUnits, _tokenSymbol, _transfersEnabled) {\r\n    vestingWhitelister = msg.sender;\r\n    doSetCanCreateGrants(vestingWhitelister, true);\r\n  }\r\n\r\n  // @dev Add canTransfer modifier before allowing transfer and transferFrom to go through\r\n  function transfer(address _to, uint _value)\r\n           canTransfer(msg.sender, _value)\r\n           public\r\n           returns (bool success) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint _value)\r\n           canTransfer(_from, _value)\r\n           public\r\n           returns (bool success) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function spendableBalanceOf(address _holder) constant public returns (uint) {\r\n    return transferableTokens(_holder, uint64(now));\r\n  }\r\n\r\n  function grantVestedTokens(\r\n    address _to,\r\n    uint256 _value,\r\n    uint64 _start,\r\n    uint64 _cliff,\r\n    uint64 _vesting) public {\r\n\r\n    // Check start, cliff and vesting are properly order to ensure correct functionality of the formula.\r\n    if (_cliff < _start) throw;\r\n    if (_vesting < _start) throw;\r\n    if (_vesting < _cliff) throw;\r\n\r\n    if (!canCreateGrants[msg.sender]) throw;\r\n    if (tokenGrantsCount(_to) > 20) throw;   // To prevent a user being spammed and have his balance locked (out of gas attack when calculating vesting).\r\n\r\n    TokenGrant memory grant = TokenGrant(msg.sender, _value, _cliff, _vesting, _start);\r\n    grants[_to].push(grant);\r\n\r\n    if (!transfer(_to, _value)) throw;\r\n\r\n    NewTokenGrant(msg.sender, _to, _value, _cliff, _vesting, _start);\r\n  }\r\n\r\n  function setCanCreateGrants(address _addr, bool _allowed)\r\n           onlyVestingWhitelister public {\r\n    doSetCanCreateGrants(_addr, _allowed);\r\n  }\r\n\r\n  function doSetCanCreateGrants(address _addr, bool _allowed)\r\n           internal {\r\n    canCreateGrants[_addr] = _allowed;\r\n  }\r\n\r\n  function changeVestingWhitelister(address _newWhitelister) onlyVestingWhitelister public {\r\n    doSetCanCreateGrants(vestingWhitelister, false);\r\n    vestingWhitelister = _newWhitelister;\r\n    doSetCanCreateGrants(vestingWhitelister, true);\r\n  }\r\n\r\n  // @dev Not allow token grants\r\n  function revokeTokenGrant(address _holder, uint _grantId) public {\r\n    throw;\r\n  }\r\n\r\n  //\r\n  function tokenGrantsCount(address _holder) constant public returns (uint index) {\r\n    return grants[_holder].length;\r\n  }\r\n\r\n  function tokenGrant(address _holder, uint _grantId) constant public returns (address granter, uint256 value, uint256 vested, uint64 start, uint64 cliff, uint64 vesting) {\r\n    TokenGrant grant = grants[_holder][_grantId];\r\n\r\n    granter = grant.granter;\r\n    value = grant.value;\r\n    start = grant.start;\r\n    cliff = grant.cliff;\r\n    vesting = grant.vesting;\r\n\r\n    vested = vestedTokens(grant, uint64(now));\r\n  }\r\n\r\n  function vestedTokens(TokenGrant grant, uint64 time) internal constant returns (uint256) {\r\n    return calculateVestedTokens(\r\n      grant.value,\r\n      uint256(time),\r\n      uint256(grant.start),\r\n      uint256(grant.cliff),\r\n      uint256(grant.vesting)\r\n    );\r\n  }\r\n\r\n  //  transferableTokens\r\n  //   |                         _/--------   NonVestedTokens\r\n  //   |                       _/\r\n  //   |                     _/\r\n  //   |                   _/\r\n  //   |                 _/\r\n  //   |                /\r\n  //   |              .|\r\n  //   |            .  |\r\n  //   |          .    |\r\n  //   |        .      |\r\n  //   |      .        |\r\n  //   |    .          |\r\n  //   +===+===========+---------+----------> time\r\n  //      Start       Clift    Vesting\r\n\r\n  function calculateVestedTokens(\r\n    uint256 tokens,\r\n    uint256 time,\r\n    uint256 start,\r\n    uint256 cliff,\r\n    uint256 vesting) internal constant returns (uint256)\r\n    {\r\n\r\n    // Shortcuts for before cliff and after vesting cases.\r\n    if (time < cliff) return 0;\r\n    if (time >= vesting) return tokens;\r\n\r\n    // Interpolate all vested tokens.\r\n    // As before cliff the shortcut returns 0, we can use just this function to\r\n    // calculate it.\r\n\r\n    // vestedTokens = tokens * (time - start) / (vesting - start)\r\n    uint256 vestedTokens = safeDiv(\r\n                                  safeMul(\r\n                                    tokens,\r\n                                    safeSub(time, start)\r\n                                    ),\r\n                                  safeSub(vesting, start)\r\n                                  );\r\n\r\n    return vestedTokens;\r\n  }\r\n\r\n  function nonVestedTokens(TokenGrant grant, uint64 time) internal constant returns (uint256) {\r\n    // Of all the tokens of the grant, how many of them are not vested?\r\n    // grantValue - vestedTokens\r\n    return safeSub(grant.value, vestedTokens(grant, time));\r\n  }\r\n\r\n  // @dev The date in which all tokens are transferable for the holder\r\n  // Useful for displaying purposes (not used in any logic calculations)\r\n  function lastTokenIsTransferableDate(address holder) constant public returns (uint64 date) {\r\n    date = uint64(now);\r\n    uint256 grantIndex = tokenGrantsCount(holder);\r\n    for (uint256 i = 0; i < grantIndex; i++) {\r\n      date = max64(grants[holder][i].vesting, date);\r\n    }\r\n    return date;\r\n  }\r\n\r\n  // @dev How many tokens can a holder transfer at a point in time\r\n  function transferableTokens(address holder, uint64 time) constant public returns (uint256) {\r\n    uint256 grantIndex = tokenGrantsCount(holder);\r\n\r\n    if (grantIndex == 0) return balanceOf(holder); // shortcut for holder without grants\r\n\r\n    // Iterate through all the grants the holder has, and add all non-vested tokens\r\n    uint256 nonVested = 0;\r\n    for (uint256 i = 0; i < grantIndex; i++) {\r\n      nonVested = safeAdd(nonVested, nonVestedTokens(grants[holder][i], time));\r\n    }\r\n\r\n    // Balance - totalNonVested is the amount of tokens a holder can transfer at any given time\r\n    return safeSub(balanceOf(holder), nonVested);\r\n  }\r\n}\r\n\r\n/*\r\n    Copyright 2017, Jorge Izquierdo (Aragon Foundation)\r\n*/\r\n\r\ncontract ANT is MiniMeIrrevocableVestedToken {\r\n  // @dev ANT constructor just parametrizes the MiniMeIrrevocableVestedToken constructor\r\n  function ANT(\r\n    address _tokenFactory\r\n  ) MiniMeIrrevocableVestedToken(\r\n    _tokenFactory,\r\n    0x0,                    // no parent token\r\n    0,                      // no snapshot block number from parent\r\n    \"Aragon Network Token\", // Token name\r\n    18,                     // Decimals\r\n    \"ANT\",                  // Symbol\r\n    true                    // Enable transfers\r\n    ) {}\r\n}", "OptimizationUsed": "1", "ContractName": "ANT", "ByteCode": "0x6060604052361561018f5763ffffffff60e060020a600035041662e1986d811461024657806302a72a4c1461027d57806306fdde03146102a8578063095ea7b3146103355780630f8f8b8314610365578063176345141461039057806318160ddd146103af5780631f9a391c146103ce57806323b872dd146103ee5780632c71e60a14610424578063313ce567146104825780633cebb823146104a55780634ee2cd7e146104c057806354fd4d50146104ee578063600e85b71461057b5780636638c087146105e05780636c182e991461069d57806370a08231146106d357806380a54001146106fe578063827f32c01461072757806395d89b4114610757578063981b24d0146107e4578063a9059cbb14610806578063bef97c8714610836578063c5bcc4f114610857578063cae9ca5114610876578063d347c205146108ea578063d3ce77fe14610922578063dd62ed3e14610952578063e77772fe14610983578063eb944e4c146109ac578063f41e60c5146109ca578063f77c4791146109de578063fb13a70714610a07575b6102445b6000546101a890600160a060020a0316610a22565b1561023c57600080546040805160209081019390935280517ff48c3054000000000000000000000000000000000000000000000000000000008152600160a060020a0333811660048301529151919092169263f48c30549234926024808301939282900301818588803b156100005761235a5a03f1156100005750506040515115159150610237905057610000565b610241565b610000565b5b565b005b3461000057610244600160a060020a036004351660243567ffffffffffffffff60443581169060643581169060843516610a4f565b005b3461000057610296600160a060020a0360043516610d1b565b60408051918252519081900360200190f35b34610000576102b5610d3a565b6040805160208082528351818301528351919283929083019185019080838382156102fb575b8051825260208311156102fb57601f1990920191602091820191016102db565b505050905090810190601f1680156103275780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3461000057610351600160a060020a0360043516602435610dc7565b604080519115158252519081900360200190f35b3461000057610296600160a060020a0360043516610f2f565b60408051918252519081900360200190f35b3461000057610296610f43565b60408051918252519081900360200190f35b3461000057610296610f49565b60408051918252519081900360200190f35b3461000057610244600160a060020a03600435166024351515610f5a565b005b3461000057610351600160a060020a0360043581169060243516604435610f85565b604080519115158252519081900360200190f35b3461000057610440600160a060020a0360043516602435610fb6565b60408051600160a060020a039096168652602086019490945267ffffffffffffffff928316858501529082166060850152166080830152519081900360a00190f35b346100005761048f611020565b6040805160ff9092168252519081900360200190f35b3461000057610244600160a060020a0360043516611029565b005b3461000057610296600160a060020a0360043516602435611064565b60408051918252519081900360200190f35b34610000576102b56111a8565b6040805160208082528351818301528351919283929083019185019080838382156102fb575b8051825260208311156102fb57601f1990920191602091820191016102db565b505050905090810190601f1680156103275780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3461000057610597600160a060020a0360043516602435611236565b60408051600160a060020a03909716875260208701959095528585019390935267ffffffffffffffff9182166060860152811660808501521660a0830152519081900360c00190f35b3461000057610681600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284375050604080516020601f818a01358b0180359182018390048302840183018552818452989a60ff8b35169a90999401975091955091820193509150819084018382808284375094965050843594602001351515935061130b92505050565b60408051600160a060020a039092168252519081900360200190f35b34610000576106b6600160a060020a036004351661155f565b6040805167ffffffffffffffff9092168252519081900360200190f35b3461000057610296600160a060020a03600435166115e3565b60408051918252519081900360200190f35b34610000576106816115f7565b60408051600160a060020a039092168252519081900360200190f35b3461000057610351600160a060020a0360043516602435611606565b604080519115158252519081900360200190f35b34610000576102b56116dc565b6040805160208082528351818301528351919283929083019185019080838382156102fb575b8051825260208311156102fb57601f1990920191602091820191016102db565b505050905090810190601f1680156103275780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b346100005761029660043561176a565b60408051918252519081900360200190f35b3461000057610351600160a060020a0360043516602435611852565b604080519115158252519081900360200190f35b3461000057610351611881565b604080519115158252519081900360200190f35b346100005761029661188a565b60408051918252519081900360200190f35b3461000057604080516020600460443581810135601f8101849004840285018401909552848452610351948235600160a060020a031694602480359560649492939190920191819084018382808284375094965061189095505050505050565b604080519115158252519081900360200190f35b3461000057610296600160a060020a036004351667ffffffffffffffff602435166119a3565b60408051918252519081900360200190f35b3461000057610351600160a060020a0360043516602435611aad565b604080519115158252519081900360200190f35b3461000057610296600160a060020a0360043581169060243516611b7f565b60408051918252519081900360200190f35b3461000057610681611bac565b60408051600160a060020a039092168252519081900360200190f35b3461000057610244600160a060020a036004351660243561023c565b005b34610000576102446004351515611bc9565b005b3461000057610681611bf7565b60408051600160a060020a039092168252519081900360200190f35b3461000057610244600160a060020a0360043516611c06565b005b600080600160a060020a0383161515610a3e5760009150610a49565b823b90506000811191505b50919050565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915267ffffffffffffffff8481169084161015610a9457610000565b8367ffffffffffffffff168267ffffffffffffffff161015610ab557610000565b8267ffffffffffffffff168267ffffffffffffffff161015610ad657610000565b600160a060020a0333166000908152600d602052604090205460ff161515610afd57610000565b6014610b0887610d1b565b1115610b1357610000565b506040805160a081018252600160a060020a033381168252602080830188905267ffffffffffffffff808716848601528581166060850152871660808401529088166000908152600c909152919091208054600181018083558281838015829011610bdf57600302816003028360005260206000209182019101610bdf91905b80821115610bdb578054600160a060020a03191681556000600182015560028101805477ffffffffffffffffffffffffffffffffffffffffffffffff19169055600301610b93565b5090565b5b505050916000526020600020906003020160005b5082518154600160a060020a031916600160a060020a03909116178155602083015160018201556040830151600290910180546060850151608086015167ffffffffffffffff1990921667ffffffffffffffff948516176fffffffffffffffff00000000000000001916604060020a918516919091021777ffffffffffffffff000000000000000000000000000000001916608060020a939091169290920291909117905550610ca48686611852565b1515610caf57610000565b6040805186815267ffffffffffffffff808616602083015280851682840152861660608201529051600160a060020a038089169233909116917f9e12d725ade130ef3f3727e13815b3fcf01a631419ce8142bafb0752a61121e89181900360800190a35b505050505050565b600160a060020a0381166000908152600c60205260409020545b919050565b60018054604080516020600284861615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610dbf5780601f10610d9457610100808354040283529160200191610dbf565b820191906000526020600020905b815481529060010190602001808311610da257829003601f168201915b505050505081565b600b5460009060ff161515610ddb57610000565b8115801590610e0e5750600160a060020a0333811660009081526009602090815260408083209387168352929052205415155b15610e1857610000565b600054610e2d90600160a060020a0316610a22565b15610ec7576000805460408051602090810184905281517fda682aeb000000000000000000000000000000000000000000000000000000008152600160a060020a0333811660048301528881166024830152604482018890529251929093169363da682aeb9360648082019492918390030190829087803b156100005760325a03f1156100005750506040515115159050610ec757610000565b5b600160a060020a03338116600081815260096020908152604080832094881680845294825291829020869055815186815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a35060015b92915050565b6000610f3b82426119a3565b90505b919050565b60075481565b6000610f544361176a565b90505b90565b600e5433600160a060020a03908116911614610f7557610000565b610f7f8282611c6a565b5b5b5050565b60008382610f9282610f2f565b811115610f9e57610000565b610fa9868686611c93565b92505b5b50509392505050565b600c60205281600052604060002081815481101561000057906000526020600020906003020160005b5080546001820154600290920154600160a060020a03909116935090915067ffffffffffffffff80821691604060020a8104821691608060020a9091041685565b60025460ff1681565b60005433600160a060020a0390811691161461104457610000565b60008054600160a060020a031916600160a060020a0383161790555b5b50565b600160a060020a03821660009081526008602052604081205415806110c35750600160a060020a0383166000908152600860205260408120805484929081101561000057906000526020600020900160005b50546001608060020a0316115b1561117857600554600160a060020a03161561116b57600554600654600160a060020a0390911690634ee2cd7e9085906110fe908690611d32565b6000604051602001526040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b156100005760325a03f115610000575050604051519150610f299050565b506000610f29565b610f29565b600160a060020a038316600090815260086020526040902061119a9083611d4c565b9050610f29565b5b92915050565b6004805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610dbf5780601f10610d9457610100808354040283529160200191610dbf565b820191906000526020600020905b815481529060010190602001808311610da257829003601f168201915b505050505081565b6000600060006000600060006000600c60008a600160a060020a0316600160a060020a0316815260200190815260200160002088815481101561000057906000526020600020906003020160005b508054600182015460028301546040805160a081018252600160a060020a039094168085526020850184905267ffffffffffffffff808416928601839052604060020a8404811660608701819052608060020a9094041660808601819052909c50929a5091975090955093509091506112fd9042611e9c565b94505b509295509295509295565b600060004384111561131b574393505b600b60019054906101000a9004600160a060020a0316600160a060020a0316635b7b72c130868a8a8a896000604051602001526040518763ffffffff1660e060020a0281526004018087600160a060020a0316600160a060020a03168152602001868152602001806020018560ff1660ff16815260200180602001841515151581526020018381038352878181518152602001915080519060200190808383600083146113e3575b8051825260208311156113e357601f1990920191602091820191016113c3565b505050905090810190601f16801561140f5780820380516001836020036101000a031916815260200191505b508381038252855181528551602091820191870190808383821561144e575b80518252602083111561144e57601f19909201916020918201910161142e565b505050905090810190601f16801561147a5780820380516001836020036101000a031916815260200191505b5098505050505050505050602060405180830381600087803b156100005760325a03f1156100005750506040805180517f3cebb823000000000000000000000000000000000000000000000000000000008252600160a060020a03338116600484015292519094509184169250633cebb82391602480830192600092919082900301818387803b156100005760325a03f115610000575050604080518681529051600160a060020a03841692507f086c875b377f900b07ce03575813022f05dd10ed7640b5282cf6d3c3fc352ade9181900360200190a28091505b5095945050505050565b4260008061156c84610d1b565b9150600090505b818110156115db57600160a060020a0384166000908152600c6020526040902080546115d09190839081101561000057906000526020600020906003020160005b5060020154604060020a900467ffffffffffffffff1684611eec565b92505b600101611573565b5b5050919050565b6000610f3b8243611064565b90505b919050565b600554600160a060020a031681565b600080548190819033600160a060020a0390811691161461162657610000565b611631600a43611d4c565b915081848301101561164257610000565b61164f600a858401611f1b565b611658856115e3565b905080848201101561166957610000565b600160a060020a038516600090815260086020526040902061168d90828601611f1b565b604080518581529051600160a060020a038716916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a3600192505b5b505092915050565b6003805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610dbf5780601f10610d9457610100808354040283529160200191610dbf565b820191906000526020600020905b815481529060010190602001808311610da257829003601f168201915b505050505081565b600a5460009015806117a0575081600a6000815481101561000057906000526020600020900160005b50546001608060020a0316115b1561183a57600554600160a060020a03161561182d57600554600654600160a060020a039091169063981b24d0906117d9908590611d32565b6000604051602001526040518263ffffffff1660e060020a02815260040180828152602001915050602060405180830381600087803b156100005760325a03f115610000575050604051519150610d359050565b506000610d35565b610d35565b611845600a83611d4c565b9050610d35565b5b919050565b6000338261185f82610f2f565b81111561186b57610000565b6118758585612036565b92505b5b505092915050565b600b5460ff1681565b60065481565b600061189c8484610dc7565b5083600160a060020a0316638f4ffcb1338530866040518563ffffffff1660e060020a0281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360008314611943575b80518252602083111561194357601f199092019160209182019101611923565b505050905090810190601f16801561196f5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b156100005760325a03f11561000057505050600190505b9392505050565b60006000600060006119b486610d1b565b92508215156119cd576119c6866115e3565b9350611aa4565b5060009050805b82811015611a8f57611a8482611a7f600c60008a600160a060020a0316600160a060020a0316815260200190815260200160002084815481101561000057906000526020600020906003020160005b506040805160a0810182528254600160a060020a031681526001830154602082015260029092015467ffffffffffffffff80821692840192909252604060020a810482166060840152608060020a90041660808201528861205e565b612080565b91505b6001016119d4565b611aa1611a9b876115e3565b836120a8565b93505b50505092915050565b600080548190819033600160a060020a03908116911614611acd57610000565b611ad8600a43611d4c565b915083821015611ae757610000565b611af4600a858403611f1b565b611afd856115e3565b905083811015611b0c57610000565b600160a060020a0385166000908152600860205260409020611b3090858303611f1b565b604080518581529051600091600160a060020a038816917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a3600192505b5b505092915050565b600160a060020a038083166000908152600960209081526040808320938516835292905220545b92915050565b600b546101009004600160a060020a031681565b610000565b5050565b60005433600160a060020a03908116911614611be457610000565b600b805460ff19168215151790555b5b50565b600054600160a060020a031681565b600e5433600160a060020a03908116911614611c2157610000565b600e54611c3890600160a060020a03166000611c6a565b600e8054600160a060020a031916600160a060020a03838116919091179182905561106091166001611c6a565b5b5b50565b600160a060020a0382166000908152600d60205260409020805460ff19168215151790555b5050565b6000805433600160a060020a03908116911614611d1d57600b5460ff161515611cbb57610000565b600160a060020a038085166000908152600960209081526040808320339094168352929052205482901015611cef57610000565b600160a060020a03808516600090815260096020908152604080832033909416835292905220805483900390555b611d288484846120c1565b90505b9392505050565b6000818310611d415781611d43565b825b90505b92915050565b6000600060006000858054905060001415611d6a5760009350611aa4565b8554869060001981019081101561000057906000526020600020900160005b50546001608060020a03168510611dd2578554869060001981019081101561000057906000526020600020900160005b5054608060020a90046001608060020a03169350611aa4565b856000815481101561000057906000526020600020900160005b50546001608060020a0316851015611e075760009350611aa4565b8554600093506000190191505b82821115611e65576002600183850101049050848682815481101561000057906000526020600020900160005b50546001608060020a031611611e5957809250611e60565b6001810391505b611e14565b8583815481101561000057906000526020600020900160005b5054608060020a90046001608060020a031693505b50505092915050565b6000611d4383602001518367ffffffffffffffff16856080015167ffffffffffffffff16866040015167ffffffffffffffff16876060015167ffffffffffffffff1661228b565b90505b92915050565b60008167ffffffffffffffff168367ffffffffffffffff161015611d415781611d43565b825b90505b92915050565b815460009081901580611f57575083544390859060001981019081101561000057906000526020600020900160005b50546001608060020a0316105b15611ff45783848054809190600101815481835581811511611f9e57600083815260209020611f9e9181019083015b80821115610bdb5760008155600101611f86565b5090565b5b505050815481101561000057906000526020600020900160005b5080546001608060020a03858116608060020a024382166fffffffffffffffffffffffffffffffff199093169290921716178155915061202f565b8354849060001981019081101561000057906000526020600020900160005b5080546001608060020a03808616608060020a02911617815590505b5b50505050565b600b5460009060ff16151561204a57610000565b611d433384846120c1565b90505b92915050565b6000611d4383602001516120728585611e9c565b6120a8565b90505b92915050565b600082820161209d8482108015906120985750838210155b6122e4565b8091505b5092915050565b60006120b6838311156122e4565b508082035b92915050565b600080808315156120d55760019250610fac565b600160a060020a03851615806120fc575030600160a060020a031685600160a060020a0316145b1561210657610000565b6121108643611064565b91508382101561211f57610000565b60005461213490600160a060020a0316610a22565b156121ce576000805460408051602090810184905281517f4a393149000000000000000000000000000000000000000000000000000000008152600160a060020a038b811660048301528a81166024830152604482018a905292519290931693634a3931499360648082019492918390030190829087803b156100005760325a03f11561000057505060405151151590506121ce57610000565b5b600160a060020a03861660009081526008602052604090206121f390858403611f1b565b6121fd8543611064565b905080848201101561220e57610000565b600160a060020a038516600090815260086020526040902061223290828601611f1b565b84600160a060020a031686600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a3600192505b50509392505050565b60006000838610156122a05760009150611555565b8286106122af57869150611555565b6122d46122c5886122c089896120a8565b6122f4565b6122cf85886120a8565b612320565b90508091505b5095945050505050565b80151561106057610000565b5b50565b600082820261209d841580612098575083858381156100005704145b6122e4565b8091505b5092915050565b60006000612330600084116122e4565b828481156100005704905061209d8385811561000057068285020185146122e4565b8091505b50929150505600a165627a7a72305820583a73863371959fe752d9c72ecb34a8c05ad55f36f8330a9d88e5cfb50245a40029"}