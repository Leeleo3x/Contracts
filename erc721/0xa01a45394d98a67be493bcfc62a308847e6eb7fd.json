{"Runs": "200", "SwarmSource": "bzzr://f1299567dc6f6f4546c03d006ce0603529b94831dec509542650477200c7a8d0", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_traits\",\"type\":\"uint256[]\"}],\"name\":\"giveMultipleItems\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_NOSAmt\",\"type\":\"uint256\"},{\"name\":\"_ethPrice\",\"type\":\"uint256\"}],\"name\":\"addNOSPackage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_traits\",\"type\":\"uint256[]\"},{\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"giveMultipleItemsAndDestroyMultipleItems\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lootboxAddress\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"addLootbox\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"destroyMultipleItems\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_traits\",\"type\":\"uint256\"}],\"name\":\"updateItemTraits\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lootboxAddress\",\"type\":\"address\"}],\"name\":\"buyEthLootbox\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lootboxAddress\",\"type\":\"address\"}],\"name\":\"removeLootbox\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipients\",\"type\":\"address[]\"},{\"name\":\"_traits\",\"type\":\"uint256[]\"}],\"name\":\"giveMultipleItemsToMultipleRecipients\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addAuthorizedExternal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeAuthorizedExternal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_NOSAmt\",\"type\":\"uint256\"}],\"name\":\"removeNOSPackage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_traits\",\"type\":\"uint256\"}],\"name\":\"giveItem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_NOSAmt\",\"type\":\"uint256\"}],\"name\":\"buyNOS\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"destroyItem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"UUID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"NOSAmtPurchased\",\"type\":\"uint256\"}],\"name\":\"NOSPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"traits\",\"type\":\"uint256\"}],\"name\":\"NewCRLToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"UUID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"traits\",\"type\":\"uint256\"}],\"name\":\"UpdatedCRLToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.21+commit.dfe3193c", "ConstructorArguments": "", "SourceCode": "/**\r\n * @title Math\r\n * @dev Assorted math operations\r\n */\r\nlibrary Math {\r\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract ExternalInterface {\r\n  function giveItem(address _recipient, uint256 _traits) external;\r\n\r\n  function giveMultipleItems(address _recipient, uint256[] _traits) external;\r\n\r\n  function giveMultipleItemsToMultipleRecipients(address[] _recipients, uint256[] _traits) external;\r\n\r\n  function giveMultipleItemsAndDestroyMultipleItems(address _recipient, uint256[] _traits, uint256[] _tokenIds) external;\r\n  \r\n  function destroyItem(uint256 _tokenId) external;\r\n\r\n  function destroyMultipleItems(uint256[] _tokenIds) external;\r\n\r\n  function updateItemTraits(uint256 _tokenId, uint256 _traits) external;\r\n}\r\n\r\n\r\n\r\ncontract LootboxInterface {\r\n  event LootboxPurchased(address indexed owner, address indexed storeAddress, uint16 displayValue);\r\n  \r\n  function buy(address _buyer) external;\r\n}\r\n\r\n\r\n/// @title ERC-165 Standard Interface Detection\r\n/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\ninterface ERC165 {\r\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic interface\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Basic {\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 _balance);\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n  function exists(uint256 _tokenId) public view returns (bool _exists);\r\n\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function getApproved(uint256 _tokenId) public view returns (address _operator);\r\n\r\n  function setApprovalForAll(address _operator, bool _approved) public;\r\n  function isApprovedForAll(address _owner, address _operator) public view returns (bool);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public;\r\n}\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Enumerable is ERC721Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256 _tokenId);\r\n  function tokenByIndex(uint256 _index) public view returns (uint256);\r\n  function tokensOf(address _owner) public view returns (uint256[]);\r\n}\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721 is ERC721Basic, ERC721Enumerable {\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic implementation\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721BasicToken is ERC721Basic {\r\n  using SafeMath for uint256;\r\n  using AddressUtils for address;\r\n\r\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`\r\n  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n  bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\r\n\r\n  // Mapping from token ID to owner\r\n  mapping (uint256 => address) internal tokenOwner;\r\n\r\n  // Mapping from token ID to approved address\r\n  mapping (uint256 => address) internal tokenApprovals;\r\n\r\n  // Mapping from owner to number of owned token\r\n  mapping (address => uint256) internal ownedTokensCount;\r\n\r\n  // Mapping from owner to operator approvals\r\n  mapping (address => mapping (address => bool)) internal operatorApprovals;\r\n\r\n  /**\r\n  * @dev Guarantees msg.sender is owner of the given token\r\n  * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\r\n  */\r\n  modifier onlyOwnerOf(uint256 _tokenId) {\r\n    require(ownerOf(_tokenId) == msg.sender);\r\n    _;\r\n  }\r\n\r\n  /**\r\n  * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\r\n  * @param _tokenId uint256 ID of the token to validate\r\n  */\r\n  modifier canTransfer(uint256 _tokenId) {\r\n    require(isApprovedOrOwner(msg.sender, _tokenId));\r\n    _;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address\r\n  * @param _owner address to query the balance of\r\n  * @return uint256 representing the amount owned by the passed address\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    require(_owner != address(0));\r\n    return ownedTokensCount[_owner];\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the owner of the specified token ID\r\n  * @param _tokenId uint256 ID of the token to query the owner of\r\n  * @return owner address currently marked as the owner of the given token ID\r\n  */\r\n  function ownerOf(uint256 _tokenId) public view returns (address) {\r\n    address owner = tokenOwner[_tokenId];\r\n    require(owner != address(0));\r\n    return owner;\r\n  }\r\n\r\n  /**\r\n  * @dev Returns whether the specified token exists\r\n  * @param _tokenId uint256 ID of the token to query the existance of\r\n  * @return whether the token exists\r\n  */\r\n  function exists(uint256 _tokenId) public view returns (bool) {\r\n    address owner = tokenOwner[_tokenId];\r\n    return owner != address(0);\r\n  }\r\n\r\n  /**\r\n  * @dev Approves another address to transfer the given token ID\r\n  * @dev The zero address indicates there is no approved address.\r\n  * @dev There can only be one approved address per token at a given time.\r\n  * @dev Can only be called by the token owner or an approved operator.\r\n  * @param _to address to be approved for the given token ID\r\n  * @param _tokenId uint256 ID of the token to be approved\r\n  */\r\n  function approve(address _to, uint256 _tokenId) public {\r\n    address owner = ownerOf(_tokenId);\r\n    require(_to != owner);\r\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n    if (getApproved(_tokenId) != address(0) || _to != address(0)) {\r\n      tokenApprovals[_tokenId] = _to;\r\n      emit Approval(owner, _to, _tokenId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the approved address for a token ID, or zero if no address set\r\n   * @param _tokenId uint256 ID of the token to query the approval of\r\n   * @return address currently approved for a the given token ID\r\n   */\r\n  function getApproved(uint256 _tokenId) public view returns (address) {\r\n    return tokenApprovals[_tokenId];\r\n  }\r\n\r\n  /**\r\n  * @dev Sets or unsets the approval of a given operator\r\n  * @dev An operator is allowed to transfer all tokens of the sender on their behalf\r\n  * @param _to operator address to set the approval\r\n  * @param _approved representing the status of the approval to be set\r\n  */\r\n  function setApprovalForAll(address _to, bool _approved) public {\r\n    require(_to != msg.sender);\r\n    operatorApprovals[msg.sender][_to] = _approved;\r\n    emit ApprovalForAll(msg.sender, _to, _approved);\r\n  }\r\n\r\n  /**\r\n   * @dev Tells whether an operator is approved by a given owner\r\n   * @param _owner owner address which you want to query the approval of\r\n   * @param _operator operator address which you want to query the approval of\r\n   * @return bool whether the given operator is approved by the given owner\r\n   */\r\n  function isApprovedForAll(address _owner, address _operator) public view returns (bool) {\r\n    return operatorApprovals[_owner][_operator];\r\n  }\r\n\r\n  /**\r\n  * @dev Transfers the ownership of a given token ID to another address\r\n  * @dev Usage of this method is discouraged, use `safeTransferFrom` whenever possible\r\n  * @dev Requires the msg sender to be the owner, approved, or operator\r\n  * @param _from current owner of the token\r\n  * @param _to address to receive the ownership of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public canTransfer(_tokenId) {\r\n    require(_from != address(0));\r\n    require(_to != address(0));\r\n\r\n    clearApproval(_from, _tokenId);\r\n    removeTokenFrom(_from, _tokenId);\r\n    addTokenTo(_to, _tokenId);\r\n\r\n    emit Transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Safely transfers the ownership of a given token ID to another address\r\n  * @dev If the target address is a contract, it must implement `onERC721Received`,\r\n  *  which is called upon a safe transfer, and return the magic value\r\n  *  `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`; otherwise,\r\n  *  the transfer is reverted.\r\n  * @dev Requires the msg sender to be the owner, approved, or operator\r\n  * @param _from current owner of the token\r\n  * @param _to address to receive the ownership of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n    canTransfer(_tokenId)\r\n  {\r\n    safeTransferFrom(_from, _to, _tokenId, \"\");\r\n  }\r\n\r\n  /**\r\n  * @dev Safely transfers the ownership of a given token ID to another address\r\n  * @dev If the target address is a contract, it must implement `onERC721Received`,\r\n  *  which is called upon a safe transfer, and return the magic value\r\n  *  `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`; otherwise,\r\n  *  the transfer is reverted.\r\n  * @dev Requires the msg sender to be the owner, approved, or operator\r\n  * @param _from current owner of the token\r\n  * @param _to address to receive the ownership of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be transferred\r\n  * @param _data bytes data to send along with a safe transfer check\r\n  */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n    canTransfer(_tokenId)\r\n  {\r\n    transferFrom(_from, _to, _tokenId);\r\n    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the given spender can transfer a given token ID\r\n   * @param _spender address of the spender to query\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @return bool whether the msg.sender is approved for the given token ID,\r\n   *  is an operator of the owner, or is the owner of the token\r\n   */\r\n  function isApprovedOrOwner(address _spender, uint256 _tokenId) internal view returns (bool) {\r\n    address owner = ownerOf(_tokenId);\r\n    return _spender == owner || getApproved(_tokenId) == _spender || isApprovedForAll(owner, _spender);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to mint a new token\r\n  * @dev Reverts if the given token ID already exists\r\n  * @param _to The address that will own the minted token\r\n  * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n  */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    require(_to != address(0));\r\n    addTokenTo(_to, _tokenId);\r\n    emit Transfer(address(0), _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to burn a specific token\r\n  * @dev Reverts if the token does not exist\r\n  * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n  */\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    clearApproval(_owner, _tokenId);\r\n    removeTokenFrom(_owner, _tokenId);\r\n    emit Transfer(_owner, address(0), _tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to clear current approval of a given token ID\r\n  * @dev Reverts if the given address is not indeed the owner of the token\r\n  * @param _owner owner of the token\r\n  * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function clearApproval(address _owner, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _owner);\r\n    if (tokenApprovals[_tokenId] != address(0)) {\r\n      tokenApprovals[_tokenId] = address(0);\r\n      emit Approval(_owner, address(0), _tokenId);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to add a token ID to the list of a given address\r\n  * @param _to address representing the new owner of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n  */\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    require(tokenOwner[_tokenId] == address(0));\r\n    tokenOwner[_tokenId] = _to;\r\n    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to remove a token ID from the list of a given address\r\n  * @param _from address representing the previous owner of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n  */\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _from);\r\n    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\r\n    tokenOwner[_tokenId] = address(0);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to invoke `onERC721Received` on a target address\r\n  * @dev The call is not executed if the target address is not a contract\r\n  * @param _from address representing the previous owner of the given token ID\r\n  * @param _to target address that will receive the tokens\r\n  * @param _tokenId uint256 ID of the token to be transferred\r\n  * @param _data bytes optional data to send along with the call\r\n  * @return whether the call correctly returned the expected magic value\r\n  */\r\n  function checkAndCallSafeTransfer(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    internal\r\n    returns (bool)\r\n  {\r\n    if (!_to.isContract()) {\r\n      return true;\r\n    }\r\n    bytes4 retval = ERC721Receiver(_to).onERC721Received(_from, _tokenId, _data);\r\n    return (retval == ERC721_RECEIVED);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n *  from ERC721 asset contracts.\r\n */\r\ncontract ERC721Receiver {\r\n  /**\r\n   * @dev Magic value to be returned upon successful reception of an NFT\r\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`,\r\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n   */\r\n  bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\r\n\r\n  /**\r\n   * @notice Handle the receipt of an NFT\r\n   * @dev The ERC721 smart contract calls this function on the recipient\r\n   *  after a `safetransfer`. This function MAY throw to revert and reject the\r\n   *  transfer. This function MUST use 50,000 gas or less. Return of other\r\n   *  than the magic value MUST result in the transaction being reverted.\r\n   *  Note: the contract address is always the message sender.\r\n   * @param _from The sending address\r\n   * @param _tokenId The NFT identifier which is being transfered\r\n   * @param _data Additional data with no specified format\r\n   * @return `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`\r\n   */\r\n  function onERC721Received(address _from, uint256 _tokenId, bytes _data) public returns(bytes4);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Full ERC721 Token\r\n * This implementation includes all the required and some optional functionality of the ERC721 standard\r\n * Moreover, it includes approve all functionality using operator terminology\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Token is ERC721, ERC721BasicToken, ERC165 {\r\n  // Mapping from owner to list of owned token IDs\r\n  mapping (address => uint256[]) internal ownedTokens;\r\n\r\n  // Mapping from token ID to index of the owner tokens list\r\n  mapping(uint256 => uint256) internal ownedTokensIndex;\r\n\r\n  // Array with all token ids, used for enumeration\r\n  uint256[] internal allTokens;\r\n\r\n  // Mapping from token id to position in the allTokens array\r\n  mapping(uint256 => uint256) internal allTokensIndex;\r\n\r\n  /**\r\n  * @dev Gets the token ID at a given index of the tokens list of the requested owner\r\n  * @param _owner address owning the tokens list to be accessed\r\n  * @param _index uint256 representing the index to be accessed of the requested tokens list\r\n  * @return uint256 token ID at the given index of the tokens list owned by the requested address\r\n  */\r\n  function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256) {\r\n    require(_index < balanceOf(_owner));\r\n    return ownedTokens[_owner][_index];\r\n  }\r\n  \r\n  /**\r\n  * @dev Gets the list of tokens owned by a requested address\r\n  * @param _owner address to query the tokens of\r\n  * @return uint256[] representing the list of tokens owned by the requested address\r\n  */\r\n  function tokensOf(address _owner) public view returns (uint256[]) {\r\n    return ownedTokens[_owner];\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the total amount of tokens stored by the contract\r\n  * @return uint256 representing the total amount of tokens\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return allTokens.length;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the token ID at a given index of all the tokens in this contract\r\n  * @dev Reverts if the index is greater or equal to the total number of tokens\r\n  * @param _index uint256 representing the index to be accessed of the tokens list\r\n  * @return uint256 token ID at the given index of the tokens list\r\n  */\r\n  function tokenByIndex(uint256 _index) public view returns (uint256) {\r\n    require(_index < totalSupply());\r\n    return allTokens[_index];\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to add a token ID to the list of a given address\r\n  * @param _to address representing the new owner of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n  */\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    super.addTokenTo(_to, _tokenId);\r\n    uint256 length = ownedTokens[_to].length;\r\n    ownedTokens[_to].push(_tokenId);\r\n    ownedTokensIndex[_tokenId] = length;\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to remove a token ID from the list of a given address\r\n  * @param _from address representing the previous owner of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n  */\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    super.removeTokenFrom(_from, _tokenId);\r\n\r\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\r\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\r\n\r\n    ownedTokens[_from][tokenIndex] = lastToken;\r\n    ownedTokens[_from][lastTokenIndex] = 0;\r\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\r\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\r\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\r\n\r\n    ownedTokens[_from].length--;\r\n    ownedTokensIndex[_tokenId] = 0;\r\n    ownedTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to mint a new token\r\n  * @dev Reverts if the given token ID already exists\r\n  * @param _to address the beneficiary that will own the minted token\r\n  * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n  */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    super._mint(_to, _tokenId);\r\n\r\n    allTokensIndex[_tokenId] = allTokens.length;\r\n    allTokens.push(_tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to burn a specific token\r\n  * @dev Reverts if the token does not exist\r\n  * @param _owner owner of the token to burn\r\n  * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n  */\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    super._burn(_owner, _tokenId);\r\n\r\n    // Reorg all tokens array\r\n    uint256 tokenIndex = allTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = allTokens.length.sub(1);\r\n    uint256 lastToken = allTokens[lastTokenIndex];\r\n\r\n    allTokens[tokenIndex] = lastToken;\r\n    allTokens[lastTokenIndex] = 0;\r\n\r\n    allTokens.length--;\r\n    allTokensIndex[_tokenId] = 0;\r\n    allTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n  /**\r\n  * @dev Query if a contract implements an interface\r\n  * @param _interfaceID interfaceID being checked\r\n  * @return bool if the current contract supports the queried interface\r\n  */\r\n  function supportsInterface(bytes4 _interfaceID) external view returns (bool) {\r\n    return _interfaceID == 0x01ffc9a7 || // ERC165\r\n           _interfaceID == 0x80ac58cd || // ERC721\r\n           _interfaceID == 0x780e9d63; // ERC721Enumerable\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   *  as the code is not actually created until after the constructor finishes.\r\n   * @param addr address to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address addr) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    assembly { size := extcodesize(addr) }  // solium-disable-line security/no-inline-assembly\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract Base is ERC721Token, Ownable {\r\n\r\n  event NewCRLToken(address indexed owner, uint256 indexed tokenId, uint256 traits);\r\n  event UpdatedCRLToken(uint256 indexed UUID, uint256 indexed tokenId, uint256 traits);\r\n\r\n  uint256 TOKEN_UUID;\r\n  uint256 UPGRADE_UUID;\r\n\r\n  function _createToken(address _owner, uint256 _traits) internal {\r\n    // emit the creaton event\r\n    emit NewCRLToken(\r\n      _owner,\r\n      TOKEN_UUID,\r\n      _traits\r\n    );\r\n\r\n    // This will assign ownership, and also emit the Transfer event\r\n    _mint(_owner, TOKEN_UUID);\r\n\r\n    TOKEN_UUID++;\r\n  }\r\n\r\n  function _updateToken(uint256 _tokenId, uint256 _traits) internal {\r\n    // emit the upgrade event\r\n    emit UpdatedCRLToken(\r\n      UPGRADE_UUID,\r\n      _tokenId,\r\n      _traits\r\n    );\r\n\r\n    UPGRADE_UUID++;\r\n  }\r\n\r\n  // Eth balance controls\r\n\r\n  // We can withdraw eth balance of contract.\r\n  function withdrawBalance() onlyOwner external {\r\n    require(address(this).balance > 0);\r\n\r\n    msg.sender.transfer(address(this).balance);\r\n  }\r\n}\r\n\r\n\r\n\r\ncontract LootboxStore is Base {\r\n  // mapping between specific Lootbox contract address to price in wei\r\n  mapping(address => uint256) ethPricedLootboxes;\r\n\r\n  // mapping between specific Lootbox contract address to price in NOS tokens\r\n  mapping(uint256 => uint256) NOSPackages;\r\n\r\n  uint256 UUID;\r\n\r\n  event NOSPurchased(uint256 indexed UUID, address indexed owner, uint256 indexed NOSAmtPurchased);\r\n\r\n  function addLootbox(address _lootboxAddress, uint256 _price) external onlyOwner {\r\n    ethPricedLootboxes[_lootboxAddress] = _price;\r\n  }\r\n\r\n  function removeLootbox(address _lootboxAddress) external onlyOwner {\r\n    delete ethPricedLootboxes[_lootboxAddress];\r\n  }\r\n\r\n  function buyEthLootbox(address _lootboxAddress) payable external {\r\n    // Verify the given lootbox contract exists and they've paid enough\r\n    require(ethPricedLootboxes[_lootboxAddress] != 0);\r\n    require(msg.value >= ethPricedLootboxes[_lootboxAddress]);\r\n\r\n    LootboxInterface(_lootboxAddress).buy(msg.sender);\r\n  }\r\n\r\n  function addNOSPackage(uint256 _NOSAmt, uint256 _ethPrice) external onlyOwner {\r\n    NOSPackages[_NOSAmt] = _ethPrice;\r\n  }\r\n  \r\n  function removeNOSPackage(uint256 _NOSAmt) external onlyOwner {\r\n    delete NOSPackages[_NOSAmt];\r\n  }\r\n\r\n  function buyNOS(uint256 _NOSAmt) payable external {\r\n    require(NOSPackages[_NOSAmt] != 0);\r\n    require(msg.value >= NOSPackages[_NOSAmt]);\r\n    \r\n    emit NOSPurchased(UUID, msg.sender, _NOSAmt);\r\n    UUID++;\r\n  }\r\n}\r\n\r\ncontract Core is LootboxStore, ExternalInterface {\r\n  mapping(address => uint256) authorizedExternal;\r\n\r\n  function addAuthorizedExternal(address _address) external onlyOwner {\r\n    authorizedExternal[_address] = 1;\r\n  }\r\n\r\n  function removeAuthorizedExternal(address _address) external onlyOwner {\r\n    delete authorizedExternal[_address];\r\n  }\r\n\r\n  // Verify the caller of this function is a Lootbox contract or race, or crafting, or upgrade\r\n  modifier onlyAuthorized() { \r\n    require(ethPricedLootboxes[msg.sender] != 0 ||\r\n            authorizedExternal[msg.sender] != 0);\r\n      _; \r\n  }\r\n\r\n  function giveItem(address _recipient, uint256 _traits) onlyAuthorized external {\r\n    _createToken(_recipient, _traits);\r\n  }\r\n\r\n  function giveMultipleItems(address _recipient, uint256[] _traits) onlyAuthorized external {\r\n    for (uint i = 0; i < _traits.length; ++i) {\r\n      _createToken(_recipient, _traits[i]);\r\n    }\r\n  }\r\n\r\n  function giveMultipleItemsToMultipleRecipients(address[] _recipients, uint256[] _traits) onlyAuthorized external {\r\n    require(_recipients.length == _traits.length);\r\n\r\n    for (uint i = 0; i < _traits.length; ++i) {\r\n      _createToken(_recipients[i], _traits[i]);\r\n    }\r\n  }\r\n\r\n  function giveMultipleItemsAndDestroyMultipleItems(address _recipient, uint256[] _traits, uint256[] _tokenIds) onlyAuthorized external {\r\n    for (uint i = 0; i < _traits.length; ++i) {\r\n      _createToken(_recipient, _traits[i]);\r\n    }\r\n\r\n    for (i = 0; i < _tokenIds.length; ++i) {\r\n      _burn(ownerOf(_tokenIds[i]), _tokenIds[i]);\r\n    }\r\n  }\r\n\r\n  function destroyItem(uint256 _tokenId) onlyAuthorized external {\r\n    _burn(ownerOf(_tokenId), _tokenId);\r\n  }\r\n\r\n  function destroyMultipleItems(uint256[] _tokenIds) onlyAuthorized external {\r\n    for (uint i = 0; i < _tokenIds.length; ++i) {\r\n      _burn(ownerOf(_tokenIds[i]), _tokenIds[i]);\r\n    }\r\n  }\r\n\r\n  function updateItemTraits(uint256 _tokenId, uint256 _traits) onlyAuthorized external {\r\n    _updateToken(_tokenId, _traits);\r\n  }\r\n}", "OptimizationUsed": "1", "ContractName": "Core", "ByteCode": "0x6060604052600436106101875763ffffffff60e060020a60003504166301ffc9a7811461018c578063081812fc146101c057806308e88ab9146101f2578063095ea7b31461021f5780630a0e78e31461024157806318160ddd1461025a5780631fe8629a1461027f57806323b872dd146102b65780632bf59135146102de5780632e3a0a7c146103005780632f745c591461031e57806342842e0e146103405780634a2f37a6146103685780634c6a3334146103815780634f558e79146103955780634f6ccce7146103ab5780635a3f2672146103c15780635fd8c710146104335780636352211e14610446578063657edc111461045c57806368fbbab81461047b57806370a08231146104a55780638da5cb5b146104c4578063949ee989146104d7578063a22cb465146104f6578063a41c44751461051a578063b88d4fde14610539578063d43582c8146105a5578063d86afbbb146105bb578063e985e9c5146105dd578063f13cc60614610602578063f2fde38b1461060d578063f7c8af481461062c575b600080fd5b341561019757600080fd5b6101ac600160e060020a031960043516610642565b604051901515815260200160405180910390f35b34156101cb57600080fd5b6101d66004356106df565b604051600160a060020a03909116815260200160405180910390f35b34156101fd57600080fd5b61021d60048035600160a060020a031690602480359081019101356106fa565b005b341561022a57600080fd5b61021d600160a060020a0360043516602435610778565b341561024c57600080fd5b61021d600435602435610874565b341561026557600080fd5b61026d6108a1565b60405190815260200160405180910390f35b341561028a57600080fd5b61021d60048035600160a060020a031690602480358082019290810135916044359081019101356108a8565b34156102c157600080fd5b61021d600160a060020a0360043581169060243516604435610966565b34156102e957600080fd5b61021d600160a060020a0360043516602435610a11565b341561030b57600080fd5b61021d6004803560248101910135610a48565b341561032957600080fd5b61026d600160a060020a0360043516602435610ab6565b341561034b57600080fd5b61021d600160a060020a0360043581169060243516604435610b04565b341561037357600080fd5b61021d600435602435610b34565b61021d600160a060020a0360043516610b8a565b34156103a057600080fd5b6101ac600435610c2e565b34156103b657600080fd5b61026d600435610c4b565b34156103cc57600080fd5b6103e0600160a060020a0360043516610c81565b60405160208082528190810183818151815260200191508051906020019060200280838360005b8381101561041f578082015183820152602001610407565b505050509050019250505060405180910390f35b341561043e57600080fd5b61021d610d04565b341561045157600080fd5b6101d6600435610d75565b341561046757600080fd5b61021d600160a060020a0360043516610d99565b341561048657600080fd5b61021d6024600480358281019290820135918135918201910135610dce565b34156104b057600080fd5b61026d600160a060020a0360043516610e6a565b34156104cf57600080fd5b6101d6610e9d565b34156104e257600080fd5b61021d600160a060020a0360043516610eac565b341561050157600080fd5b61021d600160a060020a03600435166024351515610ee4565b341561052557600080fd5b61021d600160a060020a0360043516610f75565b341561054457600080fd5b61021d600160a060020a036004803582169160248035909116916044359160849060643590810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650610faa95505050505050565b34156105b057600080fd5b61021d600435610fe2565b34156105c657600080fd5b61021d600160a060020a036004351660243561100e565b34156105e857600080fd5b6101ac600160a060020a0360043581169060243516611060565b61021d60043561108e565b341561061857600080fd5b61021d600160a060020a0360043516611109565b341561063757600080fd5b61021d6004356111a4565b60007f01ffc9a700000000000000000000000000000000000000000000000000000000600160e060020a0319831614806106a557507f80ac58cd00000000000000000000000000000000000000000000000000000000600160e060020a03198316145b806106d957507f780e9d6300000000000000000000000000000000000000000000000000000000600160e060020a03198316145b92915050565b600090815260016020526040902054600160a060020a031690565b600160a060020a0333166000908152600b60205260408120541515806107375750600160a060020a0333166000908152600e602052604090205415155b151561074257600080fd5b5060005b818110156107725761076a8484848481811061075e57fe5b90506020020135611201565b600101610746565b50505050565b600061078382610d75565b9050600160a060020a03838116908216141561079e57600080fd5b80600160a060020a031633600160a060020a031614806107c357506107c38133611060565b15156107ce57600080fd5b60006107d9836106df565b600160a060020a03161415806107f75750600160a060020a03831615155b1561086f5760008281526001602052604090819020805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0386811691821790925591908316907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35b505050565b60085433600160a060020a0390811691161461088f57600080fd5b6000918252600c602052604090912055565b6006545b90565b600160a060020a0333166000908152600b60205260408120541515806108e55750600160a060020a0333166000908152600e602052604090205415155b15156108f057600080fd5b5060005b838110156109145761090c8686868481811061075e57fe5b6001016108f4565b5060005b8181101561095e5761095661093e84848481811061093257fe5b90506020020135610d75565b84848481811061094a57fe5b9050602002013561125a565b600101610918565b505050505050565b806109713382611317565b151561097c57600080fd5b600160a060020a038416151561099157600080fd5b600160a060020a03831615156109a657600080fd5b6109b08483611376565b6109ba8483611425565b6109c48383611553565b82600160a060020a031684600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a350505050565b60085433600160a060020a03908116911614610a2c57600080fd5b600160a060020a039091166000908152600b6020526040902055565b600160a060020a0333166000908152600b6020526040812054151580610a855750600160a060020a0333166000908152600e602052604090205415155b1515610a9057600080fd5b5060005b8181101561086f57610aae61093e84848481811061093257fe5b600101610a94565b6000610ac183610e6a565b8210610acc57600080fd5b600160a060020a0383166000908152600460205260409020805483908110610af057fe5b906000526020600020900154905092915050565b80610b0f3382611317565b1515610b1a57600080fd5b610772848484602060405190810160405260008152610faa565b600160a060020a0333166000908152600b6020526040902054151580610b715750600160a060020a0333166000908152600e602052604090205415155b1515610b7c57600080fd5b610b8682826115ad565b5050565b600160a060020a0381166000908152600b60205260409020541515610bae57600080fd5b600160a060020a0381166000908152600b6020526040902054341015610bd357600080fd5b80600160a060020a031663f088d5473360405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401600060405180830381600087803b1515610c2157600080fd5b5af1151561077257600080fd5b600090815260208190526040902054600160a060020a0316151590565b6000610c556108a1565b8210610c6057600080fd5b6006805483908110610c6e57fe5b9060005260206000209001549050919050565b610c8961197c565b6004600083600160a060020a0316600160a060020a03168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610cf857602002820191906000526020600020905b815481526020019060010190808311610ce4575b50505050509050919050565b60085433600160a060020a03908116911614610d1f57600080fd5b6000600160a060020a0330163111610d3657600080fd5b33600160a060020a03166108fc30600160a060020a0316319081150290604051600060405180830381858888f193505050501515610d7357600080fd5b565b600081815260208190526040812054600160a060020a03168015156106d957600080fd5b60085433600160a060020a03908116911614610db457600080fd5b600160a060020a03166000908152600b6020526040812055565b600160a060020a0333166000908152600b6020526040812054151580610e0b5750600160a060020a0333166000908152600e602052604090205415155b1515610e1657600080fd5b838214610e2257600080fd5b5060005b81811015610e6357610e5b858583818110610e3d57fe5b90506020020135600160a060020a0316848484818110151561075e57fe5b600101610e26565b5050505050565b6000600160a060020a0382161515610e8157600080fd5b50600160a060020a031660009081526002602052604090205490565b600854600160a060020a031681565b60085433600160a060020a03908116911614610ec757600080fd5b600160a060020a03166000908152600e6020526040902060019055565b33600160a060020a031682600160a060020a031614151515610f0557600080fd5b33600160a060020a0390811660008181526003602090815260408083209487168084529490915290819020805460ff19168515151790557f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190849051901515815260200160405180910390a35050565b60085433600160a060020a03908116911614610f9057600080fd5b600160a060020a03166000908152600e6020526040812055565b81610fb53382611317565b1515610fc057600080fd5b610fcb858585610966565b610fd7858585856115f1565b1515610e6357600080fd5b60085433600160a060020a03908116911614610ffd57600080fd5b6000908152600c6020526040812055565b600160a060020a0333166000908152600b602052604090205415158061104b5750600160a060020a0333166000908152600e602052604090205415155b151561105657600080fd5b610b868282611201565b600160a060020a03918216600090815260036020908152604080832093909416825291909152205460ff1690565b6000818152600c602052604090205415156110a857600080fd5b6000818152600c60205260409020543410156110c357600080fd5b8033600160a060020a0316600d547f20820a4a160ab5657128d1d558082c97ea28b46cff34c02c56100ca1b0142a9160405160405180910390a450600d80546001019055565b60085433600160a060020a0390811691161461112457600080fd5b600160a060020a038116151561113957600080fd5b600854600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36008805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a0333166000908152600b60205260409020541515806111e15750600160a060020a0333166000908152600e602052604090205415155b15156111ec57600080fd5b6111fe6111f882610d75565b8261125a565b50565b60095482600160a060020a03167f5fdbe7ea7cbf16c58fa969a1242699ca405e738cc0ac596ef2616ab64fc772bf8360405190815260200160405180910390a361124d82600954611732565b5050600980546001019055565b6000806000611269858561176f565b60008481526007602052604090205460065490935061128f90600163ffffffff6117c616565b91506006828154811015156112a057fe5b9060005260206000209001549050806006848154811015156112be57fe5b600091825260208220019190915560068054849081106112da57fe5b60009182526020909120015560068054906112f990600019830161198e565b50600093845260076020526040808520859055908452909220555050565b60008061132383610d75565b905080600160a060020a031684600160a060020a0316148061135e575083600160a060020a0316611353846106df565b600160a060020a0316145b8061136e575061136e8185611060565b949350505050565b81600160a060020a031661138982610d75565b600160a060020a03161461139c57600080fd5b600081815260016020526040902054600160a060020a031615610b8657600081815260016020526040808220805473ffffffffffffffffffffffffffffffffffffffff19169055600160a060020a038416907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259084905190815260200160405180910390a35050565b600080600061143485856117d8565b600084815260056020908152604080832054600160a060020a038916845260049092529091205490935061146f90600163ffffffff6117c616565b600160a060020a03861660009081526004602052604090208054919350908390811061149757fe5b6000918252602080832090910154600160a060020a03881683526004909152604090912080549192508291859081106114cc57fe5b6000918252602080832090910192909255600160a060020a03871681526004909152604081208054849081106114fe57fe5b6000918252602080832090910192909255600160a060020a038716815260049091526040902080549061153590600019830161198e565b50600093845260056020526040808520859055908452909220555050565b600061155f838361186d565b50600160a060020a0382166000908152600460205260409020805490816001810161158a838261198e565b506000918252602080832091909101849055928152600590925260409091205550565b81600a547f76baa403bcfaf62d12d84b8d84fbc0cbf8a20e6934142fb845dbc45f129357d48360405190815260200160405180910390a35050600a80546001019055565b60008061160685600160a060020a03166118fc565b15156116155760019150611729565b84600160a060020a031663f0b9e5ba8786866040518463ffffffff1660e060020a0281526004018084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561169457808201518382015260200161167c565b50505050905090810190601f1680156116c15780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b15156116e157600080fd5b5af115156116ee57600080fd5b5050506040518051600160e060020a031981167ff0b9e5ba000000000000000000000000000000000000000000000000000000001493509150505b50949350505050565b61173c8282611904565b6006805460008381526007602052604090208190556001810161175f838261198e565b5060009182526020909120015550565b6117798282611376565b6117838282611425565b6000600160a060020a0383167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405190815260200160405180910390a35050565b6000828211156117d257fe5b50900390565b81600160a060020a03166117eb82610d75565b600160a060020a0316146117fe57600080fd5b600160a060020a03821660009081526002602052604090205461182890600163ffffffff6117c616565b600160a060020a039092166000908152600260209081526040808320949094559181529081905220805473ffffffffffffffffffffffffffffffffffffffff19169055565b600081815260208190526040902054600160a060020a03161561188f57600080fd5b600081815260208181526040808320805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038716908117909155835260029091529020546118dc906001611966565b600160a060020a0390921660009081526002602052604090209190915550565b6000903b1190565b600160a060020a038216151561191957600080fd5b6119238282611553565b600160a060020a03821660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405190815260200160405180910390a35050565b60008282018381101561197557fe5b9392505050565b60206040519081016040526000815290565b81548183558181151161086f5760008381526020902061086f9181019083016108a591905b808211156119c757600081556001016119b3565b50905600a165627a7a72305820f1299567dc6f6f4546c03d006ce0603529b94831dec509542650477200c7a8d00029"}