{"Runs": "200", "SwarmSource": "bzzr://0f28b8959c158eb5414277529fd27a82caedc0f7ffd1730f3ff2ead374e55ac7", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"promoCreatedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cost\",\"type\":\"uint256\"}],\"name\":\"setPersonalisationCost\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_narcoId\",\"type\":\"uint256\"}],\"name\":\"getRemainingCapacity\",\"outputs\":[{\"name\":\"capacity\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"districtContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"personalisationCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getNarco\",\"outputs\":[{\"name\":\"narcoName\",\"type\":\"string\"},{\"name\":\"weedTotal\",\"type\":\"uint256\"},{\"name\":\"cokeTotal\",\"type\":\"uint256\"},{\"name\":\"skills\",\"type\":\"uint16[6]\"},{\"name\":\"consumables\",\"type\":\"uint8[4]\"},{\"name\":\"genes\",\"type\":\"string\"},{\"name\":\"homeLocation\",\"type\":\"uint8\"},{\"name\":\"level\",\"type\":\"uint16\"},{\"name\":\"cooldowns\",\"type\":\"uint256[6]\"},{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"stats\",\"type\":\"uint16[9]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_narcoId\",\"type\":\"uint256\"}],\"name\":\"growWeed\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_narcoId\",\"type\":\"uint256\"},{\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"name\":\"_endingPrice\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createSaleAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gen0CreationLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setDistrictAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_narcoId\",\"type\":\"uint256\"},{\"name\":\"_genes\",\"type\":\"string\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"updateNarco\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_narcoId\",\"type\":\"uint256\"},{\"name\":\"_genes\",\"type\":\"string\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"recruitNarco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSaleAuctionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_v2Address\",\"type\":\"address\"}],\"name\":\"setNewAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_genes\",\"type\":\"string\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"createGen0Auction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"districtsCore\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"respectRequiredToRecruit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"changeIdentityNarcoRespect\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_respect\",\"type\":\"uint256\"}],\"name\":\"setChangeIdentityNarcoRespect\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_genes\",\"type\":\"string\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"createPromoNarco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_narcoId\",\"type\":\"uint256\"}],\"name\":\"getLevel\",\"outputs\":[{\"name\":\"rank\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_narcoId\",\"type\":\"uint256\"},{\"name\":\"_index\",\"type\":\"uint256\"},{\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"setCooldown\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_narcoId\",\"type\":\"uint256\"}],\"name\":\"refineCoke\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_narcoId\",\"type\":\"uint256\"},{\"name\":\"_add\",\"type\":\"bool\"},{\"name\":\"_total\",\"type\":\"uint16\"}],\"name\":\"updateCokeTotal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAuctionBalances\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cost\",\"type\":\"uint256\"}],\"name\":\"setGrowCost\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refineCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gen0EndingPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gen0StartingPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"promoCreationLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gamePaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"narcoIndexToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_respect\",\"type\":\"uint256\"}],\"name\":\"setRespectRequiredToRecruit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_narcoId\",\"type\":\"uint256\"},{\"name\":\"_index\",\"type\":\"uint256\"},{\"name\":\"_new\",\"type\":\"uint8\"}],\"name\":\"updateConsumable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_narcoId\",\"type\":\"uint256\"},{\"name\":\"_index\",\"type\":\"uint256\"},{\"name\":\"_new\",\"type\":\"uint16\"}],\"name\":\"updateSkill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"growCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_narcoId\",\"type\":\"uint256\"},{\"name\":\"_add\",\"type\":\"bool\"},{\"name\":\"_total\",\"type\":\"uint16\"}],\"name\":\"updateWeedTotal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gen0AuctionDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gen0CreatedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cost\",\"type\":\"uint256\"}],\"name\":\"setRefineCost\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"narcosByOwner\",\"outputs\":[{\"name\":\"ownedNarcos\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_narcoId\",\"type\":\"uint256\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"incrementStat\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"narcoIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"narcoId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"yield\",\"type\":\"uint256\"}],\"name\":\"GrowWeedCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"narcoId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"yield\",\"type\":\"uint256\"}],\"name\":\"RefineCokeCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"narcoId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"genes\",\"type\":\"string\"}],\"name\":\"NarcoCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"ContractUpgrade\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.19+commit.c4cbbb05", "ConstructorArguments": "", "SourceCode": "pragma solidity ^0.4.19;\r\n\r\n// DopeRaider Narcos Contract\r\n// by gasmasters.io\r\n// contact: [email\u00a0protected]\r\n\r\ncontract DistrictsCoreInterface {\r\n  // callable by other contracts to control economy\r\n  function isDopeRaiderDistrictsCore() public pure returns (bool);\r\n  function increaseDistrictWeed(uint256 _district, uint256 _quantity) public;\r\n  function increaseDistrictCoke(uint256 _district, uint256 _quantity) public;\r\n  function distributeRevenue(uint256 _district , uint8 _splitW, uint8 _splitC) public payable;\r\n  function getNarcoLocation(uint256 _narcoId) public view returns (uint8 location);\r\n}\r\n\r\n/// @title sale clock auction interface\r\ncontract SaleClockAuction {\r\n  function isSaleClockAuction() public pure returns (bool);\r\n  function createAuction(uint256 _tokenId,  uint256 _startingPrice,uint256 _endingPrice,uint256 _duration,address _seller)public;\r\n  function withdrawBalance() public;\r\n  function averageGen0SalePrice() public view returns (uint256);\r\n\r\n}\r\n\r\n\r\n//// @title A facet of NarcoCore that manages special access privileges.\r\ncontract NarcoAccessControl {\r\n    /// @dev Emited when contract is upgraded\r\n    event ContractUpgrade(address newContract);\r\n\r\n    address public ceoAddress;\r\n    address public cooAddress;\r\n\r\n    // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\r\n    bool public paused = false;\r\n\r\n    modifier onlyCEO() {\r\n        require(msg.sender == ceoAddress);\r\n        _;\r\n    }\r\n\r\n    modifier onlyCLevel() {\r\n        require(\r\n            msg.sender == cooAddress ||\r\n            msg.sender == ceoAddress\r\n        );\r\n        _;\r\n    }\r\n\r\n    function setCEO(address _newCEO) public onlyCEO {\r\n        require(_newCEO != address(0));\r\n\r\n        ceoAddress = _newCEO;\r\n    }\r\n\r\n    function setCOO(address _newCOO) public onlyCEO {\r\n        require(_newCOO != address(0));\r\n\r\n        cooAddress = _newCOO;\r\n    }\r\n\r\n    function withdrawBalance() external onlyCLevel {\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n\r\n\r\n    /*** Pausable functionality adapted from OpenZeppelin ***/\r\n\r\n    /// @dev Modifier to allow actions only when the contract IS NOT paused\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /// @dev Modifier to allow actions only when the contract IS paused\r\n    modifier whenPaused {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    function pause() public onlyCLevel whenNotPaused {\r\n        paused = true;\r\n    }\r\n\r\n    function unpause() public onlyCLevel whenPaused {\r\n        // can't unpause if contract was upgraded\r\n        paused = false;\r\n    }\r\n\r\n    /// @dev The address of the calling contract\r\n    address public districtContractAddress;\r\n\r\n    DistrictsCoreInterface public districtsCore;\r\n\r\n    function setDistrictAddress(address _address) public onlyCLevel {\r\n        _setDistrictAddresss(_address);\r\n    }\r\n\r\n    function _setDistrictAddresss(address _address) internal {\r\n      DistrictsCoreInterface candidateContract = DistrictsCoreInterface(_address);\r\n      require(candidateContract.isDopeRaiderDistrictsCore());\r\n      districtsCore = candidateContract;\r\n      districtContractAddress = _address;\r\n    }\r\n\r\n\r\n    modifier onlyDopeRaiderContract() {\r\n        require(msg.sender == districtContractAddress);\r\n        _;\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n\r\n/// @title Base contract for DopeRaider. Holds all common structs, events and base variables.\r\ncontract NarcoBase is NarcoAccessControl {\r\n    /*** EVENTS ***/\r\n\r\n    event NarcoCreated(address indexed owner, uint256 narcoId, string genes);\r\n\r\n    /// @dev Transfer event as defined in current draft of ERC721. Emitted every time a narcos\r\n    ///  ownership is assigned, including newly created narcos.\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n\r\n /*** DATA TYPES ***/\r\n\r\n    // consumable indexes\r\n    /*\r\n    uint constant gasIndex = 0;\r\n    uint constant seedsIndex = 1;\r\n    uint constant chemicalsIndex = 2;\r\n    uint constant ammoIndex = 3;\r\n\r\n    // skills indexes  - each skill can range from 1 - 10 in level\r\n    uint constant speedIndex = 0; // speed of travel\r\n    uint constant growIndex = 1; // speed/yield of grow\r\n    uint constant refineIndex = 2; // refine coke\r\n    uint constant attackIndex = 3; // attack\r\n    uint constant defenseIndex = 4; // defense\r\n    uint constant capacityIndex = 5; // how many items can be carried.\r\n\r\n    // stat indexes\r\n    uint constant dealsCompleted = 0; // dealsCompleted\r\n    uint constant weedGrowCompleted = 1; // weedGrowCompleted\r\n    uint constant cokeRefineCompleted = 2; // refineCompleted\r\n    uint constant attacksSucceeded = 3; // attacksSucceeded\r\n    uint constant defendedSuccessfully = 4; defendedSuccessfully\r\n    uint constant raidsCompleted = 5; // raidsCompleted\r\n    uint constant escapeHijack = 6; // escapeHijack\r\n    uint constant travelling = 7; // traveller\r\n    uint constant recruited = 8; // recruitment\r\n*/\r\n\r\n\r\n    /// @dev The main Narco struct. Every narco in DopeRaider is represented by a copy\r\n    ///  of this structure.\r\n    struct Narco {\r\n        // The Narco's genetic code is packed into these 256-bits.\r\n        string genes; // represents his avatar\r\n        string narcoName;\r\n        // items making level\r\n        uint16 [9] stats;\r\n        // inventory totals\r\n        uint16 weedTotal;\r\n        uint16 cokeTotal;\r\n        uint8 [4] consumables; // gas, seeds, chemicals, ammo\r\n        uint16 [6] skills;   // travel time, grow, refine, attack, defend carry\r\n        uint256 [6] cooldowns; // skill cooldown periods speed, grow, refine, attack, others if needed\r\n        uint8 homeLocation;\r\n    }\r\n\r\n    /*** STORAGE ***/\r\n\r\n    /// @dev An array containing the Narco struct for all Narcos in existence. The ID\r\n    ///  of each narco is actually an index into this array.\r\n    Narco[] narcos;\r\n\r\n    /// @dev A mapping from  narco IDs to the address that owns them. All  narcos have\r\n    ///  some valid owner address, even gen0  narcos are created with a non-zero owner.\r\n    mapping (uint256 => address) public narcoIndexToOwner;\r\n\r\n    // @dev A mapping from owner address to count of tokens that address owns.\r\n    //  Used internally inside balanceOf() to resolve ownership count.\r\n    mapping (address => uint256) ownershipTokenCount;\r\n\r\n    /// @dev A mapping from NarcoIDs to an address that has been approved to call\r\n    ///  transferFrom(). A zero value means no approval is outstanding.\r\n    mapping (uint256 => address) public  narcoIndexToApproved;\r\n\r\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\r\n        // since the number of  narcos is capped to 2^32\r\n        // there is no way to overflow this\r\n        ownershipTokenCount[_to]++;\r\n        narcoIndexToOwner[_tokenId] = _to;\r\n\r\n        if (_from != address(0)) {\r\n            ownershipTokenCount[_from]--;\r\n            delete narcoIndexToApproved[_tokenId];\r\n        }\r\n\r\n        Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    // Will generate a new Narco and generate the event\r\n    function _createNarco(\r\n        string _genes,\r\n        string _name,\r\n        address _owner\r\n    )\r\n        internal\r\n        returns (uint)\r\n    {\r\n\r\n        uint16[6] memory randomskills= [\r\n            uint16(random(9)+1),\r\n            uint16(random(9)+1),\r\n            uint16(random(9)+1),\r\n            uint16(random(9)+1),\r\n            uint16(random(9)+1),\r\n            uint16(random(9)+31)\r\n        ];\r\n\r\n        uint256[6] memory cools;\r\n        uint16[9] memory nostats;\r\n\r\n        Narco memory _narco = Narco({\r\n            genes: _genes,\r\n            narcoName: _name,\r\n            cooldowns: cools,\r\n            stats: nostats,\r\n            weedTotal: 0,\r\n            cokeTotal: 0,\r\n            consumables: [4,6,2,1],\r\n            skills: randomskills,\r\n            homeLocation: uint8(random(6)+1)\r\n        });\r\n\r\n        uint256 newNarcoId = narcos.push(_narco) - 1;\r\n        require(newNarcoId <= 4294967295);\r\n\r\n        // raid character (token 0) live in 7 and have random special skills\r\n        if (newNarcoId==0){\r\n            narcos[0].homeLocation=7; // in vice island\r\n            narcos[0].skills[4]=800; // defense\r\n            narcos[0].skills[5]=65535; // carry\r\n        }\r\n\r\n        NarcoCreated(_owner, newNarcoId, _narco.genes);\r\n        _transfer(0, _owner, newNarcoId);\r\n\r\n\r\n        return newNarcoId;\r\n    }\r\n\r\n    function subToZero(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (b <= a){\r\n          return a - b;\r\n        }else{\r\n          return 0;\r\n        }\r\n      }\r\n\r\n    function getRemainingCapacity(uint256 _narcoId) public view returns (uint16 capacity){\r\n        uint256 usedCapacity = narcos[_narcoId].weedTotal + narcos[_narcoId].cokeTotal + narcos[_narcoId].consumables[0]+narcos[_narcoId].consumables[1]+narcos[_narcoId].consumables[2]+narcos[_narcoId].consumables[3];\r\n        capacity = uint16(subToZero(uint256(narcos[_narcoId].skills[5]), usedCapacity));\r\n    }\r\n\r\n    // respect it's called now\r\n    function getLevel(uint256 _narcoId) public view returns (uint16 rank){\r\n\r\n    /*\r\n      dealsCompleted = 0; // dealsCompleted\r\n      weedGrowCompleted = 1; // weedGrowCompleted\r\n      cokeRefineCompleted = 2; // refineCompleted\r\n      attacksSucceeded = 3; // attacksSucceeded\r\n      defendedSuccessfully = 4; defendedSuccessfully\r\n      raidsCompleted = 5; // raidsCompleted\r\n      escapeHijack = 6; // escapeHijack\r\n      travel = 7; // travelling\r\n    */\r\n\r\n        rank =  (narcos[_narcoId].stats[0]/12)+\r\n                 (narcos[_narcoId].stats[1]/4)+\r\n                 (narcos[_narcoId].stats[2]/4)+\r\n                 (narcos[_narcoId].stats[3]/6)+\r\n                 (narcos[_narcoId].stats[4]/6)+\r\n                 (narcos[_narcoId].stats[5]/1)+\r\n                 (narcos[_narcoId].stats[7]/12)\r\n                 ;\r\n    }\r\n\r\n    // pseudo random - but does that matter?\r\n    uint64 _seed = 0;\r\n    function random(uint64 upper) private returns (uint64 randomNumber) {\r\n       _seed = uint64(keccak256(keccak256(block.blockhash(block.number-1), _seed), now));\r\n       return _seed % upper;\r\n     }\r\n\r\n\r\n    // never call this from a contract\r\n    /// @param _owner The owner whose tokens we are interested in.\r\n    function narcosByOwner(address _owner) public view returns(uint256[] ownedNarcos) {\r\n       uint256 tokenCount = ownershipTokenCount[_owner];\r\n        uint256 totalNarcos = narcos.length - 1;\r\n        uint256[] memory result = new uint256[](tokenCount);\r\n        uint256 narcoId;\r\n        uint256 resultIndex=0;\r\n        for (narcoId = 0; narcoId <= totalNarcos; narcoId++) {\r\n          if (narcoIndexToOwner[narcoId] == _owner) {\r\n            result[resultIndex] = narcoId;\r\n            resultIndex++;\r\n          }\r\n        }\r\n        return result;\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\r\ncontract ERC721 {\r\n    function implementsERC721() public pure returns (bool);\r\n    function totalSupply() public view returns (uint256 total);\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function ownerOf(uint256 _tokenId) public view returns (address owner);\r\n    function approve(address _to, uint256 _tokenId) public;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n    function transfer(address _to, uint256 _tokenId) public;\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    // Optional\r\n    // function name() public view returns (string name);\r\n    // function symbol() public view returns (string symbol);\r\n    // function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 tokenId);\r\n    // function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);\r\n}\r\n\r\n/// @title The facet of the DopeRaider core contract that manages ownership, ERC-721 (draft) compliant.\r\ncontract NarcoOwnership is NarcoBase, ERC721 {\r\n    string public name = \"DopeRaider\";\r\n    string public symbol = \"DOPR\";\r\n\r\n    function implementsERC721() public pure returns (bool)\r\n    {\r\n        return true;\r\n    }\r\n\r\n    /// @dev Checks if a given address is the current owner of a particular narco.\r\n    /// @param _claimant the address we are validating against.\r\n    /// @param _tokenId narco id, only valid when > 0\r\n    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n        return narcoIndexToOwner[_tokenId] == _claimant;\r\n    }\r\n\r\n    /// @dev Checks if a given address currently has transferApproval for a particular narco.\r\n    /// @param _claimant the address we are confirming narco is approved for.\r\n    /// @param _tokenId narco id, only valid when > 0\r\n    function _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n        return narcoIndexToApproved[_tokenId] == _claimant;\r\n    }\r\n\r\n    /// @dev Marks an address as being approved for transferFrom(), overwriting any previous\r\n    ///  approval. Setting _approved to address(0) clears all transfer approval.\r\n    ///  NOTE: _approve() does NOT send the Approval event.\r\n    function _approve(uint256 _tokenId, address _approved) internal {\r\n        narcoIndexToApproved[_tokenId] = _approved;\r\n    }\r\n\r\n\r\n    /// @notice Returns the number of narcos owned by a specific address.\r\n    /// @param _owner The owner address to check.\r\n    function balanceOf(address _owner) public view returns (uint256 count) {\r\n        return ownershipTokenCount[_owner];\r\n    }\r\n\r\n    /// @notice Transfers a narco to another address. If transferring to a smart\r\n    ///  contract be VERY CAREFUL to ensure that it is aware of ERC-721 (or\r\n    ///  DopeRaider specifically) or your narco may be lost forever. Seriously.\r\n    /// @param _to The address of the recipient, can be a user or contract.\r\n    /// @param _tokenId The ID of the narco to transfer.\r\n    function transfer(\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n        public\r\n\r\n    {\r\n        require(_to != address(0));\r\n        require(_owns(msg.sender, _tokenId));\r\n\r\n        _transfer(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    /// @notice Grant another address the right to transfer a specific narco via\r\n    ///  transferFrom(). This is the preferred flow for transfering NFTs to contracts.\r\n    /// @param _to The address to be granted transfer approval. Pass address(0) to\r\n    ///  clear all approvals.\r\n    /// @param _tokenId The ID of the narco that can be transferred if this call succeeds.\r\n    function approve(\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n        public\r\n\r\n    {\r\n        require(_owns(msg.sender, _tokenId));\r\n\r\n        _approve(_tokenId, _to);\r\n\r\n        Approval(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    /// @notice Transfer a narco owned by another address, for which the calling address\r\n    ///  has previously been granted transfer approval by the owner.\r\n    /// @param _from The address that owns the narco to be transfered.\r\n    /// @param _to The address that should take ownership of the narco. Can be any address,\r\n    ///  including the caller.\r\n    /// @param _tokenId The ID of the narco to be transferred.\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n        public\r\n\r\n    {\r\n        require(_approvedFor(msg.sender, _tokenId));\r\n        require(_owns(_from, _tokenId));\r\n        require(_to != address(0));\r\n\r\n        _transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    function totalSupply() public view returns (uint) {\r\n        return narcos.length - 1;\r\n    }\r\n\r\n    function ownerOf(uint256 _tokenId)\r\n        public\r\n        view\r\n        returns (address owner)\r\n    {\r\n        owner = narcoIndexToOwner[_tokenId];\r\n\r\n        require(owner != address(0));\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n// this helps with district functionality\r\n// it gives the ability to an external contract to do the following:\r\n// * update narcos stats\r\ncontract NarcoUpdates is NarcoOwnership {\r\n\r\n    function updateWeedTotal(uint256 _narcoId, bool _add, uint16 _total) public onlyDopeRaiderContract {\r\n      if(_add==true){\r\n        narcos[_narcoId].weedTotal+= _total;\r\n      }else{\r\n        narcos[_narcoId].weedTotal-= _total;\r\n      }\r\n    }\r\n\r\n    function updateCokeTotal(uint256 _narcoId, bool _add, uint16 _total) public onlyDopeRaiderContract {\r\n       if(_add==true){\r\n        narcos[_narcoId].cokeTotal+= _total;\r\n      }else{\r\n        narcos[_narcoId].cokeTotal-= _total;\r\n      }\r\n    }\r\n\r\n    function updateConsumable(uint256 _narcoId, uint256 _index, uint8 _new) public onlyDopeRaiderContract  {\r\n      narcos[_narcoId].consumables[_index] = _new;\r\n    }\r\n\r\n    function updateSkill(uint256 _narcoId, uint256 _index, uint16 _new) public onlyDopeRaiderContract  {\r\n      narcos[_narcoId].skills[_index] = _new;\r\n    }\r\n\r\n    function incrementStat(uint256 _narcoId , uint256 _index) public onlyDopeRaiderContract  {\r\n      narcos[_narcoId].stats[_index]++;\r\n    }\r\n\r\n    function setCooldown(uint256 _narcoId , uint256 _index , uint256 _new) public onlyDopeRaiderContract  {\r\n      narcos[_narcoId].cooldowns[_index]=_new;\r\n    }\r\n\r\n}\r\n\r\n/// @title Handles creating auctions for sale of narcos.\r\n///  This wrapper of ReverseAuction exists only so that users can create\r\n///  auctions with only one transaction.\r\ncontract NarcoAuction is NarcoUpdates {\r\n    SaleClockAuction public saleAuction;\r\n\r\n    function setSaleAuctionAddress(address _address) public onlyCLevel {\r\n        SaleClockAuction candidateContract = SaleClockAuction(_address);\r\n        require(candidateContract.isSaleClockAuction());\r\n        saleAuction = candidateContract;\r\n    }\r\n\r\n    function createSaleAuction(\r\n        uint256 _narcoId,\r\n        uint256 _startingPrice,\r\n        uint256 _endingPrice,\r\n        uint256 _duration\r\n    )\r\n        public\r\n        whenNotPaused\r\n    {\r\n        // Auction contract checks input sizes\r\n        // If narco is already on any auction, this will throw\r\n        // because it will be owned by the auction contract\r\n        require(_owns(msg.sender, _narcoId));\r\n        _approve(_narcoId, saleAuction);\r\n        // Sale auction throws if inputs are invalid and clears\r\n        // transfer approval after escrowing the narco.\r\n        saleAuction.createAuction(\r\n            _narcoId,\r\n            _startingPrice,\r\n            _endingPrice,\r\n            _duration,\r\n            msg.sender\r\n        );\r\n    }\r\n\r\n    /// @dev Transfers the balance of the sale auction contract\r\n    /// to the DopeRaiderCore contract. We use two-step withdrawal to\r\n    /// prevent two transfer calls in the auction bid function.\r\n    function withdrawAuctionBalances() external onlyCLevel {\r\n        saleAuction.withdrawBalance();\r\n    }\r\n}\r\n\r\n\r\n/// @title all functions related to creating narcos\r\ncontract NarcoMinting is NarcoAuction {\r\n\r\n    // Limits the number of narcos the contract owner can ever create.\r\n    uint256 public promoCreationLimit = 200;\r\n    uint256 public gen0CreationLimit = 5000;\r\n\r\n    // Constants for gen0 auctions.\r\n    uint256 public gen0StartingPrice = 1 ether;\r\n    uint256 public gen0EndingPrice = 20 finney;\r\n    uint256 public gen0AuctionDuration = 1 days;\r\n\r\n    // Counts the number of narcos the contract owner has created.\r\n    uint256 public promoCreatedCount;\r\n    uint256 public gen0CreatedCount;\r\n\r\n    /// @dev we can create promo narco, up to a limit\r\n    function createPromoNarco(\r\n        string _genes,\r\n        string _name,\r\n        address _owner\r\n    ) public onlyCLevel {\r\n        if (_owner == address(0)) {\r\n             _owner = cooAddress;\r\n        }\r\n        require(promoCreatedCount < promoCreationLimit);\r\n        require(gen0CreatedCount < gen0CreationLimit);\r\n\r\n        promoCreatedCount++;\r\n        gen0CreatedCount++;\r\n\r\n        _createNarco(_genes, _name, _owner);\r\n    }\r\n\r\n    /// @dev Creates a new gen0 narco with the given genes and\r\n    ///  creates an auction for it.\r\n    function createGen0Auction(\r\n       string _genes,\r\n        string _name\r\n    ) public onlyCLevel {\r\n        require(gen0CreatedCount < gen0CreationLimit);\r\n\r\n        uint256 narcoId = _createNarco(_genes,_name,address(this));\r\n\r\n        _approve(narcoId, saleAuction);\r\n\r\n        saleAuction.createAuction(\r\n            narcoId,\r\n            _computeNextGen0Price(),\r\n            gen0EndingPrice,\r\n            gen0AuctionDuration,\r\n            address(this)\r\n        );\r\n\r\n        gen0CreatedCount++;\r\n    }\r\n\r\n    /// @dev Computes the next gen0 auction starting price, given\r\n    ///  the average of the past 4 prices + 50%.\r\n    function _computeNextGen0Price() internal view returns (uint256) {\r\n        uint256 avePrice = saleAuction.averageGen0SalePrice();\r\n\r\n        // sanity check to ensure we don't overflow arithmetic (this big number is 2^128-1).\r\n        require(avePrice < 340282366920938463463374607431768211455);\r\n\r\n        uint256 nextPrice = avePrice + (avePrice / 2);\r\n\r\n        // We never auction for less than starting price\r\n        if (nextPrice < gen0StartingPrice) {\r\n            nextPrice = gen0StartingPrice;\r\n        }\r\n\r\n        return nextPrice;\r\n    }\r\n}\r\n\r\n\r\n/// @title DopeRaider: Collectible, narcos on the Ethereum blockchain.\r\n/// @dev The main DopeRaider contract\r\ncontract DopeRaiderCore is NarcoMinting {\r\n\r\n    // This is the main DopeRaider contract. We have several seperately-instantiated  contracts\r\n    // that handle auctions, districts and the creation of new narcos. By keeping\r\n    // them in their own contracts, we can upgrade them without disrupting the main contract that tracks\r\n    // narco ownership.\r\n    //\r\n    //      - NarcoBase: This is where we define the most fundamental code shared throughout the core\r\n    //             functionality. This includes our main data storage, constants and data types, plus\r\n    //             internal functions for managing these items.\r\n    //\r\n    //      - NarcoAccessControl: This contract manages the various addresses and constraints for operations\r\n    //             that can be executed only by specific roles. Namely CEO, CFO and COO.\r\n    //\r\n    //      - NarcoOwnership: This provides the methods required for basic non-fungible token\r\n    //             transactions, following the draft ERC-721 spec (https://github.com/ethereum/EIPs/issues/721).\r\n    //\r\n    //      - NarcoUpdates: This file contains the methods necessary to allow a separate contract to update narco stats\r\n    //\r\n    //      - NarcoAuction: Here we have the public methods for auctioning or bidding on narcos.\r\n    //             The actual auction functionality is handled in a sibling sales contract,\r\n    //             while auction creation and bidding is mostly mediated through this facet of the core contract.\r\n    //\r\n    //      - NarcoMinting: This final facet contains the functionality we use for creating new gen0 narcos.\r\n    //             We can make up to 4096 \"promo\" narcos\r\n\r\n    // Set in case the core contract is broken and an upgrade is required\r\n    address public newContractAddress;\r\n\r\n    bool public gamePaused = true;\r\n\r\n    modifier whenGameNotPaused() {\r\n        require(!gamePaused);\r\n        _;\r\n    }\r\n\r\n    /// @dev Modifier to allow actions only when the contract IS paused\r\n    modifier whenGamePaused {\r\n        require(gamePaused);\r\n        _;\r\n    }\r\n\r\n    function pause() public onlyCLevel whenGameNotPaused {\r\n        gamePaused = true;\r\n    }\r\n\r\n    function unpause() public onlyCLevel whenGamePaused {\r\n        // can't unpause if contract was upgraded\r\n        gamePaused = false;\r\n    }\r\n\r\n\r\n    // EVENTS\r\n    event GrowWeedCompleted(uint256 indexed narcoId, uint yield);\r\n    event RefineCokeCompleted(uint256 indexed narcoId, uint yield);\r\n\r\n    function DopeRaiderCore() public {\r\n        ceoAddress = msg.sender;\r\n        cooAddress = msg.sender;\r\n    }\r\n\r\n    /// @dev Used to mark the smart contract as upgraded, in case there is a serious\r\n    ///  breaking bug. This method does nothing but keep track of the new contract and\r\n    ///  emit a message indicating that the new address is set. It's up to clients of this\r\n    ///  contract to update to the new contract address in that case. (This contract will\r\n    ///  be paused indefinitely if such an upgrade takes place.)\r\n    /// @param _v2Address new address\r\n    function setNewAddress(address _v2Address) public onlyCLevel whenPaused {\r\n        newContractAddress = _v2Address;\r\n        ContractUpgrade(_v2Address);\r\n    }\r\n\r\n    /// @notice No tipping!\r\n    /// @dev Reject all Ether from being sent here, unless it's from one of the\r\n    ///  two auction contracts. (Hopefully, we can prevent user accidents.)\r\n    function() external payable {\r\n        require(msg.sender == address(saleAuction));\r\n    }\r\n\r\n    /// @param _id The ID of the narco of interest.\r\n\r\n   function getNarco(uint256 _id)\r\n        public\r\n        view\r\n        returns (\r\n        string  narcoName,\r\n        uint256 weedTotal,\r\n        uint256 cokeTotal,\r\n        uint16[6] skills,\r\n        uint8[4] consumables,\r\n        string genes,\r\n        uint8 homeLocation,\r\n        uint16 level,\r\n        uint256[6] cooldowns,\r\n        uint256 id,\r\n        uint16 [9] stats\r\n    ) {\r\n        Narco storage narco = narcos[_id];\r\n        narcoName = narco.narcoName;\r\n        weedTotal = narco.weedTotal;\r\n        cokeTotal = narco.cokeTotal;\r\n        skills = narco.skills;\r\n        consumables = narco.consumables;\r\n        genes = narco.genes;\r\n        homeLocation = narco.homeLocation;\r\n        level = getLevel(_id);\r\n        cooldowns = narco.cooldowns;\r\n        id = _id;\r\n        stats = narco.stats;\r\n    }\r\n\r\n    uint256 public changeIdentityNarcoRespect = 30;\r\n    function setChangeIdentityNarcoRespect(uint256 _respect) public onlyCLevel {\r\n      changeIdentityNarcoRespect=_respect;\r\n    }\r\n\r\n    uint256 public personalisationCost = 0.01 ether; // pimp my narco\r\n    function setPersonalisationCost(uint256 _cost) public onlyCLevel {\r\n      personalisationCost=_cost;\r\n    }\r\n    function updateNarco(uint256 _narcoId, string _genes, string _name) public payable whenGameNotPaused {\r\n       require(getLevel(_narcoId)>=changeIdentityNarcoRespect); // minimum level to recruit a narco\r\n       require(msg.sender==narcoIndexToOwner[_narcoId]); // can't be moving other peoples narcos about\r\n       require(msg.value>=personalisationCost);\r\n       narcos[_narcoId].genes = _genes;\r\n       narcos[_narcoId].narcoName = _name;\r\n    }\r\n\r\n    uint256 public respectRequiredToRecruit = 150;\r\n\r\n    function setRespectRequiredToRecruit(uint256 _respect) public onlyCLevel {\r\n      respectRequiredToRecruit=_respect;\r\n    }\r\n\r\n    function recruitNarco(uint256 _narcoId, string _genes, string _name) public whenGameNotPaused {\r\n       require(msg.sender==narcoIndexToOwner[_narcoId]); // can't be moving other peoples narcos about\r\n       require(getLevel(_narcoId)>=respectRequiredToRecruit); // minimum level to recruit a narco\r\n       require(narcos[_narcoId].stats[8]<getLevel(_narcoId)/respectRequiredToRecruit); // must have recruited < respect / required reqpect (times)\r\n      _createNarco(_genes,_name, msg.sender);\r\n      narcos[_narcoId].stats[8]+=1; // increase number recruited\r\n    }\r\n\r\n   // crafting section\r\n    uint256 public growCost = 0.003 ether;\r\n    function setGrowCost(uint256 _cost) public onlyCLevel{\r\n      growCost=_cost;\r\n    }\r\n\r\n    function growWeed(uint256 _narcoId) public payable whenGameNotPaused{\r\n         require(msg.sender==narcoIndexToOwner[_narcoId]); // can't be moving other peoples narcos about\r\n         require(msg.value>=growCost);\r\n         require(now>narcos[_narcoId].cooldowns[1]); //cooldown must have expired\r\n         uint16 growSkillLevel = narcos[_narcoId].skills[1]; // grow\r\n         uint16 maxYield = 9 + growSkillLevel; // max amount can be grown based on skill\r\n         uint yield = min(narcos[_narcoId].consumables[1],maxYield);\r\n         require(yield>0); // gotta produce something\r\n\r\n         // must be home location\r\n         uint8 district = districtsCore.getNarcoLocation(_narcoId);\r\n         require(district==narcos[_narcoId].homeLocation);\r\n\r\n         // do the crafting\r\n         uint256 cooldown = now + ((910-(10*growSkillLevel))* 1 seconds); //calculate cooldown switch to minutes later\r\n\r\n         narcos[_narcoId].cooldowns[1]=cooldown;\r\n         // use all available  - for now , maybe later make optional\r\n         narcos[_narcoId].consumables[1]=uint8(subToZero(uint256(narcos[_narcoId].consumables[1]),yield));\r\n         narcos[_narcoId].weedTotal+=uint8(yield);\r\n\r\n         narcos[_narcoId].stats[1]+=1; // update the statistic for grow\r\n         districtsCore.increaseDistrictWeed(district , yield);\r\n         districtsCore.distributeRevenue.value(growCost)(uint256(district),50,50); // distribute the revenue to districts pots\r\n         GrowWeedCompleted(_narcoId, yield); // notification event\r\n    }\r\n\r\n\r\n    uint256 public refineCost = 0.003 ether;\r\n    function setRefineCost(uint256 _cost) public onlyCLevel{\r\n      refineCost=_cost;\r\n    }\r\n\r\n    function refineCoke(uint256 _narcoId) public payable whenGameNotPaused{\r\n         require(msg.sender==narcoIndexToOwner[_narcoId]); // can't be moving other peoples narcos about\r\n         require(msg.value>=refineCost);\r\n         require(now>narcos[_narcoId].cooldowns[2]); //cooldown must have expired\r\n         uint16 refineSkillLevel = narcos[_narcoId].skills[2]; // refine\r\n         uint16 maxYield = 3+(refineSkillLevel/3); // max amount can be grown based on skill\r\n         uint yield = min(narcos[_narcoId].consumables[2],maxYield);\r\n         require(yield>0); // gotta produce something\r\n\r\n         // must be home location\r\n         uint8 district = districtsCore.getNarcoLocation(_narcoId);\r\n         require(district==narcos[_narcoId].homeLocation);\r\n\r\n         // do the crafting\r\n        // uint256 cooldown = now + min(3 minutes,((168-(2*refineSkillLevel))* 1 seconds)); // calculate cooldown\r\n         uint256 cooldown = now + ((910-(10*refineSkillLevel))* 1 seconds); // calculate cooldown\r\n\r\n         narcos[_narcoId].cooldowns[2]=cooldown;\r\n         // use all available  - for now , maybe later make optional\r\n         narcos[_narcoId].consumables[2]=uint8(subToZero(uint256(narcos[_narcoId].consumables[2]),yield));\r\n         narcos[_narcoId].cokeTotal+=uint8(yield);\r\n\r\n         narcos[_narcoId].stats[2]+=1;\r\n         districtsCore.increaseDistrictCoke(district, yield);\r\n         districtsCore.distributeRevenue.value(refineCost)(uint256(district),50,50); // distribute the revenue to districts pots\r\n         RefineCokeCompleted(_narcoId, yield); // notification event\r\n\r\n    }\r\n\r\n\r\n    function min(uint a, uint b) private pure returns (uint) {\r\n             return a < b ? a : b;\r\n    }\r\n\r\n}", "OptimizationUsed": "1", "ContractName": "DopeRaiderCore", "ByteCode": ""}