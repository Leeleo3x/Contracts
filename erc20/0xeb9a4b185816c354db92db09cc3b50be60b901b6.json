{"Runs": "200", "SwarmSource": "bzzr://212605052c29899c08bddc8e03352f2629efa9fb6ab10661f2dbf1007d4d3595", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activeTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addWhitelistedTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipients\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"batchTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"admin\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.19+commit.c4cbbb05", "ConstructorArguments": "00000000000000000000000000c6bffba6ed9ea434acb096d171c0a78e24d318", "SourceCode": "pragma solidity ^0.4.18;\r\n\r\n// zeppelin-solidity: 1.8.0\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is BasicToken {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) public {\r\n    // require(_value <= balances[msg.sender]);\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    address burner = msg.sender;\r\n    balances[burner] = balances[burner].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    Burn(burner, _value);\r\n    Transfer(burner, address(0), _value);\r\n  }\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract OriginSportToken is StandardToken, Ownable, BurnableToken {\r\n  using SafeMath for uint;\r\n\r\n  // Events\r\n  event Burn(address indexed _burner, uint _value);\r\n\r\n  // Constants\r\n  string public constant name           = 'OriginSport Token';\r\n  string public constant symbol         = 'ORS';\r\n  uint   public constant decimals       = 18;\r\n  uint   public constant INITIAL_SUPPLY = 300000000 * 10 ** uint(decimals);\r\n\r\n  // Properties\r\n  bool public transferable = false;\r\n  mapping (address => bool) public whitelistedTransfer;\r\n\r\n  // Filter invalid address\r\n  modifier validAddress(address addr) {\r\n    require(addr != address(0x0));\r\n    require(addr != address(this));\r\n    _;\r\n  }\r\n\r\n  modifier onlyWhenTransferable() {\r\n    if (!transferable) {\r\n      require(whitelistedTransfer[msg.sender]);\r\n    }\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Constructor for Origin Sport Token, assigns the total supply to admin address \r\n   * @param admin the admin address of ors\r\n   */\r\n  function OriginSportToken(address admin) validAddress(admin) public {\r\n    require(msg.sender != admin);\r\n    whitelistedTransfer[admin] = true;\r\n    totalSupply_ = INITIAL_SUPPLY;\r\n    balances[admin] = totalSupply_;\r\n    Transfer(address(0x0), admin, totalSupply_);\r\n\r\n    transferOwnership(admin);\r\n  }\r\n\r\n  /**\r\n   * @dev allow owner to add addresse to transfer tokens\r\n   * @param _address address Address to be added\r\n   */\r\n  function addWhitelistedTransfer(address _address) onlyOwner public {\r\n    whitelistedTransfer[_address] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev allow all users to transfer tokens\r\n   */\r\n  function activeTransfer() onlyOwner public {\r\n    transferable = true;\r\n  }\r\n\r\n  /**\r\n   * @dev overrides transfer function with modifier to prevent from transfer with invalid address\r\n   * @param _to The address to transfer to\r\n   * @param _value The amount to be transferred\r\n   */\r\n  function transfer(address _to, uint _value) public \r\n    validAddress(_to) \r\n    onlyWhenTransferable\r\n    returns (bool) \r\n  {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev overrides transfer function with modifier to prevent from transfer with invalid address\r\n   * @param _from The address to transfer from.\r\n   * @param _to The address to transfer to.\r\n   * @param _value The amount to be transferred.\r\n   */\r\n  function transferFrom(address _from, address _to, uint _value) public \r\n    validAddress(_to) \r\n    onlyWhenTransferable\r\n    returns (bool) \r\n  {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev overrides transfer function with modifier to prevent from transfer with invalid address\r\n   * @param _recipients An array of address to transfer to.\r\n   * @param _value The amount to be transferred.\r\n   */\r\n  function batchTransfer(address[] _recipients, uint _value) public onlyWhenTransferable returns (bool) {\r\n    uint count = _recipients.length;\r\n    require(count > 0 && count <= 20);\r\n    uint needAmount =  count.mul(_value);\r\n    require(_value > 0 && balances[msg.sender] >= needAmount);\r\n\r\n    for (uint i = 0; i < count; i++) {\r\n      transfer(_recipients[i], _value);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev overrides burn function with modifier to prevent burn while untransferable\r\n   * @param _value The amount to be burned.\r\n   */\r\n  function burn(uint _value) public onlyWhenTransferable onlyOwner {\r\n    super.burn(_value);\r\n  }\r\n}", "OptimizationUsed": "1", "ContractName": "OriginSportToken", "ByteCode": "0x6060604052600436106101115763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610116578063095ea7b3146101a057806312e56faf146101d657806318160ddd146101eb57806323b872dd146102105780632ff2e9dc14610238578063313ce5671461024b57806342966c681461025e5780634f5e6a8d14610274578063661884631461029357806370a08231146102b5578063735b232c146102d457806383f12fec146102f35780638da5cb5b1461034457806392ff0d311461037357806395d89b4114610386578063a9059cbb14610399578063d73dd623146103bb578063dd62ed3e146103dd578063f2fde38b14610402575b600080fd5b341561012157600080fd5b610129610421565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561016557808201518382015260200161014d565b50505050905090810190601f1680156101925780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101ab57600080fd5b6101c2600160a060020a0360043516602435610458565b604051901515815260200160405180910390f35b34156101e157600080fd5b6101e96104c4565b005b34156101f657600080fd5b6101fe610505565b60405190815260200160405180910390f35b341561021b57600080fd5b6101c2600160a060020a036004358116906024351660443561050b565b341561024357600080fd5b6101fe610592565b341561025657600080fd5b6101fe6105a1565b341561026957600080fd5b6101e96004356105a6565b341561027f57600080fd5b6101c2600160a060020a0360043516610607565b341561029e57600080fd5b6101c2600160a060020a036004351660243561061c565b34156102c057600080fd5b6101fe600160a060020a0360043516610718565b34156102df57600080fd5b6101e9600160a060020a0360043516610733565b34156102fe57600080fd5b6101c26004602481358181019083013580602081810201604051908101604052809392919081815260200183836020028082843750949650509335935061077292505050565b341561034f57600080fd5b61035761085b565b604051600160a060020a03909116815260200160405180910390f35b341561037e57600080fd5b6101c261086a565b341561039157600080fd5b61012961087a565b34156103a457600080fd5b6101c2600160a060020a03600435166024356108b1565b34156103c657600080fd5b6101c2600160a060020a0360043516602435610936565b34156103e857600080fd5b6101fe600160a060020a03600435811690602435166109da565b341561040d57600080fd5b6101e9600160a060020a0360043516610a05565b60408051908101604052601181527f4f726967696e53706f727420546f6b656e000000000000000000000000000000602082015281565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60035433600160a060020a039081169116146104df57600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a179055565b60015490565b600082600160a060020a038116151561052357600080fd5b30600160a060020a031681600160a060020a03161415151561054457600080fd5b60035460a060020a900460ff16151561057e57600160a060020a03331660009081526004602052604090205460ff16151561057e57600080fd5b610589858585610aa0565b95945050505050565b6af8277896582678ac00000081565b601281565b60035460a060020a900460ff1615156105e057600160a060020a03331660009081526004602052604090205460ff1615156105e057600080fd5b60035433600160a060020a039081169116146105fb57600080fd5b61060481610c20565b50565b60046020526000908152604090205460ff1681565b600160a060020a0333811660009081526002602090815260408083209386168352929052908120548083111561067957600160a060020a0333811660009081526002602090815260408083209388168352929052908120556106b0565b610689818463ffffffff610cf316565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a3600191505b5092915050565b600160a060020a031660009081526020819052604090205490565b60035433600160a060020a0390811691161461074e57600080fd5b600160a060020a03166000908152600460205260409020805460ff19166001179055565b600080600080600360149054906101000a900460ff1615156107b557600160a060020a03331660009081526004602052604090205460ff1615156107b557600080fd5b855192506000831180156107ca575060148311155b15156107d557600080fd5b6107e5838663ffffffff610d0516565b91506000851180156108105750600160a060020a033316600090815260208190526040902054829010155b151561081b57600080fd5b5060005b8281101561084f5761084686828151811061083657fe5b90602001906020020151866108b1565b5060010161081f565b50600195945050505050565b600354600160a060020a031681565b60035460a060020a900460ff1681565b60408051908101604052600381527f4f52530000000000000000000000000000000000000000000000000000000000602082015281565b600082600160a060020a03811615156108c957600080fd5b30600160a060020a031681600160a060020a0316141515156108ea57600080fd5b60035460a060020a900460ff16151561092457600160a060020a03331660009081526004602052604090205460ff16151561092457600080fd5b61092e8484610d37565b949350505050565b600160a060020a03338116600090815260026020908152604080832093861683529290529081205461096e908363ffffffff610e4916565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a03908116911614610a2057600080fd5b600160a060020a0381161515610a3557600080fd5b600354600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000600160a060020a0383161515610ab757600080fd5b600160a060020a038416600090815260208190526040902054821115610adc57600080fd5b600160a060020a0380851660009081526002602090815260408083203390941683529290522054821115610b0f57600080fd5b600160a060020a038416600090815260208190526040902054610b38908363ffffffff610cf316565b600160a060020a038086166000908152602081905260408082209390935590851681522054610b6d908363ffffffff610e4916565b600160a060020a0380851660009081526020818152604080832094909455878316825260028152838220339093168252919091522054610bb3908363ffffffff610cf316565b600160a060020a03808616600081815260026020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b33600160a060020a038116600090815260208190526040902054610c449083610cf3565b600160a060020a038216600090815260208190526040902055600154610c70908363ffffffff610cf316565b600155600160a060020a0381167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58360405190815260200160405180910390a26000600160a060020a0382167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a35050565b600082821115610cff57fe5b50900390565b600080831515610d185760009150610711565b50828202828482811515610d2857fe5b0414610d3057fe5b9392505050565b6000600160a060020a0383161515610d4e57600080fd5b600160a060020a033316600090815260208190526040902054821115610d7357600080fd5b600160a060020a033316600090815260208190526040902054610d9c908363ffffffff610cf316565b600160a060020a033381166000908152602081905260408082209390935590851681522054610dd1908363ffffffff610e4916565b60008085600160a060020a0316600160a060020a031681526020019081526020016000208190555082600160a060020a031633600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a350600192915050565b600082820183811015610d3057fe00a165627a7a72305820212605052c29899c08bddc8e03352f2629efa9fb6ab10661f2dbf1007d4d35950029"}