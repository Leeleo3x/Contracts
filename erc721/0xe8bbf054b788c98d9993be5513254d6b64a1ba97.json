{"Runs": "200", "SwarmSource": "bzzr://f86714e795523173e5b25d425e382a7babb602697754cb817ba18a03ca28e7d1", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"resolveTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_chestId\",\"type\":\"uint16\"}],\"name\":\"buyChest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address[]\"},{\"name\":\"_weight\",\"type\":\"uint32[]\"},{\"name\":\"_power\",\"type\":\"uint8[]\"},{\"name\":\"_agility\",\"type\":\"uint8[]\"},{\"name\":\"_speed\",\"type\":\"uint8[]\"},{\"name\":\"_color\",\"type\":\"bytes16[]\"}],\"name\":\"mintFish\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"chestId\",\"type\":\"uint16\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"boosters\",\"type\":\"uint16\"},{\"name\":\"isLimited\",\"type\":\"bool\"},{\"name\":\"limit\",\"type\":\"uint32\"},{\"name\":\"raiseChance\",\"type\":\"uint24\"},{\"name\":\"raiseStrength\",\"type\":\"uint24\"},{\"name\":\"onlyBoosterType\",\"type\":\"uint8\"},{\"name\":\"onlyBoosterStrength\",\"type\":\"uint8\"}],\"name\":\"setChestProduct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_seeds\",\"type\":\"uint256[]\"}],\"name\":\"batchResolveAquarium\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"randomHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aquariumCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"chestProducts\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"isLimited\",\"type\":\"bool\"},{\"name\":\"limit\",\"type\":\"uint32\"},{\"name\":\"boosters\",\"type\":\"uint16\"},{\"name\":\"raiseChance\",\"type\":\"uint24\"},{\"name\":\"raiseStrength\",\"type\":\"uint24\"},{\"name\":\"onlyBoosterType\",\"type\":\"uint8\"},{\"name\":\"onlyBoosterStrength\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_resolver\",\"type\":\"address\"}],\"name\":\"setResolver\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_booster\",\"type\":\"uint256\"}],\"name\":\"applyBooster\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weightLostPartLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_input\",\"type\":\"uint256\"}],\"name\":\"doKeccak256\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pendingFishing\",\"outputs\":[{\"name\":\"fisher\",\"type\":\"address\"},{\"name\":\"feePaid\",\"type\":\"uint256\"},{\"name\":\"affiliate\",\"type\":\"address\"},{\"name\":\"seed\",\"type\":\"uint256\"},{\"name\":\"deadline\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_utils\",\"type\":\"address\"}],\"name\":\"setUtils\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_weightPart\",\"type\":\"uint8\"}],\"name\":\"setWeightLostPartLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"chests\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auction\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initChestsStore\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_seeds\",\"type\":\"uint256[]\"},{\"name\":\"_affiliate\",\"type\":\"address\"}],\"name\":\"batchFishAquarium\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hashesUsed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hashes\",\"type\":\"bytes32[]\"}],\"name\":\"addHash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fishes\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"activeBooster\",\"type\":\"uint8\"},{\"name\":\"boostedTill\",\"type\":\"uint64\"},{\"name\":\"boosterStrength\",\"type\":\"uint8\"},{\"name\":\"boosterRaiseValue\",\"type\":\"uint24\"},{\"name\":\"weight\",\"type\":\"uint64\"},{\"name\":\"power\",\"type\":\"uint16\"},{\"name\":\"agility\",\"type\":\"uint16\"},{\"name\":\"speed\",\"type\":\"uint16\"},{\"name\":\"color\",\"type\":\"bytes16\"},{\"name\":\"canFightAgain\",\"type\":\"uint64\"},{\"name\":\"canBeAttackedAgain\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_auction\",\"type\":\"address\"}],\"name\":\"setAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_boosters\",\"type\":\"address\"}],\"name\":\"setBoosters\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"chestId\",\"type\":\"uint16\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setChestPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"affiliated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_attacker\",\"type\":\"uint256\"},{\"name\":\"_victim\",\"type\":\"uint256\"}],\"name\":\"attack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setAquariumCost\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"boosters\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_boosters\",\"type\":\"address\"},{\"name\":\"_chests\",\"type\":\"address\"},{\"name\":\"_utils\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"fisher\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"feePaid\",\"type\":\"uint256\"}],\"name\":\"AquariumFished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"fisher\",\"type\":\"address\"}],\"name\":\"AquariumResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"attacker\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"victim\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"weight\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"ap\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"vp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"random\",\"type\":\"uint256\"}],\"name\":\"Attack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"boosterId\",\"type\":\"uint256\"}],\"name\":\"BoosterApplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.21+commit.dfe3193c", "ConstructorArguments": "00000000000000000000000037c7d59a4f5af2dbd9bdf822aeed0ce08c6e0b62000000000000000000000000df0f851ce2214febdc2d111cc591246ff813087d00000000000000000000000026c720c79c2518d42bdf604bcf0f433d0f67a8da", "SourceCode": "pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Beneficiary is Ownable {\r\n\r\n    address public beneficiary;\r\n\r\n    function Beneficiary() public {\r\n        beneficiary = msg.sender;\r\n    }\r\n\r\n    function setBeneficiary(address _beneficiary) onlyOwner public {\r\n        beneficiary = _beneficiary;\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\ncontract ChestsStore is Beneficiary {\r\n\r\n\r\n    struct chestProduct {\r\n        uint256 price; // Price in wei\r\n        bool isLimited; // is limited sale chest\r\n        uint32 limit; // Sell limit\r\n        uint16 boosters; // count of boosters\r\n        uint24 raiseChance;// in 1/10 of percent\r\n        uint24 raiseStrength;// in 1/10 of percent for params or minutes for timebased boosters\r\n        uint8 onlyBoosterType;//If set chest will produce only this type\r\n        uint8 onlyBoosterStrength;\r\n    }\r\n\r\n\r\n    chestProduct[255] public chestProducts;\r\n    FishbankChests chests;\r\n\r\n\r\n    function ChestsStore(address _chests) public {\r\n        chests = FishbankChests(_chests);\r\n        //set chests to this address\r\n    }\r\n\r\n    function initChestsStore() public onlyOwner {\r\n        // Create basic chests types\r\n        setChestProduct(1, 0, 1, false, 0, 0, 0, 0, 0);\r\n        setChestProduct(2, 15 finney, 3, false, 0, 0, 0, 0, 0);\r\n        setChestProduct(3, 20 finney, 5, false, 0, 0, 0, 0, 0);\r\n    }\r\n\r\n    function setChestProduct(uint16 chestId, uint256 price, uint16 boosters, bool isLimited, uint32 limit, uint24 raiseChance, uint24 raiseStrength, uint8 onlyBoosterType, uint8 onlyBoosterStrength) onlyOwner public {\r\n        chestProduct storage newProduct = chestProducts[chestId];\r\n        newProduct.price = price;\r\n        newProduct.boosters = boosters;\r\n        newProduct.isLimited = isLimited;\r\n        newProduct.limit = limit;\r\n        newProduct.raiseChance = raiseChance;\r\n        newProduct.raiseStrength = raiseStrength;\r\n        newProduct.onlyBoosterType = onlyBoosterType;\r\n        newProduct.onlyBoosterStrength = onlyBoosterStrength;\r\n    }\r\n\r\n    function setChestPrice(uint16 chestId, uint256 price) onlyOwner public {\r\n        chestProducts[chestId].price = price;\r\n    }\r\n\r\n    function buyChest(uint16 _chestId) payable public {\r\n        chestProduct memory tmpChestProduct = chestProducts[_chestId];\r\n\r\n        require(tmpChestProduct.price > 0);\r\n        // only chests with price\r\n        require(msg.value >= tmpChestProduct.price);\r\n        //check if enough ether is send\r\n        require(!tmpChestProduct.isLimited || tmpChestProduct.limit > 0);\r\n        //check limits if they exists\r\n\r\n        chests.mintChest(msg.sender, tmpChestProduct.boosters, tmpChestProduct.raiseStrength, tmpChestProduct.raiseChance, tmpChestProduct.onlyBoosterType, tmpChestProduct.onlyBoosterStrength);\r\n\r\n        if (msg.value > chestProducts[_chestId].price) {//send to much ether send some back\r\n            msg.sender.transfer(msg.value - chestProducts[_chestId].price);\r\n        }\r\n\r\n        beneficiary.transfer(chestProducts[_chestId].price);\r\n        //send paid eth to beneficiary\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract FishbankBoosters is Ownable {\r\n\r\n    struct Booster {\r\n        address owner;\r\n        uint32 duration;\r\n        uint8 boosterType;\r\n        uint24 raiseValue;\r\n        uint8 strength;\r\n        uint32 amount;\r\n    }\r\n\r\n    Booster[] public boosters;\r\n    bool public implementsERC721 = true;\r\n    string public name = \"Fishbank Boosters\";\r\n    string public symbol = \"FISHB\";\r\n    mapping(uint256 => address) public approved;\r\n    mapping(address => uint256) public balances;\r\n    address public fishbank;\r\n    address public chests;\r\n    address public auction;\r\n\r\n    modifier onlyBoosterOwner(uint256 _tokenId) {\r\n        require(boosters[_tokenId].owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    modifier onlyChest() {\r\n        require(chests == msg.sender);\r\n        _;\r\n    }\r\n\r\n    function FishbankBoosters() public {\r\n        //nothing yet\r\n    }\r\n\r\n    //mints the boosters can only be called by owner. could be a smart contract\r\n    function mintBooster(address _owner, uint32 _duration, uint8 _type, uint8 _strength, uint32 _amount, uint24 _raiseValue) onlyChest public {\r\n        boosters.length ++;\r\n\r\n        Booster storage tempBooster = boosters[boosters.length - 1];\r\n\r\n        tempBooster.owner = _owner;\r\n        tempBooster.duration = _duration;\r\n        tempBooster.boosterType = _type;\r\n        tempBooster.strength = _strength;\r\n        tempBooster.amount = _amount;\r\n        tempBooster.raiseValue = _raiseValue;\r\n\r\n        Transfer(address(0), _owner, boosters.length - 1);\r\n    }\r\n\r\n    function setFishbank(address _fishbank) onlyOwner public {\r\n        fishbank = _fishbank;\r\n    }\r\n\r\n    function setChests(address _chests) onlyOwner public {\r\n        if (chests != address(0)) {\r\n            revert();\r\n        }\r\n        chests = _chests;\r\n    }\r\n\r\n    function setAuction(address _auction) onlyOwner public {\r\n        auction = _auction;\r\n    }\r\n\r\n    function getBoosterType(uint256 _tokenId) view public returns (uint8 boosterType) {\r\n        boosterType = boosters[_tokenId].boosterType;\r\n    }\r\n\r\n    function getBoosterAmount(uint256 _tokenId) view public returns (uint32 boosterAmount) {\r\n        boosterAmount = boosters[_tokenId].amount;\r\n    }\r\n\r\n    function getBoosterDuration(uint256 _tokenId) view public returns (uint32) {\r\n        if (boosters[_tokenId].boosterType == 4 || boosters[_tokenId].boosterType == 2) {\r\n            return boosters[_tokenId].duration + boosters[_tokenId].raiseValue * 60;\r\n        }\r\n        return boosters[_tokenId].duration;\r\n    }\r\n\r\n    function getBoosterStrength(uint256 _tokenId) view public returns (uint8 strength) {\r\n        strength = boosters[_tokenId].strength;\r\n    }\r\n\r\n    function getBoosterRaiseValue(uint256 _tokenId) view public returns (uint24 raiseValue) {\r\n        raiseValue = boosters[_tokenId].raiseValue;\r\n    }\r\n\r\n    //ERC721 functionality\r\n    //could split this to a different contract but doesn't make it easier to read\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    function totalSupply() public view returns (uint256 total) {\r\n        total = boosters.length;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance){\r\n        balance = balances[_owner];\r\n    }\r\n\r\n    function ownerOf(uint256 _tokenId) public view returns (address owner){\r\n        owner = boosters[_tokenId].owner;\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\r\n        require(boosters[_tokenId].owner == _from);\r\n        //can only transfer if previous owner equals from\r\n        boosters[_tokenId].owner = _to;\r\n        approved[_tokenId] = address(0);\r\n        //reset approved of fish on every transfer\r\n        balances[_from] -= 1;\r\n        //underflow can only happen on 0x\r\n        balances[_to] += 1;\r\n        //overflows only with very very large amounts of fish\r\n        Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _tokenId) public\r\n    onlyBoosterOwner(_tokenId) //check if msg.sender is the owner of this fish\r\n    returns (bool)\r\n    {\r\n        _transfer(msg.sender, _to, _tokenId);\r\n        //after master modifier invoke internal transfer\r\n        return true;\r\n    }\r\n\r\n    function approve(address _to, uint256 _tokenId) public\r\n    onlyBoosterOwner(_tokenId)\r\n    {\r\n        approved[_tokenId] = _to;\r\n        Approval(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public returns (bool) {\r\n        require(approved[_tokenId] == msg.sender || msg.sender == fishbank || msg.sender == auction);\r\n        //require msg.sender to be approved for this token or to be the fishbank contract\r\n        _transfer(_from, _to, _tokenId);\r\n        //handles event, balances and approval reset\r\n        return true;\r\n    }\r\n\r\n\r\n    function takeOwnership(uint256 _tokenId) public {\r\n        require(approved[_tokenId] == msg.sender);\r\n        _transfer(ownerOf(_tokenId), msg.sender, _tokenId);\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract FishbankChests is Ownable {\r\n\r\n    struct Chest {\r\n        address owner;\r\n        uint16 boosters;\r\n        uint16 chestType;\r\n        uint24 raiseChance;//Increace chance to catch bigger chest (1 = 1:10000)\r\n        uint8 onlySpecificType;\r\n        uint8 onlySpecificStrength;\r\n        uint24 raiseStrength;\r\n    }\r\n\r\n    Chest[] public chests;\r\n    FishbankBoosters public boosterContract;\r\n    mapping(uint256 => address) public approved;\r\n    mapping(address => uint256) public balances;\r\n    mapping(address => bool) public minters;\r\n\r\n    modifier onlyChestOwner(uint256 _tokenId) {\r\n        require(chests[_tokenId].owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    modifier onlyMinters() {\r\n        require(minters[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    function FishbankChests(address _boosterAddress) public {\r\n        boosterContract = FishbankBoosters(_boosterAddress);\r\n    }\r\n\r\n    function addMinter(address _minter) onlyOwner public {\r\n        minters[_minter] = true;\r\n    }\r\n\r\n    function removeMinter(address _minter) onlyOwner public {\r\n        minters[_minter] = false;\r\n    }\r\n\r\n    //create a chest\r\n\r\n    function mintChest(address _owner, uint16 _boosters, uint24 _raiseStrength, uint24 _raiseChance, uint8 _onlySpecificType, uint8 _onlySpecificStrength) onlyMinters public {\r\n\r\n        chests.length++;\r\n        chests[chests.length - 1].owner = _owner;\r\n        chests[chests.length - 1].boosters = _boosters;\r\n        chests[chests.length - 1].raiseStrength = _raiseStrength;\r\n        chests[chests.length - 1].raiseChance = _raiseChance;\r\n        chests[chests.length - 1].onlySpecificType = _onlySpecificType;\r\n        chests[chests.length - 1].onlySpecificStrength = _onlySpecificStrength;\r\n        Transfer(address(0), _owner, chests.length - 1);\r\n    }\r\n\r\n    function convertChest(uint256 _tokenId) onlyChestOwner(_tokenId) public {\r\n\r\n        Chest memory chest = chests[_tokenId];\r\n        uint16 numberOfBoosters = chest.boosters;\r\n\r\n        if (chest.onlySpecificType != 0) {//Specific boosters\r\n            if (chest.onlySpecificType == 1 || chest.onlySpecificType == 3) {\r\n                boosterContract.mintBooster(msg.sender, 2 days, chest.onlySpecificType, chest.onlySpecificStrength, chest.boosters, chest.raiseStrength);\r\n            } else if (chest.onlySpecificType == 5) {//Instant attack\r\n                boosterContract.mintBooster(msg.sender, 0, 5, 1, chest.boosters, chest.raiseStrength);\r\n            } else if (chest.onlySpecificType == 2) {//Freeze\r\n                uint32 freezeTime = 7 days;\r\n                if (chest.onlySpecificStrength == 2) {\r\n                    freezeTime = 14 days;\r\n                } else if (chest.onlySpecificStrength == 3) {\r\n                    freezeTime = 30 days;\r\n                }\r\n                boosterContract.mintBooster(msg.sender, freezeTime, 5, chest.onlySpecificType, chest.boosters, chest.raiseStrength);\r\n            } else if (chest.onlySpecificType == 4) {//Watch\r\n                uint32 watchTime = 12 hours;\r\n                if (chest.onlySpecificStrength == 2) {\r\n                    watchTime = 48 hours;\r\n                } else if (chest.onlySpecificStrength == 3) {\r\n                    watchTime = 3 days;\r\n                }\r\n                boosterContract.mintBooster(msg.sender, watchTime, 4, chest.onlySpecificStrength, chest.boosters, chest.raiseStrength);\r\n            }\r\n\r\n        } else {//Regular chest\r\n\r\n            for (uint8 i = 0; i < numberOfBoosters; i ++) {\r\n                uint24 random = uint16(keccak256(block.coinbase, block.blockhash(block.number - 1), i, chests.length)) % 1000\r\n                - chest.raiseChance;\r\n                //get random 0 - 9999 minus raiseChance\r\n\r\n                if (random > 850) {\r\n                    boosterContract.mintBooster(msg.sender, 2 days, 1, 1, 1, chest.raiseStrength); //Small Agility Booster\r\n                } else if (random > 700) {\r\n                    boosterContract.mintBooster(msg.sender, 7 days, 2, 1, 1, chest.raiseStrength); //Small Freezer\r\n                } else if (random > 550) {\r\n                    boosterContract.mintBooster(msg.sender, 2 days, 3, 1, 1, chest.raiseStrength); //Small Power Booster\r\n                } else if (random > 400) {\r\n                    boosterContract.mintBooster(msg.sender, 12 hours, 4, 1, 1, chest.raiseStrength); //Tiny Watch\r\n                } else if (random > 325) {\r\n                    boosterContract.mintBooster(msg.sender, 48 hours, 4, 2, 1, chest.raiseStrength); //Small Watch\r\n                } else if (random > 250) {\r\n                    boosterContract.mintBooster(msg.sender, 2 days, 1, 2, 1, chest.raiseStrength); //Mid Agility Booster\r\n                } else if (random > 175) {\r\n                    boosterContract.mintBooster(msg.sender, 14 days, 2, 2, 1, chest.raiseStrength); //Mid Freezer\r\n                } else if (random > 100) {\r\n                    boosterContract.mintBooster(msg.sender, 2 days, 3, 2, 1, chest.raiseStrength); //Mid Power Booster\r\n                } else if (random > 80) {\r\n                    boosterContract.mintBooster(msg.sender, 2 days, 1, 3, 1, chest.raiseStrength); //Big Agility Booster\r\n                } else if (random > 60) {\r\n                    boosterContract.mintBooster(msg.sender, 30 days, 2, 3, 1, chest.raiseStrength); //Big Freezer\r\n                } else if (random > 40) {\r\n                    boosterContract.mintBooster(msg.sender, 2 days, 3, 3, 1, chest.raiseStrength); //Big Power Booster\r\n                } else if (random > 20) {\r\n                    boosterContract.mintBooster(msg.sender, 0, 5, 1, 1, 0); //Instant Attack\r\n                } else {\r\n                    boosterContract.mintBooster(msg.sender, 3 days, 4, 3, 1, 0); //Gold Watch\r\n                }\r\n            }\r\n        }\r\n\r\n        _transfer(msg.sender, address(0), _tokenId); //burn chest\r\n    }\r\n\r\n    //ERC721 functionality\r\n    //could split this to a different contract but doesn't make it easier to read\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    function totalSupply() public view returns (uint256 total) {\r\n        total = chests.length;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance){\r\n        balance = balances[_owner];\r\n    }\r\n\r\n    function ownerOf(uint256 _tokenId) public view returns (address owner){\r\n        owner = chests[_tokenId].owner;\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\r\n        require(chests[_tokenId].owner == _from); //can only transfer if previous owner equals from\r\n        chests[_tokenId].owner = _to;\r\n        approved[_tokenId] = address(0); //reset approved of fish on every transfer\r\n        balances[_from] -= 1; //underflow can only happen on 0x\r\n        balances[_to] += 1; //overflows only with very very large amounts of fish\r\n        Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _tokenId) public\r\n    onlyChestOwner(_tokenId) //check if msg.sender is the owner of this fish\r\n    returns (bool)\r\n    {\r\n        _transfer(msg.sender, _to, _tokenId);\r\n        //after master modifier invoke internal transfer\r\n        return true;\r\n    }\r\n\r\n    function approve(address _to, uint256 _tokenId) public\r\n    onlyChestOwner(_tokenId)\r\n    {\r\n        approved[_tokenId] = _to;\r\n        Approval(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public returns (bool) {\r\n        require(approved[_tokenId] == msg.sender);\r\n        //require msg.sender to be approved for this token\r\n        _transfer(_from, _to, _tokenId);\r\n        //handles event, balances and approval reset\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract FishbankUtils is Ownable {\r\n\r\n    uint32[100] cooldowns = [\r\n        720 minutes, 720 minutes, 720 minutes, 720 minutes, 720 minutes, //1-5\r\n        660 minutes, 660 minutes, 660 minutes, 660 minutes, 660 minutes, //6-10\r\n        600 minutes, 600 minutes, 600 minutes, 600 minutes, 600 minutes, //11-15\r\n        540 minutes, 540 minutes, 540 minutes, 540 minutes, 540 minutes, //16-20\r\n        480 minutes, 480 minutes, 480 minutes, 480 minutes, 480 minutes, //21-25\r\n        420 minutes, 420 minutes, 420 minutes, 420 minutes, 420 minutes, //26-30\r\n        360 minutes, 360 minutes, 360 minutes, 360 minutes, 360 minutes, //31-35\r\n        300 minutes, 300 minutes, 300 minutes, 300 minutes, 300 minutes, //36-40\r\n        240 minutes, 240 minutes, 240 minutes, 240 minutes, 240 minutes, //41-45\r\n        180 minutes, 180 minutes, 180 minutes, 180 minutes, 180 minutes, //46-50\r\n        120 minutes, 120 minutes, 120 minutes, 120 minutes, 120 minutes, //51-55\r\n        90 minutes,  90 minutes,  90 minutes,  90 minutes,  90 minutes,  //56-60\r\n        75 minutes,  75 minutes,  75 minutes,  75 minutes,  75 minutes,  //61-65\r\n        60 minutes,  60 minutes,  60 minutes,  60 minutes,  60 minutes,  //66-70\r\n        50 minutes,  50 minutes,  50 minutes,  50 minutes,  50 minutes,  //71-75\r\n        40 minutes,  40 minutes,  40 minutes,  40 minutes,  40 minutes,  //76-80\r\n        30 minutes,  30 minutes,  30 minutes,  30 minutes,  30 minutes,  //81-85\r\n        20 minutes,  20 minutes,  20 minutes,  20 minutes,  20 minutes,  //86-90\r\n        10 minutes,  10 minutes,  10 minutes,  10 minutes,  10 minutes,  //91-95\r\n        5 minutes,   5 minutes,   5 minutes,   5 minutes,   5 minutes    //96-100\r\n    ];\r\n\r\n\r\n    function setCooldowns(uint32[100] _cooldowns) onlyOwner public {\r\n        cooldowns = _cooldowns;\r\n    }\r\n\r\n    function getFishParams(uint256 hashSeed1, uint256 hashSeed2, uint256 fishesLength, address coinbase) external pure returns (uint32[4]) {\r\n\r\n        bytes32[5] memory hashSeeds;\r\n        hashSeeds[0] = keccak256(hashSeed1 ^ hashSeed2); //xor both seed from owner and user so no one can cheat\r\n        hashSeeds[1] = keccak256(hashSeeds[0], fishesLength);\r\n        hashSeeds[2] = keccak256(hashSeeds[1], coinbase);\r\n        hashSeeds[3] = keccak256(hashSeeds[2], coinbase, fishesLength);\r\n        hashSeeds[4] = keccak256(hashSeeds[1], hashSeeds[2], hashSeeds[0]);\r\n\r\n        uint24[6] memory seeds = [\r\n            uint24(uint(hashSeeds[3]) % 10e6 + 1), //whale chance\r\n            uint24(uint(hashSeeds[0]) % 420 + 1), //power\r\n            uint24(uint(hashSeeds[1]) % 420 + 1), //agility\r\n            uint24(uint(hashSeeds[2]) % 150 + 1), //speed\r\n            uint24(uint(hashSeeds[4]) % 16 + 1), //whale type\r\n            uint24(uint(hashSeeds[4]) % 5000 + 1) //rarity\r\n        ];\r\n\r\n        uint32[4] memory fishParams;\r\n\r\n        if (seeds[0] == 1000000) {//This is a whale 1:1 000 000 chance\r\n\r\n            if (seeds[4] == 1) {//Orca\r\n                fishParams = [140 + uint8(seeds[1] / 42), 140 + uint8(seeds[2] / 42), 75 + uint8(seeds[3] / 6), uint32(500000)];\r\n                if(fishParams[0] == 140) {\r\n                    fishParams[0]++;\r\n                }\r\n                if(fishParams[1] == 140) {\r\n                    fishParams[1]++;\r\n                }\r\n                if(fishParams[2] == 75) {\r\n                    fishParams[2]++;\r\n                }\r\n            } else if (seeds[4] < 4) {//Blue whale\r\n                fishParams = [130 + uint8(seeds[1] / 42), 130 + uint8(seeds[2] / 42), 75 + uint8(seeds[3] / 6), uint32(500000)];\r\n                if(fishParams[0] == 130) {\r\n                    fishParams[0]++;\r\n                }\r\n                if(fishParams[1] == 130) {\r\n                    fishParams[1]++;\r\n                }\r\n                if(fishParams[2] == 75) {\r\n                    fishParams[2]++;\r\n                }\r\n            } else {//Cachalot\r\n                fishParams = [115 + uint8(seeds[1] / 28), 115 + uint8(seeds[2] / 28), 75 + uint8(seeds[3] / 6), uint32(500000)];\r\n                if(fishParams[0] == 115) {\r\n                    fishParams[0]++;\r\n                }\r\n                if(fishParams[1] == 115) {\r\n                    fishParams[1]++;\r\n                }\r\n                if(fishParams[2] == 75) {\r\n                    fishParams[2]++;\r\n                }\r\n            }\r\n        } else {\r\n            if (seeds[5] == 5000) {//Legendary\r\n                fishParams = [85 + uint8(seeds[1] / 14), 85 + uint8(seeds[2] / 14), uint8(50 + seeds[3] / 3), uint32(1000)];\r\n                if(fishParams[0] == 85) {\r\n                    fishParams[0]++;\r\n                }\r\n                if(fishParams[1] == 85) {\r\n                    fishParams[1]++;\r\n                }\r\n            } else if (seeds[5] > 4899) {//Epic\r\n                fishParams = [50 + uint8(seeds[1] / 12), 50 + uint8(seeds[2] / 12), uint8(25 + seeds[3] / 2), uint32(300)];\r\n                if(fishParams[0] == 50) {\r\n                    fishParams[0]++;\r\n                }\r\n                if(fishParams[1] == 50) {\r\n                    fishParams[1]++;\r\n                }\r\n\r\n            } else if (seeds[5] > 4000) {//Rare\r\n                fishParams = [20 + uint8(seeds[1] / 14), 20 + uint8(seeds[2] / 14), uint8(25 + seeds[3] / 3), uint32(100)];\r\n                if(fishParams[0] == 20) {\r\n                    fishParams[0]++;\r\n                }\r\n                if(fishParams[1] == 20) {\r\n                    fishParams[1]++;\r\n                }\r\n            } else {//Common\r\n                fishParams = [uint8(seeds[1] / 21), uint8(seeds[2] / 21), uint8(seeds[3] / 3), uint32(36)];\r\n                if (fishParams[0] == 0) {\r\n                    fishParams[0] = 1;\r\n                }\r\n                if (fishParams[1] == 0) {\r\n                    fishParams[1] = 1;\r\n                }\r\n                if (fishParams[2] == 0) {\r\n                    fishParams[2] = 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        return fishParams;\r\n    }\r\n\r\n    function getCooldown(uint16 speed) external view returns (uint64){\r\n        return uint64(now + cooldowns[speed - 1]);\r\n    }\r\n\r\n    //Ceiling function for fish generator\r\n    function ceil(uint base, uint divider) internal pure returns (uint) {\r\n        return base / divider + ((base % divider > 0) ? 1 : 0);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/// @title Auction contract for any type of erc721 token\r\n/// @author Fishbank\r\n\r\ncontract ERC721 {\r\n\r\n    function implementsERC721() public pure returns (bool);\r\n\r\n    function totalSupply() public view returns (uint256 total);\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n\r\n    function ownerOf(uint256 _tokenId) public view returns (address owner);\r\n\r\n    function approve(address _to, uint256 _tokenId) public;\r\n\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public returns (bool);\r\n\r\n    function transfer(address _to, uint256 _tokenId) public returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    // Optional\r\n    // function name() public view returns (string name);\r\n    // function symbol() public view returns (string symbol);\r\n    // function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 tokenId);\r\n    // function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);\r\n}\r\n\r\n\r\ncontract ERC721Auction is Beneficiary {\r\n\r\n    struct Auction {\r\n        address seller;\r\n        uint256 tokenId;\r\n        uint64 auctionBegin;\r\n        uint64 auctionEnd;\r\n        uint256 startPrice;\r\n        uint256 endPrice;\r\n    }\r\n\r\n    uint32 public auctionDuration = 7 days;\r\n\r\n    ERC721 public ERC721Contract;\r\n    uint256 public fee = 45000; //in 1 10000th of a percent so 4.5% at the start\r\n    uint256 constant FEE_DIVIDER = 1000000;\r\n    mapping(uint256 => Auction) public auctions;\r\n\r\n    event AuctionWon(uint256 indexed tokenId, address indexed winner, address indexed seller, uint256 price);\r\n\r\n    event AuctionStarted(uint256 indexed tokenId, address indexed seller);\r\n\r\n    event AuctionFinalized(uint256 indexed tokenId, address indexed seller);\r\n\r\n\r\n    function startAuction(uint256 _tokenId, uint256 _startPrice, uint256 _endPrice) external {\r\n        require(ERC721Contract.transferFrom(msg.sender, address(this), _tokenId));\r\n        //Prices must be in range from 0.01 Eth and 10 000 Eth\r\n        require(_startPrice <= 10000 ether && _endPrice <= 10000 ether);\r\n        require(_startPrice >= (1 ether / 100) && _endPrice >= (1 ether / 100));\r\n\r\n        Auction memory auction;\r\n\r\n        auction.seller = msg.sender;\r\n        auction.tokenId = _tokenId;\r\n        auction.auctionBegin = uint64(now);\r\n        auction.auctionEnd = uint64(now + auctionDuration);\r\n        require(auction.auctionEnd > auction.auctionBegin);\r\n        auction.startPrice = _startPrice;\r\n        auction.endPrice = _endPrice;\r\n\r\n        auctions[_tokenId] = auction;\r\n\r\n        AuctionStarted(_tokenId, msg.sender);\r\n    }\r\n\r\n\r\n    function buyAuction(uint256 _tokenId) payable external {\r\n        Auction storage auction = auctions[_tokenId];\r\n\r\n        uint256 price = calculateBid(_tokenId);\r\n        uint256 totalFee = price * fee / FEE_DIVIDER; //safe math needed?\r\n\r\n        require(price <= msg.value); //revert if not enough ether send\r\n\r\n        if (price != msg.value) {//send back to much eth\r\n            msg.sender.transfer(msg.value - price);\r\n        }\r\n\r\n        beneficiary.transfer(totalFee);\r\n\r\n        auction.seller.transfer(price - totalFee);\r\n\r\n        if (!ERC721Contract.transfer(msg.sender, _tokenId)) {\r\n            revert();\r\n            //can't complete transfer if this fails\r\n        }\r\n\r\n        AuctionWon(_tokenId, msg.sender, auction.seller, price);\r\n\r\n        delete auctions[_tokenId];\r\n        //deletes auction\r\n    }\r\n\r\n    function saveToken(uint256 _tokenId) external {\r\n        require(auctions[_tokenId].auctionEnd < now);\r\n        //auction must have ended\r\n        require(ERC721Contract.transfer(auctions[_tokenId].seller, _tokenId));\r\n        //transfer fish back to seller\r\n\r\n        AuctionFinalized(_tokenId, auctions[_tokenId].seller);\r\n\r\n        delete auctions[_tokenId];\r\n        //delete auction\r\n    }\r\n\r\n    function ERC721Auction(address _ERC721Contract) public {\r\n        ERC721Contract = ERC721(_ERC721Contract);\r\n    }\r\n\r\n    function setFee(uint256 _fee) onlyOwner public {\r\n        if (_fee > fee) {\r\n            revert(); //fee can only be set to lower value to prevent attacks by owner\r\n        }\r\n        fee = _fee; // all is well set fee\r\n    }\r\n\r\n    function calculateBid(uint256 _tokenId) public view returns (uint256) {\r\n        Auction storage auction = auctions[_tokenId];\r\n\r\n        if (now >= auction.auctionEnd) {//if auction ended return auction end price\r\n            return auction.endPrice;\r\n        }\r\n        //get hours passed\r\n        uint256 hoursPassed = (now - auction.auctionBegin) / 1 hours;\r\n        uint256 currentPrice;\r\n        //get total hours\r\n        uint16 totalHours = uint16(auctionDuration /1 hours) - 1;\r\n\r\n        if (auction.endPrice > auction.startPrice) {\r\n            currentPrice = auction.startPrice + (hoursPassed * (auction.endPrice - auction.startPrice))/ totalHours;\r\n        } else if(auction.endPrice < auction.startPrice) {\r\n            currentPrice = auction.startPrice - (hoursPassed * (auction.startPrice - auction.endPrice))/ totalHours;\r\n        } else {//start and end are the same\r\n            currentPrice = auction.endPrice;\r\n        }\r\n\r\n        return uint256(currentPrice);\r\n        //return the price at this very moment\r\n    }\r\n\r\n    /// return token if case when need to redeploy auction contract\r\n    function returnToken(uint256 _tokenId) onlyOwner public {\r\n        require(ERC721Contract.transfer(auctions[_tokenId].seller, _tokenId));\r\n        //transfer fish back to seller\r\n\r\n        AuctionFinalized(_tokenId, auctions[_tokenId].seller);\r\n\r\n        delete auctions[_tokenId];\r\n    }\r\n}\r\n\r\n\r\n/// @title Core contract of fishbank\r\n/// @author Fishbank\r\n\r\ncontract Fishbank is ChestsStore {\r\n\r\n    struct Fish {\r\n        address owner;\r\n        uint8 activeBooster;\r\n        uint64 boostedTill;\r\n        uint8 boosterStrength;\r\n        uint24 boosterRaiseValue;\r\n        uint64 weight;\r\n        uint16 power;\r\n        uint16 agility;\r\n        uint16 speed;\r\n        bytes16 color;\r\n        uint64 canFightAgain;\r\n        uint64 canBeAttackedAgain;\r\n    }\r\n\r\n    struct FishingAttempt {\r\n        address fisher;\r\n        uint256 feePaid;\r\n        address affiliate;\r\n        uint256 seed;\r\n        uint64 deadline;//till when does the contract owner have time to resolve;\r\n    }\r\n\r\n    modifier onlyFishOwner(uint256 _tokenId) {\r\n        require(fishes[_tokenId].owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    modifier onlyResolver() {\r\n        require(msg.sender == resolver);\r\n        _;\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(msg.sender == minter);\r\n        _;\r\n    }\r\n\r\n    Fish[] public fishes;\r\n    address public resolver;\r\n    address public auction;\r\n    address public minter;\r\n    bool public implementsERC721 = true;\r\n    string public name = \"Fishbank\";\r\n    string public symbol = \"FISH\";\r\n    bytes32[] public randomHashes;\r\n    uint256 public hashesUsed;\r\n    uint256 public aquariumCost = 1 ether / 100 * 3;//fee for fishing starts at 0.03 ether\r\n    uint256 public resolveTime = 30 minutes;//how long does the contract owner have to resolve hashes\r\n    uint16 public weightLostPartLimit = 5;\r\n    FishbankBoosters public boosters;\r\n    FishbankChests public chests;\r\n    FishbankUtils private utils;\r\n\r\n\r\n    mapping(bytes32 => FishingAttempt) public pendingFishing;//attempts that need solving;\r\n\r\n    mapping(uint256 => address) public approved;\r\n    mapping(address => uint256) public balances;\r\n    mapping(address => bool) public affiliated;\r\n\r\n    event AquariumFished(\r\n        bytes32 hash,\r\n        address fisher,\r\n        uint256 feePaid\r\n    ); //event broadcated when someone fishes in aqaurium\r\n\r\n    event AquariumResolved(bytes32 hash, address fisher);\r\n\r\n    event Attack(\r\n        uint256 attacker,\r\n        uint256 victim,\r\n        uint256 winner,\r\n        uint64 weight,\r\n        uint256 ap, uint256 vp, uint256 random\r\n    );\r\n\r\n    event BoosterApplied(uint256 tokenId, uint256 boosterId);\r\n\r\n    /// @notice Constructor of the contract. Sets resolver, beneficiary, boosters and chests\r\n    /// @param _boosters the address of the boosters smart contract\r\n    /// @param _chests the address of the chests smart contract\r\n\r\n    function Fishbank(address _boosters, address _chests, address _utils) ChestsStore(_chests) public {\r\n\r\n        resolver = msg.sender;\r\n        beneficiary = msg.sender;\r\n        boosters = FishbankBoosters(_boosters);\r\n        chests = FishbankChests(_chests);\r\n        utils = FishbankUtils(_utils);\r\n    }\r\n\r\n    /// @notice Mints fishes according to params can only be called by the owner\r\n    /// @param _owner array of addresses the fishes should be owned by\r\n    /// @param _weight array of weights for the fishes\r\n    /// @param _power array of power levels for the fishes\r\n    /// @param _agility array of agility levels for the fishes\r\n    /// @param _speed array of speed levels for the fishes\r\n    /// @param _color array of color params for the fishes\r\n\r\n    function mintFish(address[] _owner, uint32[] _weight, uint8[] _power, uint8[] _agility, uint8[] _speed, bytes16[] _color) onlyMinter public {\r\n\r\n        for (uint i = 0; i < _owner.length; i ++) {\r\n            _mintFish(_owner[i], _weight[i], _power[i], _agility[i], _speed[i], _color[i]);\r\n        }\r\n    }\r\n\r\n    /// @notice Internal method for minting a fish\r\n    /// @param _owner address of owner for the fish\r\n    /// @param _weight weight param for fish\r\n    /// @param _power power param for fish\r\n    /// @param _agility agility param for the fish\r\n    /// @param _speed speed param for the fish\r\n    /// @param _color color param for the fish\r\n\r\n    function _mintFish(address _owner, uint32 _weight, uint8 _power, uint8 _agility, uint8 _speed, bytes16 _color) internal {\r\n\r\n        fishes.length += 1;\r\n        uint256 newFishId = fishes.length - 1;\r\n\r\n        Fish storage newFish = fishes[newFishId];\r\n\r\n        newFish.owner = _owner;\r\n        newFish.weight = _weight;\r\n        newFish.power = _power;\r\n        newFish.agility = _agility;\r\n        newFish.speed = _speed;\r\n        newFish.color = _color;\r\n\r\n        balances[_owner] ++;\r\n\r\n        Transfer(address(0), _owner, newFishId);\r\n    }\r\n\r\n    function setWeightLostPartLimit(uint8 _weightPart) onlyOwner public {\r\n        weightLostPartLimit = _weightPart;\r\n    }\r\n\r\n    /// @notice Sets the cost for fishing in the aquarium\r\n    /// @param _fee new fee for fishing in wei\r\n    function setAquariumCost(uint256 _fee) onlyOwner public {\r\n        aquariumCost = _fee;\r\n    }\r\n\r\n    /// @notice Sets address that resolves hashes for fishing can only be called by the owner\r\n    /// @param _resolver address of the resolver\r\n    function setResolver(address _resolver) onlyOwner public {\r\n        resolver = _resolver;\r\n    }\r\n\r\n\r\n    /// @notice Sets the address getting the proceedings from fishing in the aquarium\r\n    /// @param _beneficiary address of the new beneficiary\r\n    function setBeneficiary(address _beneficiary) onlyOwner public {\r\n        beneficiary = _beneficiary;\r\n    }\r\n\r\n    function setAuction(address _auction) onlyOwner public {\r\n        auction = _auction;\r\n    }\r\n\r\n    function setBoosters(address _boosters) onlyOwner public {\r\n        boosters = FishbankBoosters(_boosters);\r\n    }\r\n\r\n    function setMinter(address _minter) onlyOwner public {\r\n        minter = _minter;\r\n    }\r\n\r\n    function setUtils(address _utils) onlyOwner public {\r\n        utils = FishbankUtils(_utils);\r\n    }\r\n\r\n    function batchFishAquarium(uint256[] _seeds, address _affiliate) payable public {\r\n        require(_seeds.length > 0);\r\n        require(msg.value >= aquariumCost);\r\n        //must send enough ether to cover costs\r\n        require(randomHashes.length > hashesUsed + _seeds.length);\r\n        //there needs to be a hash left\r\n\r\n\r\n\r\n        if (msg.value > aquariumCost * _seeds.length) {\r\n            msg.sender.transfer(msg.value - aquariumCost * _seeds.length);\r\n            //send to much ether back\r\n        }\r\n\r\n        for (uint256 i = 0; i < _seeds.length; i ++) {\r\n            _fishAquarium(_seeds[i]);\r\n        }\r\n\r\n        if(_affiliate != address(0)) {\r\n            pendingFishing[randomHashes[hashesUsed - 1]].affiliate = _affiliate;\r\n        }\r\n    }\r\n\r\n    function _fishAquarium(uint256 _seed) internal {\r\n        //this loop prevents from using the same hash as another fishing attempt if the owner submits the same hash multiple times\r\n        while (pendingFishing[randomHashes[hashesUsed]].fisher != address(0)) {\r\n            hashesUsed++;\r\n            //increase hashesUsed and try next one\r\n        }\r\n\r\n        FishingAttempt storage newAttempt = pendingFishing[randomHashes[hashesUsed]];\r\n\r\n        newAttempt.fisher = msg.sender;\r\n        newAttempt.feePaid = aquariumCost;\r\n        //set the fee paid so it can be returned if the hash doesn't get resolved fast enough\r\n        newAttempt.seed = _seed;\r\n        //sets the seed that gets combined with the random seed of the owner\r\n        newAttempt.deadline = uint64(now + resolveTime);\r\n        //saves deadline after which the fisher can redeem his fishing fee\r\n\r\n        hashesUsed++;\r\n        //increase hashes used so it cannot be used again\r\n\r\n        AquariumFished(randomHashes[hashesUsed - 1], msg.sender, aquariumCost);\r\n        //broadcast event\r\n    }\r\n\r\n    /// @notice Call this to resolve hashes and generate fish/chests\r\n    /// @param _seed seed that corresponds to the hash\r\n    function _resolveAquarium(uint256 _seed) internal {\r\n        bytes32 tempHash = keccak256(_seed);\r\n        FishingAttempt storage tempAttempt = pendingFishing[tempHash];\r\n\r\n        require(tempAttempt.fisher != address(0));\r\n        //attempt must be set so we look if fisher is set\r\n\r\n        if (tempAttempt.affiliate != address(0) && !affiliated[tempAttempt.fisher]) {//if affiliate is set\r\n            chests.mintChest(tempAttempt.affiliate, 1, 0, 0, 0, 0);\r\n            //Chest with one random booster\r\n            affiliated[tempAttempt.fisher] = true;\r\n        }\r\n\r\n        uint32[4] memory fishParams = utils.getFishParams(_seed, tempAttempt.seed, fishes.length, block.coinbase);\r\n\r\n        _mintFish(tempAttempt.fisher, fishParams[3], uint8(fishParams[0]), uint8(fishParams[1]), uint8(fishParams[2]), bytes16(keccak256(_seed ^ tempAttempt.seed)));\r\n\r\n        beneficiary.transfer(tempAttempt.feePaid);\r\n        AquariumResolved(tempHash, tempAttempt.fisher);\r\n        //broadcast event\r\n\r\n        delete pendingFishing[tempHash];\r\n        //delete fishing attempt\r\n    }\r\n\r\n    /// @notice Batch resolve fishing attempts\r\n    /// @param _seeds array of seeds that correspond to hashes that need resolving\r\n    function batchResolveAquarium(uint256[] _seeds) onlyResolver public {\r\n        for (uint256 i = 0; i < _seeds.length; i ++) {\r\n            _resolveAquarium(_seeds[i]);\r\n        }\r\n    }\r\n\r\n\r\n    /// @notice Adds an array of hashes to be used for resolving\r\n    /// @param _hashes array of hashes to add\r\n    function addHash(bytes32[] _hashes) onlyResolver public {\r\n        for (uint i = 0; i < _hashes.length; i ++) {\r\n            randomHashes.push(_hashes[i]);\r\n        }\r\n    }\r\n\r\n    /// @notice Call this function to attack another fish\r\n    /// @param _attacker ID of fish that is attacking\r\n    /// @param _victim ID of fish to attack\r\n    function attack(uint256 _attacker, uint256 _victim) onlyFishOwner(_attacker) public {\r\n\r\n        Fish memory attacker = fishes[_attacker];\r\n        Fish memory victim = fishes[_victim];\r\n\r\n        //check if attacker is sleeping\r\n        if (attacker.activeBooster == 2 && attacker.boostedTill > now) {//if your fish is sleeping auto awake it\r\n            fishes[_attacker].activeBooster = 0;\r\n            attacker.boostedTill = uint64(now);\r\n            //set booster to invalid one so it has no effect\r\n        }\r\n\r\n        //check if victim has active sleeping booster\r\n        require(!((victim.activeBooster == 2) && victim.boostedTill >= now));\r\n        //cannot attack a sleeping fish\r\n        require(now >= attacker.canFightAgain);\r\n        //check if attacking fish is cooled down\r\n        require(now >= victim.canBeAttackedAgain);\r\n        //check if victim fish can be attacked again\r\n\r\n\r\n        if (msg.sender == victim.owner) {\r\n            uint64 weight = attacker.weight < victim.weight ? attacker.weight : victim.weight;\r\n            fishes[_attacker].weight += weight;\r\n            fishes[_victim].weight -= weight;\r\n            fishes[_attacker].canFightAgain = uint64(utils.getCooldown(attacker.speed));\r\n\r\n            if (fishes[_victim].weight == 0) {\r\n                _transfer(msg.sender, address(0), _victim);\r\n                balances[fishes[_victim].owner] --;\r\n                //burn token\r\n            } else {\r\n                fishes[_victim].canBeAttackedAgain = uint64(now + 1 hours);\r\n                //set victim cooldown 1 hour\r\n            }\r\n\r\n            Attack(_attacker, _victim, _attacker, weight, 0, 0, 0);\r\n            return;\r\n        }\r\n\r\n        if (victim.weight < 2 || attacker.weight < 2) {\r\n            revert();\r\n            //revert if one of the fish is below fighting weight\r\n        }\r\n\r\n        uint256 AP = getFightingAmounts(attacker, true);\r\n        // get attacker power\r\n        uint256 VP = getFightingAmounts(victim, false);\r\n        // get victim power\r\n\r\n        bytes32 randomHash = keccak256(block.coinbase, block.blockhash(block.number - 1), fishes.length);\r\n\r\n        uint256 max = AP > VP ? AP : VP;\r\n        uint256 attackRange = max * 2;\r\n        uint256 random = uint256(randomHash) % attackRange + 1;\r\n\r\n        uint64 weightLost;\r\n\r\n        if (random <= (max + AP - VP)) {\r\n            weightLost = _handleWin(_attacker, _victim);\r\n            Attack(_attacker, _victim, _attacker, weightLost, AP, VP, random);\r\n        } else {\r\n            weightLost = _handleWin(_victim, _attacker);\r\n            Attack(_attacker, _victim, _victim, weightLost, AP, VP, random);\r\n            //broadcast event\r\n        }\r\n\r\n        fishes[_attacker].canFightAgain = uint64(utils.getCooldown(attacker.speed));\r\n        fishes[_victim].canBeAttackedAgain = uint64(now + 1 hours);\r\n        //set victim cooldown 1 hour\r\n    }\r\n\r\n    /// @notice Handles lost gained weight after fight\r\n    /// @param _winner the winner of the fight\r\n    /// @param _loser the loser of the fight\r\n    function _handleWin(uint256 _winner, uint256 _loser) internal returns (uint64) {\r\n        Fish storage winner = fishes[_winner];\r\n        Fish storage loser = fishes[_loser];\r\n\r\n        uint64 fullWeightLost = loser.weight / sqrt(winner.weight);\r\n        uint64 maxWeightLost = loser.weight / weightLostPartLimit;\r\n\r\n        uint64 weightLost = maxWeightLost < fullWeightLost ? maxWeightLost : fullWeightLost;\r\n\r\n        if (weightLost < 1) {\r\n            weightLost = 1;\r\n            // Minimum 1\r\n        }\r\n\r\n        winner.weight += weightLost;\r\n        loser.weight -= weightLost;\r\n\r\n        return weightLost;\r\n    }\r\n\r\n    /// @notice get attack and defence from fish\r\n    /// @param _fish is Fish token\r\n    /// @param _is_attacker true if fish is attacker otherwise false\r\n    function getFightingAmounts(Fish _fish, bool _is_attacker) internal view returns (uint256){\r\n        return (getFishPower(_fish) * (_is_attacker ? 60 : 40) + getFishAgility(_fish) * (_is_attacker ? 40 : 60)) * _fish.weight;\r\n    }\r\n\r\n    /// @notice Apply a booster to a fish\r\n    /// @param _tokenId the fish the booster should be applied to\r\n    /// @param _booster the Id of the booster the token should be applied to\r\n    function applyBooster(uint256 _tokenId, uint256 _booster) onlyFishOwner(_tokenId) public {\r\n        require(msg.sender == boosters.ownerOf(_booster));\r\n        //only owner can do this\r\n        require(boosters.getBoosterAmount(_booster) >= 1);\r\n        Fish storage tempFish = fishes[_tokenId];\r\n        uint8 boosterType = uint8(boosters.getBoosterType(_booster));\r\n\r\n        if (boosterType == 1 || boosterType == 2 || boosterType == 3) {//if booster is attack or agility or sleep\r\n            tempFish.boosterStrength = boosters.getBoosterStrength(_booster);\r\n            tempFish.activeBooster = boosterType;\r\n            tempFish.boostedTill = boosters.getBoosterDuration(_booster) * boosters.getBoosterAmount(_booster) + uint64(now);\r\n            tempFish.boosterRaiseValue = boosters.getBoosterRaiseValue(_booster);\r\n        }\r\n        else if (boosterType == 4) {//watch booster\r\n            require(tempFish.boostedTill > uint64(now));\r\n            //revert on using watch on booster that has passed;\r\n            tempFish.boosterStrength = boosters.getBoosterStrength(_booster);\r\n            tempFish.boostedTill += boosters.getBoosterDuration(_booster) * boosters.getBoosterAmount(_booster);\r\n            //add time to booster\r\n        }\r\n        else if (boosterType == 5) {//Instant attack\r\n            require(boosters.getBoosterAmount(_booster) == 1);\r\n            //Can apply only one instant attack booster\r\n            tempFish.canFightAgain = 0;\r\n        }\r\n\r\n        require(boosters.transferFrom(msg.sender, address(0), _booster));\r\n        //burn booster\r\n\r\n        BoosterApplied(_tokenId, _booster);\r\n    }\r\n\r\n    /// @notice square root function used for weight gain/loss\r\n    /// @param x uint64 to get square root from\r\n    function sqrt(uint64 x) pure internal returns (uint64 y) {\r\n        uint64 z = (x + 1) / 2;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n\r\n    //utlitiy function for easy testing can be removed later\r\n    function doKeccak256(uint256 _input) pure public returns (bytes32) {\r\n        return keccak256(_input);\r\n    }\r\n\r\n    function getFishPower(Fish _fish) internal view returns (uint24 power) {\r\n        power = _fish.power;\r\n        if (_fish.activeBooster == 1 && _fish.boostedTill > now) {// check if booster active\r\n            uint24 boosterPower = (10 * _fish.boosterStrength + _fish.boosterRaiseValue + 100) * power / 100 - power;\r\n            if (boosterPower < 1 && _fish.boosterStrength == 1) {\r\n                power += 1;\r\n            } else if (boosterPower < 3 && _fish.boosterStrength == 2) {\r\n                power += 3;\r\n            } else if (boosterPower < 5 && _fish.boosterStrength == 3) {\r\n                power += 5;\r\n            } else {\r\n                power = boosterPower + power;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getFishAgility(Fish _fish) internal view returns (uint24 agility) {\r\n        agility = _fish.agility;\r\n        if (_fish.activeBooster == 3 && _fish.boostedTill > now) {// check if booster active\r\n            uint24 boosterPower = (10 * _fish.boosterStrength + _fish.boosterRaiseValue + 100) * agility / 100 - agility;\r\n            if (boosterPower < 1 && _fish.boosterStrength == 1) {\r\n                agility += 1;\r\n            } else if (boosterPower < 3 && _fish.boosterStrength == 2) {\r\n                agility += 3;\r\n            } else if (boosterPower < 5 && _fish.boosterStrength == 3) {\r\n                agility += 5;\r\n            } else {\r\n                agility = boosterPower + agility;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    //ERC721 functionality\r\n    //could split this to a different contract but doesn't make it easier to read\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    function totalSupply() public view returns (uint256 total) {\r\n        total = fishes.length;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance){\r\n        balance = balances[_owner];\r\n    }\r\n\r\n    function ownerOf(uint256 _tokenId) public view returns (address owner){\r\n        owner = fishes[_tokenId].owner;\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\r\n        require(fishes[_tokenId].owner == _from);\r\n        //can only transfer if previous owner equals from\r\n        fishes[_tokenId].owner = _to;\r\n        approved[_tokenId] = address(0);\r\n        //reset approved of fish on every transfer\r\n        balances[_from] -= 1;\r\n        //underflow can only happen on 0x\r\n        balances[_to] += 1;\r\n        //overflows only with very very large amounts of fish\r\n        Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _tokenId) public\r\n    onlyFishOwner(_tokenId) //check if msg.sender is the owner of this fish\r\n    returns (bool)\r\n    {\r\n        _transfer(msg.sender, _to, _tokenId);\r\n        //after master modifier invoke internal transfer\r\n        return true;\r\n    }\r\n\r\n    function approve(address _to, uint256 _tokenId) public\r\n    onlyFishOwner(_tokenId)\r\n    {\r\n        approved[_tokenId] = _to;\r\n        Approval(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public returns (bool) {\r\n        require(approved[_tokenId] == msg.sender || msg.sender == auction);\r\n        Fish storage fish = fishes[_tokenId];\r\n\r\n        if (msg.sender == auction) {\r\n            fish.activeBooster = 2;\r\n            //Freeze for auction\r\n            fish.boostedTill = uint64(now + 7 days);\r\n            fish.boosterStrength = 1;\r\n        }\r\n        //require msg.sender to be approved for this token\r\n        _transfer(_from, _to, _tokenId);\r\n        //handles event, balances and approval reset\r\n        return true;\r\n    }\r\n\r\n    function takeOwnership(uint256 _tokenId) public {\r\n        require(approved[_tokenId] == msg.sender);\r\n        _transfer(ownerOf(_tokenId), msg.sender, _tokenId);\r\n    }\r\n\r\n}", "OptimizationUsed": "0", "ContractName": "Fishbank", "ByteCode": "0x606060405260043610610246576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806304f3bcec1461024b57806305ed76c4146102a0578063064701c6146102c957806306fdde03146102e55780630754617214610373578063082d7187146103c8578063095ea7b3146105625780630f3fc29e146105a45780631051db341461062f57806314c783331461065c57806316709c22146106b657806318160ddd146106f5578063197757951461071e5780631c31f7101461074757806323b872dd1461078057806327e235e3146107f957806338af3eed146108465780633fc83dc91461089b5780634e543b261461093b57806351b3666f146109745780635509b160146109a057806357788716146109d15780636224f93e14610a105780636352211e14610ad35780636995350114610b3657806370a0823114610b6f578063763a639014610bbc578063797f87ba14610be25780637d4061e614610c375780637d9f6db514610c9a5780638da5cb5b14610cef57806395d89b4114610d445780639e39db3814610dd2578063a9059cbb14610de7578063b0f94b1614610e41578063b2e6ceeb14610eaf578063b419dd2d14610ed2578063b5b90a2614610efb578063b68d6f3614610f55578063b8c6f579146110a9578063cbc846d9146110e2578063d1d46d2b1461111b578063dbc6f5481461114b578063e1fa76381461119c578063f2b1be45146111c8578063f2fde38b146111eb578063f37a7d4d14611224578063fca3b5aa14611279575b600080fd5b341561025657600080fd5b61025e6112b2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156102ab57600080fd5b6102b36112d9565b6040518082815260200191505060405180910390f35b6102e3600480803561ffff169060200190919050506112e0565b005b34156102f057600080fd5b6102f8611675565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561033857808201518184015260208101905061031d565b50505050905090810190601f1680156103655780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561037e57600080fd5b610386611714565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156103d357600080fd5b610560600480803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509190803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509190505061173b565b005b341561056d57600080fd5b6105a2600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611856565b005b34156105af57600080fd5b61062d600480803561ffff1690602001909190803590602001909190803561ffff16906020019091908035151590602001909190803563ffffffff1690602001909190803562ffffff1690602001909190803562ffffff1690602001909190803560ff1690602001909190803560ff16906020019091905050611985565b005b341561063a57600080fd5b610642611aea565b604051808215151515815260200191505060405180910390f35b341561066757600080fd5b6106b4600480803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091905050611afe565b005b34156106c157600080fd5b6106d76004808035906020019091905050611b9c565b60405180826000191660001916815260200191505060405180910390f35b341561070057600080fd5b610708611bc1565b6040518082815260200191505060405180910390f35b341561072957600080fd5b610731611bcf565b6040518082815260200191505060405180910390f35b341561075257600080fd5b61077e600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611bd6565b005b341561078b57600080fd5b6107df600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611c75565b604051808215151515815260200191505060405180910390f35b341561080457600080fd5b610830600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611e3a565b6040518082815260200191505060405180910390f35b341561085157600080fd5b610859611e53565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156108a657600080fd5b6108bc6004808035906020019091905050611e79565b60405180898152602001881515151581526020018763ffffffff1663ffffffff1681526020018661ffff1661ffff1681526020018562ffffff1662ffffff1681526020018462ffffff1662ffffff1681526020018360ff1660ff1681526020018260ff1660ff1681526020019850505050505050505060405180910390f35b341561094657600080fd5b610972600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611f29565b005b341561097f57600080fd5b61099e6004808035906020019091908035906020019091905050611fc9565b005b34156109ab57600080fd5b6109b3612b0b565b604051808261ffff1661ffff16815260200191505060405180910390f35b34156109dc57600080fd5b6109f26004808035906020019091905050612b20565b60405180826000191660001916815260200191505060405180910390f35b3415610a1b57600080fd5b610a35600480803560001916906020019091905050612b3f565b604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018267ffffffffffffffff1667ffffffffffffffff1681526020019550505050505060405180910390f35b3415610ade57600080fd5b610af46004808035906020019091905050612bca565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610b4157600080fd5b610b6d600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612c15565b005b3415610b7a57600080fd5b610ba6600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612cb5565b6040518082815260200191505060405180910390f35b3415610bc757600080fd5b610be0600480803560ff16906020019091905050612cff565b005b3415610bed57600080fd5b610bf5612d7e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610c4257600080fd5b610c586004808035906020019091905050612da5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610ca557600080fd5b610cad612dd9565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610cfa57600080fd5b610d02612e00565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610d4f57600080fd5b610d57612e25565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610d97578082015181840152602081019050610d7c565b50505050905090810190601f168015610dc45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3415610ddd57600080fd5b610de5612ec4565b005b3415610df257600080fd5b610e27600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050612f72565b604051808215151515815260200191505060405180910390f35b610ead60048080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050613006565b005b3415610eba57600080fd5b610ed06004808035906020019091905050613190565b005b3415610edd57600080fd5b610ee5613214565b6040518082815260200191505060405180910390f35b3415610f0657600080fd5b610f5360048080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509190505061321b565b005b3415610f6057600080fd5b610f7660048080359060200190919050506132e0565b604051808d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018c60ff1660ff1681526020018b67ffffffffffffffff1667ffffffffffffffff1681526020018a60ff1660ff1681526020018962ffffff1662ffffff1681526020018867ffffffffffffffff1667ffffffffffffffff1681526020018761ffff1661ffff1681526020018661ffff1661ffff1681526020018561ffff1661ffff168152602001846fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020018367ffffffffffffffff1667ffffffffffffffff1681526020018267ffffffffffffffff1667ffffffffffffffff1681526020019c5050505050505050505050505060405180910390f35b34156110b457600080fd5b6110e0600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050613430565b005b34156110ed57600080fd5b611119600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506134d0565b005b341561112657600080fd5b611149600480803561ffff16906020019091908035906020019091905050613570565b005b341561115657600080fd5b611182600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506135ee565b604051808215151515815260200191505060405180910390f35b34156111a757600080fd5b6111c6600480803590602001909190803590602001909190505061360f565b005b34156111d357600080fd5b6111e96004808035906020019091905050614391565b005b34156111f657600080fd5b611222600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506143f7565b005b341561122f57600080fd5b61123761454c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561128457600080fd5b6112b0600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050614573565b005b61020260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61020a5481565b6112e8615755565b60028261ffff1660ff811015156112fb57fe5b600202016101006040519081016040529081600082015481526020016001820160009054906101000a900460ff161515151581526020016001820160019054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016001820160059054906101000a900461ffff1661ffff1661ffff1681526020016001820160079054906101000a900462ffffff1662ffffff1662ffffff16815260200160018201600a9054906101000a900462ffffff1662ffffff1662ffffff16815260200160018201600d9054906101000a900460ff1660ff1660ff16815260200160018201600e9054906101000a900460ff1660ff1660ff168152505090506000816000015111151561140c57600080fd5b8060000151341015151561141f57600080fd5b8060200151158061143a57506000816040015163ffffffff16115b151561144557600080fd5b61020060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c2356d233383606001518460a0015185608001518660c001518760e001516040518763ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018661ffff1661ffff1681526020018562ffffff1662ffffff1681526020018462ffffff1662ffffff1681526020018360ff1660ff1681526020018260ff1660ff1681526020019650505050505050600060405180830381600087803b151561156657600080fd5b5af1151561157357600080fd5b50505060028261ffff1660ff8110151561158957fe5b60020201600001543411156115f5573373ffffffffffffffffffffffffffffffffffffffff166108fc60028461ffff1660ff811015156115c557fe5b600202016000015434039081150290604051600060405180830381858888f1935050505015156115f457600080fd5b5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc60028461ffff1660ff8110151561164457fe5b60020201600001549081150290604051600060405180830381858888f19350505050151561167157600080fd5b5050565b6102058054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561170c5780601f106116e15761010080835404028352916020019161170c565b820191906000526020600020905b8154815290600101906020018083116116ef57829003601f168201915b505050505081565b61020460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600061020460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561179a57600080fd5b600090505b865181101561184d5761184087828151811015156117b957fe5b9060200190602002015187838151811015156117d157fe5b9060200190602002015187848151811015156117e957fe5b90602001906020020151878581518110151561180157fe5b90602001906020020151878681518110151561181957fe5b90602001906020020151878781518110151561183157fe5b90602001906020020151614613565b808060010191505061179f565b50505050505050565b803373ffffffffffffffffffffffffffffffffffffffff166102018281548110151561187e57fe5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156118d257600080fd5b8261020f600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156119e257600080fd5b60028a61ffff1660ff811015156119f557fe5b600202019050888160000181905550878160010160056101000a81548161ffff021916908361ffff160217905550868160010160006101000a81548160ff021916908315150217905550858160010160016101000a81548163ffffffff021916908363ffffffff160217905550848160010160076101000a81548162ffffff021916908362ffffff1602179055508381600101600a6101000a81548162ffffff021916908362ffffff1602179055508281600101600d6101000a81548160ff021916908360ff1602179055508181600101600e6101000a81548160ff021916908360ff16021790555050505050505050505050565b61020460149054906101000a900460ff1681565b600061020260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611b5d57600080fd5b600090505b8151811015611b9857611b8b8282815181101515611b7c57fe5b90602001906020020151614829565b8080600101915050611b62565b5050565b61020781815481101515611bac57fe5b90600052602060002090016000915090505481565b600061020180549050905090565b6102095481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611c3157600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000803373ffffffffffffffffffffffffffffffffffffffff1661020f600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480611d34575061020360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515611d3f57600080fd5b61020183815481101515611d4f57fe5b9060005260206000209060030201905061020360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415611e235760028160000160146101000a81548160ff021916908360ff16021790555062093a8042018160000160156101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550600181600001601d6101000a81548160ff021916908360ff1602179055505b611e2e858585614e7c565b60019150509392505050565b6102106020528060005260406000206000915090505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60028160ff81101515611e8857fe5b600202016000915090508060000154908060010160009054906101000a900460ff16908060010160019054906101000a900463ffffffff16908060010160059054906101000a900461ffff16908060010160079054906101000a900462ffffff169080600101600a9054906101000a900462ffffff169080600101600d9054906101000a900460ff169080600101600e9054906101000a900460ff16905088565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611f8457600080fd5b8061020260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080833373ffffffffffffffffffffffffffffffffffffffff1661020182815481101515611ff457fe5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561204857600080fd5b61020b60029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15156120d957600080fd5b5af115156120e657600080fd5b5050506040518051905073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561212957600080fd5b600161020b60029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630f99da4a866040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15156121bc57600080fd5b5af115156121c957600080fd5b5050506040518051905063ffffffff16101515156121e657600080fd5b610201858154811015156121f657fe5b9060005260206000209060030201925061020b60029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166365113528856040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b151561229757600080fd5b5af115156122a457600080fd5b50505060405180519050915060018260ff1614806122c5575060028260ff16145b806122d3575060038260ff16145b156126095761020b60029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631027e242856040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b151561236957600080fd5b5af1151561237657600080fd5b5050506040518051905083600001601d6101000a81548160ff021916908360ff160217905550818360000160146101000a81548160ff021916908360ff1602179055504261020b60029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630f99da4a866040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b151561244b57600080fd5b5af1151561245857600080fd5b5050506040518051905061020b60029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e2a9ba05876040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15156124f357600080fd5b5af1151561250057600080fd5b505050604051805190500263ffffffff16018360000160156101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555061020b60029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630f8ef9f8856040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15156125cd57600080fd5b5af115156125da57600080fd5b505050604051805190508360010160006101000a81548162ffffff021916908362ffffff1602179055506129a9565b60048260ff1614156128b2574267ffffffffffffffff168360000160159054906101000a900467ffffffffffffffff1667ffffffffffffffff1611151561264f57600080fd5b61020b60029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631027e242856040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15156126e057600080fd5b5af115156126ed57600080fd5b5050506040518051905083600001601d6101000a81548160ff021916908360ff16021790555061020b60029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630f99da4a856040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15156127a457600080fd5b5af115156127b157600080fd5b5050506040518051905061020b60029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e2a9ba05866040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b151561284c57600080fd5b5af1151561285957600080fd5b505050604051805190500263ffffffff168360000160158282829054906101000a900467ffffffffffffffff160192506101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506129a8565b60058260ff1614156129a757600161020b60029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630f99da4a866040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b151561295157600080fd5b5af1151561295e57600080fd5b5050506040518051905063ffffffff1614151561297a57600080fd5b60008360020160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505b5b5b61020b60029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd336000876040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b1515612aa357600080fd5b5af11515612ab057600080fd5b505050604051805190501515612ac557600080fd5b7fa308815bb97242b3add8af5f65bc57d951176a0b0ee1cc7e51638e0da14920738585604051808381526020018281526020019250505060405180910390a15050505050565b61020b60009054906101000a900461ffff1681565b6000816040518082815260200191505060405180910390209050919050565b61020e6020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154908060040160009054906101000a900467ffffffffffffffff16905085565b600061020182815481101515612bdc57fe5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612c7057600080fd5b8061020d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600061021060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612d5a57600080fd5b8060ff1661020b60006101000a81548161ffff021916908361ffff16021790555050565b61020c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61020f6020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61020360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6102068054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612ebc5780601f10612e9157610100808354040283529160200191612ebc565b820191906000526020600020905b815481529060010190602001808311612e9f57829003601f168201915b505050505081565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612f1f57600080fd5b612f36600160006001600080600080600080611985565b612f53600266354a6ba7a180006003600080600080600080611985565b612f70600366470de4df8200006005600080600080600080611985565b565b6000813373ffffffffffffffffffffffffffffffffffffffff1661020182815481101515612f9c57fe5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515612ff057600080fd5b612ffb338585614e7c565b600191505092915050565b600080835111151561301757600080fd5b61020954341015151561302957600080fd5b825161020854016102078054905011151561304357600080fd5b8251610209540234111561309a573373ffffffffffffffffffffffffffffffffffffffff166108fc8451610209540234039081150290604051600060405180830381858888f19350505050151561309957600080fd5b5b600090505b82518110156130d5576130c883828151811015156130b957fe5b906020019060200201516150a9565b808060010191505061309f565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151561318b578161020e60006102076001610208540381548110151561312757fe5b9060005260206000209001546000191660001916815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505050565b3373ffffffffffffffffffffffffffffffffffffffff1661020f600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156131fe57600080fd5b61321161320a82612bca565b3383614e7c565b50565b6102085481565b600061020260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561327a57600080fd5b600090505b81518110156132dc57610207805480600101828161329d91906157b7565b9160005260206000209001600084848151811015156132b857fe5b9060200190602002015190919091509060001916905550808060010191505061327f565b5050565b610201818154811015156132f057fe5b90600052602060002090600302016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060000160149054906101000a900460ff16908060000160159054906101000a900467ffffffffffffffff169080600001601d9054906101000a900460ff16908060010160009054906101000a900462ffffff16908060010160039054906101000a900467ffffffffffffffff169080600101600b9054906101000a900461ffff169080600101600d9054906101000a900461ffff169080600101600f9054906101000a900461ffff16908060020160009054906101000a900470010000000000000000000000000000000002908060020160109054906101000a900467ffffffffffffffff16908060020160189054906101000a900467ffffffffffffffff1690508c565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561348b57600080fd5b8061020360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561352b57600080fd5b8061020b60026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156135cb57600080fd5b8060028361ffff1660ff811015156135df57fe5b60020201600001819055505050565b6102116020528060005260406000206000915054906101000a900460ff1681565b6136176157e3565b61361f6157e3565b6000806000806000806000808b3373ffffffffffffffffffffffffffffffffffffffff166102018281548110151561365357fe5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156136a757600080fd5b6102018d8154811015156136b757fe5b906000526020600020906003020161018060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900460ff1660ff1660ff1681526020016000820160159054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160008201601d9054906101000a900460ff1660ff1660ff1681526020016001820160009054906101000a900462ffffff1662ffffff1662ffffff1681526020016001820160039054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160018201600b9054906101000a900461ffff1661ffff1661ffff16815260200160018201600d9054906101000a900461ffff1661ffff1661ffff16815260200160018201600f9054906101000a900461ffff1661ffff1661ffff1681526020016002820160009054906101000a9004700100000000000000000000000000000000026fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020016002820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016002820160189054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815250509a506102018c81548110151561390c57fe5b906000526020600020906003020161018060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900460ff1660ff1660ff1681526020016000820160159054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160008201601d9054906101000a900460ff1660ff1660ff1681526020016001820160009054906101000a900462ffffff1662ffffff1662ffffff1681526020016001820160039054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160018201600b9054906101000a900461ffff1661ffff1661ffff16815260200160018201600d9054906101000a900461ffff1661ffff1661ffff16815260200160018201600f9054906101000a900461ffff1661ffff1661ffff1681526020016002820160009054906101000a9004700100000000000000000000000000000000026fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020016002820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016002820160189054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681525050995060028b6020015160ff16148015613b755750428b6040015167ffffffffffffffff16115b15613bd65760006102018e815481101515613b8c57fe5b906000526020600020906003020160000160146101000a81548160ff021916908360ff160217905550428b6040019067ffffffffffffffff16908167ffffffffffffffff16815250505b60028a6020015160ff16148015613bfb5750428a6040015167ffffffffffffffff1610155b151515613c0757600080fd5b8a610140015167ffffffffffffffff164210151515613c2557600080fd5b89610160015167ffffffffffffffff164210151515613c4357600080fd5b896000015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415614028578960a0015167ffffffffffffffff168b60a0015167ffffffffffffffff1610613ca8578960a00151613cae565b8a60a001515b9850886102018e815481101515613cc157fe5b906000526020600020906003020160010160038282829054906101000a900467ffffffffffffffff160192506101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550886102018d815481101515613d2257fe5b906000526020600020906003020160010160038282829054906101000a900467ffffffffffffffff160392506101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555061020d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ff429fc88c61010001516040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808261ffff1661ffff168152602001915050602060405180830381600087803b1515613e1057600080fd5b5af11515613e1d57600080fd5b505050604051805190506102018e815481101515613e3757fe5b906000526020600020906003020160020160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060006102018d815481101515613e8057fe5b906000526020600020906003020160010160039054906101000a900467ffffffffffffffff1667ffffffffffffffff161415613f5957613ec23360008e614e7c565b61021060006102018e815481101515613ed757fe5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190600190039190505550613fa6565b610e1042016102018d815481101515613f6e57fe5b906000526020600020906003020160020160186101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505b7f737ee67d38af00f653596ea4e3350216f7c1192ecbfab7263ab95cfde44ac4058d8d8f8c6000806000604051808881526020018781526020018681526020018567ffffffffffffffff1667ffffffffffffffff16815260200184815260200183815260200182815260200197505050505050505060405180910390a1614382565b60028a60a0015167ffffffffffffffff161080614053575060028b60a0015167ffffffffffffffff16105b1561405d57600080fd5b6140688b60016152d1565b97506140758a60006152d1565b965041600143034061020180549050604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140183600019166000191681526020018281526020019350505050604051809103902095508688116140f957866140fb565b875b9450600285029350600184876001900481151561411457fe5b060192508688860103831115156141b15761412f8d8d615329565b91507f737ee67d38af00f653596ea4e3350216f7c1192ecbfab7263ab95cfde44ac4058d8d8f858c8c89604051808881526020018781526020018681526020018567ffffffffffffffff1667ffffffffffffffff16815260200184815260200183815260200182815260200197505050505050505060405180910390a1614239565b6141bb8c8e615329565b91507f737ee67d38af00f653596ea4e3350216f7c1192ecbfab7263ab95cfde44ac4058d8d8e858c8c89604051808881526020018781526020018681526020018567ffffffffffffffff1667ffffffffffffffff16815260200184815260200183815260200182815260200197505050505050505060405180910390a15b61020d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ff429fc88c61010001516040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808261ffff1661ffff168152602001915050602060405180830381600087803b15156142d757600080fd5b5af115156142e457600080fd5b505050604051805190506102018e8154811015156142fe57fe5b906000526020600020906003020160020160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550610e1042016102018d81548110151561434a57fe5b906000526020600020906003020160020160186101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505b50505050505050505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156143ec57600080fd5b806102098190555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561445257600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561448e57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61020b60029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156145ce57600080fd5b8061020460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060016102018181805490500191508161462f91906158ad565b506001610201805490500391506102018281548110151561464c57fe5b90600052602060002090600302019050878160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508663ffffffff168160010160036101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508560ff1681600101600b6101000a81548161ffff021916908361ffff1602179055508460ff1681600101600d6101000a81548161ffff021916908361ffff1602179055508360ff1681600101600f6101000a81548161ffff021916908361ffff160217905550828160020160006101000a8154816fffffffffffffffffffffffffffffffff02191690837001000000000000000000000000000000009004021790555061021060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001019190505550818873ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050505050505050565b6000806148346158df565b83604051808281526020019150506040518091039020925061020e600084600019166000191681526020019081526020016000209150600073ffffffffffffffffffffffffffffffffffffffff168260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156148ca57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168260020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415801561499a575061021160008360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b15614b4d5761020c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c2356d238360020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660016000806000806040518763ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018661ffff1681526020018562ffffff1681526020018462ffffff1681526020018360ff1681526020018260ff1681526020019650505050505050600060405180830381600087803b1515614abf57600080fd5b5af11515614acc57600080fd5b505050600161021160008460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b61020d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bdd7908b85846003015461020180549050416040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808581526020018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001945050505050608060405180830381600087803b1515614c2c57600080fd5b5af11515614c3957600080fd5b505050604051806080016040529050614ce18260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16826003600481101515614c7f57fe5b6020020151836000600481101515614c9357fe5b6020020151846001600481101515614ca757fe5b6020020151856002600481101515614cbb57fe5b602002015187600301548a18604051808281526020019150506040518091039020614613565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc83600101549081150290604051600060405180830381858888f193505050501515614d4757600080fd5b7fc68a0d9516a961dd6a8877cfeee3727698e55a18f46a8591bedce0f0e785df33838360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518083600019166000191681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a161020e60008460001916600019168152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600090556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560038201600090556004820160006101000a81549067ffffffffffffffff0219169055505050505050565b8273ffffffffffffffffffffffffffffffffffffffff1661020182815481101515614ea357fe5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515614ef757600080fd5b8161020182815481101515614f0857fe5b906000526020600020906003020160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600061020f600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600161021060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550600161021060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b60005b600073ffffffffffffffffffffffffffffffffffffffff1661020e6000610207610208548154811015156150dc57fe5b9060005260206000209001546000191660001916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561515757610208600081548092919060010191905055506150ac565b61020e60006102076102085481548110151561516f57fe5b906000526020600020900154600019166000191681526020019081526020016000209050338160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061020954816001018190555081816003018190555061020a5442018160040160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550610208600081548092919060010191905055507fef94156a2f812e69556eed38c92924cd876b114a20297e82345e5d29d336e2376102076001610208540381548110151561526557fe5b90600052602060002090015433610209546040518084600019166000191681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a15050565b60008260a00151826152e457603c6152e7565b60285b60ff166152f3856154e4565b0283615300576028615303565b603c5b60ff1661530f866155d9565b020162ffffff160267ffffffffffffffff16905092915050565b6000806000806000806102018881548110151561534257fe5b906000526020600020906003020194506102018781548110151561536257fe5b906000526020600020906003020193506153938560010160039054906101000a900467ffffffffffffffff166156ce565b67ffffffffffffffff168460010160039054906101000a900467ffffffffffffffff1667ffffffffffffffff168115156153c957fe5b04925061020b60009054906101000a900461ffff1661ffff168460010160039054906101000a900467ffffffffffffffff1667ffffffffffffffff1681151561540e57fe5b0491508267ffffffffffffffff168267ffffffffffffffff16106154325782615434565b815b905060018167ffffffffffffffff16101561544e57600190505b808560010160038282829054906101000a900467ffffffffffffffff160192506101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550808460010160038282829054906101000a900467ffffffffffffffff160392506101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550809550505050505092915050565b6000808260e0015161ffff1691506003836020015160ff16148015615516575042836040015167ffffffffffffffff16115b156155d35781606483606486608001518760600151600a0260ff1601010262ffffff1681151561554257fe5b0403905060018162ffffff1610801561556257506001836060015160ff16145b15615572576001820191506155d2565b60038162ffffff1610801561558e57506002836060015160ff16145b1561559e576003820191506155d1565b60058162ffffff161080156155ba57506003836060015160ff16145b156155ca576005820191506155d0565b81810191505b5b5b5b50919050565b6000808260c0015161ffff1691506001836020015160ff1614801561560b575042836040015167ffffffffffffffff16115b156156c85781606483606486608001518760600151600a0260ff1601010262ffffff1681151561563757fe5b0403905060018162ffffff1610801561565757506001836060015160ff16145b15615667576001820191506156c7565b60038162ffffff1610801561568357506002836060015160ff16145b15615693576003820191506156c6565b60058162ffffff161080156156af57506003836060015160ff16145b156156bf576005820191506156c5565b81810191505b5b5b5b50919050565b60008060026001840167ffffffffffffffff168115156156ea57fe5b0490508291505b8167ffffffffffffffff168167ffffffffffffffff16101561574f578091506002818267ffffffffffffffff168567ffffffffffffffff1681151561573257fe5b040167ffffffffffffffff1681151561574757fe5b0490506156f1565b50919050565b6101006040519081016040528060008152602001600015158152602001600063ffffffff168152602001600061ffff168152602001600062ffffff168152602001600062ffffff168152602001600060ff168152602001600060ff1681525090565b8154818355818115116157de578183600052602060002091820191016157dd919061590d565b5b505050565b61018060405190810160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600060ff168152602001600067ffffffffffffffff168152602001600060ff168152602001600062ffffff168152602001600067ffffffffffffffff168152602001600061ffff168152602001600061ffff168152602001600061ffff16815260200160006fffffffffffffffffffffffffffffffff19168152602001600067ffffffffffffffff168152602001600067ffffffffffffffff1681525090565b8154818355818115116158da576003028160030283600052602060002091820191016158d99190615932565b5b505050565b6080604051908101604052806004905b600063ffffffff168152602001906001900390816158ef5790505090565b61592f91905b8082111561592b576000816000905550600101615913565b5090565b90565b615a8191905b80821115615a7d57600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a81549060ff02191690556000820160156101000a81549067ffffffffffffffff021916905560008201601d6101000a81549060ff02191690556001820160006101000a81549062ffffff02191690556001820160036101000a81549067ffffffffffffffff021916905560018201600b6101000a81549061ffff021916905560018201600d6101000a81549061ffff021916905560018201600f6101000a81549061ffff02191690556002820160006101000a8154906fffffffffffffffffffffffffffffffff02191690556002820160106101000a81549067ffffffffffffffff02191690556002820160186101000a81549067ffffffffffffffff021916905550600301615938565b5090565b905600a165627a7a72305820f86714e795523173e5b25d425e382a7babb602697754cb817ba18a03ca28e7d10029"}