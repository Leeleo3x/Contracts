{"Runs": "200", "SwarmSource": "bzzr://154b781e2e507a368e9761613aed262948c317618cae2a09c6351f5d1990a1f5", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"variationsOfOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"templatesOfOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"templateSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_templateId\",\"type\":\"uint256\"}],\"name\":\"getTemplate\",\"outputs\":[{\"name\":\"generation\",\"type\":\"uint256\"},{\"name\":\"category\",\"type\":\"uint256\"},{\"name\":\"variation\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_templateId\",\"type\":\"uint256\"}],\"name\":\"mintCountByTemplate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"name\":\"_endingPrice\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createSaleAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mintLimit\",\"type\":\"uint256\"},{\"name\":\"_generation\",\"type\":\"uint256\"},{\"name\":\"_category\",\"type\":\"uint256\"},{\"name\":\"_variation\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"mintTemplate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cardId\",\"type\":\"uint256\"}],\"name\":\"getCard\",\"outputs\":[{\"name\":\"generation\",\"type\":\"uint256\"},{\"name\":\"category\",\"type\":\"uint256\"},{\"name\":\"variation\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_templateIds\",\"type\":\"uint256[]\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"mintCards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSaleAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_templateId\",\"type\":\"uint256\"}],\"name\":\"mintLimitByTemplate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cardId\",\"type\":\"uint256\"}],\"name\":\"templateIdOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_templateId\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"mintCard\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_templateId\",\"type\":\"uint256\"}],\"name\":\"TemplateMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.24+commit.e67f0147", "ConstructorArguments": "", "SourceCode": "pragma solidity ^0.4.23;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n}\r\n\r\ncontract ClockAuctionBase {\r\n  function createAuction(\r\n    uint256 _tokenId,\r\n    uint256 _startingPrice,\r\n    uint256 _endingPrice,\r\n    uint256 _duration,\r\n    address _seller\r\n  ) external;\r\n\r\n  function isSaleAuction() public returns (bool);\r\n}\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ncontract ERC721Receiver {\r\n  /**\r\n   * @dev Magic value to be returned upon successful reception of an NFT\r\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`,\r\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n   */\r\n  bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n  /**\r\n   * @notice Handle the receipt of an NFT\r\n   * @dev The ERC721 smart contract calls this function on the recipient\r\n   * after a `safetransfer`. This function MAY throw to revert and reject the\r\n   * transfer. Return of other than the magic value MUST result in the\r\n   * transaction being reverted.\r\n   * Note: the contract address is always the message sender.\r\n   * @param _operator The address which called `safeTransferFrom` function\r\n   * @param _from The address which previously owned the token\r\n   * @param _tokenId The NFT identifier which is being transferred\r\n   * @param _data Additional data with no specified format\r\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n   */\r\n  function onERC721Received(\r\n    address _operator,\r\n    address _from,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n    returns(bytes4);\r\n}\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   * as the code is not actually created until after the constructor finishes.\r\n   * @param _account address of the account to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address _account) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(_account) }\r\n    return size > 0;\r\n  }\r\n}\r\n\r\ncontract CardBase is Ownable {\r\n  bytes4 constant InterfaceSignature_ERC165 = 0x01ffc9a7;\r\n  bytes4 constant InterfaceSignature_ERC721 = 0x80ac58cd;\r\n  bytes4 internal constant InterfaceId_ERC721Exists = 0x4f558e79;\r\n\r\n  /// @notice Introspection interface as per ERC-165 (https://github.com/ethereum/EIPs/issues/165).\r\n  ///  Returns true for any standardized interfaces implemented by this contract. We implement\r\n  ///  ERC-165 (obviously!) and ERC-721.\r\n  function supportsInterface(bytes4 _interfaceID) external view returns (bool)\r\n  {\r\n    return (\r\n      (_interfaceID == InterfaceSignature_ERC165) ||\r\n      (_interfaceID == InterfaceSignature_ERC721) ||\r\n      (_interfaceID == InterfaceId_ERC721Exists)\r\n    );\r\n  }\r\n}\r\n\r\ncontract CardMint is CardBase {\r\n\r\n  using AddressUtils for address;\r\n\r\n  /* EVENTS */\r\n  event TemplateMint(uint256 _templateId);\r\n  // Transfer from address 0x0 = newly minted card.\r\n  event Transfer(\r\n    address indexed _from,\r\n    address indexed _to,\r\n    uint256 indexed _tokenId\r\n  );\r\n  event Approval(\r\n    address indexed _owner,\r\n    address indexed _approved,\r\n    uint256 indexed _tokenId\r\n  );\r\n  event ApprovalForAll(\r\n    address indexed _owner,\r\n    address indexed _operator,\r\n    bool _approved\r\n  );\r\n\r\n  /* DATA TYPES */\r\n  struct Template {\r\n    uint256 generation;\r\n    uint256 category;\r\n    uint256 variation;\r\n    string name;\r\n  }\r\n\r\n  /* STORAGE */\r\n  // Minter address can mint cards but not templates.\r\n  address public minter;\r\n\r\n  Template[] internal templates;\r\n  // Each Card is a template ID (index of a template in `templates`).\r\n  uint256[] internal cards;\r\n\r\n  // Template ID => max number of cards that can be minted with this template ID.\r\n  mapping (uint256 => uint256) internal templateIdToMintLimit;\r\n  // Template ID => number of cards that have been minted with this template ID.\r\n  mapping (uint256 => uint256) internal templateIdToMintCount;\r\n  // Card ID => owner of card.\r\n  mapping (uint256 => address) internal cardIdToOwner;\r\n  // Owner => number of cards owner owns.\r\n  mapping (address => uint256) internal ownerToCardCount;\r\n  // Card ID => address approved to transfer on behalf of owner.\r\n  mapping (uint256 => address) internal cardIdToApproved;\r\n  // Operator => from address to operated or not.\r\n  mapping (address => mapping (address => bool)) internal operatorToApprovals;\r\n\r\n  /* MODIFIERS */\r\n  modifier onlyMinter() {\r\n    require(msg.sender == minter);\r\n    _;\r\n  }\r\n\r\n  /* FUNCTIONS */\r\n  /** PRIVATE FUNCTIONS **/\r\n  function _addTokenTo(address _to, uint256 _tokenId) internal {\r\n    require(cardIdToOwner[_tokenId] == address(0));\r\n    ownerToCardCount[_to] = ownerToCardCount[_to] + 1;\r\n    cardIdToOwner[_tokenId] = _to;\r\n  }\r\n\r\n  /** PUBLIC FUNCTIONS **/\r\n  function setMinter(address _minter) external onlyOwner {\r\n    minter = _minter;\r\n  }\r\n\r\n  function mintTemplate(\r\n    uint256 _mintLimit,\r\n    uint256 _generation,\r\n    uint256 _category,\r\n    uint256 _variation,\r\n    string _name\r\n  ) external onlyOwner {\r\n    require(_mintLimit > 0);\r\n\r\n    uint256 newTemplateId = templates.push(Template({\r\n      generation: _generation,\r\n      category: _category,\r\n      variation: _variation,\r\n      name: _name\r\n    })) - 1;\r\n    templateIdToMintLimit[newTemplateId] = _mintLimit;\r\n\r\n    emit TemplateMint(newTemplateId);\r\n  }\r\n\r\n  function mintCard(\r\n    uint256 _templateId,\r\n    address _owner\r\n  ) external onlyMinter {\r\n    require(templateIdToMintCount[_templateId] < templateIdToMintLimit[_templateId]);\r\n    templateIdToMintCount[_templateId] = templateIdToMintCount[_templateId] + 1;\r\n\r\n    uint256 newCardId = cards.push(_templateId) - 1;\r\n    _addTokenTo(_owner, newCardId);\r\n\r\n    emit Transfer(0, _owner, newCardId);\r\n  }\r\n\r\n  function mintCards(\r\n    uint256[] _templateIds,\r\n    address _owner\r\n  ) external onlyMinter {\r\n    uint256 mintCount = _templateIds.length;\r\n    uint256 templateId;\r\n\r\n    for (uint256 i = 0; i < mintCount; ++i) {\r\n      templateId = _templateIds[i];\r\n\r\n      require(templateIdToMintCount[templateId] < templateIdToMintLimit[templateId]);\r\n      templateIdToMintCount[templateId] = templateIdToMintCount[templateId] + 1;\r\n\r\n      uint256 newCardId = cards.push(templateId) - 1;\r\n      cardIdToOwner[newCardId] = _owner;\r\n\r\n      emit Transfer(0, _owner, newCardId);\r\n    }\r\n\r\n    // Bulk add to ownerToCardCount.\r\n    ownerToCardCount[_owner] = ownerToCardCount[_owner] + mintCount;\r\n  }\r\n}\r\n\r\ncontract CardOwnership is CardMint {\r\n\r\n  /* FUNCTIONS */\r\n  /** PRIVATE FUNCTIONS **/\r\n  function _approve(address _owner, address _approved, uint256 _tokenId) internal {\r\n    cardIdToApproved[_tokenId] = _approved;\r\n    emit Approval(_owner, _approved, _tokenId);\r\n  }\r\n\r\n  function _clearApproval(address _owner, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _owner);\r\n    if (cardIdToApproved[_tokenId] != address(0)) {\r\n      cardIdToApproved[_tokenId] = address(0);\r\n    }\r\n  }\r\n\r\n  function _removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _from);\r\n    ownerToCardCount[_from] = ownerToCardCount[_from] - 1;\r\n    cardIdToOwner[_tokenId] = address(0);\r\n  }\r\n\r\n  /** PUBLIC FUNCTIONS **/\r\n  function approve(address _to, uint256 _tokenId) external {\r\n    address owner = ownerOf(_tokenId);\r\n    require(_to != owner);\r\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n    _approve(owner, _to, _tokenId);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public {\r\n    require(isApprovedOrOwner(msg.sender, _tokenId));\r\n    require(_from != address(0));\r\n    require(_to != address(0));\r\n    require(_to != address(this));\r\n\r\n    _clearApproval(_from, _tokenId);\r\n    _removeTokenFrom(_from, _tokenId);\r\n    _addTokenTo(_to, _tokenId);\r\n\r\n    emit Transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * If the target address is a contract, it must implement `onERC721Received`,\r\n   * which is called upon a safe transfer, and return the magic value\r\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n   * the transfer is reverted.\r\n   *\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  ) public {\r\n    safeTransferFrom(_from, _to, _tokenId, \"\");\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * If the target address is a contract, it must implement `onERC721Received`,\r\n   * which is called upon a safe transfer, and return the magic value\r\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n   * the transfer is reverted.\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes data to send along with a safe transfer check\r\n   */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  ) public {\r\n    transferFrom(_from, _to, _tokenId);\r\n    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\r\n  }\r\n\r\n  function checkAndCallSafeTransfer(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  ) internal returns (bool) {\r\n    if (!_to.isContract()) {\r\n      return true;\r\n    }\r\n    bytes4 retval = ERC721Receiver(_to).onERC721Received(\r\n      msg.sender, _from, _tokenId, _data);\r\n    return (retval == 0x150b7a02);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the given spender can transfer a given token ID\r\n   * @param _spender address of the spender to query\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @return bool whether the msg.sender is approved for the given token ID,\r\n   *  is an operator of the owner, or is the owner of the token\r\n   */\r\n  function isApprovedOrOwner(\r\n    address _spender,\r\n    uint256 _tokenId\r\n  ) internal view returns (bool) {\r\n    address owner = ownerOf(_tokenId);\r\n    return (\r\n      _spender == owner ||\r\n      getApproved(_tokenId) == _spender ||\r\n      isApprovedForAll(owner, _spender)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Sets or unsets the approval of a given operator\r\n   * An operator is allowed to transfer all tokens of the sender on their behalf\r\n   * @param _operator operator address to set the approval\r\n   * @param _approved representing the status of the approval to be set\r\n   */\r\n  function setApprovalForAll(address _operator, bool _approved) public {\r\n    require(_operator != msg.sender);\r\n    require(_operator != address(0));\r\n    operatorToApprovals[msg.sender][_operator] = _approved;\r\n    emit ApprovalForAll(msg.sender, _operator, _approved);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the approved address for a token ID, or zero if no address set\r\n   * @param _tokenId uint256 ID of the token to query the approval of\r\n   * @return address currently approved for the given token ID\r\n   */\r\n  function getApproved(uint256 _tokenId) public view returns (address) {\r\n    return cardIdToApproved[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Tells whether an operator is approved by a given owner\r\n   * @param _owner owner address which you want to query the approval of\r\n   * @param _operator operator address which you want to query the approval of\r\n   * @return bool whether the given operator is approved by the given owner\r\n   */\r\n  function isApprovedForAll(\r\n    address _owner,\r\n    address _operator\r\n  ) public view returns (bool) {\r\n    return operatorToApprovals[_owner][_operator];\r\n  }\r\n\r\n  function ownerOf(uint256 _tokenId) public view returns (address) {\r\n    address owner = cardIdToOwner[_tokenId];\r\n    require(owner != address(0));\r\n    return owner;\r\n  }\r\n\r\n  function exists(uint256 _tokenId) public view returns (bool) {\r\n    address owner = cardIdToOwner[_tokenId];\r\n    return owner != address(0);\r\n  }\r\n}\r\n\r\ncontract CardAuction is CardOwnership {\r\n\r\n  ClockAuctionBase public saleAuction;\r\n\r\n  function setSaleAuction(address _address) external onlyOwner {\r\n    ClockAuctionBase candidateContract = ClockAuctionBase(_address);\r\n    require(candidateContract.isSaleAuction());\r\n    saleAuction = candidateContract;\r\n  }\r\n\r\n  function createSaleAuction(\r\n    uint256 _tokenId,\r\n    uint256 _startingPrice,\r\n    uint256 _endingPrice,\r\n    uint256 _duration\r\n  ) external {\r\n    require(saleAuction != address(0));\r\n    require(msg.sender == cardIdToOwner[_tokenId]);\r\n\r\n    _approve(msg.sender, saleAuction, _tokenId);\r\n    saleAuction.createAuction(\r\n        _tokenId,\r\n        _startingPrice,\r\n        _endingPrice,\r\n        _duration,\r\n        msg.sender\r\n    );\r\n  }\r\n}\r\n\r\ncontract CardTreasury is CardAuction {\r\n\r\n  /* FUNCTIONS */\r\n  /** PUBLIC FUNCTIONS **/\r\n  function getTemplate(uint256 _templateId)\r\n    external\r\n    view\r\n    returns (\r\n      uint256 generation,\r\n      uint256 category,\r\n      uint256 variation,\r\n      string name\r\n    )\r\n  {\r\n    require(_templateId < templates.length);\r\n\r\n    Template storage template = templates[_templateId];\r\n\r\n    generation = template.generation;\r\n    category = template.category;\r\n    variation = template.variation;\r\n    name = template.name;\r\n  }\r\n\r\n  function getCard(uint256 _cardId)\r\n    external\r\n    view\r\n    returns (\r\n      uint256 generation,\r\n      uint256 category,\r\n      uint256 variation,\r\n      string name\r\n    )\r\n  {\r\n    require(_cardId < cards.length);\r\n\r\n    uint256 templateId = cards[_cardId];\r\n    Template storage template = templates[templateId];\r\n\r\n    generation = template.generation;\r\n    category = template.category;\r\n    variation = template.variation;\r\n    name = template.name;\r\n  }\r\n\r\n  function templateIdOf(uint256 _cardId) external view returns (uint256) {\r\n    require(_cardId < cards.length);\r\n    return cards[_cardId];\r\n  }\r\n\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    require(_owner != address(0));\r\n    return ownerToCardCount[_owner];\r\n  }\r\n\r\n  function templateSupply() external view returns (uint256) {\r\n    return templates.length;\r\n  }\r\n\r\n  function totalSupply() external view returns (uint256) {\r\n    return cards.length;\r\n  }\r\n\r\n  function mintLimitByTemplate(uint256 _templateId) external view returns(uint256) {\r\n    require(_templateId < templates.length);\r\n    return templateIdToMintLimit[_templateId];\r\n  }\r\n\r\n  function mintCountByTemplate(uint256 _templateId) external view returns(uint256) {\r\n    require(_templateId < templates.length);\r\n    return templateIdToMintCount[_templateId];\r\n  }\r\n\r\n  function name() external pure returns (string) {\r\n    return \"Battlebound\";\r\n  }\r\n\r\n  function symbol() external pure returns (string) {\r\n    return \"BB\";\r\n  }\r\n\r\n  function tokensOfOwner(address _owner) external view returns (uint256[]) {\r\n    uint256 tokenCount = balanceOf(_owner);\r\n\r\n    if (tokenCount == 0) {\r\n      return new uint256[](0);\r\n    } else {\r\n      uint256[] memory result = new uint256[](tokenCount);\r\n      uint256 resultIndex = 0;\r\n\r\n      for (uint256 cardId = 0; cardId < cards.length; ++cardId) {\r\n        if (cardIdToOwner[cardId] == _owner) {\r\n          result[resultIndex] = cardId;\r\n          ++resultIndex;\r\n        }\r\n      }\r\n\r\n      return result;\r\n    }\r\n  }\r\n\r\n  function templatesOfOwner(address _owner) external view returns (uint256[]) {\r\n    uint256 tokenCount = balanceOf(_owner);\r\n\r\n    if (tokenCount == 0) {\r\n      return new uint256[](0);\r\n    } else {\r\n      uint256[] memory result = new uint256[](tokenCount);\r\n      uint256 resultIndex = 0;\r\n\r\n      for (uint256 cardId = 0; cardId < cards.length; ++cardId) {\r\n        if (cardIdToOwner[cardId] == _owner) {\r\n          uint256 templateId = cards[cardId];\r\n          result[resultIndex] = templateId;\r\n          ++resultIndex;\r\n        }\r\n      }\r\n\r\n      return result;\r\n    }\r\n  }\r\n\r\n  function variationsOfOwner(address _owner) external view returns (uint256[]) {\r\n    uint256 tokenCount = balanceOf(_owner);\r\n\r\n    if (tokenCount == 0) {\r\n      return new uint256[](0);\r\n    } else {\r\n      uint256[] memory result = new uint256[](tokenCount);\r\n      uint256 resultIndex = 0;\r\n\r\n      for (uint256 cardId = 0; cardId < cards.length; ++cardId) {\r\n        if (cardIdToOwner[cardId] == _owner) {\r\n          uint256 templateId = cards[cardId];\r\n          Template storage template = templates[templateId];\r\n          result[resultIndex] = template.variation;\r\n          ++resultIndex;\r\n        }\r\n      }\r\n\r\n      return result;\r\n    }\r\n  }\r\n}", "OptimizationUsed": "1", "ContractName": "CardTreasury", "ByteCode": "0x6080604052600436106101ab5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301ffc9a781146101b057806304fd9f78146101e657806306fdde031461025757806307546172146102e1578063081812fc14610312578063095ea7b31461032a57806318160ddd14610350578063185072101461037757806322dd9b8c1461039857806323b872dd146103ad57806331543cf4146103d7578063380bf0021461047c5780633d7d3f5a1461049457806342842e0e146104b55780634c425afe146104df5780634f558e791461050f5780636352211e1461052757806370a082311461053f578063715018a6146105605780638462151c146105755780638da5cb5b146105965780639188d312146105ab57806395d89b41146105c3578063a22cb465146105d8578063ab65f20a146105fe578063b527b0a61461062c578063b88d4fde1461064d578063c2b477a7146106bc578063df84807a146106d4578063e6cbe351146106ec578063e933cfb014610701578063e985e9c514610725578063f2fde38b1461074c578063fca3b5aa1461076d575b600080fd5b3480156101bc57600080fd5b506101d2600160e060020a03196004351661078e565b604080519115158252519081900360200190f35b3480156101f257600080fd5b50610207600160a060020a036004351661082b565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561024357818101518382015260200161022b565b505050509050019250505060405180910390f35b34801561026357600080fd5b5061026c610939565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102a657818101518382015260200161028e565b50505050905090810190601f1680156102d35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102ed57600080fd5b506102f6610971565b60408051600160a060020a039092168252519081900360200190f35b34801561031e57600080fd5b506102f6600435610980565b34801561033657600080fd5b5061034e600160a060020a036004351660243561099b565b005b34801561035c57600080fd5b506103656109f8565b60408051918252519081900360200190f35b34801561038357600080fd5b50610207600160a060020a03600435166109fe565b3480156103a457600080fd5b50610365610ae7565b3480156103b957600080fd5b5061034e600160a060020a0360043581169060243516604435610aed565b3480156103e357600080fd5b506103ef600435610ba6565b6040518085815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561043e578181015183820152602001610426565b50505050905090810190601f16801561046b5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b34801561048857600080fd5b50610365600435610c9c565b3480156104a057600080fd5b5061034e600435602435604435606435610cc0565b3480156104c157600080fd5b5061034e600160a060020a0360043581169060243516604435610db1565b3480156104eb57600080fd5b5061034e600480359060248035916044359160643591608435918201910135610dcd565b34801561051b57600080fd5b506101d2600435610eee565b34801561053357600080fd5b506102f6600435610f0b565b34801561054b57600080fd5b50610365600160a060020a0360043516610f2f565b34801561056c57600080fd5b5061034e610f62565b34801561058157600080fd5b50610207600160a060020a0360043516610fc1565b3480156105a257600080fd5b506102f6611089565b3480156105b757600080fd5b506103ef600435611098565b3480156105cf57600080fd5b5061026c6111ac565b3480156105e457600080fd5b5061034e600160a060020a036004351660243515156111e3565b34801561060a57600080fd5b5061034e6024600480358281019291013590600160a060020a0390351661127c565b34801561063857600080fd5b5061034e600160a060020a03600435166113ba565b34801561065957600080fd5b50604080516020601f60643560048181013592830184900484028501840190955281845261034e94600160a060020a0381358116956024803590921695604435953695608494019181908401838280828437509497506114869650505050505050565b3480156106c857600080fd5b506103656004356114ae565b3480156106e057600080fd5b506103656004356114d2565b3480156106f857600080fd5b506102f6611503565b34801561070d57600080fd5b5061034e600435600160a060020a0360243516611512565b34801561073157600080fd5b506101d2600160a060020a03600435811690602435166115e4565b34801561075857600080fd5b5061034e600160a060020a0360043516611612565b34801561077957600080fd5b5061034e600160a060020a0360043516611699565b6000600160e060020a031982167f01ffc9a70000000000000000000000000000000000000000000000000000000014806107f15750600160e060020a031982167f80ac58cd00000000000000000000000000000000000000000000000000000000145b806108255750600160e060020a031982167f4f558e7900000000000000000000000000000000000000000000000000000000145b92915050565b60606000606060008060008061084088610f2f565b955085151561085f57604080516000815260208101909152965061092e565b85604051908082528060200260200182016040528015610889578160200160208202803883390190505b50945060009350600092505b60035483101561092a57600083815260066020526040902054600160a060020a038981169116141561091f5760038054849081106108cf57fe5b906000526020600020015491506002828154811015156108eb57fe5b906000526020600020906004020190508060020154858581518110151561090e57fe5b602090810290910101526001909301925b826001019250610895565b8496505b505050505050919050565b60408051808201909152600b81527f426174746c65626f756e6400000000000000000000000000000000000000000060208201525b90565b600154600160a060020a031681565b600090815260086020526040902054600160a060020a031690565b60006109a682610f0b565b9050600160a060020a0383811690821614156109c157600080fd5b33600160a060020a03821614806109dd57506109dd81336115e4565b15156109e857600080fd5b6109f38184846116d2565b505050565b60035490565b6060600060606000806000610a1287610f2f565b9450841515610a31576040805160008152602081019091529550610add565b84604051908082528060200260200182016040528015610a5b578160200160208202803883390190505b50935060009250600091505b600354821015610ad957600082815260066020526040902054600160a060020a0388811691161415610ace576003805483908110610aa157fe5b90600052602060002001549050808484815181101515610abd57fe5b602090810290910101526001909201915b816001019150610a67565b8395505b5050505050919050565b60025490565b610af7338261172e565b1515610b0257600080fd5b600160a060020a0383161515610b1757600080fd5b600160a060020a0382161515610b2c57600080fd5b600160a060020a038216301415610b4257600080fd5b610b4c838261178d565b610b5683826117f1565b610b608282611853565b8082600160a060020a031684600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b60008060006060600060028054905086101515610bc257600080fd5b6002805487908110610bd057fe5b90600052602060002090600402019050806000015494508060010154935080600201549250806003018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c8d5780601f10610c6257610100808354040283529160200191610c8d565b820191906000526020600020905b815481529060010190602001808311610c7057829003601f168201915b50505050509150509193509193565b6002546000908210610cad57600080fd5b5060009081526005602052604090205490565b600a54600160a060020a03161515610cd757600080fd5b600084815260066020526040902054600160a060020a03163314610cfa57600080fd5b600a54610d12903390600160a060020a0316866116d2565b600a54604080517f27ebe40a000000000000000000000000000000000000000000000000000000008152600481018790526024810186905260448101859052606481018490523360848201529051600160a060020a03909216916327ebe40a9160a48082019260009290919082900301818387803b158015610d9357600080fd5b505af1158015610da7573d6000803e3d6000fd5b5050505050505050565b6109f38383836020604051908101604052806000815250611486565b60008054600160a060020a03163314610de557600080fd5b60008711610df257600080fd5b6001600260806040519081016040528089815260200188815260200187815260200186868080601f0160208091040260200160405190810160405280939291908181526020018383808284375050509290935250508254600181810180865560009586526020958690208551600490940201928355858501519183019190915560408401516002830155606084015180519195929350610e99926003850192910190611a2b565b505050036000818152600460209081526040918290208a9055815183815291519293507f1711857f3d192df18ea3b4fa63f02d85ccc59cae201e2d6c791cfee1e39f01df92918290030190a150505050505050565b600090815260066020526040902054600160a060020a0316151590565b600081815260066020526040812054600160a060020a031680151561082557600080fd5b6000600160a060020a0382161515610f4657600080fd5b50600160a060020a031660009081526007602052604090205490565b600054600160a060020a03163314610f7957600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a260008054600160a060020a0319169055565b606060006060600080610fd386610f2f565b9350831515610ff2576040805160008152602081019091529450611080565b8360405190808252806020026020018201604052801561101c578160200160208202803883390190505b50925060009150600090505b60035481101561107c57600081815260066020526040902054600160a060020a03878116911614156110745780838381518110151561106357fe5b602090810290910101526001909101905b600101611028565b8294505b50505050919050565b600054600160a060020a031681565b60008060006060600080600380549050871015156110b557600080fd5b60038054889081106110c357fe5b906000526020600020015491506002828154811015156110df57fe5b90600052602060002090600402019050806000015495508060010154945080600201549350806003018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561119c5780601f106111715761010080835404028352916020019161119c565b820191906000526020600020905b81548152906001019060200180831161117f57829003601f168201915b5050505050925050509193509193565b60408051808201909152600281527f4242000000000000000000000000000000000000000000000000000000000000602082015290565b600160a060020a0382163314156111f957600080fd5b600160a060020a038216151561120e57600080fd5b336000818152600960209081526040808320600160a060020a03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b600154600090819081908190600160a060020a0316331461129c57600080fd5b859350600091505b83821015611393578686838181106112b857fe5b6020908102929092013560008181526004845260408082205460059095529020549095509190911090506112eb57600080fd5b506000828152600560209081526040808320805460019081019091556003805491820190557fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b810186905580845260069092528083208054600160a060020a031916600160a060020a0389169081179091559051919283927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a48160010191506112a4565b505050600160a060020a039091166000908152600760205260409020805490910190555050565b60008054600160a060020a031633146113d257600080fd5b81905080600160a060020a031663d25c07676040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561142c57600080fd5b505af1158015611440573d6000803e3d6000fd5b505050506040513d602081101561145657600080fd5b5051151561146357600080fd5b600a8054600160a060020a031916600160a060020a039290921691909117905550565b611491848484610aed565b61149d848484846118b6565b15156114a857600080fd5b50505050565b60025460009082106114bf57600080fd5b5060009081526004602052604090205490565b60035460009082106114e357600080fd5b60038054839081106114f157fe5b90600052602060002001549050919050565b600a54600160a060020a031681565b600154600090600160a060020a0316331461152c57600080fd5b6000838152600460209081526040808320546005909252909120541061155157600080fd5b506000828152600560205260408120805460019081019091556003805491820181559091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b81018390556115a68282611853565b8082600160a060020a031660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b600160a060020a03918216600090815260096020908152604080832093909416825291909152205460ff1690565b600054600160a060020a0316331461162957600080fd5b600160a060020a038116151561163e57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a360008054600160a060020a031916600160a060020a0392909216919091179055565b600054600160a060020a031633146116b057600080fd5b60018054600160a060020a031916600160a060020a0392909216919091179055565b6000818152600860205260408082208054600160a060020a031916600160a060020a0386811691821790925591518493918716917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b60008061173a83610f0b565b905080600160a060020a031684600160a060020a03161480611775575083600160a060020a031661176a84610980565b600160a060020a0316145b80611785575061178581856115e4565b949350505050565b81600160a060020a03166117a082610f0b565b600160a060020a0316146117b357600080fd5b600081815260086020526040902054600160a060020a0316156117ed5760008181526008602052604090208054600160a060020a03191690555b5050565b81600160a060020a031661180482610f0b565b600160a060020a03161461181757600080fd5b600160a060020a039091166000908152600760209081526040808320805460001901905592825260069052208054600160a060020a0319169055565b600081815260066020526040902054600160a060020a03161561187557600080fd5b600160a060020a0390911660008181526007602090815260408083208054600101905593825260069052919091208054600160a060020a0319169091179055565b6000806118cb85600160a060020a0316611a23565b15156118da5760019150611a1a565b6040517f150b7a020000000000000000000000000000000000000000000000000000000081523360048201818152600160a060020a03898116602485015260448401889052608060648501908152875160848601528751918a169463150b7a0294938c938b938b93909160a490910190602085019080838360005b8381101561196d578181015183820152602001611955565b50505050905090810190601f16801561199a5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b1580156119bc57600080fd5b505af11580156119d0573d6000803e3d6000fd5b505050506040513d60208110156119e657600080fd5b50517f150b7a0200000000000000000000000000000000000000000000000000000000600160e060020a0319821614925090505b50949350505050565b6000903b1190565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611a6c57805160ff1916838001178555611a99565b82800160010185558215611a99579182015b82811115611a99578251825591602001919060010190611a7e565b50611aa5929150611aa9565b5090565b61096e91905b80821115611aa55760008155600101611aaf5600a165627a7a72305820154b781e2e507a368e9761613aed262948c317618cae2a09c6351f5d1990a1f50029"}