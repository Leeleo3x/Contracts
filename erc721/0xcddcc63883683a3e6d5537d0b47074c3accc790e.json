{"Runs": "200", "SwarmSource": "bzzr://c2fcf35fb1ac656c9e1b355df950bf5960c2dafa849efa6d0a3fa66d8fa36b2c", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getAllTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getRemainingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"databaseDownloadUrl\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"completeReleaseAuction\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getAdditionalTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentEdition\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initializationDelay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"releaseAuctionEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractInitializationTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"isReleased\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"owned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getHighestBid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeBetweenEditions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"placeBid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dataset_sha256checksum\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"edition\",\"type\":\"uint256\"}],\"name\":\"getEditionReleaseTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getReleaseAuctionEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getEdition\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getHighestBidder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"url\",\"type\":\"string\"}],\"name\":\"setDatabaseDownloadUrl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumBid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dataset_md5checksum\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingWithdrawals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"editionSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timePlaced\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"NewBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.24+commit.e67f0147", "ConstructorArguments": "", "SourceCode": "pragma solidity ^0.4.23;\r\n\r\n/************************************************\r\n *\r\n * Star Cards - Verifiably unique celebrity collectibles\r\n * Authors: Dick Oranges & Eggy Bagelface\r\n *\r\n * MD5: 696fa8ba0f25d6d6f8391e37251736bc\r\n * SHA256: ba3178b5d13ec7b05cf3ebaae2be797cc0eb6756eac455426f2b1d70f17cefae\r\n *\r\n ************************************************/\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n     * @dev Multiplies two numbers, throws on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two numbers, truncating the quotient.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two numbers, throws on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n\r\n    /**\r\n     * Returns whether the target address is a contract\r\n     * @dev This function will return false if invoked during the constructor of a contract,\r\n     *  as the code is not actually created until after the constructor finishes.\r\n     * @param addr address to check\r\n     * @return whether the target address is a contract\r\n     */\r\n    function isContract(address addr) internal view returns (bool) {\r\n        uint256 size;\r\n        // XXX Currently there is no better way to check if there is a contract in an address\r\n        // than to check the size of the code at that address.\r\n        // See https://ethereum.stackexchange.com/a/14016/36603\r\n        // for more details about how this works.\r\n        // TODO Check this again before the Serenity release, because all addresses will be\r\n        // contracts then.\r\n        assembly { size := extcodesize(addr) }  // solium-disable-line security/no-inline-assembly\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    \r\n    address public owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic interface\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Basic {\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 _balance);\r\n    function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n    function owned(uint256 _tokenId) public view returns (bool _owned);\r\n\r\n    function approve(address _to, uint256 _tokenId) public;\r\n    function getApproved(uint256 _tokenId) public view returns (address _operator);\r\n\r\n    function setApprovalForAll(address _operator, bool _approved) public;\r\n    function isApprovedForAll(address _owner, address _operator) public view returns (bool);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) public;\r\n    function safeTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId,\r\n        bytes _data\r\n    )\r\n        public;\r\n}\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Enumerable is ERC721Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256 _tokenId);\r\n    function tokenByIndex(uint256 _index) public view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Metadata is ERC721Basic {\r\n    function name() public view returns (string _name);\r\n    function symbol() public view returns (string _symbol);\r\n    function tokenURI(uint256 _tokenId) public view returns (string);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\r\n}\r\n\r\n\r\npragma solidity ^0.4.21;\r\n\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n *  from ERC721 asset contracts.\r\n */\r\ncontract ERC721Receiver {\r\n    /**\r\n     * @dev Magic value to be returned upon successful reception of an NFT\r\n     *  Equals to `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`,\r\n     *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n     */\r\n    bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\r\n\r\n    /**\r\n     * @notice Handle the receipt of an NFT\r\n     * @dev The ERC721 smart contract calls this function on the recipient\r\n     *  after a `safetransfer`. This function MAY throw to revert and reject the\r\n     *  transfer. This function MUST use 50,000 gas or less. Return of other\r\n     *  than the magic value MUST result in the transaction being reverted.\r\n     *  Note: the contract address is always the message sender.\r\n     * @param _from The sending address\r\n     * @param _tokenId The NFT identifier which is being transfered\r\n     * @param _data Additional data with no specified format\r\n     * @return `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`\r\n     */\r\n    function onERC721Received(address _from, uint256 _tokenId, bytes _data) public returns(bytes4);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic implementation\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721BasicToken is ERC721Basic {\r\n    using SafeMath for uint256;\r\n    using AddressUtils for address;\r\n\r\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`\r\n    // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n    bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\r\n\r\n    // Mapping from token ID to owner\r\n    mapping (uint256 => address) internal tokenOwner;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping (uint256 => address) internal tokenApprovals;\r\n\r\n    // Mapping from owner to number of owned token\r\n    mapping (address => uint256) internal ownedTokensCount;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping (address => mapping (address => bool)) internal operatorApprovals;\r\n\r\n    /**\r\n     * @dev Guarantees msg.sender is owner of the given token\r\n     * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\r\n     */\r\n    modifier onlyOwnerOf(uint256 _tokenId) {\r\n        require(ownerOf(_tokenId) == msg.sender);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\r\n     * @param _tokenId uint256 ID of the token to validate\r\n     */\r\n    modifier canTransfer(uint256 _tokenId) {\r\n        require(isApprovedOrOwner(msg.sender, _tokenId));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address\r\n     * @param _owner address to query the balance of\r\n     * @return uint256 representing the amount owned by the passed address\r\n     */\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        require(_owner != address(0));\r\n        return ownedTokensCount[_owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the owner of the specified token ID\r\n     * @param _tokenId uint256 ID of the token to query the owner of\r\n     * @return owner address currently marked as the owner of the given token ID\r\n     */\r\n    function ownerOf(uint256 _tokenId) public view returns (address) {\r\n        address owner = tokenOwner[_tokenId];\r\n        require(owner != address(0));\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether the specified token is owned\r\n     * @param _tokenId uint256 ID of the token to query the existance of\r\n     * @return whether the token is owned\r\n     */\r\n    function owned(uint256 _tokenId) public view returns (bool) {\r\n        address owner = tokenOwner[_tokenId];\r\n        return owner != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Approves another address to transfer the given token ID\r\n     * @dev The zero address indicates there is no approved address.\r\n     * @dev There can only be one approved address per token at a given time.\r\n     * @dev Can only be called by the token owner or an approved operator.\r\n     * @param _to address to be approved for the given token ID\r\n     * @param _tokenId uint256 ID of the token to be approved\r\n     */\r\n    function approve(address _to, uint256 _tokenId) public {\r\n        address owner = ownerOf(_tokenId);\r\n        require(_to != owner);\r\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n        if (getApproved(_tokenId) != address(0) || _to != address(0)) {\r\n            tokenApprovals[_tokenId] = _to;\r\n            emit Approval(owner, _to, _tokenId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the approved address for a token ID, or zero if no address set\r\n     * @param _tokenId uint256 ID of the token to query the approval of\r\n     * @return address currently approved for a the given token ID\r\n     */\r\n    function getApproved(uint256 _tokenId) public view returns (address) {\r\n        return tokenApprovals[_tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev Sets or unsets the approval of a given operator\r\n     * @dev An operator is allowed to transfer all tokens of the sender on their behalf\r\n     * @param _to operator address to set the approval\r\n     * @param _approved representing the status of the approval to be set\r\n     */\r\n    function setApprovalForAll(address _to, bool _approved) public {\r\n        require(_to != msg.sender);\r\n        operatorApprovals[msg.sender][_to] = _approved;\r\n        emit ApprovalForAll(msg.sender, _to, _approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Tells whether an operator is approved by a given owner\r\n     * @param _owner owner address which you want to query the approval of\r\n     * @param _operator operator address which you want to query the approval of\r\n     * @return bool whether the given operator is approved by the given owner\r\n     */\r\n    function isApprovedForAll(address _owner, address _operator) public view returns (bool) {\r\n        return operatorApprovals[_owner][_operator];\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers the ownership of a given token ID to another address\r\n     * @dev Usage of this method is discouraged, use `safeTransferFrom` whenever possible\r\n     * @dev Requires the msg sender to be the owner, approved, or operator\r\n     * @param _from current owner of the token\r\n     * @param _to address to receive the ownership of the given token ID\r\n     * @param _tokenId uint256 ID of the token to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public canTransfer(_tokenId) {\r\n        require(_from != address(0));\r\n        require(_to != address(0));\r\n\r\n        clearApproval(_from, _tokenId);\r\n        removeTokenFrom(_from, _tokenId);\r\n        addTokenTo(_to, _tokenId);\r\n\r\n        emit Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers the ownership of a given token ID to another address\r\n     * @dev If the target address is a contract, it must implement `onERC721Received`,\r\n     *  which is called upon a safe transfer, and return the magic value\r\n     *  `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`; otherwise,\r\n     *  the transfer is reverted.\r\n     * @dev Requires the msg sender to be the owner, approved, or operator\r\n     * @param _from current owner of the token\r\n     * @param _to address to receive the ownership of the given token ID\r\n     * @param _tokenId uint256 ID of the token to be transferred\r\n     */\r\n    function safeTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n        public\r\n        canTransfer(_tokenId)\r\n    {\r\n        // solium-disable-next-line arg-overflow\r\n        safeTransferFrom(_from, _to, _tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers the ownership of a given token ID to another address\r\n     * @dev If the target address is a contract, it must implement `onERC721Received`,\r\n     *  which is called upon a safe transfer, and return the magic value\r\n     *  `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`; otherwise,\r\n     *  the transfer is reverted.\r\n     * @dev Requires the msg sender to be the owner, approved, or operator\r\n     * @param _from current owner of the token\r\n     * @param _to address to receive the ownership of the given token ID\r\n     * @param _tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes data to send along with a safe transfer check\r\n     */\r\n    function safeTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId,\r\n        bytes _data\r\n    )\r\n        public\r\n        canTransfer(_tokenId)\r\n    {\r\n        transferFrom(_from, _to, _tokenId);\r\n        // solium-disable-next-line arg-overflow\r\n        require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether the given spender can transfer a given token ID\r\n     * @param _spender address of the spender to query\r\n     * @param _tokenId uint256 ID of the token to be transferred\r\n     * @return bool whether the msg.sender is approved for the given token ID,\r\n     *  is an operator of the owner, or is the owner of the token\r\n     */\r\n    function isApprovedOrOwner(address _spender, uint256 _tokenId) internal view returns (bool) {\r\n        address owner = ownerOf(_tokenId);\r\n        return _spender == owner || getApproved(_tokenId) == _spender || isApprovedForAll(owner, _spender);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to clear current approval of a given token ID\r\n     * @dev Reverts if the given address is not indeed the owner of the token\r\n     * @param _owner owner of the token\r\n     * @param _tokenId uint256 ID of the token to be transferred\r\n     */\r\n    function clearApproval(address _owner, uint256 _tokenId) internal {\r\n        require(ownerOf(_tokenId) == _owner);\r\n        if (tokenApprovals[_tokenId] != address(0)) {\r\n            tokenApprovals[_tokenId] = address(0);\r\n            emit Approval(_owner, address(0), _tokenId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to add a token ID to the list of a given address\r\n     * @param _to address representing the new owner of the given token ID\r\n     * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n     */\r\n    function addTokenTo(address _to, uint256 _tokenId) internal {\r\n        require(tokenOwner[_tokenId] == address(0));\r\n        tokenOwner[_tokenId] = _to;\r\n        ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to remove a token ID from the list of a given address\r\n     * @param _from address representing the previous owner of the given token ID\r\n     * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n     */\r\n    function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n        require(ownerOf(_tokenId) == _from);\r\n        ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\r\n        tokenOwner[_tokenId] = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke `onERC721Received` on a target address\r\n     * @dev The call is not executed if the target address is not a contract\r\n     * @param _from address representing the previous owner of the given token ID\r\n     * @param _to target address that will receive the tokens\r\n     * @param _tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return whether the call correctly returned the expected magic value\r\n     */\r\n    function checkAndCallSafeTransfer(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId,\r\n        bytes _data\r\n    )\r\n        internal\r\n        returns (bool)\r\n    {\r\n        if (!_to.isContract()) {\r\n            return true;\r\n        }\r\n        bytes4 retval = ERC721Receiver(_to).onERC721Received(_from, _tokenId, _data);\r\n        return (retval == ERC721_RECEIVED);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Full ERC721 Token\r\n * This implementation includes all the required and some optional functionality of the ERC721 standard\r\n * Moreover, it includes approve all functionality using operator terminology\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Token is ERC721, ERC721BasicToken {\r\n\r\n    // Token name\r\n    string internal name_;\r\n\r\n    // Token symbol\r\n    string internal symbol_;\r\n\r\n    // Token supply\r\n    uint256 internal totalSupply_;\r\n\r\n    // Mapping from owner to list of owned token IDs\r\n    mapping (address => uint256[]) internal ownedTokens;\r\n\r\n    // Mapping from token ID to index of the owner tokens list\r\n    mapping(uint256 => uint256) internal ownedTokensIndex;\r\n\r\n    // Optional mapping for token URIs\r\n    mapping(uint256 => string) internal tokenURIs;\r\n\r\n    /**\r\n     * @dev Constructor function\r\n     */\r\n    constructor(string _name, string _symbol, uint256 _totalSupply) public {\r\n        name_ = _name;\r\n        symbol_ = _symbol;\r\n        totalSupply_ = _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the token name\r\n     * @return string representing the token name\r\n     */\r\n    function name() public view returns (string) {\r\n        return name_;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the token symbol\r\n     * @return string representing the token symbol\r\n     */\r\n    function symbol() public view returns (string) {\r\n        return symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an URI for a given token ID\r\n     * @dev Throws if the token is not owned. May return an empty string.\r\n     * @param _tokenId uint256 ID of the token to query\r\n     */\r\n    function tokenURI(uint256 _tokenId) public view returns (string) {\r\n        require(owned(_tokenId));\r\n        return tokenURIs[_tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the total token supply\r\n     * @return uint256 representing the total token supply\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to set the token URI for a given token\r\n     * @dev Reverts if the token ID is not owned\r\n     * @param _tokenId uint256 ID of the token to set its URI\r\n     * @param _uri string URI to assign\r\n     */\r\n    function _setTokenURI(uint256 _tokenId, string _uri) internal {\r\n        require(owned(_tokenId));\r\n        tokenURIs[_tokenId] = _uri;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the token ID at a given index of the tokens list of the requested owner\r\n     * @param _owner address owning the tokens list to be accessed\r\n     * @param _index uint256 representing the index to be accessed of the requested tokens list\r\n     * @return uint256 token ID at the given index of the tokens list owned by the requested address\r\n     */\r\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256) {\r\n        require(_index < balanceOf(_owner));\r\n        return ownedTokens[_owner][_index];\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the token ID at a given index of all the tokens in this contract\r\n     * @dev Reverts if the index is greater or equal to the total number of tokens\r\n     * @param _index uint256 representing the index to be accessed of the tokens list\r\n     * @return uint256 token ID at the given index of the tokens list\r\n     */\r\n    function tokenByIndex(uint256 _index) public view returns (uint256) {\r\n        require(_index < totalSupply());\r\n        return _index;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to add a token ID to the list of a given address\r\n     * @param _to address representing the new owner of the given token ID\r\n     * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n     */\r\n    function addTokenTo(address _to, uint256 _tokenId) internal {\r\n        super.addTokenTo(_to, _tokenId);\r\n        uint256 length = ownedTokens[_to].length;\r\n        ownedTokens[_to].push(_tokenId);\r\n        ownedTokensIndex[_tokenId] = length;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to remove a token ID from the list of a given address\r\n     * @param _from address representing the previous owner of the given token ID\r\n     * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n     */\r\n    function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n        super.removeTokenFrom(_from, _tokenId);\r\n\r\n        uint256 tokenIndex = ownedTokensIndex[_tokenId];\r\n        uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\r\n        uint256 lastToken = ownedTokens[_from][lastTokenIndex];\r\n\r\n        ownedTokens[_from][tokenIndex] = lastToken;\r\n        ownedTokens[_from][lastTokenIndex] = 0;\r\n        // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\r\n        // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\r\n        // the lastToken to the first position, and then dropping the element placed in the last position of the list\r\n\r\n        ownedTokens[_from].length--;\r\n        ownedTokensIndex[_tokenId] = 0;\r\n        ownedTokensIndex[lastToken] = tokenIndex;\r\n    }\r\n}\r\n\r\ncontract ERC165 {\r\n\r\n    bytes4 constant ERC165InterfaceId = bytes4(keccak256(\"supportsInterface(bytes4)\"));\r\n    bytes4 constant ERC721InterfaceId = 0x80ac58cd;\r\n    bytes4 constant ERC721EnumerableInterfaceId = 0x780e9d63;\r\n    bytes4 constant ERC721MetadataInterfaceId = 0x5b5e139f;\r\n    bytes4 constant ERC721TokenReceiverInterfaceId = 0xf0b9e5ba;\r\n\r\n    /// @notice Query if a contract implements an interface\r\n    /// @param interfaceID The interface identifier, as specified in ERC-165\r\n    /// @dev Interface identification is specified in ERC-165. This function\r\n    ///  uses less than 30,000 gas.\r\n    /// @return `true` if the contract implements `interfaceID` and\r\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\r\n    function supportsInterface(bytes4 interfaceID) external view returns (bool) {\r\n        return\r\n            ((interfaceID == ERC165InterfaceId) ||\r\n            (interfaceID == ERC721InterfaceId) ||\r\n            (interfaceID == ERC721EnumerableInterfaceId) ||\r\n            (interfaceID == ERC721MetadataInterfaceId) ||\r\n            (interfaceID == ERC721TokenReceiverInterfaceId));\r\n    }\r\n}\r\n\r\ncontract StarCards is Ownable, ERC721Token, ERC165 {\r\n\r\n    // The card database can be verified using these checksums.\r\n    string constant public dataset_md5checksum = \"696fa8ba0f25d6d6f8391e37251736bc\";\r\n    string constant public dataset_sha256checksum = \"ba3178b5d13ec7b05cf3ebaae2be797cc0eb6756eac455426f2b1d70f17cefae\";\r\n\r\n    // The card database can be downloaded at this URL.\r\n    string public databaseDownloadUrl = \"ftp://starcards.my/starCardsDataset.json\";\r\n    \r\n    uint256 constant public editionSize = 345;\r\n    uint256 constant public minimumBid = 0.001 ether;\r\n    uint256 constant public timeBetweenEditions = 1 days;\r\n    uint256 constant public initializationDelay = 3 days;\r\n\r\n    struct ReleaseAuction {\r\n        Bid highestBid;\r\n        uint additionalTime;\r\n        bool completed;\r\n    }\r\n\r\n    struct Bid {\r\n        uint value;\r\n        uint timePlaced;\r\n        address bidder;\r\n    }\r\n\r\n    event NewBid(uint id, uint value, uint timePlaced, address bidder);\r\n\r\n    mapping(address => uint) public pendingWithdrawals;\r\n    mapping(uint => ReleaseAuction) releaseAuctions;\r\n\r\n    uint256 public contractInitializationTime;\r\n\r\n    constructor() ERC721Token(\"Star Cards\", \"STAR\", 586155) public payable {\r\n        owner = msg.sender;\r\n        contractInitializationTime = now + initializationDelay;\r\n    }\r\n\r\n    function setDatabaseDownloadUrl(string url) public onlyOwner {\r\n        databaseDownloadUrl = url;\r\n    }\r\n\r\n    function getCurrentEdition() public view returns (uint256) {\r\n        uint256 secondsSinceContractInitialization = SafeMath.sub(now, contractInitializationTime);\r\n        return SafeMath.div(secondsSinceContractInitialization, timeBetweenEditions);\r\n    }\r\n\r\n    function getEditionReleaseTime(uint edition) public view returns (uint256) {\r\n        return SafeMath.add(contractInitializationTime, (SafeMath.mul(edition, timeBetweenEditions)));\r\n    }\r\n\r\n    function getEdition(uint id) public view onlyValidTokenIds(id) returns (uint256) {\r\n        return SafeMath.div(id, editionSize);\r\n    }\r\n\r\n    function isReleased(uint id) public view onlyValidTokenIds(id) returns (bool) {\r\n        return getEdition(id) <= getCurrentEdition();\r\n    }\r\n\r\n    function getReleaseAuctionEndTime(uint id) public view onlyValidTokenIds(id) returns (uint) {\r\n        uint256 timeFromRelease = SafeMath.add(timeBetweenEditions, releaseAuctions[id].additionalTime);\r\n        return SafeMath.add(getEditionReleaseTime(getEdition(id)), timeFromRelease);\r\n    }\r\n\r\n    function releaseAuctionEnded(uint id) public view onlyValidTokenIds(id) returns (bool) {\r\n        return (isReleased(id) && (getReleaseAuctionEndTime(id) < now));\r\n    }\r\n\r\n    function getHighestBidder(uint id) public view onlyValidTokenIds(id) returns (address) {\r\n        return releaseAuctions[id].highestBid.bidder;\r\n    }\r\n\r\n    function getHighestBid(uint id) public view onlyValidTokenIds(id) returns (uint) {\r\n        return releaseAuctions[id].highestBid.value;\r\n    }\r\n\r\n    function getAdditionalTime(uint id) public view onlyValidTokenIds(id) returns (uint) {\r\n        return releaseAuctions[id].additionalTime;\r\n    }\r\n\r\n    function getRemainingTime(uint id) public view onlyValidTokenIds(id) returns (uint) {\r\n        uint endTime = getReleaseAuctionEndTime(id);\r\n        if (endTime > now) {\r\n            return SafeMath.sub(endTime, now);\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function getAllTokens(address owner) public view returns (uint[]) {\r\n        uint size = ownedTokens[owner].length;\r\n        uint[] memory result = new uint[](size);\r\n        for (uint i = 0; i < size; i++) {\r\n            result[i] = ownedTokens[owner][i];\r\n        }\r\n        return result;\r\n    }\r\n\r\n    // Complete the release auction.\r\n    function completeReleaseAuction(uint id) payable external onlyReleasedTokens(id) {\r\n\r\n        require(releaseAuctionEnded(id));\r\n\r\n        ReleaseAuction storage auction = releaseAuctions[id];\r\n\r\n        require(!auction.completed);\r\n\r\n        address newOwner;\r\n        uint payout;\r\n\r\n        if (auction.highestBid.bidder == address(0)) {\r\n            require(msg.value >= minimumBid);\r\n            newOwner = msg.sender;\r\n            payout = msg.value;\r\n        } else {\r\n            newOwner = auction.highestBid.bidder;\r\n            payout = auction.highestBid.value;\r\n        }\r\n\r\n        addTokenTo(newOwner, id);\r\n\r\n        pendingWithdrawals[owner] = SafeMath.add(pendingWithdrawals[owner], payout);\r\n\r\n        auction.completed = true;\r\n    }\r\n\r\n    // Place a bid on an active auction.\r\n    function placeBid(uint id) payable external onlyReleasedTokens(id) {\r\n\r\n        require(!releaseAuctionEnded(id)); // Ensure release auction has not expired.\r\n\r\n        ReleaseAuction storage auction = releaseAuctions[id];\r\n\r\n        // Ensure new bid is greater than or equal to current bid plus minimum bid increase.\r\n        require(msg.value >= auction.highestBid.value + minimumBid);\r\n\r\n        // Reset auction timeout.\r\n        auction.additionalTime = SafeMath.add(auction.additionalTime, timeBetweenEditions - getRemainingTime(id));\r\n\r\n        // Refund previous bidder if there is one.\r\n        if (auction.highestBid.bidder != address(0)) {\r\n            pendingWithdrawals[auction.highestBid.bidder] = SafeMath.add(pendingWithdrawals[auction.highestBid.bidder], auction.highestBid.value);\r\n        }\r\n\r\n        // Update highest bid.\r\n        auction.highestBid = Bid(msg.value, now, msg.sender);\r\n\r\n        emit NewBid(id, msg.value, now, msg.sender);\r\n    }\r\n\r\n    // Withdraw a bid that was overbid.\r\n    function withdraw() external returns (bool) {\r\n        uint amount = pendingWithdrawals[msg.sender];\r\n        if (amount > 0) {\r\n            // It is important to set this to zero because the recipient\r\n            // can call this function again as part of the receiving call\r\n            // before `send` returns.\r\n            pendingWithdrawals[msg.sender] = 0;\r\n\r\n            if (!msg.sender.send(amount)) {\r\n                // No need to call throw here, just reset the amount owing\r\n                pendingWithdrawals[msg.sender] = amount;\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Token must be released to execute\r\n    modifier onlyReleasedTokens(uint id) {\r\n        require(isReleased(id));\r\n        _;\r\n    }\r\n\r\n    // Token id must be in range\r\n    modifier onlyValidTokenIds(uint id) {\r\n        require(id < totalSupply());\r\n        _;\r\n    }\r\n  \r\n    function() external payable {\r\n        revert();\r\n    }\r\n}", "OptimizationUsed": "0", "ContractName": "StarCards", "ByteCode": "0x60806040526004361061020f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806301ffc9a71461021457806306fdde0314610278578063081812fc14610308578063095ea7b314610375578063178b6de6146103c257806318160ddd1461045a578063181e01241461048557806323b872dd146104c65780632f745c59146105335780633463d76d146105945780633ccfd60b1461062457806342842e0e146106535780634f6ccce7146106c057806353297b711461070157806354e2dc8d1461072157806355de5a93146107625780635679623b1461078d5780635d468d38146107b85780636352211e146107fd57806367bd15e31461086a57806370a082311461089557806373962b26146108ec5780638acb99ac146109315780638da5cb5b146109765780638f288644146109cd57806395d89b4114610a0e57806396e1a65714610a9e5780639979ef4514610ac9578063997cf69c14610ae95780639e28232814610b795780639fe634b914610bba578063a22cb46514610bfb578063a642c03214610c4a578063b88d4fde14610c8b578063c750cb7914610d3e578063c87b56dd14610dab578063d3a6115014610e51578063d3a8638614610eba578063e985e9c514610ee5578063f0144a9114610f60578063f2fde38b14610ff0578063f3f4370314611033578063f4ed0f461461108a575b600080fd5b34801561022057600080fd5b5061025e60048036038101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690602001909291905050506110b5565b604051808215151515815260200191505060405180910390f35b34801561028457600080fd5b5061028d6112e0565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102cd5780820151818401526020810190506102b2565b50505050905090810190601f1680156102fa5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561031457600080fd5b5061033360048036038101908080359060200190929190505050611382565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561038157600080fd5b506103c0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506113bf565b005b3480156103ce57600080fd5b50610403600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611585565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561044657808201518184015260208101905061042b565b505050509050019250505060405180910390f35b34801561046657600080fd5b5061046f61169c565b6040518082815260200191505060405180910390f35b34801561049157600080fd5b506104b0600480360381019080803590602001909291905050506116a6565b6040518082815260200191505060405180910390f35b3480156104d257600080fd5b50610531600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506116ef565b005b34801561053f57600080fd5b5061057e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611806565b6040518082815260200191505060405180910390f35b3480156105a057600080fd5b506105a961187d565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105e95780820151818401526020810190506105ce565b50505050905090810190601f1680156106165780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561063057600080fd5b5061063961191b565b604051808215151515815260200191505060405180910390f35b34801561065f57600080fd5b506106be600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611a40565b005b3480156106cc57600080fd5b506106eb60048036038101908080359060200190929190505050611a78565b6040518082815260200191505060405180910390f35b61071f60048036038101908080359060200190929190505050611a97565b005b34801561072d57600080fd5b5061074c60048036038101908080359060200190929190505050611ca6565b6040518082815260200191505060405180910390f35b34801561076e57600080fd5b50610777611cdd565b6040518082815260200191505060405180910390f35b34801561079957600080fd5b506107a2611d01565b6040518082815260200191505060405180910390f35b3480156107c457600080fd5b506107e360048036038101908080359060200190929190505050611d08565b604051808215151515815260200191505060405180910390f35b34801561080957600080fd5b5061082860048036038101908080359060200190929190505050611d44565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561087657600080fd5b5061087f611dc2565b6040518082815260200191505060405180910390f35b3480156108a157600080fd5b506108d6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611dc8565b6040518082815260200191505060405180910390f35b3480156108f857600080fd5b5061091760048036038101908080359060200190929190505050611e4c565b604051808215151515815260200191505060405180910390f35b34801561093d57600080fd5b5061095c60048036038101908080359060200190929190505050611e7f565b604051808215151515815260200191505060405180910390f35b34801561098257600080fd5b5061098b611ef1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156109d957600080fd5b506109f860048036038101908080359060200190929190505050611f16565b6040518082815260200191505060405180910390f35b348015610a1a57600080fd5b50610a23611f50565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610a63578082015181840152602081019050610a48565b50505050905090810190601f168015610a905780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610aaa57600080fd5b50610ab3611ff2565b6040518082815260200191505060405180910390f35b610ae760048036038101908080359060200190929190505050611ff9565b005b348015610af557600080fd5b50610afe6122cf565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610b3e578082015181840152602081019050610b23565b50505050905090810190601f168015610b6b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610b8557600080fd5b50610ba46004803603810190808035906020019092919050505061232f565b6040518082815260200191505060405180910390f35b348015610bc657600080fd5b50610be560048036038101908080359060200190929190505050612350565b6040518082815260200191505060405180910390f35b348015610c0757600080fd5b50610c48600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035151590602001909291905050506123b1565b005b348015610c5657600080fd5b50610c75600480360381019080803590602001909291905050506124ed565b6040518082815260200191505060405180910390f35b348015610c9757600080fd5b50610d3c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050612519565b005b348015610d4a57600080fd5b50610d6960048036038101908080359060200190929190505050612558565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610db757600080fd5b50610dd6600480360381019080803590602001909291905050506125b2565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610e16578082015181840152602081019050610dfb565b50505050905090810190601f168015610e435780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610e5d57600080fd5b50610eb8600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061267b565b005b348015610ec657600080fd5b50610ecf6126f0565b6040518082815260200191505060405180910390f35b348015610ef157600080fd5b50610f46600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506126fb565b604051808215151515815260200191505060405180910390f35b348015610f6c57600080fd5b50610f7561278f565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610fb5578082015181840152602081019050610f9a565b50505050905090810190601f168015610fe25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610ffc57600080fd5b50611031600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506127c8565b005b34801561103f57600080fd5b50611074600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061291d565b6040518082815260200191505060405180910390f35b34801561109657600080fd5b5061109f612935565b6040518082815260200191505060405180910390f35b600060405180807f737570706f727473496e74657266616365286279746573342900000000000000815250601901905060405180910390207bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061119857506380ac58cd7c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80611203575063780e9d637c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061126e5750635b5e139f7c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806112d9575063f0b9e5ba7c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b606060058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113785780601f1061134d57610100808354040283529160200191611378565b820191906000526020600020905b81548152906001019060200180831161135b57829003601f168201915b5050505050905090565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006113ca82611d44565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561140757600080fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611447575061144681336126fb565b5b151561145257600080fd5b600073ffffffffffffffffffffffffffffffffffffffff1661147383611382565b73ffffffffffffffffffffffffffffffffffffffff161415806114c35750600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b1561158057826002600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a35b505050565b6060600060606000600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509250826040519080825280602002602001820160405280156116015781602001602082028038833980820191505090505b509150600090505b8281101561169157600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208181548110151561165d57fe5b9060005260206000200154828281518110151561167657fe5b90602001906020020181815250508080600101915050611609565b819350505050919050565b6000600754905090565b600080826116b261169c565b811015156116bf57600080fd5b6116c884612350565b9150428211156116e3576116dc824261293b565b92506116e8565b600092505b5050919050565b806116fa3382612954565b151561170557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415151561174157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561177d57600080fd5b61178784836129e9565b6117918483612b52565b61179b8383612d6a565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a350505050565b600061181183611dc8565b8210151561181e57600080fd5b600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110151561186a57fe5b9060005260206000200154905092915050565b600b8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156119135780601f106118e857610100808354040283529160200191611913565b820191906000526020600020905b8154815290600101906020018083116118f657829003601f168201915b505050505081565b600080600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000811115611a37576000600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501515611a365780600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060009150611a3c565b5b600191505b5090565b80611a4b3382612954565b1515611a5657600080fd5b611a728484846020604051908101604052806000815250612519565b50505050565b6000611a8261169c565b82101515611a8f57600080fd5b819050919050565b600080600083611aa681611e4c565b1515611ab157600080fd5b611aba85611d08565b1515611ac557600080fd5b600d600086815260200190815260200160002093508360040160009054906101000a900460ff16151515611af857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168460000160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611b755766038d7ea4c680003410151515611b6a57600080fd5b339250349150611baa565b8360000160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169250836000016000015491505b611bb48386612d6a565b611c1e600c60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483612e41565b600c60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060018460040160006101000a81548160ff0219169083151502179055505050505050565b600081611cb161169c565b81101515611cbe57600080fd5b600d600084815260200190815260200160002060030154915050919050565b600080611cec42600e5461293b565b9050611cfb8162015180612e5d565b91505090565b6203f48081565b600081611d1361169c565b81101515611d2057600080fd5b611d2983611e4c565b8015611d3c575042611d3a84612350565b105b915050919050565b6000806001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611db957600080fd5b80915050919050565b600e5481565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515611e0557600080fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600081611e5761169c565b81101515611e6457600080fd5b611e6c611cdd565b611e75846124ed565b1115915050919050565b6000806001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415915050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600081611f2161169c565b81101515611f2e57600080fd5b600d600084815260200190815260200160002060000160000154915050919050565b606060068054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611fe85780601f10611fbd57610100808354040283529160200191611fe8565b820191906000526020600020905b815481529060010190602001808311611fcb57829003601f168201915b5050505050905090565b6201518081565b60008161200581611e4c565b151561201057600080fd5b61201983611d08565b15151561202557600080fd5b600d6000848152602001908152602001600020915066038d7ea4c68000826000016000015401341015151561205957600080fd5b612074826003015461206a856116a6565b6201518003612e41565b8260030181905550600073ffffffffffffffffffffffffffffffffffffffff168260000160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156121bb57612150600c60008460000160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548360000160000154612e41565b600c60008460000160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b6060604051908101604052803481526020014281526020013373ffffffffffffffffffffffffffffffffffffffff1681525082600001600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050507f590ba68a12d65ef409e2805559d1df1c2e572d83d3251d3c1a5fd0e19df1095283344233604051808581526020018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200194505050505060405180910390a1505050565b606060405190810160405280604081526020017f626133313738623564313365633762303563663365626161653262653739376381526020017f633065623637353665616334353534323666326231643730663137636566616581525081565b6000612349600e546123448462015180612e73565b612e41565b9050919050565b6000808261235c61169c565b8110151561236957600080fd5b61238c62015180600d600087815260200190815260200160002060030154612e41565b91506123a86123a261239d866124ed565b61232f565b83612e41565b92505050919050565b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156123ec57600080fd5b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051808215151515815260200191505060405180910390a35050565b6000816124f861169c565b8110151561250557600080fd5b61251183610159612e5d565b915050919050565b816125243382612954565b151561252f57600080fd5b61253a8585856116ef565b61254685858585612eab565b151561255157600080fd5b5050505050565b60008161256361169c565b8110151561257057600080fd5b600d600084815260200190815260200160002060000160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915050919050565b60606125bd82611e7f565b15156125c857600080fd5b600a60008381526020019081526020016000208054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561266f5780601f106126445761010080835404028352916020019161266f565b820191906000526020600020905b81548152906001019060200180831161265257829003601f168201915b50505050509050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156126d657600080fd5b80600b90805190602001906126ec929190613335565b5050565b66038d7ea4c6800081565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6040805190810160405280602081526020017f363936666138626130663235643664366638333931653337323531373336626381525081565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561282357600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561285f57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600c6020528060005260406000206000915090505481565b61015981565b600082821115151561294957fe5b818303905092915050565b60008061296083611d44565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806129cf57508373ffffffffffffffffffffffffffffffffffffffff166129b784611382565b73ffffffffffffffffffffffffffffffffffffffff16145b806129e057506129df81856126fb565b5b91505092915050565b8173ffffffffffffffffffffffffffffffffffffffff16612a0982611d44565b73ffffffffffffffffffffffffffffffffffffffff16141515612a2b57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515612b4e5760006002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a35b5050565b6000806000612b618585613099565b60096000858152602001908152602001600020549250612bcd6001600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905061293b90919063ffffffff16565b9150600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481101515612c1b57fe5b9060005260206000200154905080600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002084815481101515612c7557fe5b90600052602060002001819055506000600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083815481101515612cd157fe5b9060005260206000200181905550600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480919060019003612d3191906133b5565b50600060096000868152602001908152602001600020819055508260096000838152602001908152602001600020819055505050505050565b6000612d7683836131c8565b600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020829080600181540180825580915050906001820390600052602060002001600090919290919091505550806009600084815260200190815260200160002081905550505050565b60008183019050828110151515612e5457fe5b80905092915050565b60008183811515612e6a57fe5b04905092915050565b600080831415612e865760009050612ea5565b8183029050818382811515612e9757fe5b04141515612ea157fe5b8090505b92915050565b600080612ecd8573ffffffffffffffffffffffffffffffffffffffff16613322565b1515612edc5760019150613090565b8473ffffffffffffffffffffffffffffffffffffffff1663f0b9e5ba8786866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015612f9e578082015181840152602081019050612f83565b50505050905090810190601f168015612fcb5780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b158015612fec57600080fd5b505af1158015613000573d6000803e3d6000fd5b505050506040513d602081101561301657600080fd5b8101908080519060200190929190505050905063f0b9e5ba7c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505b50949350505050565b8173ffffffffffffffffffffffffffffffffffffffff166130b982611d44565b73ffffffffffffffffffffffffffffffffffffffff161415156130db57600080fd5b61312e6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461293b90919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060006001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561323657600080fd5b816001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506132db6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612e4190919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b600080823b905060008111915050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061337657805160ff19168380011785556133a4565b828001600101855582156133a4579182015b828111156133a3578251825591602001919060010190613388565b5b5090506133b191906133e1565b5090565b8154818355818111156133dc578183600052602060002091820191016133db91906133e1565b5b505050565b61340391905b808211156133ff5760008160009055506001016133e7565b5090565b905600a165627a7a72305820c2fcf35fb1ac656c9e1b355df950bf5960c2dafa849efa6d0a3fa66d8fa36b2c0029"}