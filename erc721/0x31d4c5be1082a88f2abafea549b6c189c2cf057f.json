{"Runs": "200", "SwarmSource": "bzzr://915f094bd33721ea50df1895ad20a891377cb5b76da4cbb39f2ec348486f80d9", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"cfoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auctionDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_public\",\"type\":\"bool\"}],\"name\":\"updateBuildingPrivacy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"buildingToUnitCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_updateEnabled\",\"type\":\"bool\"}],\"name\":\"setUpdateState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_x\",\"type\":\"uint8\"},{\"name\":\"_z\",\"type\":\"uint8\"},{\"name\":\"_dx\",\"type\":\"uint8\"},{\"name\":\"_dz\",\"type\":\"uint8\"}],\"name\":\"createDistrictOmni\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_districtId\",\"type\":\"uint32\"},{\"name\":\"_x\",\"type\":\"uint8\"},{\"name\":\"_y\",\"type\":\"uint8\"},{\"name\":\"_z\",\"type\":\"uint8\"},{\"name\":\"_dx\",\"type\":\"uint8\"},{\"name\":\"_dz\",\"type\":\"uint8\"},{\"name\":\"_open\",\"type\":\"bool\"}],\"name\":\"createBuildingAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getProperty\",\"outputs\":[{\"name\":\"parent\",\"type\":\"uint32\"},{\"name\":\"class\",\"type\":\"uint8\"},{\"name\":\"x\",\"type\":\"uint8\"},{\"name\":\"y\",\"type\":\"uint8\"},{\"name\":\"z\",\"type\":\"uint8\"},{\"name\":\"dx\",\"type\":\"uint8\"},{\"name\":\"dz\",\"type\":\"uint8\"},{\"name\":\"height\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_propertyId\",\"type\":\"uint256\"},{\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"name\":\"_endingPrice\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createSaleAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"updateEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCFO\",\"type\":\"address\"}],\"name\":\"setCFO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"districtToBuildingsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"string\"}],\"name\":\"updatePropertyData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"progress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"buildingToUnits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"propertyIndexToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buildingId\",\"type\":\"uint32\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"createUnitOmni\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSaleAuctionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_v2Address\",\"type\":\"address\"}],\"name\":\"setNewAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buildingId\",\"type\":\"uint256\"}],\"name\":\"createUnit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"districtLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAuctionBalances\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setUnitCreationFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"districtToBuildings\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"world\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_buildingId\",\"type\":\"uint256\"}],\"name\":\"canCreateUnit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"propertyIndexToData\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unitCreationFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"buildingIsPublic\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_propertyId\",\"type\":\"uint256\"},{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"rescueLostProperty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"propertyIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_progress\",\"type\":\"uint256\"}],\"name\":\"setProgress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startingPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDistrictSupply\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_districtId\",\"type\":\"uint32\"},{\"name\":\"_x\",\"type\":\"uint8\"},{\"name\":\"_y\",\"type\":\"uint8\"},{\"name\":\"_z\",\"type\":\"uint8\"},{\"name\":\"_dx\",\"type\":\"uint8\"},{\"name\":\"_dz\",\"type\":\"uint8\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_open\",\"type\":\"bool\"}],\"name\":\"createBuildingOmni\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"propertyId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"class\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"x\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"y\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"z\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"dx\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"dz\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"string\"}],\"name\":\"Construct\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"ContractUpgrade\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.21+commit.dfe3193c", "ConstructorArguments": "", "SourceCode": "pragma solidity ^0.4.18;\r\n\r\n// File: contracts-origin/AetherAccessControl.sol\r\n\r\n/// @title A facet of AetherCore that manages special access privileges.\r\n/// @dev See the AetherCore contract documentation to understand how the various contract facets are arranged.\r\ncontract AetherAccessControl {\r\n    // This facet controls access control for Laputa. There are four roles managed here:\r\n    //\r\n    //     - The CEO: The CEO can reassign other roles and change the addresses of our dependent smart\r\n    //         contracts. It is also the only role that can unpause the smart contract. It is initially\r\n    //         set to the address that created the smart contract in the AetherCore constructor.\r\n    //\r\n    //     - The CFO: The CFO can withdraw funds from AetherCore and its auction contracts.\r\n    //\r\n    //     - The COO: The COO can release properties to auction.\r\n    //\r\n    // It should be noted that these roles are distinct without overlap in their access abilities, the\r\n    // abilities listed for each role above are exhaustive. In particular, while the CEO can assign any\r\n    // address to any role, the CEO address itself doesn't have the ability to act in those roles. This\r\n    // restriction is intentional so that we aren't tempted to use the CEO address frequently out of\r\n    // convenience. The less we use an address, the less likely it is that we somehow compromise the\r\n    // account.\r\n\r\n    /// @dev Emited when contract is upgraded - See README.md for updgrade plan\r\n    event ContractUpgrade(address newContract);\r\n\r\n    // The addresses of the accounts (or contracts) that can execute actions within each roles.\r\n    address public ceoAddress;\r\n    address public cfoAddress;\r\n    address public cooAddress;\r\n\r\n    // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\r\n    bool public paused = false;\r\n\r\n    /// @dev Access modifier for CEO-only functionality\r\n    modifier onlyCEO() {\r\n        require(msg.sender == ceoAddress);\r\n        _;\r\n    }\r\n\r\n    /// @dev Access modifier for CFO-only functionality\r\n    modifier onlyCFO() {\r\n        require(msg.sender == cfoAddress);\r\n        _;\r\n    }\r\n\r\n    /// @dev Access modifier for COO-only functionality\r\n    modifier onlyCOO() {\r\n        require(msg.sender == cooAddress);\r\n        _;\r\n    }\r\n\r\n    modifier onlyCLevel() {\r\n        require(\r\n            msg.sender == cooAddress ||\r\n            msg.sender == ceoAddress ||\r\n            msg.sender == cfoAddress\r\n        );\r\n        _;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\r\n    /// @param _newCEO The address of the new CEO\r\n    function setCEO(address _newCEO) public onlyCEO {\r\n        require(_newCEO != address(0));\r\n\r\n        ceoAddress = _newCEO;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the CFO. Only available to the current CEO.\r\n    /// @param _newCFO The address of the new CFO\r\n    function setCFO(address _newCFO) public onlyCEO {\r\n        require(_newCFO != address(0));\r\n\r\n        cfoAddress = _newCFO;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the COO. Only available to the current CEO.\r\n    /// @param _newCOO The address of the new COO\r\n    function setCOO(address _newCOO) public onlyCEO {\r\n        require(_newCOO != address(0));\r\n\r\n        cooAddress = _newCOO;\r\n    }\r\n\r\n    function withdrawBalance() external onlyCFO {\r\n        cfoAddress.transfer(this.balance);\r\n    }\r\n\r\n\r\n    /*** Pausable functionality adapted from OpenZeppelin ***/\r\n\r\n    /// @dev Modifier to allow actions only when the contract IS NOT paused\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /// @dev Modifier to allow actions only when the contract IS paused\r\n    modifier whenPaused {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /// @dev Called by any \"C-level\" role to pause the contract. Used only when\r\n    ///  a bug or exploit is detected and we need to limit damage.\r\n    function pause() public onlyCLevel whenNotPaused {\r\n        paused = true;\r\n    }\r\n\r\n    /// @dev Unpauses the smart contract. Can only be called by the CEO, since\r\n    ///  one reason we may pause the contract is when CFO or COO accounts are\r\n    ///  compromised.\r\n    function unpause() public onlyCEO whenPaused {\r\n        // can't unpause if contract was upgraded\r\n        paused = false;\r\n    }\r\n}\r\n\r\n// File: contracts-origin/AetherBase.sol\r\n\r\n/// @title Base contract for Aether. Holds all common structs, events and base variables.\r\n/// @author Project Aether (https://www.aether.city)\r\n/// @dev See the PropertyCore contract documentation to understand how the various contract facets are arranged.\r\ncontract AetherBase is AetherAccessControl {\r\n    /*** EVENTS ***/\r\n\r\n    /// @dev The Construct event is fired whenever a property updates.\r\n    event Construct (\r\n      address indexed owner,\r\n      uint256 propertyId,\r\n      PropertyClass class,\r\n      uint8 x,\r\n      uint8 y,\r\n      uint8 z,\r\n      uint8 dx,\r\n      uint8 dz,\r\n      string data\r\n    );\r\n\r\n    /// @dev Transfer event as defined in current draft of ERC721. Emitted every\r\n    ///  time a property ownership is assigned.\r\n    event Transfer(\r\n      address indexed from,\r\n      address indexed to,\r\n      uint256 indexed tokenId\r\n    );\r\n\r\n    /*** DATA ***/\r\n\r\n    enum PropertyClass { DISTRICT, BUILDING, UNIT }\r\n\r\n    /// @dev The main Property struct. Every property in Aether is represented\r\n    ///  by a variant of this structure.\r\n    struct Property {\r\n        uint32 parent;\r\n        PropertyClass class;\r\n        uint8 x;\r\n        uint8 y;\r\n        uint8 z;\r\n        uint8 dx;\r\n        uint8 dz;\r\n    }\r\n\r\n    /*** STORAGE ***/\r\n\r\n    /// @dev Ensures that property occupies unique part of the universe.\r\n    bool[100][100][100] public world;\r\n\r\n    /// @dev An array containing the Property struct for all properties in existence. The ID\r\n    ///  of each property is actually an index into this array.\r\n    Property[] properties;\r\n\r\n    /// @dev An array containing the district addresses in existence.\r\n    uint256[] districts;\r\n\r\n    /// @dev A measure of world progression.\r\n    uint256 public progress;\r\n\r\n    /// @dev The fee associated with constructing a unit property.\r\n    uint256 public unitCreationFee = 0.05 ether;\r\n\r\n    /// @dev Keeps track whether updating data is paused.\r\n    bool public updateEnabled = true;\r\n\r\n    /// @dev A mapping from property IDs to the address that owns them. All properties have\r\n    ///  some valid owner address, even gen0 properties are created with a non-zero owner.\r\n    mapping (uint256 => address) public propertyIndexToOwner;\r\n\r\n    /// @dev A mapping from property IDs to the data that is stored on them.\r\n    mapping (uint256 => string) public propertyIndexToData;\r\n\r\n    /// @dev A mapping from owner address to count of tokens that address owns.\r\n    ///  Used internally inside balanceOf() to resolve ownership count.\r\n    mapping (address => uint256) ownershipTokenCount;\r\n\r\n    /// @dev Mappings between property nodes.\r\n    mapping (uint256 => uint256) public districtToBuildingsCount;\r\n    mapping (uint256 => uint256[]) public districtToBuildings;\r\n    mapping (uint256 => uint256) public buildingToUnitCount;\r\n    mapping (uint256 => uint256[]) public buildingToUnits;\r\n\r\n    /// @dev A mapping from building propertyId to unit construction privacy.\r\n    mapping (uint256 => bool) public buildingIsPublic;\r\n\r\n    /// @dev A mapping from PropertyIDs to an address that has been approved to call\r\n    ///  transferFrom(). Each Property can only have one approved address for transfer\r\n    ///  at any time. A zero value means no approval is outstanding.\r\n    mapping (uint256 => address) public propertyIndexToApproved;\r\n\r\n    /// @dev Assigns ownership of a specific Property to an address.\r\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\r\n      // since the number of properties is capped to 2^32\r\n      // there is no way to overflow this\r\n      ownershipTokenCount[_to]++;\r\n      // transfer ownership\r\n      propertyIndexToOwner[_tokenId] = _to;\r\n      // When creating new properties _from is 0x0, but we can't account that address.\r\n      if (_from != address(0)) {\r\n          ownershipTokenCount[_from]--;\r\n          // clear any previously approved ownership exchange\r\n          delete propertyIndexToApproved[_tokenId];\r\n      }\r\n      // Emit the transfer event.\r\n      Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    function _createUnit(\r\n      uint256 _parent,\r\n      uint256 _x,\r\n      uint256 _y,\r\n      uint256 _z,\r\n      address _owner\r\n    )\r\n        internal\r\n        returns (uint)\r\n    {\r\n      require(_x == uint256(uint8(_x)));\r\n      require(_y == uint256(uint8(_y)));\r\n      require(_z == uint256(uint8(_z)));\r\n      require(!world[_x][_y][_z]);\r\n      world[_x][_y][_z] = true;\r\n      return _createProperty(\r\n        _parent,\r\n        PropertyClass.UNIT,\r\n        _x,\r\n        _y,\r\n        _z,\r\n        0,\r\n        0,\r\n        _owner\r\n      );\r\n    }\r\n\r\n    function _createBuilding(\r\n      uint256 _parent,\r\n      uint256 _x,\r\n      uint256 _y,\r\n      uint256 _z,\r\n      uint256 _dx,\r\n      uint256 _dz,\r\n      address _owner,\r\n      bool _public\r\n    )\r\n        internal\r\n        returns (uint)\r\n    {\r\n      require(_x == uint256(uint8(_x)));\r\n      require(_y == uint256(uint8(_y)));\r\n      require(_z == uint256(uint8(_z)));\r\n      require(_dx == uint256(uint8(_dx)));\r\n      require(_dz == uint256(uint8(_dz)));\r\n\r\n      // Looping over world space.\r\n      for(uint256 i = 0; i < _dx; i++) {\r\n          for(uint256 j = 0; j <_dz; j++) {\r\n              if (world[_x + i][0][_z + j]) {\r\n                  revert();\r\n              }\r\n              world[_x + i][0][_z + j] = true;\r\n          }\r\n      }\r\n\r\n      uint propertyId = _createProperty(\r\n        _parent,\r\n        PropertyClass.BUILDING,\r\n        _x,\r\n        _y,\r\n        _z,\r\n        _dx,\r\n        _dz,\r\n        _owner\r\n      );\r\n\r\n      districtToBuildingsCount[_parent]++;\r\n      districtToBuildings[_parent].push(propertyId);\r\n      buildingIsPublic[propertyId] = _public;\r\n      return propertyId;\r\n    }\r\n\r\n    function _createDistrict(\r\n      uint256 _x,\r\n      uint256 _z,\r\n      uint256 _dx,\r\n      uint256 _dz\r\n    )\r\n        internal\r\n        returns (uint)\r\n    {\r\n      require(_x == uint256(uint8(_x)));\r\n      require(_z == uint256(uint8(_z)));\r\n      require(_dx == uint256(uint8(_dx)));\r\n      require(_dz == uint256(uint8(_dz)));\r\n\r\n      uint propertyId = _createProperty(\r\n        districts.length,\r\n        PropertyClass.DISTRICT,\r\n        _x,\r\n        0,\r\n        _z,\r\n        _dx,\r\n        _dz,\r\n        cooAddress\r\n      );\r\n\r\n      districts.push(propertyId);\r\n      return propertyId;\r\n\r\n    }\r\n\r\n\r\n    /// @dev An internal method that creates a new property and stores it. This\r\n    ///  method doesn't do any checking and should only be called when the\r\n    ///  input data is known to be valid. Will generate both a Construct event\r\n    ///  and a Transfer event.\r\n    function _createProperty(\r\n        uint256 _parent,\r\n        PropertyClass _class,\r\n        uint256 _x,\r\n        uint256 _y,\r\n        uint256 _z,\r\n        uint256 _dx,\r\n        uint256 _dz,\r\n        address _owner\r\n    )\r\n        internal\r\n        returns (uint)\r\n    {\r\n        require(_x == uint256(uint8(_x)));\r\n        require(_y == uint256(uint8(_y)));\r\n        require(_z == uint256(uint8(_z)));\r\n        require(_dx == uint256(uint8(_dx)));\r\n        require(_dz == uint256(uint8(_dz)));\r\n        require(_parent == uint256(uint32(_parent)));\r\n        require(uint256(_class) <= 3);\r\n\r\n        Property memory _property = Property({\r\n            parent: uint32(_parent),\r\n            class: _class,\r\n            x: uint8(_x),\r\n            y: uint8(_y),\r\n            z: uint8(_z),\r\n            dx: uint8(_dx),\r\n            dz: uint8(_dz)\r\n        });\r\n        uint256 _tokenId = properties.push(_property) - 1;\r\n\r\n        // It's never going to happen, 4 billion properties is A LOT, but\r\n        // let's just be 100% sure we never let this happen.\r\n        require(_tokenId <= 4294967295);\r\n\r\n        Construct(\r\n            _owner,\r\n            _tokenId,\r\n            _property.class,\r\n            _property.x,\r\n            _property.y,\r\n            _property.z,\r\n            _property.dx,\r\n            _property.dz,\r\n            \"\"\r\n        );\r\n\r\n        // This will assign ownership, and also emit the Transfer event as\r\n        // per ERC721 draft\r\n        _transfer(0, _owner, _tokenId);\r\n\r\n        return _tokenId;\r\n    }\r\n\r\n    /// @dev Computing height of a building with respect to city progression.\r\n    function _computeHeight(\r\n      uint256 _x,\r\n      uint256 _z,\r\n      uint256 _height\r\n    ) internal view returns (uint256) {\r\n        uint256 x = _x < 50 ? 50 - _x : _x - 50;\r\n        uint256 z = _z < 50 ? 50 - _z : _z - 50;\r\n        uint256 distance = x > z ? x : z;\r\n        if (distance > progress) {\r\n          return 1;\r\n        }\r\n        uint256 scale = 100 - (distance * 100) / progress ;\r\n        uint256 height = 2 * progress * _height * scale / 10000;\r\n        return height > 0 ? height : 1;\r\n    }\r\n\r\n    /// @dev Convenience function to see if this building has room for a unit.\r\n    function canCreateUnit(uint256 _buildingId)\r\n        public\r\n        view\r\n        returns(bool)\r\n    {\r\n      Property storage _property = properties[_buildingId];\r\n      if (_property.class == PropertyClass.BUILDING &&\r\n            (buildingIsPublic[_buildingId] ||\r\n              propertyIndexToOwner[_buildingId] == msg.sender)\r\n      ) {\r\n        uint256 totalVolume = _property.dx * _property.dz *\r\n          (_computeHeight(_property.x, _property.z, _property.y) - 1);\r\n        uint256 totalUnits = buildingToUnitCount[_buildingId];\r\n        return totalUnits < totalVolume;\r\n      }\r\n      return false;\r\n    }\r\n\r\n    /// @dev This internal function skips all validation checks. Ensure that\r\n    //   canCreateUnit() is required before calling this method.\r\n    function _createUnitHelper(uint256 _buildingId, address _owner)\r\n        internal\r\n        returns(uint256)\r\n    {\r\n        // Grab a reference to the property in storage.\r\n        Property storage _property = properties[_buildingId];\r\n        uint256 totalArea = _property.dx * _property.dz;\r\n        uint256 index = buildingToUnitCount[_buildingId];\r\n\r\n        // Calculate next location.\r\n        uint256 y = index / totalArea + 1;\r\n        uint256 intermediate = index % totalArea;\r\n        uint256 z = intermediate / _property.dx;\r\n        uint256 x = intermediate % _property.dx;\r\n\r\n        uint256 unitId = _createUnit(\r\n          _buildingId,\r\n          x + _property.x,\r\n          y,\r\n          z + _property.z,\r\n          _owner\r\n        );\r\n\r\n        buildingToUnitCount[_buildingId]++;\r\n        buildingToUnits[_buildingId].push(unitId);\r\n\r\n        // Return the new unit's ID.\r\n        return unitId;\r\n    }\r\n\r\n    /// @dev Update allows for setting a building privacy.\r\n    function updateBuildingPrivacy(uint _tokenId, bool _public) public {\r\n        require(propertyIndexToOwner[_tokenId] == msg.sender);\r\n        buildingIsPublic[_tokenId] = _public;\r\n    }\r\n\r\n    /// @dev Update allows for setting the data associated to a property.\r\n    function updatePropertyData(uint _tokenId, string _data) public {\r\n        require(updateEnabled);\r\n        address _owner = propertyIndexToOwner[_tokenId];\r\n        require(msg.sender == _owner);\r\n        propertyIndexToData[_tokenId] = _data;\r\n        Property memory _property = properties[_tokenId];\r\n        Construct(\r\n            _owner,\r\n            _tokenId,\r\n            _property.class,\r\n            _property.x,\r\n            _property.y,\r\n            _property.z,\r\n            _property.dx,\r\n            _property.dz,\r\n            _data\r\n        );\r\n    }\r\n}\r\n\r\n// File: contracts-origin/ERC721Draft.sol\r\n\r\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\r\n/// @author Dieter Shirley <[email\u00a0protected]> (https://github.com/dete)\r\ncontract ERC721 {\r\n    function implementsERC721() public pure returns (bool);\r\n    function totalSupply() public view returns (uint256 total);\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function ownerOf(uint256 _tokenId) public view returns (address owner);\r\n    function approve(address _to, uint256 _tokenId) public;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n    function transfer(address _to, uint256 _tokenId) public;\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    // Optional\r\n    // function name() public view returns (string name);\r\n    // function symbol() public view returns (string symbol);\r\n    // function tokensOfOwner(address _owner) external view returns (uint256[] tokenIds);\r\n    // function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);\r\n}\r\n\r\n// File: contracts-origin/AetherOwnership.sol\r\n\r\n/// @title The facet of the Aether core contract that manages ownership, ERC-721 (draft) compliant.\r\n/// @dev Ref: https://github.com/ethereum/EIPs/issues/721\r\n///  See the PropertyCore contract documentation to understand how the various contract facets are arranged.\r\ncontract AetherOwnership is AetherBase, ERC721 {\r\n\r\n    /// @notice Name and symbol of the non fungible token, as defined in ERC721.\r\n    string public name = \"Aether\";\r\n    string public symbol = \"AETH\";\r\n\r\n    function implementsERC721() public pure returns (bool)\r\n    {\r\n        return true;\r\n    }\r\n\r\n    // Internal utility functions: These functions all assume that their input arguments\r\n    // are valid. We leave it to public methods to sanitize their inputs and follow\r\n    // the required logic.\r\n\r\n    /// @dev Checks if a given address is the current owner of a particular Property.\r\n    /// @param _claimant the address we are validating against.\r\n    /// @param _tokenId property id, only valid when > 0\r\n    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n        return propertyIndexToOwner[_tokenId] == _claimant;\r\n    }\r\n\r\n    /// @dev Checks if a given address currently has transferApproval for a particular Property.\r\n    /// @param _claimant the address we are confirming property is approved for.\r\n    /// @param _tokenId property id, only valid when > 0\r\n    function _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n        return propertyIndexToApproved[_tokenId] == _claimant;\r\n    }\r\n\r\n    /// @dev Marks an address as being approved for transferFrom(), overwriting any previous\r\n    ///  approval. Setting _approved to address(0) clears all transfer approval.\r\n    ///  NOTE: _approve() does NOT send the Approval event. This is intentional because\r\n    ///  _approve() and transferFrom() are used together for putting Properties on auction, and\r\n    ///  there is no value in spamming the log with Approval events in that case.\r\n    function _approve(uint256 _tokenId, address _approved) internal {\r\n        propertyIndexToApproved[_tokenId] = _approved;\r\n    }\r\n\r\n    /// @dev Transfers a property owned by this contract to the specified address.\r\n    ///  Used to rescue lost properties. (There is no \"proper\" flow where this contract\r\n    ///  should be the owner of any Property. This function exists for us to reassign\r\n    ///  the ownership of Properties that users may have accidentally sent to our address.)\r\n    /// @param _propertyId - ID of property\r\n    /// @param _recipient - Address to send the property to\r\n    function rescueLostProperty(uint256 _propertyId, address _recipient) public onlyCOO whenNotPaused {\r\n        require(_owns(this, _propertyId));\r\n        _transfer(this, _recipient, _propertyId);\r\n    }\r\n\r\n    /// @notice Returns the number of Properties owned by a specific address.\r\n    /// @param _owner The owner address to check.\r\n    /// @dev Required for ERC-721 compliance\r\n    function balanceOf(address _owner) public view returns (uint256 count) {\r\n        return ownershipTokenCount[_owner];\r\n    }\r\n\r\n    /// @notice Transfers a Property to another address. If transferring to a smart\r\n    ///  contract be VERY CAREFUL to ensure that it is aware of ERC-721 (or\r\n    ///  Laputa specifically) or your Property may be lost forever. Seriously.\r\n    /// @param _to The address of the recipient, can be a user or contract.\r\n    /// @param _tokenId The ID of the Property to transfer.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function transfer(\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n        public\r\n        whenNotPaused\r\n    {\r\n        // Safety check to prevent against an unexpected 0x0 default.\r\n        require(_to != address(0));\r\n        // You can only send your own property.\r\n        require(_owns(msg.sender, _tokenId));\r\n\r\n        // Reassign ownership, clear pending approvals, emit Transfer event.\r\n        _transfer(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    /// @notice Grant another address the right to transfer a specific Property via\r\n    ///  transferFrom(). This is the preferred flow for transfering NFTs to contracts.\r\n    /// @param _to The address to be granted transfer approval. Pass address(0) to\r\n    ///  clear all approvals.\r\n    /// @param _tokenId The ID of the Property that can be transferred if this call succeeds.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function approve(\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n        public\r\n        whenNotPaused\r\n    {\r\n        // Only an owner can grant transfer approval.\r\n        require(_owns(msg.sender, _tokenId));\r\n\r\n        // Register the approval (replacing any previous approval).\r\n        _approve(_tokenId, _to);\r\n\r\n        // Emit approval event.\r\n        Approval(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    /// @notice Transfer a Property owned by another address, for which the calling address\r\n    ///  has previously been granted transfer approval by the owner.\r\n    /// @param _from The address that owns the Property to be transfered.\r\n    /// @param _to The address that should take ownership of the Property. Can be any address,\r\n    ///  including the caller.\r\n    /// @param _tokenId The ID of the Property to be transferred.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n        public\r\n        whenNotPaused\r\n    {\r\n        // Check for approval and valid ownership\r\n        require(_approvedFor(msg.sender, _tokenId));\r\n        require(_owns(_from, _tokenId));\r\n\r\n        // Reassign ownership (also clears pending approvals and emits Transfer event).\r\n        _transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    /// @notice Returns the total number of Properties currently in existence.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function totalSupply() public view returns (uint) {\r\n        return properties.length;\r\n    }\r\n\r\n    function totalDistrictSupply() public view returns(uint count) {\r\n        return districts.length;\r\n    }\r\n\r\n    /// @notice Returns the address currently assigned ownership of a given Property.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function ownerOf(uint256 _tokenId)\r\n        public\r\n        view\r\n        returns (address owner)\r\n    {\r\n        owner = propertyIndexToOwner[_tokenId];\r\n\r\n        require(owner != address(0));\r\n    }\r\n\r\n\r\n    /// @notice Returns a list of all Property IDs assigned to an address.\r\n    /// @param _owner The owner whose Properties we are interested in.\r\n    /// @dev This method MUST NEVER be called by smart contract code. First, it's fairly\r\n    ///  expensive (it walks the entire Kitty array looking for cats belonging to owner),\r\n    ///  but it also returns a dynamic array, which is only supported for web3 calls, and\r\n    ///  not contract-to-contract calls.\r\n    function tokensOfOwner(address _owner) external view returns(uint256[] ownerTokens) {\r\n        uint256 tokenCount = balanceOf(_owner);\r\n\r\n        if (tokenCount == 0) {\r\n            // Return an empty array\r\n            return new uint256[](0);\r\n        } else {\r\n            uint256[] memory result = new uint256[](tokenCount);\r\n            uint256 totalProperties = totalSupply();\r\n            uint256 resultIndex = 0;\r\n\r\n            // We count on the fact that all properties have IDs starting at 1 and increasing\r\n            // sequentially up to the totalProperties count.\r\n            uint256 tokenId;\r\n\r\n            for (tokenId = 1; tokenId <= totalProperties; tokenId++) {\r\n                if (propertyIndexToOwner[tokenId] == _owner) {\r\n                    result[resultIndex] = tokenId;\r\n                    resultIndex++;\r\n                }\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts-origin/Auction/ClockAuctionBase.sol\r\n\r\n/// @title Auction Core\r\n/// @dev Contains models, variables, and internal methods for the auction.\r\ncontract ClockAuctionBase {\r\n\r\n    // Represents an auction on an NFT\r\n    struct Auction {\r\n        // Current owner of NFT\r\n        address seller;\r\n        // Price (in wei) at beginning of auction\r\n        uint128 startingPrice;\r\n        // Price (in wei) at end of auction\r\n        uint128 endingPrice;\r\n        // Duration (in seconds) of auction\r\n        uint64 duration;\r\n        // Time when auction started\r\n        // NOTE: 0 if this auction has been concluded\r\n        uint64 startedAt;\r\n    }\r\n\r\n    // Reference to contract tracking NFT ownership\r\n    ERC721 public nonFungibleContract;\r\n\r\n    // Cut owner takes on each auction, measured in basis points (1/100 of a percent).\r\n    // Values 0-10,000 map to 0%-100%\r\n    uint256 public ownerCut;\r\n\r\n    // Map from token ID to their corresponding auction.\r\n    mapping (uint256 => Auction) tokenIdToAuction;\r\n\r\n    event AuctionCreated(uint256 tokenId, uint256 startingPrice, uint256 endingPrice, uint256 duration);\r\n    event AuctionSuccessful(uint256 tokenId, uint256 totalPrice, address winner);\r\n    event AuctionCancelled(uint256 tokenId);\r\n\r\n    /// @dev DON'T give me your money.\r\n    function() external {}\r\n\r\n    // Modifiers to check that inputs can be safely stored with a certain\r\n    // number of bits. We use constants and multiple modifiers to save gas.\r\n    modifier canBeStoredWith64Bits(uint256 _value) {\r\n        require(_value <= 18446744073709551615);\r\n        _;\r\n    }\r\n\r\n    modifier canBeStoredWith128Bits(uint256 _value) {\r\n        require(_value < 340282366920938463463374607431768211455);\r\n        _;\r\n    }\r\n\r\n    /// @dev Returns true if the claimant owns the token.\r\n    /// @param _claimant - Address claiming to own the token.\r\n    /// @param _tokenId - ID of token whose ownership to verify.\r\n    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n        return (nonFungibleContract.ownerOf(_tokenId) == _claimant);\r\n    }\r\n\r\n    /// @dev Escrows the NFT, assigning ownership to this contract.\r\n    /// Throws if the escrow fails.\r\n    /// @param _owner - Current owner address of token to escrow.\r\n    /// @param _tokenId - ID of token whose approval to verify.\r\n    function _escrow(address _owner, uint256 _tokenId) internal {\r\n        // it will throw if transfer fails\r\n        nonFungibleContract.transferFrom(_owner, this, _tokenId);\r\n    }\r\n\r\n    /// @dev Transfers an NFT owned by this contract to another address.\r\n    /// Returns true if the transfer succeeds.\r\n    /// @param _receiver - Address to transfer NFT to.\r\n    /// @param _tokenId - ID of token to transfer.\r\n    function _transfer(address _receiver, uint256 _tokenId) internal {\r\n        // it will throw if transfer fails\r\n        nonFungibleContract.transfer(_receiver, _tokenId);\r\n    }\r\n\r\n    /// @dev Adds an auction to the list of open auctions. Also fires the\r\n    ///  AuctionCreated event.\r\n    /// @param _tokenId The ID of the token to be put on auction.\r\n    /// @param _auction Auction to add.\r\n    function _addAuction(uint256 _tokenId, Auction _auction) internal {\r\n        // Require that all auctions have a duration of\r\n        // at least one minute. (Keeps our math from getting hairy!)\r\n        require(_auction.duration >= 1 minutes);\r\n\r\n        tokenIdToAuction[_tokenId] = _auction;\r\n\r\n        AuctionCreated(\r\n            uint256(_tokenId),\r\n            uint256(_auction.startingPrice),\r\n            uint256(_auction.endingPrice),\r\n            uint256(_auction.duration)\r\n        );\r\n    }\r\n\r\n    /// @dev Cancels an auction unconditionally.\r\n    function _cancelAuction(uint256 _tokenId, address _seller) internal {\r\n        _removeAuction(_tokenId);\r\n        _transfer(_seller, _tokenId);\r\n        AuctionCancelled(_tokenId);\r\n    }\r\n\r\n    /// @dev Computes the price and transfers winnings.\r\n    /// Does NOT transfer ownership of token.\r\n    function _bid(uint256 _tokenId, uint256 _bidAmount)\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        // Get a reference to the auction struct\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n\r\n        // Explicitly check that this auction is currently live.\r\n        // (Because of how Ethereum mappings work, we can't just count\r\n        // on the lookup above failing. An invalid _tokenId will just\r\n        // return an auction object that is all zeros.)\r\n        require(_isOnAuction(auction));\r\n\r\n        // Check that the incoming bid is higher than the current\r\n        // price\r\n        uint256 price = _currentPrice(auction);\r\n        require(_bidAmount >= price);\r\n\r\n        // Grab a reference to the seller before the auction struct\r\n        // gets deleted.\r\n        address seller = auction.seller;\r\n\r\n        // The bid is good! Remove the auction before sending the fees\r\n        // to the sender so we can't have a reentrancy attack.\r\n        _removeAuction(_tokenId);\r\n\r\n        // Transfer proceeds to seller (if there are any!)\r\n        if (price > 0) {\r\n            //  Calculate the auctioneer's cut.\r\n            // (NOTE: _computeCut() is guaranteed to return a\r\n            //  value <= price, so this subtraction can't go negative.)\r\n            uint256 auctioneerCut = _computeCut(price);\r\n            uint256 sellerProceeds = price - auctioneerCut;\r\n\r\n            // NOTE: Doing a transfer() in the middle of a complex\r\n            // method like this is generally discouraged because of\r\n            // reentrancy attacks and DoS attacks if the seller is\r\n            // a contract with an invalid fallback function. We explicitly\r\n            // guard against reentrancy attacks by removing the auction\r\n            // before calling transfer(), and the only thing the seller\r\n            // can DoS is the sale of their own asset! (And if it's an\r\n            // accident, they can call cancelAuction(). )\r\n            seller.transfer(sellerProceeds);\r\n        }\r\n\r\n        // Tell the world!\r\n        AuctionSuccessful(_tokenId, price, msg.sender);\r\n\r\n        return price;\r\n    }\r\n\r\n    /// @dev Removes an auction from the list of open auctions.\r\n    /// @param _tokenId - ID of NFT on auction.\r\n    function _removeAuction(uint256 _tokenId) internal {\r\n        delete tokenIdToAuction[_tokenId];\r\n    }\r\n\r\n    /// @dev Returns true if the NFT is on auction.\r\n    /// @param _auction - Auction to check.\r\n    function _isOnAuction(Auction storage _auction) internal view returns (bool) {\r\n        return (_auction.startedAt > 0);\r\n    }\r\n\r\n    /// @dev Returns current price of an NFT on auction. Broken into two\r\n    ///  functions (this one, that computes the duration from the auction\r\n    ///  structure, and the other that does the price computation) so we\r\n    ///  can easily test that the price computation works correctly.\r\n    function _currentPrice(Auction storage _auction)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 secondsPassed = 0;\r\n\r\n        // A bit of insurance against negative values (or wraparound).\r\n        // Probably not necessary (since Ethereum guarnatees that the\r\n        // now variable doesn't ever go backwards).\r\n        if (now > _auction.startedAt) {\r\n            secondsPassed = now - _auction.startedAt;\r\n        }\r\n\r\n        return _computeCurrentPrice(\r\n            _auction.startingPrice,\r\n            _auction.endingPrice,\r\n            _auction.duration,\r\n            secondsPassed\r\n        );\r\n    }\r\n\r\n    /// @dev Computes the current price of an auction. Factored out\r\n    ///  from _currentPrice so we can run extensive unit tests.\r\n    ///  When testing, make this function public and turn on\r\n    ///  `Current price computation` test suite.\r\n    function _computeCurrentPrice(\r\n        uint256 _startingPrice,\r\n        uint256 _endingPrice,\r\n        uint256 _duration,\r\n        uint256 _secondsPassed\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        // NOTE: We don't use SafeMath (or similar) in this function because\r\n        //  all of our public functions carefully cap the maximum values for\r\n        //  time (at 64-bits) and currency (at 128-bits). _duration is\r\n        //  also known to be non-zero (see the require() statement in\r\n        //  _addAuction())\r\n        if (_secondsPassed >= _duration) {\r\n            // We've reached the end of the dynamic pricing portion\r\n            // of the auction, just return the end price.\r\n            return _endingPrice;\r\n        } else {\r\n            // Starting price can be higher than ending price (and often is!), so\r\n            // this delta can be negative.\r\n            int256 totalPriceChange = int256(_endingPrice) - int256(_startingPrice);\r\n\r\n            // This multiplication can't overflow, _secondsPassed will easily fit within\r\n            // 64-bits, and totalPriceChange will easily fit within 128-bits, their product\r\n            // will always fit within 256-bits.\r\n            int256 currentPriceChange = totalPriceChange * int256(_secondsPassed) / int256(_duration);\r\n\r\n            // currentPriceChange can be negative, but if so, will have a magnitude\r\n            // less that _startingPrice. Thus, this result will always end up positive.\r\n            int256 currentPrice = int256(_startingPrice) + currentPriceChange;\r\n\r\n            return uint256(currentPrice);\r\n        }\r\n    }\r\n\r\n    /// @dev Computes owner's cut of a sale.\r\n    /// @param _price - Sale price of NFT.\r\n    function _computeCut(uint256 _price) internal view returns (uint256) {\r\n        // NOTE: We don't use SafeMath (or similar) in this function because\r\n        //  all of our entry functions carefully cap the maximum values for\r\n        //  currency (at 128-bits), and ownerCut <= 10000 (see the require()\r\n        //  statement in the ClockAuction constructor). The result of this\r\n        //  function is always guaranteed to be <= _price.\r\n        return _price * ownerCut / 10000;\r\n    }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS paused\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS NOT paused\r\n   */\r\n  modifier whenPaused {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused returns (bool) {\r\n    paused = true;\r\n    Pause();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused returns (bool) {\r\n    paused = false;\r\n    Unpause();\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: contracts-origin/Auction/ClockAuction.sol\r\n\r\n/// @title Clock auction for non-fungible tokens.\r\ncontract ClockAuction is Pausable, ClockAuctionBase {\r\n\r\n    /// @dev Constructor creates a reference to the NFT ownership contract\r\n    ///  and verifies the owner cut is in the valid range.\r\n    /// @param _nftAddress - address of a deployed contract implementing\r\n    ///  the Nonfungible Interface.\r\n    /// @param _cut - percent cut the owner takes on each auction, must be\r\n    ///  between 0-10,000.\r\n    function ClockAuction(address _nftAddress, uint256 _cut) public {\r\n        require(_cut <= 10000);\r\n        ownerCut = _cut;\r\n        \r\n        ERC721 candidateContract = ERC721(_nftAddress);\r\n        require(candidateContract.implementsERC721());\r\n        nonFungibleContract = candidateContract;\r\n    }\r\n\r\n    /// @dev Remove all Ether from the contract, which is the owner's cuts\r\n    ///  as well as any Ether sent directly to the contract address.\r\n    ///  Always transfers to the NFT contract, but can be called either by\r\n    ///  the owner or the NFT contract.\r\n    function withdrawBalance() external {\r\n        address nftAddress = address(nonFungibleContract);\r\n\r\n        require(\r\n            msg.sender == owner ||\r\n            msg.sender == nftAddress\r\n        );\r\n        nftAddress.transfer(this.balance);\r\n    }\r\n\r\n    /// @dev Creates and begins a new auction.\r\n    /// @param _tokenId - ID of token to auction, sender must be owner.\r\n    /// @param _startingPrice - Price of item (in wei) at beginning of auction.\r\n    /// @param _endingPrice - Price of item (in wei) at end of auction.\r\n    /// @param _duration - Length of time to move between starting\r\n    ///  price and ending price (in seconds).\r\n    /// @param _seller - Seller, if not the message sender\r\n    function createAuction(\r\n        uint256 _tokenId,\r\n        uint256 _startingPrice,\r\n        uint256 _endingPrice,\r\n        uint256 _duration,\r\n        address _seller\r\n    )\r\n        public\r\n        whenNotPaused\r\n        canBeStoredWith128Bits(_startingPrice)\r\n        canBeStoredWith128Bits(_endingPrice)\r\n        canBeStoredWith64Bits(_duration)\r\n    {\r\n        require(_owns(msg.sender, _tokenId));\r\n        _escrow(msg.sender, _tokenId);\r\n        Auction memory auction = Auction(\r\n            _seller,\r\n            uint128(_startingPrice),\r\n            uint128(_endingPrice),\r\n            uint64(_duration),\r\n            uint64(now)\r\n        );\r\n        _addAuction(_tokenId, auction);\r\n    }\r\n\r\n    /// @dev Bids on an open auction, completing the auction and transferring\r\n    ///  ownership of the NFT if enough Ether is supplied.\r\n    /// @param _tokenId - ID of token to bid on.\r\n    function bid(uint256 _tokenId)\r\n        public\r\n        payable\r\n        whenNotPaused\r\n    {\r\n        // _bid will throw if the bid or funds transfer fails\r\n        _bid(_tokenId, msg.value);\r\n        _transfer(msg.sender, _tokenId);\r\n    }\r\n\r\n    /// @dev Cancels an auction that hasn't been won yet.\r\n    ///  Returns the NFT to original owner.\r\n    /// @notice This is a state-modifying function that can\r\n    ///  be called while the contract is paused.\r\n    /// @param _tokenId - ID of token on auction\r\n    function cancelAuction(uint256 _tokenId)\r\n        public\r\n    {\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        require(_isOnAuction(auction));\r\n        address seller = auction.seller;\r\n        require(msg.sender == seller);\r\n        _cancelAuction(_tokenId, seller);\r\n    }\r\n\r\n    /// @dev Cancels an auction when the contract is paused.\r\n    ///  Only the owner may do this, and NFTs are returned to\r\n    ///  the seller. This should only be used in emergencies.\r\n    /// @param _tokenId - ID of the NFT on auction to cancel.\r\n    function cancelAuctionWhenPaused(uint256 _tokenId)\r\n        whenPaused\r\n        onlyOwner\r\n        public\r\n    {\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        require(_isOnAuction(auction));\r\n        _cancelAuction(_tokenId, auction.seller);\r\n    }\r\n\r\n    /// @dev Returns auction info for an NFT on auction.\r\n    /// @param _tokenId - ID of NFT on auction.\r\n    function getAuction(uint256 _tokenId)\r\n        public\r\n        view\r\n        returns\r\n    (\r\n        address seller,\r\n        uint256 startingPrice,\r\n        uint256 endingPrice,\r\n        uint256 duration,\r\n        uint256 startedAt\r\n    ) {\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        require(_isOnAuction(auction));\r\n        return (\r\n            auction.seller,\r\n            auction.startingPrice,\r\n            auction.endingPrice,\r\n            auction.duration,\r\n            auction.startedAt\r\n        );\r\n    }\r\n\r\n    /// @dev Returns the current price of an auction.\r\n    /// @param _tokenId - ID of the token price we are checking.\r\n    function getCurrentPrice(uint256 _tokenId)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        require(_isOnAuction(auction));\r\n        return _currentPrice(auction);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts-origin/Auction/AetherClockAuction.sol\r\n\r\n/// @title Clock auction modified for sale of property\r\ncontract AetherClockAuction is ClockAuction {\r\n\r\n    // @dev Sanity check that allows us to ensure that we are pointing to the\r\n    //  right auction in our setSaleAuctionAddress() call.\r\n    bool public isAetherClockAuction = true;\r\n\r\n    // Tracks last 5 sale price of gen0 property sales\r\n    uint256 public saleCount;\r\n    uint256[5] public lastSalePrices;\r\n\r\n    // Delegate constructor\r\n    function AetherClockAuction(address _nftAddr, uint256 _cut) public\r\n      ClockAuction(_nftAddr, _cut) {}\r\n\r\n\r\n    /// @dev Creates and begins a new auction.\r\n    /// @param _tokenId - ID of token to auction, sender must be owner.\r\n    /// @param _startingPrice - Price of item (in wei) at beginning of auction.\r\n    /// @param _endingPrice - Price of item (in wei) at end of auction.\r\n    /// @param _duration - Length of auction (in seconds).\r\n    /// @param _seller - Seller, if not the message sender\r\n    function createAuction(\r\n        uint256 _tokenId,\r\n        uint256 _startingPrice,\r\n        uint256 _endingPrice,\r\n        uint256 _duration,\r\n        address _seller\r\n    )\r\n        public\r\n        canBeStoredWith128Bits(_startingPrice)\r\n        canBeStoredWith128Bits(_endingPrice)\r\n        canBeStoredWith64Bits(_duration)\r\n    {\r\n        require(msg.sender == address(nonFungibleContract));\r\n        _escrow(_seller, _tokenId);\r\n        Auction memory auction = Auction(\r\n            _seller,\r\n            uint128(_startingPrice),\r\n            uint128(_endingPrice),\r\n            uint64(_duration),\r\n            uint64(now)\r\n        );\r\n        _addAuction(_tokenId, auction);\r\n    }\r\n\r\n    /// @dev Updates lastSalePrice if seller is the nft contract\r\n    /// Otherwise, works the same as default bid method.\r\n    function bid(uint256 _tokenId)\r\n        public\r\n        payable\r\n    {\r\n        // _bid verifies token ID size\r\n        address seller = tokenIdToAuction[_tokenId].seller;\r\n        uint256 price = _bid(_tokenId, msg.value);\r\n        _transfer(msg.sender, _tokenId);\r\n\r\n        // If not a gen0 auction, exit\r\n        if (seller == address(nonFungibleContract)) {\r\n            // Track gen0 sale prices\r\n            lastSalePrices[saleCount % 5] = price;\r\n            saleCount++;\r\n        }\r\n    }\r\n\r\n    function averageSalePrice() public view returns (uint256) {\r\n        uint256 sum = 0;\r\n        for (uint256 i = 0; i < 5; i++) {\r\n            sum += lastSalePrices[i];\r\n        }\r\n        return sum / 5;\r\n    }\r\n}\r\n\r\n// File: contracts-origin/AetherAuction.sol\r\n\r\n/// @title Handles creating auctions for sale and siring of properties.\r\n///  This wrapper of ReverseAuction exists only so that users can create\r\n///  auctions with only one transaction.\r\ncontract AetherAuction is AetherOwnership{\r\n\r\n    /// @dev The address of the ClockAuction contract that handles sales of Aether. This\r\n    ///  same contract handles both peer-to-peer sales as well as the gen0 sales which are\r\n    ///  initiated every 15 minutes.\r\n    AetherClockAuction public saleAuction;\r\n\r\n    /// @dev Sets the reference to the sale auction.\r\n    /// @param _address - Address of sale contract.\r\n    function setSaleAuctionAddress(address _address) public onlyCEO {\r\n        AetherClockAuction candidateContract = AetherClockAuction(_address);\r\n\r\n        // NOTE: verify that a contract is what we expect\r\n        require(candidateContract.isAetherClockAuction());\r\n\r\n        // Set the new contract address\r\n        saleAuction = candidateContract;\r\n    }\r\n\r\n    /// @dev Put a property up for auction.\r\n    ///  Does some ownership trickery to create auctions in one tx.\r\n    function createSaleAuction(\r\n        uint256 _propertyId,\r\n        uint256 _startingPrice,\r\n        uint256 _endingPrice,\r\n        uint256 _duration\r\n    )\r\n        public\r\n        whenNotPaused\r\n    {\r\n        // Auction contract checks input sizes\r\n        // If property is already on any auction, this will throw\r\n        // because it will be owned by the auction contract.\r\n        require(_owns(msg.sender, _propertyId));\r\n        _approve(_propertyId, saleAuction);\r\n        // Sale auction throws if inputs are invalid and clears\r\n        // transfer and sire approval after escrowing the property.\r\n        saleAuction.createAuction(\r\n            _propertyId,\r\n            _startingPrice,\r\n            _endingPrice,\r\n            _duration,\r\n            msg.sender\r\n        );\r\n    }\r\n\r\n    /// @dev Transfers the balance of the sale auction contract\r\n    /// to the AetherCore contract. We use two-step withdrawal to\r\n    /// prevent two transfer calls in the auction bid function.\r\n    function withdrawAuctionBalances() external onlyCOO {\r\n        saleAuction.withdrawBalance();\r\n    }\r\n}\r\n\r\n// File: contracts-origin/AetherConstruct.sol\r\n\r\n// Auction wrapper functions\r\n\r\n\r\n/// @title all functions related to creating property\r\ncontract AetherConstruct is AetherAuction {\r\n\r\n    uint256 public districtLimit = 16;\r\n    uint256 public startingPrice = 1 ether;\r\n    uint256 public auctionDuration = 1 days;\r\n\r\n    /// @dev Units can be contructed within public and owned buildings.\r\n    function createUnit(uint256 _buildingId)\r\n        public\r\n        payable\r\n        returns(uint256)\r\n    {\r\n        require(canCreateUnit(_buildingId));\r\n        require(msg.value >= unitCreationFee);\r\n        if (msg.value > unitCreationFee)\r\n            msg.sender.transfer(msg.value - unitCreationFee);\r\n        uint256 propertyId = _createUnitHelper(_buildingId, msg.sender);\r\n        return propertyId;\r\n    }\r\n\r\n    /// @dev Creation of unit properties. Only callable by COO\r\n    function createUnitOmni(\r\n      uint32 _buildingId,\r\n      address _owner\r\n    )\r\n      public\r\n      onlyCOO\r\n    {\r\n        if (_owner == address(0)) {\r\n             _owner = cooAddress;\r\n        }\r\n        require(canCreateUnit(_buildingId));\r\n        _createUnitHelper(_buildingId, _owner);\r\n    }\r\n\r\n    /// @dev Creation of building properties. Only callable by COO\r\n    function createBuildingOmni(\r\n      uint32 _districtId,\r\n      uint8 _x,\r\n      uint8 _y,\r\n      uint8 _z,\r\n      uint8 _dx,\r\n      uint8 _dz,\r\n      address _owner,\r\n      bool _open\r\n    )\r\n      public\r\n      onlyCOO\r\n    {\r\n        if (_owner == address(0)) {\r\n             _owner = cooAddress;\r\n        }\r\n        _createBuilding(_districtId, _x, _y, _z, _dx, _dz, _owner, _open);\r\n    }\r\n\r\n    /// @dev Creation of district properties, up to a limit. Only callable by COO\r\n    function createDistrictOmni(\r\n      uint8 _x,\r\n      uint8 _z,\r\n      uint8 _dx,\r\n      uint8 _dz\r\n    )\r\n      public\r\n      onlyCOO\r\n    {\r\n      require(districts.length < districtLimit);\r\n      _createDistrict(_x, _z, _dx, _dz);\r\n    }\r\n\r\n\r\n    /// @dev Creates a new property with the given details and\r\n    ///  creates an auction for it. Only callable by COO.\r\n    function createBuildingAuction(\r\n      uint32 _districtId,\r\n      uint8 _x,\r\n      uint8 _y,\r\n      uint8 _z,\r\n      uint8 _dx,\r\n      uint8 _dz,\r\n      bool _open\r\n    ) public onlyCOO {\r\n        uint256 propertyId = _createBuilding(_districtId, _x, _y, _z, _dx, _dz, address(this), _open);\r\n        _approve(propertyId, saleAuction);\r\n\r\n        saleAuction.createAuction(\r\n            propertyId,\r\n            _computeNextPrice(),\r\n            0,\r\n            auctionDuration,\r\n            address(this)\r\n        );\r\n    }\r\n\r\n    /// @dev Updates the minimum payment required for calling createUnit(). Can only\r\n    ///  be called by the COO address.\r\n    function setUnitCreationFee(uint256 _value) public onlyCOO {\r\n        unitCreationFee = _value;\r\n    }\r\n\r\n    /// @dev Update world progression factor allowing for buildings to grow taller\r\n    //   as the city expands. Only callable by COO.\r\n    function setProgress(uint256 _progress) public onlyCOO {\r\n        require(_progress <= 100);\r\n        require(_progress > progress);\r\n        progress = _progress;\r\n    }\r\n\r\n    /// @dev Set property data updates flag. Only callable by COO.\r\n    function setUpdateState(bool _updateEnabled) public onlyCOO {\r\n        updateEnabled = _updateEnabled;\r\n    }\r\n\r\n    /// @dev Computes the next auction starting price, given the average of the past\r\n    ///  5 prices + 50%.\r\n    function _computeNextPrice() internal view returns (uint256) {\r\n        uint256 avePrice = saleAuction.averageSalePrice();\r\n\r\n        // sanity check to ensure we don't overflow arithmetic (this big number is 2^128-1).\r\n        require(avePrice < 340282366920938463463374607431768211455);\r\n\r\n        uint256 nextPrice = avePrice + (avePrice / 2);\r\n\r\n        // We never auction for less than starting price\r\n        if (nextPrice < startingPrice) {\r\n            nextPrice = startingPrice;\r\n        }\r\n\r\n        return nextPrice;\r\n    }\r\n}\r\n\r\n// File: contracts-origin/AetherCore.sol\r\n\r\n/// @title Aether: A city on the Ethereum blockchain.\r\n/// @author Axiom Zen (https://www.axiomzen.co)\r\ncontract AetherCore is AetherConstruct {\r\n\r\n    // This is the main Aether contract. In order to keep our code seperated into logical sections,\r\n    // we've broken it up in two ways.  The auctions are seperate since their logic is somewhat complex\r\n    // and there's always a risk of subtle bugs. By keeping them in their own contracts, we can upgrade\r\n    // them without disrupting the main contract that tracks property ownership.\r\n    //\r\n    // Secondly, we break the core contract into multiple files using inheritence, one for each major\r\n    // facet of functionality of Aether. This allows us to keep related code bundled together while still\r\n    // avoiding a single giant file with everything in it. The breakdown is as follows:\r\n    //\r\n    //      - AetherBase: This is where we define the most fundamental code shared throughout the core\r\n    //             functionality. This includes our main data storage, constants and data types, plus\r\n    //             internal functions for managing these items.\r\n    //\r\n    //      - AetherAccessControl: This contract manages the various addresses and constraints for operations\r\n    //             that can be executed only by specific roles. Namely CEO, CFO and COO.\r\n    //\r\n    //      - AetherOwnership: This provides the methods required for basic non-fungible token\r\n    //             transactions, following the draft ERC-721 spec (https://github.com/ethereum/EIPs/issues/721).\r\n    //\r\n    //      - AetherAuction: Here we have the public methods for auctioning or bidding on property.\r\n    //             The actual auction functionality is handled in two sibling contracts while auction\r\n    //             creation and bidding is mostly mediated through this facet of the core contract.\r\n    //\r\n    //      - AetherConstruct: This final facet contains the functionality we use for creating new gen0 cats.\r\n\r\n    //             the community is new).\r\n\r\n    // Set in case the core contract is broken and an upgrade is required\r\n    address public newContractAddress;\r\n\r\n    /// @notice Creates the main Aether smart contract instance.\r\n    function AetherCore() public {\r\n        // Starts paused.\r\n        paused = true;\r\n\r\n        // the creator of the contract is the initial CEO\r\n        ceoAddress = msg.sender;\r\n\r\n        // the creator of the contract is also the initial COO\r\n        cooAddress = msg.sender;\r\n    }\r\n\r\n    /// @dev Used to mark the smart contract as upgraded, in case there is a serious\r\n    ///  breaking bug. This method does nothing but keep track of the new contract and\r\n    ///  emit a message indicating that the new address is set. It's up to clients of this\r\n    ///  contract to update to the new contract address in that case. (This contract will\r\n    ///  be paused indefinitely if such an upgrade takes place.)\r\n    /// @param _v2Address new address\r\n    function setNewAddress(address _v2Address) public onlyCEO whenPaused {\r\n        // See README.md for updgrade plan\r\n        newContractAddress = _v2Address;\r\n        ContractUpgrade(_v2Address);\r\n    }\r\n\r\n    /// @notice No tipping!\r\n    /// @dev Reject all Ether from being sent here, unless it's from one of the\r\n    ///  two auction contracts. (Hopefully, we can prevent user accidents.)\r\n    function() external payable {\r\n        require(\r\n            msg.sender == address(saleAuction)\r\n        );\r\n    }\r\n\r\n    /// @notice Returns all the relevant information about a specific property.\r\n    /// @param _id The ID of the property of interest.\r\n    function getProperty(uint256 _id)\r\n        public\r\n        view\r\n        returns (\r\n        uint32 parent,\r\n        uint8 class,\r\n        uint8 x,\r\n        uint8 y,\r\n        uint8 z,\r\n        uint8 dx,\r\n        uint8 dz,\r\n        uint8 height\r\n    ) {\r\n        Property storage property = properties[_id];\r\n        parent = uint32(property.parent);\r\n        class = uint8(property.class);\r\n\r\n        height = uint8(property.y);\r\n        if (property.class == PropertyClass.BUILDING) {\r\n          y = uint8(_computeHeight(property.x, property.z, property.y));\r\n        } else {\r\n          y = uint8(property.y);\r\n        }\r\n\r\n        x = uint8(property.x);\r\n        z = uint8(property.z);\r\n        dx = uint8(property.dx);\r\n        dz = uint8(property.dz);\r\n    }\r\n\r\n    /// @dev Override unpause so it requires all external contract addresses\r\n    ///  to be set before contract can be unpaused. Also, we can't have\r\n    ///  newContractAddress set either, because then the contract was upgraded.\r\n    function unpause() public onlyCEO whenPaused {\r\n        require(saleAuction != address(0));\r\n        require(newContractAddress == address(0));\r\n        // Actually unpause the contract.\r\n        super.unpause();\r\n    }\r\n}", "OptimizationUsed": "1", "ContractName": "AetherCore", "ByteCode": "0x6060604052600436106102795763ffffffff60e060020a6000350416630519ce79811461029757806306fdde03146102c6578063095ea7b3146103505780630a0f8168146103725780630cbf54c8146103855780631051db34146103aa57806313b63f60146103d157806318160ddd146103ec578063229b9bc5146103ff57806323b872dd1461041557806327b00b3e1461043d57806327d7874c14610455578063297882d5146104745780632b7b3a6c1461049f5780632ba73c15146104de57806332665ffb146104fd5780633d7d3f5a146105695780633f4ba83a146105885780634abd8f651461059b5780634e0a3379146105ae57806350efc7c0146105cd578063574edd28146105e3578063577bd336146106395780635852f5c11461064c5780635c975abb146106655780635fd8c710146106785780636352211e1461068b5780636773b75f146106a15780636af04a57146106b75780636d80244d146106ca5780636fbde40d146106f257806370a082311461071157806371587988146107305780637774e9501461074f5780638456cb591461075a5780638462151c1461076d5780638af2ce26146107df57806391876e57146107f25780639304ddc81461080557806394c33d901461081b57806395d89b4114610834578063a0af012714610847578063a9059cbb14610863578063abefe7ac14610885578063b047fb501461089b578063b6b9d57e146108ae578063ba1cd983146108c4578063bce70868146108d7578063c02b04d8146108ed578063d1f952041461090f578063d342275e14610925578063d6fbf2021461093b578063e19ab7671461094e578063e2d1da3114610961578063e6cbe351146109ac575b619c535433600160a060020a0390811691161461029557600080fd5b005b34156102a257600080fd5b6102aa6109bf565b604051600160a060020a03909116815260200160405180910390f35b34156102d157600080fd5b6102d96109ce565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156103155780820151838201526020016102fd565b50505050905090810190601f1680156103425780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561035b57600080fd5b610295600160a060020a0360043516602435610a6d565b341561037d57600080fd5b6102aa610ae8565b341561039057600080fd5b610398610af7565b60405190815260200160405180910390f35b34156103b557600080fd5b6103bd610afe565b604051901515815260200160405180910390f35b34156103dc57600080fd5b6102956004356024351515610b04565b34156103f757600080fd5b610398610b4d565b341561040a57600080fd5b610398600435610b54565b341561042057600080fd5b610295600160a060020a0360043581169060243516604435610b67565b341561044857600080fd5b6102956004351515610bb8565b341561046057600080fd5b610295600160a060020a0360043516610be7565b341561047f57600080fd5b61029560ff60043581169060243581169060443581169060643516610c39565b34156104aa57600080fd5b61029563ffffffff6004351660ff60243581169060443581169060643581169060843581169060a4351660c4351515610c85565b34156104e957600080fd5b610295600160a060020a0360043516610d78565b341561050857600080fd5b610513600435610dca565b60405163ffffffff909816885260ff968716602089015294861660408089019190915293861660608801529185166080870152841660a0860152831660c0850152911660e0830152610100909101905180910390f35b341561057457600080fd5b610295600435602435604435606435610ee2565b341561059357600080fd5b610295610fac565b34156105a657600080fd5b6103bd611018565b34156105b957600080fd5b610295600160a060020a0360043516611022565b34156105d857600080fd5b610398600435611074565b34156105ee57600080fd5b610295600480359060446024803590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061108795505050505050565b341561064457600080fd5b6103986112c9565b341561065757600080fd5b6103986004356024356112d0565b341561067057600080fd5b6103bd6112ff565b341561068357600080fd5b61029561130f565b341561069657600080fd5b6102aa600435611363565b34156106ac57600080fd5b6102aa60043561138d565b34156106c257600080fd5b6102aa6113a9565b34156106d557600080fd5b61029563ffffffff60043516600160a060020a03602435166113b9565b34156106fd57600080fd5b610295600160a060020a036004351661141c565b341561071c57600080fd5b610398600160a060020a03600435166114bd565b341561073b57600080fd5b610295600160a060020a03600435166114d9565b610398600435611568565b341561076557600080fd5b6102956115e3565b341561077857600080fd5b61078c600160a060020a036004351661166f565b60405160208082528190810183818151815260200191508051906020019060200280838360005b838110156107cb5780820151838201526020016107b3565b505050509050019250505060405180910390f35b34156107ea57600080fd5b610398611751565b34156107fd57600080fd5b610295611758565b341561081057600080fd5b6102956004356117c0565b341561082657600080fd5b6103986004356024356117e1565b341561083f57600080fd5b6102d96117fd565b341561085257600080fd5b6103bd600435602435604435611869565b341561086e57600080fd5b610295600160a060020a03600435166024356118b3565b341561089057600080fd5b6103bd600435611903565b34156108a657600080fd5b6102aa611a16565b34156108b957600080fd5b6102d9600435611a25565b34156108cf57600080fd5b610398611aa3565b34156108e257600080fd5b6103bd600435611aaa565b34156108f857600080fd5b610295600435600160a060020a0360243516611ac0565b341561091a57600080fd5b6102aa600435611b12565b341561093057600080fd5b610295600435611b2e565b341561094657600080fd5b610398611b6c565b341561095957600080fd5b610398611b73565b341561096c57600080fd5b61029563ffffffff6004351660ff60243581169060443581169060643581169060843581169060a43516600160a060020a0360c4351660e4351515611b7a565b34156109b757600080fd5b6102aa611be4565b600154600160a060020a031681565b619c518054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a655780601f10610a3a57610100808354040283529160200191610a65565b820191906000526020600020905b815481529060010190602001808311610a4857829003601f168201915b505050505081565b60025460a060020a900460ff1615610a8457600080fd5b610a8e3382611bf4565b1515610a9957600080fd5b610aa38183611c15565b8082600160a060020a031633600160a060020a03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600054600160a060020a031681565b619c565481565b60015b90565b6000828152619c48602052604090205433600160a060020a03908116911614610b2c57600080fd5b6000918252619c4f6020526040909120805460ff1916911515919091179055565b619c435490565b619c4d6020526000908152604090205481565b60025460a060020a900460ff1615610b7e57600080fd5b610b883382611c44565b1515610b9357600080fd5b610b9d8382611bf4565b1515610ba857600080fd5b610bb3838383611c65565b505050565b60025433600160a060020a03908116911614610bd357600080fd5b619c47805460ff1916911515919091179055565b60005433600160a060020a03908116911614610c0257600080fd5b600160a060020a0381161515610c1757600080fd5b60008054600160a060020a031916600160a060020a0392909216919091179055565b60025433600160a060020a03908116911614610c5457600080fd5b619c5454619c445410610c6657600080fd5b610c7e8460ff168460ff168460ff168460ff16611d30565b5050505050565b60025460009033600160a060020a03908116911614610ca357600080fd5b610cc88863ffffffff168860ff168860ff168860ff168860ff168860ff163089611dc5565b619c5354909150610ce3908290600160a060020a0316611c15565b619c5354600160a060020a03166327ebe40a82610cfe611f4f565b6000619c56543060405160e060020a63ffffffff88160281526004810195909552602485019390935260448401919091526064830152600160a060020a0316608482015260a401600060405180830381600087803b1515610d5e57600080fd5b5af11515610d6b57600080fd5b5050505050505050505050565b60005433600160a060020a03908116911614610d9357600080fd5b600160a060020a0381161515610da857600080fd5b60028054600160a060020a031916600160a060020a0392909216919091179055565b6000806000806000806000806000619c438a815481101515610de857fe5b6000918252602090912001805463ffffffff81169a50909150640100000000900460ff166002811115610e1757fe5b815490985060ff66010000000000008204811693506001916401000000009004166002811115610e4357fe5b1415610e83578054610e7c9060ff6501000000000082048116916701000000000000008104821691660100000000000090910416611fe9565b9550610e95565b80546601000000000000900460ff1695505b54979996985060ff65010000000000890481169895976701000000000000008704821697506801000000000000000087048216966901000000000000000000900490911694509092509050565b60025460a060020a900460ff1615610ef957600080fd5b610f033385611bf4565b1515610f0e57600080fd5b619c5354610f26908590600160a060020a0316611c15565b619c5354600160a060020a03166327ebe40a858585853360405160e060020a63ffffffff88160281526004810195909552602485019390935260448401919091526064830152600160a060020a0316608482015260a401600060405180830381600087803b1515610f9657600080fd5b5af11515610fa357600080fd5b50505050505050565b60005433600160a060020a03908116911614610fc757600080fd5b60025460a060020a900460ff161515610fdf57600080fd5b619c5354600160a060020a03161515610ff757600080fd5b619c5754600160a060020a03161561100e57600080fd5b611016612098565b565b619c475460ff1681565b60005433600160a060020a0390811691161461103d57600080fd5b600160a060020a038116151561105257600080fd5b60018054600160a060020a031916600160a060020a0392909216919091179055565b619c4b6020526000908152604090205481565b60006110916125fe565b619c475460ff1615156110a357600080fd5b6000848152619c486020526040902054600160a060020a039081169250331682146110cd57600080fd5b6000848152619c49602052604090208380516110ed92916020019061263c565b50619c438054859081106110fd57fe5b906000526020600020900160e0604051908101604052815463ffffffff811682529091906020830190640100000000900460ff16600281111561113c57fe5b600281111561114757fe5b8152905460ff650100000000008204811660208085019190915266010000000000008304821660408501526701000000000000008304821660608501526801000000000000000083048216608085015269010000000000000000009092041660a090920191909152909150600160a060020a038316907f1307f003a9081d2b93a801187c7cd9b1a72eaf73bf918c5bb4db482f346c44a29086908401518460400151856060015186608001518760a001518860c001518b6040518089815260200188600281111561121457fe5b60ff90811682528881166020830152878116604083015286811660608301528581166080830152841660a082015260e0828203810160c08301908152910183818151815260200191508051906020019080838360005b8381101561128257808201518382015260200161126a565b50505050905090810190601f1680156112af5780820380516001836020036101000a031916815260200191505b50995050505050505050505060405180910390a250505050565b619c455481565b619c4e602052816000526040600020818154811015156112ec57fe5b6000918252602090912001549150829050565b60025460a060020a900460ff1681565b60015433600160a060020a0390811691161461132a57600080fd5b600154600160a060020a039081169030163180156108fc0290604051600060405180830381858888f19350505050151561101657600080fd5b6000818152619c486020526040902054600160a060020a031680151561138857600080fd5b919050565b619c5060205260009081526040902054600160a060020a031681565b619c5754600160a060020a031681565b60025433600160a060020a039081169116146113d457600080fd5b600160a060020a03811615156113f25750600254600160a060020a03165b6114018263ffffffff16611903565b151561140c57600080fd5b610bb38263ffffffff16826120eb565b6000805433600160a060020a0390811691161461143857600080fd5b5080600160a060020a038116631aa58bd36040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561147757600080fd5b5af1151561148457600080fd5b50505060405180519050151561149957600080fd5b619c538054600160a060020a031916600160a060020a039290921691909117905550565b600160a060020a03166000908152619c4a602052604090205490565b60005433600160a060020a039081169116146114f457600080fd5b60025460a060020a900460ff16151561150c57600080fd5b619c578054600160a060020a031916600160a060020a0383161790557f450db8da6efbe9c22f2347f7c2021231df1fc58d3ae9a2fa75d39fa44619930581604051600160a060020a03909116815260200160405180910390a150565b60008061157483611903565b151561157f57600080fd5b619c465434101561158f57600080fd5b619c46543411156115d25733600160a060020a03166108fc619c465434039081150290604051600060405180830381858888f1935050505015156115d257600080fd5b6115dc83336120eb565b9392505050565b60025433600160a060020a039081169116148061160e575060005433600160a060020a039081169116145b80611627575060015433600160a060020a039081169116145b151561163257600080fd5b60025460a060020a900460ff161561164957600080fd5b6002805474ff0000000000000000000000000000000000000000191660a060020a179055565b6116776126ba565b60006116816126ba565b600080600061168f876114bd565b94508415156116bf5760006040518059106116a75750595b90808252806020026020018201604052509550611747565b846040518059106116cd5750595b908082528060200260200182016040525093506116e8610b4d565b925060009150600190505b828111611743576000818152619c486020526040902054600160a060020a038881169116141561173b578084838151811061172a57fe5b602090810290910101526001909101905b6001016116f3565b8395505b5050505050919050565b619c545481565b60025433600160a060020a0390811691161461177357600080fd5b619c5354600160a060020a0316635fd8c7106040518163ffffffff1660e060020a028152600401600060405180830381600087803b15156117b357600080fd5b5af11515610bb357600080fd5b60025433600160a060020a039081169116146117db57600080fd5b619c4655565b619c4c602052816000526040600020818154811015156112ec57fe5b619c528054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a655780601f10610a3a57610100808354040283529160200191610a65565b6003836064811061187657fe5b6101900201826064811061188657fe5b60040201816064811061189557fe5b602081049091015460ff601f9092166101000a900416925083915050565b60025460a060020a900460ff16156118ca57600080fd5b600160a060020a03821615156118df57600080fd5b6118e93382611bf4565b15156118f457600080fd5b6118ff338383611c65565b5050565b600080600080619c438581548110151561191957fe5b6000918252602090912001925060018354640100000000900460ff16600281111561194057fe5b14801561198157506000858152619c4f602052604090205460ff168061198157506000858152619c48602052604090205433600160a060020a039081169116145b15611a095782546001906119bc9060ff6501000000000082048116916701000000000000008104821691660100000000000090910416611fe9565b84546000888152619c4d6020526040902054929091036901000000000000000000820460ff9081166801000000000000000090930481169290920290911602808210955092509050611a0e565b600093505b505050919050565b600254600160a060020a031681565b619c496020528060005260406000206000915090508054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a655780601f10610a3a57610100808354040283529160200191610a65565b619c465481565b619c4f6020526000908152604090205460ff1681565b60025433600160a060020a03908116911614611adb57600080fd5b60025460a060020a900460ff1615611af257600080fd5b611afc3083611bf4565b1515611b0757600080fd5b6118ff308284611c65565b619c4860205260009081526040902054600160a060020a031681565b60025433600160a060020a03908116911614611b4957600080fd5b6064811115611b5757600080fd5b619c45548111611b6657600080fd5b619c4555565b619c555481565b619c445490565b60025433600160a060020a03908116911614611b9557600080fd5b600160a060020a0382161515611bb457600254600160a060020a031691505b611bd98863ffffffff168860ff168860ff168860ff168860ff168860ff168888611dc5565b505050505050505050565b619c5354600160a060020a031681565b6000908152619c486020526040902054600160a060020a0391821691161490565b6000918252619c5060205260409091208054600160a060020a031916600160a060020a03909216919091179055565b6000908152619c506020526040902054600160a060020a0391821691161490565b600160a060020a038083166000818152619c4a6020908152604080832080546001019055858352619c4890915290208054600160a060020a0319169091179055831615611cea57600160a060020a0383166000908152619c4a602090815260408083208054600019019055838352619c5090915290208054600160a060020a03191690555b8082600160a060020a031684600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b60008060ff86168614611d4257600080fd5b60ff85168514611d5157600080fd5b60ff84168414611d6057600080fd5b60ff83168314611d6f57600080fd5b619c4454600254611d969190600090899082908a908a908a90600160a060020a0316612239565b9050619c448054806001018281611dad91906126cc565b50600091825260209091200181905595945050505050565b600080808060ff8b168b14611dd957600080fd5b60ff8a168a14611de857600080fd5b60ff89168914611df757600080fd5b60ff88168814611e0657600080fd5b60ff87168714611e1557600080fd5b600092505b87831015611eca57600091505b86821015611ebf5760038b840160648110611e3e57fe5b6101900201828a0160648110611e5057fe5b602081049091015460ff601f9092166101000a90041615611e7057600080fd5b600160038c850160648110611e8157fe5b6101900201838b0160648110611e9357fe5b602091828204019190066101000a81548160ff0219169083151502179055508180600101925050611e27565b600190920191611e1a565b611edb8c60018d8d8d8d8d8d612239565b60008d8152619c4b6020908152604080832080546001908101909155619c4c909252909120805492935091908101611f1383826126cc565b506000918252602080832091909101839055828252619c4f905260409020805486151560ff199091161790559250505098975050505050505050565b619c535460009081908190600160a060020a031663010342f46040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515611f9657600080fd5b5af11515611fa357600080fd5b50505060405180519250506fffffffffffffffffffffffffffffffff8210611fca57600080fd5b6002820482019050619c5554811015611fe35750619c55545b92915050565b600080600080600080603289106120035760328903612008565b886032035b94506032881061201b5760328803612020565b876032035b935083851161202f5783612031565b845b9250619c4554831115612047576001955061208c565b619c45548360640281151561205857fe5b0460640391506127108288619c4554600202020281151561207557fe5b04905060008111612087576001612089565b805b95505b50505050509392505050565b60005433600160a060020a039081169116146120b357600080fd5b60025460a060020a900460ff1615156120cb57600080fd5b6002805474ff000000000000000000000000000000000000000019169055565b6000806000806000806000806000619c438b81548110151561210957fe5b6000918252602080832090910180548e8452619c4d90925260409092205491995068010000000000000000810460ff90811669010000000000000000009092048116919091021697509550868681151561215f57fe5b046001019450868681151561217057fe5b8954919006945068010000000000000000900460ff168481151561219057fe5b8954919004935068010000000000000000900460ff16848115156121b057fe5b895491900692506121e4908c9060ff650100000000008204811686019189916701000000000000009091041687018e61251a565b60008c8152619c4d6020908152604080832080546001908101909155619c4e90925290912080549293509190810161221c83826126cc565b5060009182526020909120018190559a9950505050505050505050565b60006122436125fe565b600060ff8916891461225457600080fd5b60ff8816881461226357600080fd5b60ff8716871461227257600080fd5b60ff8616861461228157600080fd5b60ff8516851461229057600080fd5b63ffffffff8b168b146122a257600080fd5b60038a60028111156122b057fe5b11156122bb57600080fd5b60e0604051908101604052808c63ffffffff1681526020018b60028111156122df57fe5b81526020018a60ff1681526020018960ff1681526020018860ff1681526020018760ff1681526020018660ff1681525091506001619c43805480600101828161232891906126f0565b600092835260209092208591018151815463ffffffff191663ffffffff9190911617815560208201518154829064ff00000000191664010000000083600281111561236f57fe5b02179055506040820151815460ff91909116650100000000000265ff0000000000199091161781556060820151815460ff9190911666010000000000000266ff000000000000199091161781556080820151815460ff919091166701000000000000000267ff000000000000001990911617815560a0820151815460ff91909116680100000000000000000268ff00000000000000001990911617815560c0820151815460ff9190911669010000000000000000000269ff000000000000000000199091161790555003905063ffffffff81111561244c57600080fd5b83600160a060020a03167f1307f003a9081d2b93a801187c7cd9b1a72eaf73bf918c5bb4db482f346c44a28284602001518560400151866060015187608001518860a001518960c00151604051808881526020018760028111156124ac57fe5b60ff908116825296871660208201529486166040808701919091529386166060860152918516608085015290931660a083015291810360e090810160c083015260009082015261012001925090505180910390a261250c60008583611c65565b9a9950505050505050505050565b600060ff8516851461252b57600080fd5b60ff8416841461253a57600080fd5b60ff8316831461254957600080fd5b6003856064811061255657fe5b6101900201846064811061256657fe5b60040201836064811061257557fe5b602081049091015460ff601f9092166101000a9004161561259557600080fd5b6001600386606481106125a457fe5b610190020185606481106125b457fe5b6004020184606481106125c357fe5b602091828204019190066101000a81548160ff0219169083151502179055506125f486600287878760008089612239565b9695505050505050565b60e060405190810160405260008082526020820190815260006020820181905260408201819052606082018190526080820181905260a09091015290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061267d57805160ff19168380011785556126aa565b828001600101855582156126aa579182015b828111156126aa57825182559160200191906001019061268f565b506126b6929150612714565b5090565b60206040519081016040526000815290565b815481835581811511610bb357600083815260209020610bb3918101908301612714565b815481835581811511610bb357600083815260209020610bb391810190830161272e565b610b0191905b808211156126b6576000815560010161271a565b610b0191905b808211156126b657805469ffffffffffffffffffff191681556001016127345600a165627a7a72305820915f094bd33721ea50df1895ad20a891377cb5b76da4cbb39f2ec348486f80d90029"}