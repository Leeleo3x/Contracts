{"Runs": "200", "SwarmSource": "bzzr://437a367cded753a84cfeb998ad796a71a581398d9fd01bb0a80cf8d809f6ea0e", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"_newPriviledgedAddress\",\"type\":\"address\"}],\"name\":\"ownerSetPriviledgedAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateTokenStatus\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensFrozen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextThaw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"priviledgedAddressBurnUnsoldCoins\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdfundDeadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextFreeze\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priviledgedAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"ownerTransferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"Frozen\",\"type\":\"bool\"}],\"name\":\"LogTokensFrozen\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.8+commit.60cc1668", "ConstructorArguments": "", "SourceCode": "pragma solidity ^0.4.2;\r\n\r\n/* \r\n`* is owned\r\n*/\r\ncontract owned {\r\n\r\n    address public owner;\r\n\r\n    function owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        if (msg.sender != owner) throw;\r\n        _;\r\n    }\r\n\r\n    function ownerTransferOwnership(address newOwner)\r\n        onlyOwner\r\n    {\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n/* \r\n* safe math\r\n*/\r\ncontract DSSafeAddSub {\r\n\r\n    function safeToAdd(uint a, uint b) internal returns (bool) {\r\n        return (a + b >= a);\r\n    }\r\n    \r\n    function safeAdd(uint a, uint b) internal returns (uint) {\r\n        if (!safeToAdd(a, b)) throw;\r\n        return a + b;\r\n    }\r\n\r\n    function safeToSubtract(uint a, uint b) internal returns (bool) {\r\n        return (b <= a);\r\n    }\r\n\r\n    function safeSub(uint a, uint b) internal returns (uint) {\r\n        if (!safeToSubtract(a, b)) throw;\r\n        return a - b;\r\n    } \r\n\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @title  EtherollToken\r\n * \r\n * The official token powering etheroll.\r\n * EtherollToken is a ERC.20 standard token with some custom functionality\r\n *\r\n */ \r\n\r\n\r\ncontract EtherollToken is owned, DSSafeAddSub {\r\n\r\n    /* check address */\r\n    modifier onlyBy(address _account) {\r\n        if (msg.sender != _account) throw;\r\n        _;\r\n    }    \r\n\r\n    /* vars */\r\n    string public standard = 'Token 1.0';\r\n    string public name = \"DICE\";\r\n    string public symbol = \"ROL\";\r\n    uint8 public decimals = 16;\r\n    uint public totalSupply = 250000000000000000000000; \r\n\r\n    address public priviledgedAddress;  \r\n    bool public tokensFrozen;\r\n    uint public crowdfundDeadline = now + 2 * 1 weeks;       \r\n    uint public nextFreeze = now + 12 * 1 weeks;\r\n    uint public nextThaw = now + 13 * 1 weeks;\r\n   \r\n\r\n    /* map balances */\r\n    mapping (address => uint) public balanceOf;\r\n    mapping (address => mapping (address => uint)) public allowance;  \r\n\r\n    /* events */\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event LogTokensFrozen(bool indexed Frozen);    \r\n\r\n    /*\r\n    *  @notice sends all tokens to msg.sender on init    \r\n    */  \r\n    function EtherollToken(){\r\n        /* send creator all initial tokens 25,000,000 */\r\n        balanceOf[msg.sender] = 250000000000000000000000;\r\n        /* tokens are not frozen */  \r\n        tokensFrozen = false;                                      \r\n\r\n    }  \r\n\r\n    /*\r\n    *  @notice public function    \r\n    *  @param _to address to send tokens to   \r\n    *  @param _value number of tokens to transfer \r\n    *  @returns boolean success         \r\n    */     \r\n    function transfer(address _to, uint _value) public\r\n        returns (bool success)    \r\n    {\r\n        if(tokensFrozen && msg.sender != priviledgedAddress) return false;  /* transfer only by priviledgedAddress during crowdfund or reward phases */\r\n        if (balanceOf[msg.sender] < _value) return false;                   /* check if the sender has enough */\r\n        if (balanceOf[_to] + _value < balanceOf[_to]) return false;         /* check for overflows */              \r\n        balanceOf[msg.sender] -=  _value;                                   /* subtract from the sender */\r\n        balanceOf[_to] += _value;                                           /* add the same to the recipient */\r\n        Transfer(msg.sender, _to, _value);                                  /* notify anyone listening that this transfer took place */\r\n        return true;\r\n    }      \r\n\r\n    /*\r\n    *  @notice public function    \r\n    *  @param _from address to send tokens from \r\n    *  @param _to address to send tokens to   \r\n    *  @param _value number of tokens to transfer     \r\n    *  @returns boolean success      \r\n    *  another contract attempts to spend tokens on your behalf\r\n    */       \r\n    function transferFrom(address _from, address _to, uint _value) public\r\n        returns (bool success) \r\n    {                \r\n        if(tokensFrozen && msg.sender != priviledgedAddress) return false;  /* transfer only by priviledgedAddress during crowdfund or reward phases */\r\n        if (balanceOf[_from] < _value) return false;                        /* check if the sender has enough */\r\n        if (balanceOf[_to] + _value < balanceOf[_to]) return false;         /* check for overflows */                \r\n        if (_value > allowance[_from][msg.sender]) return false;            /* check allowance */\r\n        balanceOf[_from] -= _value;                                         /* subtract from the sender */\r\n        balanceOf[_to] += _value;                                           /* add the same to the recipient */\r\n        allowance[_from][msg.sender] -= _value;                             /* reduce allowance */\r\n        Transfer(_from, _to, _value);                                       /* notify anyone listening that this transfer took place */\r\n        return true;\r\n    }        \r\n \r\n    /*\r\n    *  @notice public function    \r\n    *  @param _spender address being granted approval to spend on behalf of msg.sender\r\n    *  @param _value number of tokens granted approval for _spender to spend on behalf of msg.sender    \r\n    *  @returns boolean success      \r\n    *  approves another contract to spend some tokens on your behalf\r\n    */      \r\n    function approve(address _spender, uint _value) public\r\n        returns (bool success)\r\n    {\r\n        /* set allowance for _spender on behalf of msg.sender */\r\n        allowance[msg.sender][_spender] = _value;\r\n\r\n        /* log event about transaction */\r\n        Approval(msg.sender, _spender, _value);        \r\n        return true;\r\n    } \r\n  \r\n    /*\r\n    *  @notice address restricted function \r\n    *  crowdfund contract calls this to burn its unsold coins \r\n    */     \r\n    function priviledgedAddressBurnUnsoldCoins() public\r\n        /* only crowdfund contract can call this */\r\n        onlyBy(priviledgedAddress)\r\n    {\r\n        /* totalSupply should equal total tokens in circulation */\r\n        totalSupply = safeSub(totalSupply, balanceOf[priviledgedAddress]); \r\n        /* burns unsold tokens from crowdfund address */\r\n        balanceOf[priviledgedAddress] = 0;\r\n    }\r\n\r\n    /*\r\n    *  @notice public function \r\n    *  locks/unlocks tokens on a recurring cycle\r\n    */         \r\n    function updateTokenStatus() public\r\n    {\r\n        \r\n        /* locks tokens during initial crowdfund period */\r\n        if(now < crowdfundDeadline){                       \r\n            tokensFrozen = true;         \r\n            LogTokensFrozen(tokensFrozen);  \r\n        }  \r\n\r\n        /* locks tokens */\r\n        if(now >= nextFreeze){          \r\n            tokensFrozen = true;\r\n            LogTokensFrozen(tokensFrozen);  \r\n        }\r\n\r\n        /* unlocks tokens */\r\n        if(now >= nextThaw){         \r\n            tokensFrozen = false;\r\n            nextFreeze = now + 12 * 1 weeks;\r\n            nextThaw = now + 13 * 1 weeks;              \r\n            LogTokensFrozen(tokensFrozen);  \r\n        }        \r\n      \r\n    }                              \r\n\r\n    /*\r\n    *  @notice owner restricted function\r\n    *  @param _newPriviledgedAddress the address\r\n    *  only this address can burn unsold tokens\r\n    *  transfer tokens only by priviledgedAddress during crowdfund or reward phases\r\n    */      \r\n    function ownerSetPriviledgedAddress(address _newPriviledgedAddress) public \r\n        onlyOwner\r\n    {\r\n        priviledgedAddress = _newPriviledgedAddress;\r\n    }   \r\n                    \r\n    \r\n}", "OptimizationUsed": "1", "ContractName": "EtherollToken", "ByteCode": "0x606060405236156100f65763ffffffff60e060020a600035041663040ea2f481146100fb57806306fdde0314610116578063095ea7b3146101a357806318160ddd146101d357806323b872dd146101f257806325ffba04146102285780632efa79d314610237578063313ce5671461025857806358e879f31461027b5780635a3b7e421461029a5780636410c41a1461032757806370a08231146103365780638480021c146103615780638b64574b146103805780638da5cb5b1461039f578063937c0cdf146103c857806395d89b41146103f1578063a09cca931461047e578063a9059cbb14610499578063dd62ed3e146104c9575b610000565b3461000057610114600160a060020a03600435166104fa565b005b3461000057610123610542565b604080516020808252835181830152835191928392908301918501908083838215610169575b80518252602083111561016957601f199092019160209182019101610149565b505050905090810190601f1680156101955780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34610000576101bf600160a060020a03600435166024356105cd565b604080519115158252519081900360200190f35b34610000576101e0610638565b60408051918252519081900360200190f35b34610000576101bf600160a060020a036004358116906024351660443561063e565b604080519115158252519081900360200190f35b346100005761011461078b565b005b34610000576101bf61089f565b604080519115158252519081900360200190f35b34610000576102656108af565b6040805160ff9092168252519081900360200190f35b34610000576101e06108b8565b60408051918252519081900360200190f35b34610000576101236108be565b604080516020808252835181830152835191928392908301918501908083838215610169575b80518252602083111561016957601f199092019160209182019101610149565b505050905090810190601f1680156101955780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b346100005761011461094b565b005b34610000576101e0600160a060020a03600435166109b2565b60408051918252519081900360200190f35b34610000576101e06109c4565b60408051918252519081900360200190f35b34610000576101e06109ca565b60408051918252519081900360200190f35b34610000576103ac6109d0565b60408051600160a060020a039092168252519081900360200190f35b34610000576103ac6109df565b60408051600160a060020a039092168252519081900360200190f35b34610000576101236109ee565b604080516020808252835181830152835191928392908301918501908083838215610169575b80518252602083111561016957601f199092019160209182019101610149565b505050905090810190601f1680156101955780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3461000057610114600160a060020a0360043516610a7c565b005b34610000576101bf600160a060020a0360043516602435610ac4565b604080519115158252519081900360200190f35b34610000576101e0600160a060020a0360043581169060243516610bc0565b60408051918252519081900360200190f35b60005433600160a060020a0390811691161461051557610000565b6006805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b50565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156105c55780601f1061059a576101008083540402835291602001916105c5565b820191906000526020600020905b8154815290600101906020018083116105a857829003601f168201915b505050505081565b600160a060020a033381166000818152600b6020908152604080832094871680845294825280832086905580518681529051929493927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060015b92915050565b60055481565b60065460009060a060020a900460ff168015610669575060065433600160a060020a03908116911614155b1561067657506000610784565b600160a060020a0384166000908152600a60205260409020548290101561069f57506000610784565b600160a060020a0383166000908152600a602052604090205482810110156106c957506000610784565b600160a060020a038085166000908152600b6020908152604080832033909416835292905220548211156106ff57506000610784565b600160a060020a038085166000818152600a6020908152604080832080548890039055878516808452818420805489019055848452600b83528184203390961684529482529182902080548790039055815186815291517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35060015b9392505050565b6007544210156107e1576006805460a060020a60ff02191660a060020a90811791829055604051910460ff161515907fd3ae281451496b0a8d978ad222f5465aa683499b2ca2698ec1686a413e717f0790600090a25b6008544210610836576006805460a060020a60ff02191660a060020a90811791829055604051910460ff161515907fd3ae281451496b0a8d978ad222f5465aa683499b2ca2698ec1686a413e717f0790600090a25b600954421061089c576006805460a060020a60ff02191690819055626ebe00429081016008556277f8800160095560405160a060020a90910460ff161515907fd3ae281451496b0a8d978ad222f5465aa683499b2ca2698ec1686a413e717f0790600090a25b5b565b60065460a060020a900460ff1681565b60045460ff1681565b60095481565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105c55780601f1061059a576101008083540402835291602001916105c5565b820191906000526020600020905b8154815290600101906020018083116105a857829003601f168201915b505050505081565b600654600160a060020a03908116903316811461096757610000565b600554600654600160a060020a03166000908152600a602052604090205461098f9190610bdd565b600555600654600160a060020a03166000908152600a60205260408120555b5b50565b600a6020526000908152604090205481565b60075481565b60085481565b600054600160a060020a031681565b600654600160a060020a031681565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105c55780601f1061059a576101008083540402835291602001916105c5565b820191906000526020600020905b8154815290600101906020018083116105a857829003601f168201915b505050505081565b60005433600160a060020a03908116911614610a9757610000565b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b50565b60065460009060a060020a900460ff168015610aef575060065433600160a060020a03908116911614155b15610afc57506000610632565b600160a060020a0333166000908152600a602052604090205482901015610b2557506000610632565b600160a060020a0383166000908152600a60205260409020548281011015610b4f57506000610632565b600160a060020a033381166000818152600a6020908152604080832080548890039055938716808352918490208054870190558351868152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35060015b92915050565b600b60209081526000928352604080842090915290825290205481565b6000610be98383610bff565b1515610bf457610000565b508082035b92915050565b818111155b929150505600a165627a7a72305820437a367cded753a84cfeb998ad796a71a581398d9fd01bb0a80cf8d809f6ea0e0029"}