{"Runs": "200", "SwarmSource": "bzzr://510820d8bace0852bb95aaf9413b51a1b4d3b227fadff2e54cca52c1eb7954f7", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"releaseCreatedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"createFreeToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"name\":\"_endingPrice\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"name\":\"_endingPrice\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createReleaseTokenAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newContract\",\"type\":\"address\"}],\"name\":\"setNewAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auction\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setAuctionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIndexToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_SUPPLY_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAuctionPriceLimit\",\"type\":\"uint256\"}],\"name\":\"setAuctionPriceLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAuctionBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getToken\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"}],\"name\":\"Create\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"ContractUpgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.24+commit.e67f0147", "ConstructorArguments": "", "SourceCode": "pragma solidity ^0.4.23;\r\n\r\n\r\n/**\r\n * @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\r\n */\r\ncontract ERC721 {\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 indexed tokenId\r\n  );\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed approved,\r\n    uint256 indexed tokenId\r\n  );\r\n\r\n  function implementsERC721() public pure returns (bool);\r\n  function totalSupply() public view returns (uint256 total);\r\n  function balanceOf(address _owner) public view returns (uint256 balance);\r\n  function ownerOf(uint256 _tokenId) external view returns (address owner);\r\n  function approve(address _to, uint256 _tokenId) external;\r\n  function transfer(address _to, uint256 _tokenId) external;\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) external;\r\n}\r\n\r\n\r\n/**\r\n * @title Interface of auction contract\r\n */\r\ninterface CurioAuction {\r\n  function isCurioAuction() external returns (bool);\r\n  function withdrawBalance() external;\r\n  function setAuctionPriceLimit(uint256 _newAuctionPriceLimit) external;\r\n  function createAuction(\r\n    uint256 _tokenId,\r\n    uint256 _startingPrice,\r\n    uint256 _endingPrice,\r\n    uint256 _duration,\r\n    address _seller\r\n  )\r\n    external;\r\n}\r\n\r\n\r\n/**\r\n * @title Curio\r\n * @dev Curio core contract implements ERC721 token.\r\n */\r\ncontract Curio is ERC721 {\r\n  event Create(\r\n    address indexed owner,\r\n    uint256 indexed tokenId,\r\n    string name\r\n  );\r\n  event ContractUpgrade(address newContract);\r\n\r\n  struct Token {\r\n    string name;\r\n  }\r\n\r\n  // Name and symbol of ERC721 token\r\n  string public constant NAME = \"Curio\";\r\n  string public constant SYMBOL = \"CUR\";\r\n\r\n  // Array of token's data\r\n  Token[] tokens;\r\n\r\n  // A mapping from token IDs to the address that owns them\r\n  mapping (uint256 => address) public tokenIndexToOwner;\r\n\r\n  // A mapping from owner address to count of tokens that address owns\r\n  mapping (address => uint256) ownershipTokenCount;\r\n\r\n  // A mapping from token IDs to an address that has been approved\r\n  mapping (uint256 => address) public tokenIndexToApproved;\r\n\r\n  address public ownerAddress;\r\n  address public adminAddress;\r\n\r\n  bool public paused = false;\r\n\r\n  // The address of new contract when this contract was upgraded\r\n  address public newContractAddress;\r\n\r\n  // The address of CurioAuction contract that handles sales of tokens\r\n  CurioAuction public auction;\r\n\r\n  // Restriction on release of tokens\r\n  uint256 public constant TOTAL_SUPPLY_LIMIT = 900;\r\n\r\n  // Count of released tokens\r\n  uint256 public releaseCreatedCount;\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == ownerAddress);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the admin.\r\n   */\r\n  modifier onlyAdmin() {\r\n    require(msg.sender == adminAddress);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner or admin.\r\n   */\r\n  modifier onlyOwnerOrAdmin() {\r\n    require(\r\n      msg.sender == adminAddress ||\r\n      msg.sender == ownerAddress\r\n    );\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Constructor function\r\n   */\r\n  constructor() public {\r\n    // Contract paused after start\r\n    paused = true;\r\n\r\n    // Set owner and admin addresses\r\n    ownerAddress = msg.sender;\r\n    adminAddress = msg.sender;\r\n  }\r\n\r\n\r\n  // -----------------------------------------\r\n  // External interface\r\n  // -----------------------------------------\r\n\r\n\r\n  /**\r\n   * @dev Check implementing ERC721 standard (needed in auction contract).\r\n   */\r\n  function implementsERC721() public pure returns (bool) {\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Default payable function rejects all Ether from being sent here, unless it's from auction contract.\r\n   */\r\n  function() external payable {\r\n    require(msg.sender == address(auction));\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer all Ether from this contract to owner.\r\n   */\r\n  function withdrawBalance() external onlyOwner {\r\n    ownerAddress.transfer(address(this).balance);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the total number of tokens currently in existence.\r\n   */\r\n  function totalSupply() public view returns (uint) {\r\n    return tokens.length;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the number of tokens owned by a specific address.\r\n   * @param _owner The owner address to check\r\n   */\r\n  function balanceOf(address _owner) public view returns (uint256 count) {\r\n    return ownershipTokenCount[_owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address currently assigned ownership of a given token.\r\n   * @param _tokenId The ID of the token\r\n   */\r\n  function ownerOf(uint256 _tokenId) external view returns (address owner) {\r\n    owner = tokenIndexToOwner[_tokenId];\r\n\r\n    require(owner != address(0));\r\n  }\r\n\r\n  /**\r\n   * @dev Returns information about token.\r\n   * @param _id The ID of the token\r\n   */\r\n  function getToken(uint256 _id) external view returns (string name) {\r\n    Token storage token = tokens[_id];\r\n\r\n    name = token.name;\r\n  }\r\n\r\n  /**\r\n   * @dev Set new owner address. Only available to the current owner.\r\n   * @param _newOwner The address of the new owner\r\n   */\r\n  function setOwner(address _newOwner) onlyOwner external {\r\n    require(_newOwner != address(0));\r\n\r\n    ownerAddress = _newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Set new admin address. Only available to owner.\r\n   * @param _newAdmin The address of the new admin\r\n   */\r\n  function setAdmin(address _newAdmin) onlyOwner external {\r\n    require(_newAdmin != address(0));\r\n\r\n    adminAddress = _newAdmin;\r\n  }\r\n\r\n  /**\r\n   * @dev Set new auction price limit.\r\n   * @param _newAuctionPriceLimit Start and end price limit\r\n   */\r\n  function setAuctionPriceLimit(uint256 _newAuctionPriceLimit) onlyOwnerOrAdmin external {\r\n    auction.setAuctionPriceLimit(_newAuctionPriceLimit);\r\n  }\r\n\r\n  /**\r\n   * @dev Set the address of upgraded contract.\r\n   * @param _newContract Address of new contract\r\n   */\r\n  function setNewAddress(address _newContract) onlyOwner whenPaused external {\r\n    newContractAddress = _newContract;\r\n\r\n    emit ContractUpgrade(_newContract);\r\n  }\r\n\r\n  /**\r\n   * @dev Pause the contract. Called by owner or admin to pause the contract.\r\n   */\r\n  function pause() onlyOwnerOrAdmin whenNotPaused external {\r\n    paused = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Unpause the contract. Can only be called by owner, since\r\n   *      one reason we may pause the contract is when admin account is\r\n   *      compromised. Requires auction contract addresses\r\n   *      to be set before contract can be unpaused. Also, we can't have\r\n   *      newContractAddress set either, because then the contract was upgraded.\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    require(auction != address(0));\r\n    require(newContractAddress == address(0));\r\n\r\n    paused = false;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer a token to another address.\r\n   * @param _to The address of the recipient, can be a user or contract\r\n   * @param _tokenId The ID of the token to transfer\r\n   */\r\n  function transfer(\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    whenNotPaused\r\n    external\r\n  {\r\n    // Safety check to prevent against an unexpected 0x0 default.\r\n    require(_to != address(0));\r\n\r\n    // Disallow transfers to this contract to prevent accidental misuse.\r\n    // The contract should never own any tokens (except very briefly\r\n    // after a release token is created and before it goes on auction).\r\n    require(_to != address(this));\r\n\r\n    // Disallow transfers to the auction contract to prevent accidental\r\n    // misuse. Auction contracts should only take ownership of tokens\r\n    // through the allow + transferFrom flow.\r\n    require(_to != address(auction));\r\n\r\n    // Check token ownership\r\n    require(_owns(msg.sender, _tokenId));\r\n\r\n    // Reassign ownership, clear pending approvals, emit Transfer event.\r\n    _transfer(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Grant another address the right to transfer a specific token via\r\n   *      transferFrom(). This is the preferred flow for transfering NFTs to contracts.\r\n   * @param _to The address to be granted transfer approval. Pass address(0) to\r\n   *            clear all approvals\r\n   * @param _tokenId The ID of the token that can be transferred if this call succeeds\r\n   */\r\n  function approve(\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    whenNotPaused\r\n    external\r\n  {\r\n    // Only an owner can grant transfer approval.\r\n    require(_owns(msg.sender, _tokenId));\r\n\r\n    // Register the approval (replacing any previous approval).\r\n    _approve(_tokenId, _to);\r\n\r\n    // Emit approval event.\r\n    emit Approval(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers a token owned by another address, for which the calling address\r\n   *      has previously been granted transfer approval by the owner.\r\n   * @param _from The address that owns the token to be transferred\r\n   * @param _to The address that should take ownership of the token. Can be any address,\r\n   *            including the caller\r\n   * @param _tokenId The ID of the token to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    whenNotPaused\r\n    external\r\n  {\r\n    // Safety check to prevent against an unexpected 0x0 default.\r\n    require(_to != address(0));\r\n\r\n    // Disallow transfers to this contract to prevent accidental misuse.\r\n    // The contract should never own any tokens (except very briefly\r\n    // after a release token is created and before it goes on auction).\r\n    require(_to != address(this));\r\n\r\n    // Check for approval and valid ownership\r\n    require(_approvedFor(msg.sender, _tokenId));\r\n    require(_owns(_from, _tokenId));\r\n\r\n    // Reassign ownership (also clears pending approvals and emits Transfer event).\r\n    _transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns a list of all tokens assigned to an address.\r\n   * @param _owner The owner whose tokens we are interested in\r\n   * @notice This method MUST NEVER be called by smart contract code. First, it's fairly\r\n   *         expensive (it walks the entire token array looking for tokens belonging to owner),\r\n   *         but it also returns a dynamic array, which is only supported for web3 calls, and\r\n   *         not contract-to-contract calls.\r\n   */\r\n  function tokensOfOwner(address _owner) external view returns(uint256[] ownerTokens) {\r\n    uint256 tokenCount = balanceOf(_owner);\r\n\r\n    if (tokenCount == 0) {\r\n      // Return an empty array\r\n      return new uint256[](0);\r\n    } else {\r\n      uint256[] memory result = new uint256[](tokenCount);\r\n      uint256 totalTokens = totalSupply();\r\n      uint256 resultIndex = 0;\r\n\r\n      uint256 tokenId;\r\n\r\n      for (tokenId = 0; tokenId <= totalTokens; tokenId++) {\r\n        if (tokenIndexToOwner[tokenId] == _owner) {\r\n          result[resultIndex] = tokenId;\r\n          resultIndex++;\r\n        }\r\n      }\r\n\r\n      return result;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Set the reference to the auction contract.\r\n   * @param _address Address of auction contract\r\n   */\r\n  function setAuctionAddress(address _address) onlyOwner external {\r\n    CurioAuction candidateContract = CurioAuction(_address);\r\n\r\n    require(candidateContract.isCurioAuction());\r\n\r\n    // Set the new contract address\r\n    auction = candidateContract;\r\n  }\r\n\r\n  /**\r\n   * @dev Put a token up for auction.\r\n   * @param _tokenId ID of token to auction, sender must be owner\r\n   * @param _startingPrice Price of item (in wei) at beginning of auction\r\n   * @param _endingPrice Price of item (in wei) at end of auction\r\n   * @param _duration Length of auction (in seconds)\r\n   */\r\n  function createAuction(\r\n    uint256 _tokenId,\r\n    uint256 _startingPrice,\r\n    uint256 _endingPrice,\r\n    uint256 _duration\r\n  )\r\n    whenNotPaused\r\n    external\r\n  {\r\n    // Auction contract checks input sizes\r\n    // If token is already on any auction, this will throw because it will be owned by the auction contract\r\n    require(_owns(msg.sender, _tokenId));\r\n\r\n    // Set auction contract as approved for token\r\n    _approve(_tokenId, auction);\r\n\r\n    // Sale auction throws if inputs are invalid\r\n    auction.createAuction(\r\n      _tokenId,\r\n      _startingPrice,\r\n      _endingPrice,\r\n      _duration,\r\n      msg.sender\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers the balance of the auction contract to this contract by owner or admin.\r\n   */\r\n  function withdrawAuctionBalance() onlyOwnerOrAdmin external {\r\n    auction.withdrawBalance();\r\n  }\r\n\r\n  /**\r\n   * @dev Creates a new release token with the given name and creates an auction for it.\r\n   * @param _name Name ot the token\r\n   * @param _startingPrice Price of item (in wei) at beginning of auction\r\n   * @param _endingPrice Price of item (in wei) at end of auction\r\n   * @param _duration Length of auction (in seconds)\r\n   */\r\n  function createReleaseTokenAuction(\r\n    string _name,\r\n    uint256 _startingPrice,\r\n    uint256 _endingPrice,\r\n    uint256 _duration\r\n  )\r\n    onlyAdmin\r\n    external\r\n  {\r\n    // Check release tokens limit\r\n    require(releaseCreatedCount < TOTAL_SUPPLY_LIMIT);\r\n\r\n    // Create token and tranfer ownership to this contract\r\n    uint256 tokenId = _createToken(_name, address(this));\r\n\r\n    // Set auction address as approved for release token\r\n    _approve(tokenId, auction);\r\n\r\n    // Call createAuction in auction contract\r\n    auction.createAuction(\r\n      tokenId,\r\n      _startingPrice,\r\n      _endingPrice,\r\n      _duration,\r\n      address(this)\r\n    );\r\n\r\n    releaseCreatedCount++;\r\n  }\r\n\r\n  /**\r\n   * @dev Creates free token and transfer it to recipient.\r\n   * @param _name Name of the token\r\n   * @param _to The address of the recipient, can be a user or contract\r\n   */\r\n  function createFreeToken(\r\n    string _name,\r\n    address _to\r\n  )\r\n    onlyAdmin\r\n    external\r\n  {\r\n    require(_to != address(0));\r\n    require(_to != address(this));\r\n    require(_to != address(auction));\r\n\r\n    // Check release tokens limit\r\n    require(releaseCreatedCount < TOTAL_SUPPLY_LIMIT);\r\n\r\n    // Create token and transfer to owner\r\n    _createToken(_name, _to);\r\n\r\n    releaseCreatedCount++;\r\n  }\r\n\r\n\r\n  // -----------------------------------------\r\n  // Internal interface\r\n  // -----------------------------------------\r\n\r\n\r\n  /**\r\n   * @dev Create a new token and stores it.\r\n   * @param _name Token name\r\n   * @param _owner The initial owner of this token, must be non-zero\r\n   */\r\n  function _createToken(\r\n    string _name,\r\n    address _owner\r\n  )\r\n    internal\r\n    returns (uint)\r\n  {\r\n    Token memory _token = Token({\r\n      name: _name\r\n    });\r\n\r\n    uint256 newTokenId = tokens.push(_token) - 1;\r\n\r\n    // Check overflow newTokenId\r\n    require(newTokenId == uint256(uint32(newTokenId)));\r\n\r\n    emit Create(_owner, newTokenId, _name);\r\n\r\n    // This will assign ownership\r\n    _transfer(0, _owner, newTokenId);\r\n\r\n    return newTokenId;\r\n  }\r\n\r\n  /**\r\n   * @dev Check claimant address as token owner.\r\n   * @param _claimant The address we are validating against\r\n   * @param _tokenId Token id, only valid when > 0\r\n   */\r\n  function _owns(\r\n    address _claimant,\r\n    uint256 _tokenId\r\n  )\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    return tokenIndexToOwner[_tokenId] == _claimant;\r\n  }\r\n\r\n  /**\r\n   * @dev Check if a given address currently has transferApproval for a particular token.\r\n   * @param _claimant The address we are confirming token is approved for\r\n   * @param _tokenId Token id, only valid when > 0\r\n   */\r\n  function _approvedFor(\r\n    address _claimant,\r\n    uint256 _tokenId\r\n  )\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    return tokenIndexToApproved[_tokenId] == _claimant;\r\n  }\r\n\r\n  /**\r\n   * @dev Marks an address as being approved for transferFrom().\r\n   *      Setting _approved to address(0) clears all transfer approval.\r\n   *      NOTE: _approve() does NOT send the Approval event. This is intentional because\r\n   *      _approve() and transferFrom() are used together for putting tokens on auction, and\r\n   *      there is no value in spamming the log with Approval events in that case.\r\n   */\r\n  function _approve(\r\n    uint256 _tokenId,\r\n    address _approved\r\n  )\r\n    internal\r\n  {\r\n    tokenIndexToApproved[_tokenId] = _approved;\r\n  }\r\n\r\n  /**\r\n   * @dev Assigns ownership of a specific token to an address.\r\n   */\r\n  function _transfer(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    internal\r\n  {\r\n    ownershipTokenCount[_to]++;\r\n\r\n    // Transfer ownership\r\n    tokenIndexToOwner[_tokenId] = _to;\r\n\r\n    // When creating new token _from is 0x0, but we can't account that address\r\n    if (_from != address(0)) {\r\n      ownershipTokenCount[_from]--;\r\n\r\n      // Clear any previously approved ownership exchange\r\n      delete tokenIndexToApproved[_tokenId];\r\n    }\r\n\r\n    emit Transfer(_from, _to, _tokenId);\r\n  }\r\n}", "OptimizationUsed": "1", "ContractName": "Curio", "ByteCode": "0x60806040526004361061017c5763ffffffff60e060020a600035041663088ae6e58114610195578063095ea7b3146101bc5780631051db34146101e057806313af40351461020957806318160ddd1461022a5780631d36e06c1461023f57806323b872dd146102735780633bfa44491461029d5780633f4ba83a146102cb578063431f21da146102e05780635a9d27dc146103015780635c975abb1461032b5780635fd8c710146103405780636352211e146103555780636af04a571461036d578063704b6c021461038257806370a08231146103a357806371587988146103c45780637d9f6db5146103e55780638456cb59146103fa5780638462151c1461040f5780638f84aa091461048057806393ac363814610495578063a3f4df7e146104b6578063a8bd9c3214610540578063a9059cbb14610558578063cc3bde3d1461057c578063cf7c298514610591578063d8eb3a98146105a9578063e4b50cb8146105be578063f76f8d78146105d6578063fc6f9468146105eb575b600754600160a060020a0316331461019357600080fd5b005b3480156101a157600080fd5b506101aa610600565b60408051918252519081900360200190f35b3480156101c857600080fd5b50610193600160a060020a0360043516602435610606565b3480156101ec57600080fd5b506101f5610678565b604080519115158252519081900360200190f35b34801561021557600080fd5b50610193600160a060020a036004351661067e565b34801561023657600080fd5b506101aa6106cc565b34801561024b57600080fd5b506102576004356106d2565b60408051600160a060020a039092168252519081900360200190f35b34801561027f57600080fd5b50610193600160a060020a03600435811690602435166044356106ed565b3480156102a957600080fd5b506101936024600480358281019291013590600160a060020a03903516610769565b3480156102d757600080fd5b50610193610820565b3480156102ec57600080fd5b5061019360043560243560443560643561089c565b34801561030d57600080fd5b5061019360246004803582810192910135903560443560643561097e565b34801561033757600080fd5b506101f5610aa7565b34801561034c57600080fd5b50610193610ab7565b34801561036157600080fd5b50610257600435610b0b565b34801561037957600080fd5b50610257610b34565b34801561038e57600080fd5b50610193600160a060020a0360043516610b43565b3480156103af57600080fd5b506101aa600160a060020a0360043516610b91565b3480156103d057600080fd5b50610193600160a060020a0360043516610bac565b3480156103f157600080fd5b50610257610c2f565b34801561040657600080fd5b50610193610c3e565b34801561041b57600080fd5b50610430600160a060020a0360043516610ca9565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561046c578181015183820152602001610454565b505050509050019250505060405180910390f35b34801561048c57600080fd5b50610257610d7b565b3480156104a157600080fd5b50610193600160a060020a0360043516610d8a565b3480156104c257600080fd5b506104cb610e3f565b6040805160208082528351818301528351919283929083019185019080838360005b838110156105055781810151838201526020016104ed565b50505050905090810190601f1680156105325780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561054c57600080fd5b50610257600435610e76565b34801561056457600080fd5b50610193600160a060020a0360043516602435610e91565b34801561058857600080fd5b506101aa610f12565b34801561059d57600080fd5b50610193600435610f18565b3480156105b557600080fd5b50610193610fc7565b3480156105ca57600080fd5b506104cb600435611062565b3480156105e257600080fd5b506104cb611114565b3480156105f757600080fd5b5061025761114b565b60085481565b60055460a060020a900460ff161561061d57600080fd5b610627338261115a565b151561063257600080fd5b61063c818361117a565b6040518190600160a060020a0384169033907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590600090a45050565b60015b90565b600454600160a060020a0316331461069557600080fd5b600160a060020a03811615156106aa57600080fd5b60048054600160a060020a031916600160a060020a0392909216919091179055565b60005490565b600160205260009081526040902054600160a060020a031681565b60055460a060020a900460ff161561070457600080fd5b600160a060020a038216151561071957600080fd5b600160a060020a03821630141561072f57600080fd5b61073933826111a8565b151561074457600080fd5b61074e838261115a565b151561075957600080fd5b6107648383836111c8565b505050565b600554600160a060020a0316331461078057600080fd5b600160a060020a038116151561079557600080fd5b600160a060020a0381163014156107ab57600080fd5b600754600160a060020a03828116911614156107c657600080fd5b600854610384116107d657600080fd5b61081183838080601f016020809104026020016040519081016040528093929190818152602001838380828437508794506112909350505050565b50506008805460010190555050565b600454600160a060020a0316331461083757600080fd5b60055460a060020a900460ff16151561084f57600080fd5b600754600160a060020a0316151561086657600080fd5b600654600160a060020a03161561087c57600080fd5b6005805474ff000000000000000000000000000000000000000019169055565b60055460a060020a900460ff16156108b357600080fd5b6108bd338561115a565b15156108c857600080fd5b6007546108df908590600160a060020a031661117a565b600754604080517f27ebe40a000000000000000000000000000000000000000000000000000000008152600481018790526024810186905260448101859052606481018490523360848201529051600160a060020a03909216916327ebe40a9160a48082019260009290919082900301818387803b15801561096057600080fd5b505af1158015610974573d6000803e3d6000fd5b5050505050505050565b600554600090600160a060020a0316331461099857600080fd5b600854610384116109a857600080fd5b6109e386868080601f016020809104026020016040519081016040528093929190818152602001838380828437503094506112909350505050565b6007549091506109fd908290600160a060020a031661117a565b600754604080517f27ebe40a000000000000000000000000000000000000000000000000000000008152600481018490526024810187905260448101869052606481018590523060848201529051600160a060020a03909216916327ebe40a9160a48082019260009290919082900301818387803b158015610a7e57600080fd5b505af1158015610a92573d6000803e3d6000fd5b50506008805460010190555050505050505050565b60055460a060020a900460ff1681565b600454600160a060020a03163314610ace57600080fd5b600454604051600160a060020a0390911690303180156108fc02916000818181858888f19350505050158015610b08573d6000803e3d6000fd5b50565b600081815260016020526040902054600160a060020a0316801515610b2f57600080fd5b919050565b600654600160a060020a031681565b600454600160a060020a03163314610b5a57600080fd5b600160a060020a0381161515610b6f57600080fd5b60058054600160a060020a031916600160a060020a0392909216919091179055565b600160a060020a031660009081526002602052604090205490565b600454600160a060020a03163314610bc357600080fd5b60055460a060020a900460ff161515610bdb57600080fd5b60068054600160a060020a038316600160a060020a0319909116811790915560408051918252517f450db8da6efbe9c22f2347f7c2021231df1fc58d3ae9a2fa75d39fa4461993059181900360200190a150565b600754600160a060020a031681565b600554600160a060020a0316331480610c615750600454600160a060020a031633145b1515610c6c57600080fd5b60055460a060020a900460ff1615610c8357600080fd5b6005805474ff0000000000000000000000000000000000000000191660a060020a179055565b6060600060606000806000610cbd87610b91565b9450841515610cdc576040805160008152602081019091529550610d71565b84604051908082528060200260200182016040528015610d06578160200160208202803883390190505b509350610d116106cc565b925060009150600090505b828111610d6d57600081815260016020526040902054600160a060020a0388811691161415610d6557808483815181101515610d5457fe5b602090810290910101526001909101905b600101610d1c565b8395505b5050505050919050565b600454600160a060020a031681565b600454600090600160a060020a03163314610da457600080fd5b81905080600160a060020a03166340ec0b6a6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610de557600080fd5b505af1158015610df9573d6000803e3d6000fd5b505050506040513d6020811015610e0f57600080fd5b50511515610e1c57600080fd5b60078054600160a060020a031916600160a060020a039290921691909117905550565b60408051808201909152600581527f437572696f000000000000000000000000000000000000000000000000000000602082015281565b600360205260009081526040902054600160a060020a031681565b60055460a060020a900460ff1615610ea857600080fd5b600160a060020a0382161515610ebd57600080fd5b600160a060020a038216301415610ed357600080fd5b600754600160a060020a0383811691161415610eee57600080fd5b610ef8338261115a565b1515610f0357600080fd5b610f0e3383836111c8565b5050565b61038481565b600554600160a060020a0316331480610f3b5750600454600160a060020a031633145b1515610f4657600080fd5b600754604080517fcf7c2985000000000000000000000000000000000000000000000000000000008152600481018490529051600160a060020a039092169163cf7c29859160248082019260009290919082900301818387803b158015610fac57600080fd5b505af1158015610fc0573d6000803e3d6000fd5b5050505050565b600554600160a060020a0316331480610fea5750600454600160a060020a031633145b1515610ff557600080fd5b600760009054906101000a9004600160a060020a0316600160a060020a0316635fd8c7106040518163ffffffff1660e060020a028152600401600060405180830381600087803b15801561104857600080fd5b505af115801561105c573d6000803e3d6000fd5b50505050565b60606000808381548110151561107457fe5b60009182526020918290200180546040805160026001841615610100026000190190931692909204601f8101859004850283018501909152808252919350918391908301828280156111075780601f106110dc57610100808354040283529160200191611107565b820191906000526020600020905b8154815290600101906020018083116110ea57829003601f168201915b5050505050915050919050565b60408051808201909152600381527f4355520000000000000000000000000000000000000000000000000000000000602082015281565b600554600160a060020a031681565b600090815260016020526040902054600160a060020a0391821691161490565b6000918252600360205260409091208054600160a060020a031916600160a060020a03909216919091179055565b600090815260036020526040902054600160a060020a0391821691161490565b600160a060020a0380831660008181526002602090815260408083208054600190810190915586845290915290208054600160a060020a031916909117905583161561124a57600160a060020a03831660009081526002602090815260408083208054600019019055838352600390915290208054600160a060020a03191690555b8082600160a060020a031684600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b600061129a6113ca565b5060408051602081810190925284815260008054600181810180845583805284518051959694959294919387937f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563909101926112fa9284929101906113dc565b50505003905063ffffffff8116811461131257600080fd5b8084600160a060020a03167f06acdc615e0b6df2984444b78654ef89855fead2ca37b1d70464c0e7827590e2876040518080602001828103825283818151815260200191508051906020019080838360005b8381101561137c578181015183820152602001611364565b50505050905090810190601f1680156113a95780820380516001836020036101000a031916815260200191505b509250505060405180910390a36113c2600085836111c8565b949350505050565b60408051602081019091526060815290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061141d57805160ff191683800117855561144a565b8280016001018555821561144a579182015b8281111561144a57825182559160200191906001019061142f565b5061145692915061145a565b5090565b61067b91905b8082111561145657600081556001016114605600a165627a7a72305820510820d8bace0852bb95aaf9413b51a1b4d3b227fadff2e54cca52c1eb7954f70029"}