{"Runs": "200", "SwarmSource": "bzzr://3c2c5c0d9b194e5bf99b6c479c98cb8c7674c97348a849101270a9d3d0a2a4e7", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"unfreeze\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"freezeOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"freeze\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"decimalUnits\",\"type\":\"uint8\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Unfreeze\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.19+commit.c4cbbb05", "ConstructorArguments": "000000000000000000000000000000000000000000295be96e640669720000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000448454c5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000448454c5000000000000000000000000000000000000000000000000000000000", "SourceCode": "pragma solidity ^0.4.19;\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\ncontract SafeMath {\r\n    function safeAdd(uint256 x, uint256 y) internal returns(uint256) {\r\n      uint256 z = x + y;\r\n      assert((z >= x) && (z >= y));\r\n      return z;\r\n    }\r\n\r\n    function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {\r\n      assert(x >= y);\r\n      uint256 z = x - y;\r\n      return z;\r\n    }\r\n\r\n    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\r\n      uint256 z = x * y;\r\n      assert((x == 0)||(z/x == y));\r\n      return z;\r\n    }\r\n\r\n  function assert(bool assertion) internal {\r\n    if (!assertion) {\r\n      throw;\r\n    }\r\n  }\r\n}\r\ncontract HELP is SafeMath{\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n\taddress public owner;\r\n\r\n    /* This creates an array with all balances */\r\n    mapping (address => uint256) public balanceOf;\r\n\tmapping (address => uint256) public freezeOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /* This notifies clients about the amount burnt */\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n\t/* This notifies clients about the amount frozen */\r\n    event Freeze(address indexed from, uint256 value);\r\n\r\n\t/* This notifies clients about the amount unfrozen */\r\n    event Unfreeze(address indexed from, uint256 value);\r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    function HELP(\r\n        uint256 initialSupply,\r\n        string tokenName,\r\n        uint8 decimalUnits,\r\n        string tokenSymbol\r\n        ) {\r\n        balanceOf[msg.sender] = initialSupply;              // Give the creator all initial tokens\r\n        totalSupply = initialSupply;                        // Update total supply\r\n        name = tokenName;                                   // Set the name for display purposes\r\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\r\n        decimals = decimalUnits;                            // Amount of decimals for display purposes\r\n\t\towner = msg.sender;\r\n    }\r\n\r\n    /* Send tokens */\r\n    function transfer(address _to, uint256 _value) {\r\n        if (_to == 0x0) throw;                               // Prevent transfer to 0x0 address. Use burn() instead\r\n\t\tif (_value <= 0) throw;\r\n        if (balanceOf[msg.sender] < _value) throw;           // Check if the sender has enough\r\n        if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\r\n        balanceOf[msg.sender] = SafeMath.safeSubtract(balanceOf[msg.sender], _value);                     // Subtract from the sender\r\n        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                            // Add the same to the recipient\r\n        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\r\n    }\r\n\r\n    /* Allow another contract to spend some tokens in your behalf */\r\n    function approve(address _spender, uint256 _value)\r\n        returns (bool success) {\r\n\t\tif (_value <= 0) throw;\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n\r\n    /* A contract attempts to get the coins */\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        if (_to == 0x0) throw;                                // Prevent transfer to 0x0 address. Use burn() instead\r\n\t\tif (_value <= 0) throw;\r\n        if (balanceOf[_from] < _value) throw;                 // Check if the sender has enough\r\n        if (balanceOf[_to] + _value < balanceOf[_to]) throw;  // Check for overflows\r\n        if (_value > allowance[_from][msg.sender]) throw;     // Check allowance\r\n        balanceOf[_from] = SafeMath.safeSubtract(balanceOf[_from], _value);                           // Subtract from the sender\r\n        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                             // Add the same to the recipient\r\n        allowance[_from][msg.sender] = SafeMath.safeSubtract(allowance[_from][msg.sender], _value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function burn(uint256 _value) returns (bool success) {\r\n        if (balanceOf[msg.sender] < _value) throw;            // Check if the sender has enough\r\n\t\tif (_value <= 0) throw;\r\n        balanceOf[msg.sender] = SafeMath.safeSubtract(balanceOf[msg.sender], _value);                      // Subtract from the sender\r\n        totalSupply = SafeMath.safeSubtract(totalSupply,_value);                                // Updates totalSupply\r\n        Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n\tfunction freeze(uint256 _value) returns (bool success) {\r\n        if (balanceOf[msg.sender] < _value) throw;            // Check if the sender has enough\r\n\t\tif (_value <= 0) throw;\r\n        balanceOf[msg.sender] = SafeMath.safeSubtract(balanceOf[msg.sender], _value);                      // Subtract from the sender\r\n        freezeOf[msg.sender] = SafeMath.safeAdd(freezeOf[msg.sender], _value);                                // Updates totalSupply\r\n        Freeze(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n\tfunction unfreeze(uint256 _value) returns (bool success) {\r\n        if (freezeOf[msg.sender] < _value) throw;            // Check if the sender has enough\r\n\t\tif (_value <= 0) throw;\r\n        freezeOf[msg.sender] = SafeMath.safeSubtract(freezeOf[msg.sender], _value);                      // Subtract from the sender\r\n\t\tbalanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], _value);\r\n        Unfreeze(msg.sender, _value);\r\n        return true;\r\n    }\r\n\t\r\n\t// transfer balance to owner\r\n\tfunction withdrawEther(uint256 amount) {\r\n\t\tif(msg.sender != owner)throw;\r\n\t\towner.transfer(amount);\r\n\t}\r\n\t\r\n\t// can accept ether\r\n\tfunction() payable {\r\n    }\r\n}", "OptimizationUsed": "1", "ContractName": "HELP", "ByteCode": "0x6060604052600436106100da5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100dc578063095ea7b31461016657806318160ddd1461019c57806323b872dd146101c1578063313ce567146101e95780633bed33ce1461021257806342966c68146102285780636623fc461461023e57806370a08231146102545780638da5cb5b1461027357806395d89b41146102a2578063a9059cbb146102b5578063cd4217c1146102d7578063d7a78db8146102f6578063dd62ed3e1461030c575b005b34156100e757600080fd5b6100ef610331565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561012b578082015183820152602001610113565b50505050905090810190601f1680156101585780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561017157600080fd5b610188600160a060020a03600435166024356103cf565b604051901515815260200160405180910390f35b34156101a757600080fd5b6101af61040e565b60405190815260200160405180910390f35b34156101cc57600080fd5b610188600160a060020a0360043581169060243516604435610414565b34156101f457600080fd5b6101fc6105b9565b60405160ff909116815260200160405180910390f35b341561021d57600080fd5b6100da6004356105c2565b341561023357600080fd5b610188600435610613565b341561024957600080fd5b6101886004356106d7565b341561025f57600080fd5b6101af600160a060020a03600435166107b6565b341561027e57600080fd5b6102866107c8565b604051600160a060020a03909116815260200160405180910390f35b34156102ad57600080fd5b6100ef6107d7565b34156102c057600080fd5b6100da600160a060020a0360043516602435610842565b34156102e257600080fd5b6101af600160a060020a036004351661095f565b341561030157600080fd5b610188600435610971565b341561031757600080fd5b6101af600160a060020a0360043581169060243516610a50565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103c75780601f1061039c576101008083540402835291602001916103c7565b820191906000526020600020905b8154815290600101906020018083116103aa57829003601f168201915b505050505081565b60008082116103dd57600080fd5b50600160a060020a033381166000908152600760209081526040808320938616835292905220819055600192915050565b60035481565b6000600160a060020a038316151561042b57600080fd5b6000821161043857600080fd5b600160a060020a0384166000908152600560205260409020548290101561045e57600080fd5b600160a060020a038316600090815260056020526040902054828101101561048557600080fd5b600160a060020a03808516600090815260076020908152604080832033909416835292905220548211156104b857600080fd5b600160a060020a0384166000908152600560205260409020546104db9083610a6d565b600160a060020a03808616600090815260056020526040808220939093559085168152205461050a9083610a83565b600160a060020a0380851660009081526005602090815260408083209490945587831682526007815283822033909316825291909152205461054c9083610a6d565b600160a060020a03808616600081815260076020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b60025460ff1681565b60045433600160a060020a039081169116146105dd57600080fd5b600454600160a060020a031681156108fc0282604051600060405180830381858888f19350505050151561061057600080fd5b50565b600160a060020a0333166000908152600560205260408120548290101561063957600080fd5b6000821161064657600080fd5b600160a060020a0333166000908152600560205260409020546106699083610a6d565b600160a060020a03331660009081526005602052604090205560035461068f9083610a6d565b600355600160a060020a0333167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58360405190815260200160405180910390a2506001919050565b600160a060020a033316600090815260066020526040812054829010156106fd57600080fd5b6000821161070a57600080fd5b600160a060020a03331660009081526006602052604090205461072d9083610a6d565b600160a060020a03331660009081526006602090815260408083209390935560059052205461075c9083610a83565b600160a060020a0333166000818152600560205260409081902092909255907f2cfce4af01bcb9d6cf6c84ee1b7c491100b8695368264146a94d71e10a63083f9084905190815260200160405180910390a2506001919050565b60056020526000908152604090205481565b600454600160a060020a031681565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103c75780601f1061039c576101008083540402835291602001916103c7565b600160a060020a038216151561085757600080fd5b6000811161086457600080fd5b600160a060020a0333166000908152600560205260409020548190101561088a57600080fd5b600160a060020a03821660009081526005602052604090205481810110156108b157600080fd5b600160a060020a0333166000908152600560205260409020546108d49082610a6d565b600160a060020a0333811660009081526005602052604080822093909355908416815220546109039082610a83565b600160a060020a0380841660008181526005602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9084905190815260200160405180910390a35050565b60066020526000908152604090205481565b600160a060020a0333166000908152600560205260408120548290101561099757600080fd5b600082116109a457600080fd5b600160a060020a0333166000908152600560205260409020546109c79083610a6d565b600160a060020a0333166000908152600560209081526040808320939093556006905220546109f69083610a83565b600160a060020a0333166000818152600660205260409081902092909255907ff97a274face0b5517365ad396b1fdba6f68bd3135ef603e44272adba3af5a1e09084905190815260200160405180910390a2506001919050565b600760209081526000928352604080842090915290825290205481565b600080610a7c83851015610aa7565b5050900390565b6000828201610aa0848210801590610a9b5750838210155b610aa7565b9392505050565b80151561061057600080fd00a165627a7a723058203c2c5c0d9b194e5bf99b6c479c98cb8c7674c97348a849101270a9d3d0a2a4e70029"}