{"Runs": "200", "SwarmSource": "bzzr://fa377f383c806c860476fca45efad8b9ee65810ca8611ffe5c7b38c30ba7ad81", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"founderLockance\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"remainRound\",\"type\":\"uint256\"},{\"name\":\"totalRound\",\"type\":\"uint256\"},{\"name\":\"period\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"multisend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contract_owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ownerUnlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publicToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"changeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"unfreezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"openIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"weAreClosed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockFounder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"FounderUnlock\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.19+commit.c4cbbb05", "ConstructorArguments": "", "SourceCode": "pragma solidity ^0.4.19;\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\ncontract HAND{\r\n    using SafeMath for uint256;\r\n\r\n    uint256 constant MAX_UINT256 = 2**256 - 1;\r\n    uint256 _initialAmount = 0;\r\n    uint256 public publicToken = 4*10**11;                // 40% of total, for public sale\r\n    uint256 public maxSupply = 10**12;\r\n    address  public contract_owner;\r\n    uint256 public exchangeRate = 3900000;                    // exchangeRate for public sale, token per ETH\r\n    bool public icoOpen = false;                           // whether ICO is open and accept public investment\r\n\r\n\r\n    address privateSaleAdd = 0x85e4FE33c590b8A5812fBF926a0f9fe64E6d8b35;\r\n    \r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    \r\n      \r\n    // lock struct for founder\r\n    struct founderLock {\r\n        uint256 amount;\r\n        uint256 startTime;\r\n        uint remainRound;\r\n        uint totalRound;\r\n        uint256 period;\r\n    }\r\n    \r\n    mapping (address => founderLock) public founderLockance;\r\n    mapping (address => bool) isFreezed;\r\n    \r\n\r\n    \r\n    // uint256 totalSupply;\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value); \r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event FounderUnlock(address _sender, uint256 _amount);\r\n            \r\n    /*\r\n    NOTE:\r\n    The following variables are OPTIONAL vanities. One does not have to include them.\r\n    */\r\n    string public name = \"ShowHand\";               //fancy name: eg Simon Bucks\r\n    uint8 public decimals = 0;                     //How many decimals to show.\r\n    string public symbol = \"HAND\";                 //An identifier: eg SBX\r\n\r\n    /**\r\n      * @dev Fix for the ERC20 short address attack.\r\n      */\r\n      modifier onlyPayloadSize(uint size) {\r\n          require(msg.data.length >= size + 4);\r\n          _;\r\n      }\r\n      modifier  onlyOwner() { \r\n          require(msg.sender == contract_owner); \r\n          _; \r\n      }\r\n      modifier inIco() { \r\n          require(icoOpen==true); \r\n          _; \r\n      }\r\n      \r\n      \r\n    // token distribution, 60% in this part\r\n        address address1 = 0x85e4FE33c590b8A5812fBF926a0f9fe64E6d8b35;\r\n        address address2 = 0x5af6353F2BB222DF6FCD82065ed2e6db1bB12291;\r\n        address address3 = 0x6c24A6EfdfF15230EE284E2E72D86656ac752e48;\r\n        address address4 = 0xCB946d83617eDb6fbCa19148AD83e17Ea7B67294;\r\n        address address5 = 0x76360A75dC6e4bC5c6C0a20A4B74b8823fAFad8C;\r\n        address address6 = 0x356399eE0ebCB6AfB13dF33168fD2CC54Ba219C2;\r\n        address address7 = 0x8b46b43cA5412311A5Dfa08EF1149B5942B5FE22;\r\n        address address8 = 0xA51551B57CB4e37Ea20B3226ceA61ebc7135a11a;\r\n        address address9 = 0x174bC643442bE89265500E6C2c236D32248A4FaE;\r\n        address address10 = 0x0D78E82ECEd57aC3CE65fE3B828f4d52fF712f31;\r\n        address address11 = 0xe31062592358Cd489Bdc09e8217543C8cc3D5C1C;\r\n        address address12 = 0x0DB8c855C4BB0efd5a1c32de2362c5ABCFa4CA33;\r\n        address address13 = 0xF25A3ccDC54A746d56A90197d911d9a1f27cF512;\r\n        address address14 = 0x102d36210d312FB9A9Cf5f5c3A293a8f6598BD50;\r\n\r\n        address address15 = 0x8Dd1cDD513b05D07726a6F8C75b57602991a9c34;\r\n        address address16 = 0x9d566BCc1BDda779a00a1D44E0b4cA07FB68EFEF;\r\n        address address17 = 0x1cfCe9A13aBC3381100e85BFA21160C98f8B103D;\r\n        address address18 = 0x61F0c924C0F91f4d17c82C534cfaF716A7893c13;\r\n        address address19 = 0xE76c0618Dd52403ad1907D3BCbF930226bFEa46B;\r\n        address address20 = 0xeF2f04dbd3E3aD126979646383c94Fd29E29de9F;\r\n\r\n    function HAND() public {\r\n        // set sender as contract_owner\r\n        contract_owner = msg.sender;\r\n        _initialAmount += publicToken;\r\n\r\n        \r\n\r\n        setFounderLock(address1, 800*10**8, 4, 180 days);\r\n        setFounderLock(address2, 40*10**8, 4, 180 days);\r\n        setFounderLock(address3, 5*10**8, 4, 180 days);\r\n        setFounderLock(address4, 5*10**8, 4, 180 days);\r\n        setFounderLock(address5, 300*10**8, 4, 180 days);\r\n        setFounderLock(address6, 200*10**8, 4, 180 days);\r\n        setFounderLock(address7, 100*10**8, 4, 180 days);\r\n        setFounderLock(address8, 50*10**8, 4, 180 days);\r\n        setFounderLock(address9, 600*10**8, 4, 180 days);\r\n        setFounderLock(address10, 150*10**8, 4, 180 days);\r\n        setFounderLock(address11, 100*10**8, 4, 180 days);\r\n        setFounderLock(address12, 800*10**8, 4, 180 days);\r\n        setFounderLock(address13, 2400*10**8, 4, 180 days);\r\n        setFounderLock(address14, 100*10**8, 4, 180 days);\r\n\r\n        setFounderLock(address15, 135*10**8, 4, 180 days);\r\n        setFounderLock(address16, 25*10**8, 4, 180 days);\r\n        setFounderLock(address17, 20*10**8, 4, 180 days);\r\n        setFounderLock(address18, 40*10**8, 4, 180 days);\r\n        setFounderLock(address19, 20*10**8, 4, 180 days);\r\n        setFounderLock(address20, 110*10**8, 4, 180 days);\r\n    }\r\n    function totalSupply() constant returns (uint256 _totalSupply){\r\n        _totalSupply = _initialAmount;\r\n      }\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        //Default assumes totalSupply can't be over max (2^256 - 1).\r\n        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\r\n        //Replace the if with this one instead.\r\n        //require(balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]);\r\n        require(balances[msg.sender] >= _value);\r\n        require(isFreezed[msg.sender]==false);\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n        }\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        //same as above. Replace this line with the following if you want to protect against wrapping uints.\r\n        //require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]);\r\n        uint256 allowance = allowed[_from][msg.sender];\r\n        require(balances[_from] >= _value && allowance >= _value);\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value;\r\n        if (allowance < MAX_UINT256) {\r\n            allowed[_from][msg.sender] -= _value;\r\n        }\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n        }\r\n\r\n    function balanceOf(address _owner) view public returns (uint256 balance) {\r\n        return balances[_owner];\r\n        }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        require(isFreezed[msg.sender]==false);\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n        }\r\n\r\n    function allowance(address _owner, address _spender)\r\n    view public returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n        }\r\n\r\n    function multisend(address[] addrs,  uint256 _value)\r\n    {\r\n        uint length = addrs.length;\r\n        require(_value * length <= balances[msg.sender]);\r\n        uint i = 0;\r\n        while (i < length) {\r\n           transfer(addrs[i], _value);\r\n           i ++;\r\n        }\r\n        \r\n      }\r\n    \r\n    \r\n    \r\n    // lock token of founder for periodically release\r\n    // _address: founder address; \r\n    // _value: totoal locked token; \r\n    // _round: rounds founder could withdraw; \r\n    // _period: interval time between two rounds\r\n    function setFounderLock(address _address, uint256 _value, uint _round, uint256 _period)  internal onlyOwner{\r\n        founderLockance[_address].amount = _value;\r\n        founderLockance[_address].startTime = now;\r\n        founderLockance[_address].remainRound = _round;\r\n        founderLockance[_address].totalRound = _round;\r\n        founderLockance[_address].period = _period;\r\n    }\r\n    \r\n    \r\n    // allow locked token to be obtained for founder \r\n    function unlockFounder () {\r\n        require(now >= founderLockance[msg.sender].startTime + (founderLockance[msg.sender].totalRound - founderLockance[msg.sender].remainRound + 1) * founderLockance[msg.sender].period);\r\n        require(founderLockance[msg.sender].remainRound > 0);\r\n        uint256 changeAmount = founderLockance[msg.sender].amount.div(founderLockance[msg.sender].remainRound);\r\n        balances[msg.sender] += changeAmount;\r\n        founderLockance[msg.sender].amount -= changeAmount;\r\n        _initialAmount += changeAmount;\r\n        founderLockance[msg.sender].remainRound --;\r\n        FounderUnlock(msg.sender, changeAmount);\r\n    }\r\n    \r\n    function freezeAccount (address _target) onlyOwner {\r\n        isFreezed[_target] = true;\r\n    }\r\n    function unfreezeAccount (address _target) onlyOwner {\r\n        isFreezed[_target] = false;\r\n    }\r\n    function ownerUnlock (address _target, uint256 _value) onlyOwner {\r\n        require(founderLockance[_target].amount >= _value);\r\n        founderLockance[_target].amount -= _value;\r\n        balances[_target] += _value;\r\n        _initialAmount += _value;\r\n    }\r\n    \r\n    // starts ICO\r\n    function openIco () onlyOwner{\r\n        icoOpen = true;\r\n      }\r\n    // ends ICO \r\n    function closeIco () onlyOwner inIco{\r\n        icoOpen = false;\r\n      }\r\n\r\n    // transfer all unsold token to bounty balance;\r\n    function weAreClosed () onlyOwner{\r\n        balances[contract_owner] += publicToken;\r\n        transfer(privateSaleAdd, publicToken);\r\n        publicToken = 0;\r\n    }\r\n    // change rate of public sale\r\n    function changeRate (uint256 _rate) onlyOwner{\r\n        exchangeRate = _rate;\r\n    }    \r\n    \r\n    //  withdraw ETH from contract\r\n    function withdraw() onlyOwner{\r\n        contract_owner.transfer(this.balance);\r\n      }\r\n    // fallback function for receive ETH during ICO\r\n    function () payable inIco{\r\n        require(msg.value >= 10**18);\r\n        uint256 tokenChange = (msg.value * exchangeRate).div(10**18);\r\n        require(tokenChange <= publicToken);\r\n        balances[msg.sender] += tokenChange;\r\n        publicToken = publicToken.sub(tokenChange);\r\n      }\r\n}", "OptimizationUsed": "0", "ContractName": "HAND", "ByteCode": "0x606060405260043610610149576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610221578063095ea7b3146102af57806318160ddd1461030957806318f729da1461033257806323b872dd1461039b5780632dc9ad7f14610414578063313ce56714610477578063384f58eb146104a65780633ba0b9a9146104fb5780633ccfd60b1461052457806340528f9814610539578063485469711461057b5780634ee3dc911461059057806370a08231146105b957806374e7493b14610606578063788649ea14610629578063846786f114610662578063927a90da1461067757806395d89b41146106a457806396dfcc2114610732578063a9059cbb14610747578063bb389952146107a1578063d5abeb01146107b6578063dd62ed3e146107df578063f26c159f1461084b575b600060011515600560009054906101000a900460ff16151514151561016d57600080fd5b670de0b6b3a7640000341015151561018457600080fd5b6101a3670de0b6b3a7640000600454340261088490919063ffffffff16565b905060015481111515156101b657600080fd5b80600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055506102188160015461089f90919063ffffffff16565b60018190555050005b341561022c57600080fd5b6102346108b8565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610274578082015181840152602081019050610259565b50505050905090810190601f1680156102a15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156102ba57600080fd5b6102ef600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610956565b604051808215151515815260200191505060405180910390f35b341561031457600080fd5b61031c610aa6565b6040518082815260200191505060405180910390f35b341561033d57600080fd5b610369600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610aaf565b604051808681526020018581526020018481526020018381526020018281526020019550505050505060405180910390f35b34156103a657600080fd5b6103fa600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610ae5565b604051808215151515815260200191505060405180910390f35b341561041f57600080fd5b610475600480803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091908035906020019091905050610d7f565b005b341561048257600080fd5b61048a610e18565b604051808260ff1660ff16815260200191505060405180910390f35b34156104b157600080fd5b6104b9610e2b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561050657600080fd5b61050e610e51565b6040518082815260200191505060405180910390f35b341561052f57600080fd5b610537610e57565b005b341561054457600080fd5b610579600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610f2e565b005b341561058657600080fd5b61058e61108b565b005b341561059b57600080fd5b6105a3611126565b6040518082815260200191505060405180910390f35b34156105c457600080fd5b6105f0600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061112c565b6040518082815260200191505060405180910390f35b341561061157600080fd5b6106276004808035906020019091905050611175565b005b341561063457600080fd5b610660600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506111db565b005b341561066d57600080fd5b610675611292565b005b341561068257600080fd5b61068a61130b565b604051808215151515815260200191505060405180910390f35b34156106af57600080fd5b6106b761131e565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156106f75780820151818401526020810190506106dc565b50505050905090810190601f1680156107245780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561073d57600080fd5b6107456113bc565b005b341561075257600080fd5b610787600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506114c2565b604051808215151515815260200191505060405180910390f35b34156107ac57600080fd5b6107b461167a565b005b34156107c157600080fd5b6107c96119f3565b6040518082815260200191505060405180910390f35b34156107ea57600080fd5b610835600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506119f9565b6040518082815260200191505060405180910390f35b341561085657600080fd5b610882600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611a80565b005b600080828481151561089257fe5b0490508091505092915050565b60008282111515156108ad57fe5b818303905092915050565b600a8054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561094e5780601f106109235761010080835404028352916020019161094e565b820191906000526020600020905b81548152906001019060200180831161093157829003601f168201915b505050505081565b6000801515600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415156109b657600080fd5b81600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60008054905090565b60086020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040154905085565b600080600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610bb65750828110155b1515610bc157600080fd5b82600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555082600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811015610d0e5782600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150509392505050565b60008083519150600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482840211151515610dd657600080fd5b600090505b81811015610e1257610e048482815181101515610df457fe5b90602001906020020151846114c2565b508080600101915050610ddb565b50505050565b600b60009054906101000a900460ff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60045481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610eb357600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f193505050501515610f2c57600080fd5b565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f8a57600080fd5b80600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015410151515610fdb57600080fd5b80600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000828254039250508190555080600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508060008082825401925050819055505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110e757600080fd5b60011515600560009054906101000a900460ff16151514151561110957600080fd5b6000600560006101000a81548160ff021916908315150217905550565b60015481565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111d157600080fd5b8060048190555050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561123757600080fd5b6000600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112ee57600080fd5b6001600560006101000a81548160ff021916908315150217905550565b600560009054906101000a900460ff1681565b600c8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113b45780601f10611389576101008083540402835291602001916113b4565b820191906000526020600020905b81548152906001019060200180831161139757829003601f168201915b505050505081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561141857600080fd5b60015460066000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055506114b7600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff166001546114c2565b506000600181905550565b600081600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561151257600080fd5b60001515600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514151561157157600080fd5b81600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401546001600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030154030102600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015401421015151561179c57600080fd5b6000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201541115156117ed57600080fd5b611884600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015461088490919063ffffffff16565b905080600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555080600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282540392505081905550806000808282540192505081905550600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160008154809291906001900391905055507f09d03d90545d2ed6aa0cc5365506a63d1a32a8ef263b0995364bef1661ff07f53382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a150565b60025481565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611adc57600080fd5b6001600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611b9357600080fd5b82600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555042600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555081600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018190555081600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003018190555080600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040181905550505050505600a165627a7a72305820fa377f383c806c860476fca45efad8b9ee65810ca8611ffe5c7b38c30ba7ad810029"}