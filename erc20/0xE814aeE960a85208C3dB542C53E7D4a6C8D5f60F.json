{"Runs": "200", "SwarmSource": "bzzr://3c8e25f14894b4155b24701de30f025078d8ed7672c303ae840676a0ea8b273f", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setTransferAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalNormalContributorIdsAllocated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_customerId\",\"type\":\"uint256\"},{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_tokens\",\"type\":\"uint256\"},{\"name\":\"_weiAmount\",\"type\":\"uint256\"}],\"name\":\"allocateNormalTimeMints\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamLockPeriodInSec\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isDayTokenActivated\",\"outputs\":[{\"name\":\"isActivated\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstTeamContributorId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPostIcoContributorIdsAllocated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setReleaseAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fetchSuccessfulSaleProceed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_adr\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_tokens\",\"type\":\"uint256\"},{\"name\":\"_isTest\",\"type\":\"bool\"}],\"name\":\"addTeamTimeMints\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getMintingPowerById\",\"outputs\":[{\"name\":\"mintingPower\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_day\",\"type\":\"uint256\"}],\"name\":\"getPhaseCount\",\"outputs\":[{\"name\":\"phase\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contributors\",\"outputs\":[{\"name\":\"adr\",\"type\":\"address\"},{\"name\":\"initialContributionDay\",\"type\":\"uint256\"},{\"name\":\"lastUpdatedOn\",\"type\":\"uint256\"},{\"name\":\"mintingPower\",\"type\":\"uint256\"},{\"name\":\"expiryBlockNumber\",\"type\":\"uint256\"},{\"name\":\"minPriceInDay\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minPriceInDay\",\"type\":\"uint256\"},{\"name\":\"_expiryBlockNumber\",\"type\":\"uint256\"}],\"name\":\"sellMintingAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintAgents\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setMintAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"balanceById\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halvingCycle\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DayInSecs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamIssuedTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialBlockTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setTokenInformation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingDec\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxMintingPower\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"soldAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minMintingPower\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_offerId\",\"type\":\"uint256\"},{\"name\":\"_offerInDay\",\"type\":\"uint256\"}],\"name\":\"buyMintingAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseTokenTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeMaster\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTeamContributorIdsAllocated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancelSaleOfMintingAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUpgradeState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isValidContributorAddress\",\"outputs\":[{\"name\":\"isValidContributor\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"transferAgents\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isTeamLockInPeriodOverIfTeamAddress\",\"outputs\":[{\"name\":\"isLockInPeriodOver\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellingPriceInDayOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPostIcoContributorIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"released\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_customerId\",\"type\":\"uint256\"},{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"postAllocateAuctionTimeMints\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canUpgrade\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInitialBlockTimestampSet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mintingDec\",\"type\":\"uint256\"}],\"name\":\"setMintingDec\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstPostIcoContributorId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeSub\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxMintingDays\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"updateTimeMintBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalNormalContributorIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refundFailedAuctionAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_initialBlockTimestamp\",\"type\":\"uint256\"}],\"name\":\"releaseToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"getMintingPowerByAddress\",\"outputs\":[{\"name\":\"mintingPower\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTeamContributorIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getSellingStatus\",\"outputs\":[{\"name\":\"status\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateMyTimeMintBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUpgraded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstContributorId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeMul\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releaseAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBalanceToSell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"setUpgradeAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"idOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isValidContributorId\",\"outputs\":[{\"name\":\"isValidContributor\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOnSaleIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeAdd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDayCount\",\"outputs\":[{\"name\":\"daySinceMintingEpoch\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"master\",\"type\":\"address\"}],\"name\":\"setUpgradeMaster\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_initialSupply\",\"type\":\"uint256\"},{\"name\":\"_decimals\",\"type\":\"uint8\"},{\"name\":\"_mintable\",\"type\":\"bool\"},{\"name\":\"_maxAddresses\",\"type\":\"uint256\"},{\"name\":\"_firstTeamContributorId\",\"type\":\"uint256\"},{\"name\":\"_totalTeamContributorIds\",\"type\":\"uint256\"},{\"name\":\"_totalPostIcoContributorIds\",\"type\":\"uint256\"},{\"name\":\"_minMintingPower\",\"type\":\"uint256\"},{\"name\":\"_maxMintingPower\",\"type\":\"uint256\"},{\"name\":\"_halvingCycle\",\"type\":\"uint256\"},{\"name\":\"_minBalanceToSell\",\"type\":\"uint256\"},{\"name\":\"_dayInSecs\",\"type\":\"uint256\"},{\"name\":\"_teamLockPeriodInSec\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"newSymbol\",\"type\":\"string\"}],\"name\":\"UpdatedTokenInformation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"MintingAdrTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"adr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ContributorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"minPriceInDay\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"expiryBlockNumber\",\"type\":\"uint256\"}],\"name\":\"TimeMintOnSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"offerInDay\",\"type\":\"uint256\"}],\"name\":\"TimeMintSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"customerId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"contributorId\",\"type\":\"uint256\"}],\"name\":\"PostInvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"teamAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"TeamAddressAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"customerId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"contributorId\",\"type\":\"uint256\"}],\"name\":\"Invested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"UpgradeAgentSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"MintingAgentChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.16+commit.d7661dd9", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000d050000000000000000000000000000000000000000000000000000000000000c9c0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000005800000000000000000000000000000000000000000000000006f05b59d3b200000000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000580000000000000000000000000000000000000000000001e1d1c72d5b97e0000000000000000000000000000000000000000000000000000000000000000151800000000000000000000000000000000000000000000000000000000001e133800000000000000000000000000000000000000000000000000000000000000003444159000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034441590000000000000000000000000000000000000000000000000000000000", "SourceCode": "pragma solidity ^0.4.13; \r\n\r\n\r\n////////////////// >>>>> Wallet Contract <<<<< ///////////////////\r\n\r\n\r\n/// @title Multisignature wallet - Allows multiple parties to agree on transactions before execution.\r\n/// @author Stefan George - <[email\u00a0protected]>\r\ncontract MultiSigWallet {\r\n\r\n    uint constant public MAX_OWNER_COUNT = 50;\r\n\r\n    event Confirmation(address indexed sender, uint indexed transactionId);\r\n    event Revocation(address indexed sender, uint indexed transactionId);\r\n    event Submission(uint indexed transactionId);\r\n    event Execution(uint indexed transactionId);\r\n    event ExecutionFailure(uint indexed transactionId);\r\n    event Deposit(address indexed sender, uint value);\r\n    event OwnerAddition(address indexed owner);\r\n    event OwnerRemoval(address indexed owner);\r\n    event RequirementChange(uint required);\r\n\r\n    mapping (uint => Transaction) public transactions;\r\n    mapping (uint => mapping (address => bool)) public confirmations;\r\n    mapping (address => bool) public isOwner;\r\n    address[] public owners;\r\n    uint public required;\r\n    uint public transactionCount;\r\n\r\n    struct Transaction {\r\n        address destination;\r\n        uint value;\r\n        bytes data;\r\n        bool executed;\r\n    }\r\n\r\n    modifier onlyWallet() {\r\n        if (msg.sender != address(this))\r\n            throw;\r\n        _;\r\n    }\r\n\r\n    modifier ownerDoesNotExist(address owner) {\r\n        if (isOwner[owner])\r\n            throw;\r\n        _;\r\n    }\r\n\r\n    modifier ownerExists(address owner) {\r\n        if (!isOwner[owner])\r\n            throw;\r\n        _;\r\n    }\r\n\r\n    modifier transactionExists(uint transactionId) {\r\n        if (transactions[transactionId].destination == 0)\r\n            throw;\r\n        _;\r\n    }\r\n\r\n    modifier confirmed(uint transactionId, address owner) {\r\n        if (!confirmations[transactionId][owner])\r\n            throw;\r\n        _;\r\n    }\r\n\r\n    modifier notConfirmed(uint transactionId, address owner) {\r\n        if (confirmations[transactionId][owner])\r\n            throw;\r\n        _;\r\n    }\r\n\r\n    modifier notExecuted(uint transactionId) {\r\n        if (transactions[transactionId].executed)\r\n            throw;\r\n        _;\r\n    }\r\n\r\n    modifier notNull(address _address) {\r\n        if (_address == 0)\r\n            throw;\r\n        _;\r\n    }\r\n\r\n    modifier validRequirement(uint ownerCount, uint _required) {\r\n        if (   ownerCount > MAX_OWNER_COUNT\r\n            || _required > ownerCount\r\n            || _required == 0\r\n            || ownerCount == 0)\r\n            throw;\r\n        _;\r\n    }\r\n\r\n    /// @dev Fallback function allows to deposit ether.\r\n    function()\r\n        payable\r\n    {\r\n        if (msg.value > 0)\r\n            Deposit(msg.sender, msg.value);\r\n    }\r\n\r\n    /*\r\n     * Public functions\r\n     */\r\n    /// @dev Contract constructor sets initial owners and required number of confirmations.\r\n    /// @param _owners List of initial owners.\r\n    /// @param _required Number of required confirmations.\r\n    function MultiSigWallet(address[] _owners, uint _required)\r\n        public\r\n        validRequirement(_owners.length, _required)\r\n    {\r\n        for (uint i=0; i<_owners.length; i++) {\r\n            if (isOwner[_owners[i]] || _owners[i] == 0)\r\n                throw;\r\n            isOwner[_owners[i]] = true;\r\n        }\r\n        owners = _owners;\r\n        required = _required;\r\n    }\r\n\r\n    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.\r\n    /// @param owner Address of new owner.\r\n    function addOwner(address owner)\r\n        public\r\n        onlyWallet\r\n        ownerDoesNotExist(owner)\r\n        notNull(owner)\r\n        validRequirement(owners.length + 1, required)\r\n    {\r\n        isOwner[owner] = true;\r\n        owners.push(owner);\r\n        OwnerAddition(owner);\r\n    }\r\n\r\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\r\n    /// @param owner Address of owner.\r\n    function removeOwner(address owner)\r\n        public\r\n        onlyWallet\r\n        ownerExists(owner)\r\n    {\r\n        isOwner[owner] = false;\r\n        for (uint i=0; i<owners.length - 1; i++)\r\n            if (owners[i] == owner) {\r\n                owners[i] = owners[owners.length - 1];\r\n                break;\r\n            }\r\n        owners.length -= 1;\r\n        if (required > owners.length)\r\n            changeRequirement(owners.length);\r\n        OwnerRemoval(owner);\r\n    }\r\n\r\n    /// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\r\n    /// @param owner Address of owner to be replaced.\r\n    /// @param owner Address of new owner.\r\n    function replaceOwner(address owner, address newOwner)\r\n        public\r\n        onlyWallet\r\n        ownerExists(owner)\r\n        ownerDoesNotExist(newOwner)\r\n    {\r\n        for (uint i=0; i<owners.length; i++)\r\n            if (owners[i] == owner) {\r\n                owners[i] = newOwner;\r\n                break;\r\n            }\r\n        isOwner[owner] = false;\r\n        isOwner[newOwner] = true;\r\n        OwnerRemoval(owner);\r\n        OwnerAddition(newOwner);\r\n    }\r\n\r\n    /// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\r\n    /// @param _required Number of required confirmations.\r\n    function changeRequirement(uint _required)\r\n        public\r\n        onlyWallet\r\n        validRequirement(owners.length, _required)\r\n    {\r\n        required = _required;\r\n        RequirementChange(_required);\r\n    }\r\n\r\n    /// @dev Allows an owner to submit and confirm a transaction.\r\n    /// @param destination Transaction target address.\r\n    /// @param value Transaction ether value.\r\n    /// @param data Transaction data payload.\r\n    /// @return Returns transaction ID.\r\n    function submitTransaction(address destination, uint value, bytes data)\r\n        public\r\n        returns (uint transactionId)\r\n    {\r\n        transactionId = addTransaction(destination, value, data);\r\n        confirmTransaction(transactionId);\r\n    }\r\n\r\n    /// @dev Allows an owner to confirm a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    function confirmTransaction(uint transactionId)\r\n        public\r\n        ownerExists(msg.sender)\r\n        transactionExists(transactionId)\r\n        notConfirmed(transactionId, msg.sender)\r\n    {\r\n        confirmations[transactionId][msg.sender] = true;\r\n        Confirmation(msg.sender, transactionId);\r\n        executeTransaction(transactionId);\r\n    }\r\n\r\n    /// @dev Allows an owner to revoke a confirmation for a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    function revokeConfirmation(uint transactionId)\r\n        public\r\n        ownerExists(msg.sender)\r\n        confirmed(transactionId, msg.sender)\r\n        notExecuted(transactionId)\r\n    {\r\n        confirmations[transactionId][msg.sender] = false;\r\n        Revocation(msg.sender, transactionId);\r\n    }\r\n\r\n    /// @dev Allows anyone to execute a confirmed transaction.\r\n    /// @param transactionId Transaction ID.\r\n    function executeTransaction(uint transactionId)\r\n        public\r\n        notExecuted(transactionId)\r\n    {\r\n        if (isConfirmed(transactionId)) {\r\n            Transaction tx = transactions[transactionId];\r\n            tx.executed = true;\r\n            if (tx.destination.call.value(tx.value)(tx.data))\r\n                Execution(transactionId);\r\n            else {\r\n                ExecutionFailure(transactionId);\r\n                tx.executed = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the confirmation status of a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    /// @return Confirmation status.\r\n    function isConfirmed(uint transactionId)\r\n        public\r\n        constant\r\n        returns (bool)\r\n    {\r\n        uint count = 0;\r\n        for (uint i=0; i<owners.length; i++) {\r\n            if (confirmations[transactionId][owners[i]])\r\n                count += 1;\r\n            if (count == required)\r\n                return true;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Internal functions\r\n     */\r\n    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\r\n    /// @param destination Transaction target address.\r\n    /// @param value Transaction ether value.\r\n    /// @param data Transaction data payload.\r\n    /// @return Returns transaction ID.\r\n    function addTransaction(address destination, uint value, bytes data)\r\n        internal\r\n        notNull(destination)\r\n        returns (uint transactionId)\r\n    {\r\n        transactionId = transactionCount;\r\n        transactions[transactionId] = Transaction({\r\n            destination: destination,\r\n            value: value,\r\n            data: data,\r\n            executed: false\r\n        });\r\n        transactionCount += 1;\r\n        Submission(transactionId);\r\n    }\r\n\r\n    /*\r\n     * Web3 call functions\r\n     */\r\n    /// @dev Returns number of confirmations of a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    /// @return Number of confirmations.\r\n    function getConfirmationCount(uint transactionId)\r\n        public\r\n        constant\r\n        returns (uint count)\r\n    {\r\n        for (uint i=0; i<owners.length; i++)\r\n            if (confirmations[transactionId][owners[i]])\r\n                count += 1;\r\n    }\r\n\r\n    /// @dev Returns total number of transactions after filers are applied.\r\n    /// @param pending Include pending transactions.\r\n    /// @param executed Include executed transactions.\r\n    /// @return Total number of transactions after filters are applied.\r\n    function getTransactionCount(bool pending, bool executed)\r\n        public\r\n        constant\r\n        returns (uint count)\r\n    {\r\n        for (uint i=0; i<transactionCount; i++)\r\n            if (   pending && !transactions[i].executed\r\n                || executed && transactions[i].executed)\r\n                count += 1;\r\n    }\r\n\r\n    /// @dev Returns list of owners.\r\n    /// @return List of owner addresses.\r\n    function getOwners()\r\n        public\r\n        constant\r\n        returns (address[])\r\n    {\r\n        return owners;\r\n    }\r\n\r\n    /// @dev Returns array with owner addresses, which confirmed transaction.\r\n    /// @param transactionId Transaction ID.\r\n    /// @return Returns array of owner addresses.\r\n    function getConfirmations(uint transactionId)\r\n        public\r\n        constant\r\n        returns (address[] _confirmations)\r\n    {\r\n        address[] memory confirmationsTemp = new address[](owners.length);\r\n        uint count = 0;\r\n        uint i;\r\n        for (i=0; i<owners.length; i++)\r\n            if (confirmations[transactionId][owners[i]]) {\r\n                confirmationsTemp[count] = owners[i];\r\n                count += 1;\r\n            }\r\n        _confirmations = new address[](count);\r\n        for (i=0; i<count; i++)\r\n            _confirmations[i] = confirmationsTemp[i];\r\n    }\r\n\r\n    /// @dev Returns list of transaction IDs in defined range.\r\n    /// @param from Index start position of transaction array.\r\n    /// @param to Index end position of transaction array.\r\n    /// @param pending Include pending transactions.\r\n    /// @param executed Include executed transactions.\r\n    /// @return Returns array of transaction IDs.\r\n    function getTransactionIds(uint from, uint to, bool pending, bool executed)\r\n        public\r\n        constant\r\n        returns (uint[] _transactionIds)\r\n    {\r\n        uint[] memory transactionIdsTemp = new uint[](transactionCount);\r\n        uint count = 0;\r\n        uint i;\r\n        for (i=0; i<transactionCount; i++)\r\n            if (   pending && !transactions[i].executed\r\n                || executed && transactions[i].executed)\r\n            {\r\n                transactionIdsTemp[count] = i;\r\n                count += 1;\r\n            }\r\n        _transactionIds = new uint[](to - from);\r\n        for (i=from; i<to; i++)\r\n            _transactionIds[i - from] = transactionIdsTemp[i];\r\n    }\r\n}\r\n\r\n\r\n////////////////// >>>>> Library Contracts <<<<< ///////////////////\r\n\r\n\r\ncontract SafeMathLib {\r\n  function safeMul(uint a, uint b) constant returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function safeSub(uint a, uint b) constant returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function safeAdd(uint a, uint b) constant returns (uint) {\r\n    uint c = a + b;\r\n    assert(c>=a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control \r\n * functions, this simplifies the implementation of \"user permissions\". \r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n  address public newOwner;\r\n  event OwnershipTransferred(address indexed _from, address indexed _to);\r\n  /** \r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner. \r\n   */\r\n  modifier onlyOwner {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to. \r\n   */\r\n  function transferOwnership(address _newOwner) onlyOwner {\r\n    newOwner = _newOwner;\r\n  }\r\n\r\n  function acceptOwnership() {\r\n    require(msg.sender == newOwner);\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n////////////////// >>>>> Token Contracts <<<<< ///////////////////\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20Basic {\r\n  uint public totalSupply;\r\n  function balanceOf(address _owner) constant returns (uint balance);\r\n  function transfer(address _to, uint _value) returns (bool success);\r\n  event Transfer(address indexed _from, address indexed _to, uint _value);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender) constant returns (uint remaining);\r\n  function transferFrom(address _from, address _to, uint _value) returns (bool success);\r\n  function approve(address _spender, uint _value) returns (bool success);\r\n  event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * Standard ERC20 token with Short Hand Attack and approve() race condition mitigation.\r\n *\r\n * Based on code by FirstBlood:\r\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, SafeMathLib {\r\n  /* Token supply got increased and a new owner received these tokens */\r\n  event Minted(address receiver, uint amount);\r\n\r\n  /* Actual balances of token holders */\r\n  mapping(address => uint) balances;\r\n\r\n  /* approve() allowances */\r\n  mapping (address => mapping (address => uint)) allowed;\r\n\r\n  function transfer(address _to, uint _value) returns (bool success) {\r\n    if (balances[msg.sender] >= _value \r\n        && _value > 0 \r\n        && balances[_to] + _value > balances[_to]\r\n        ) {\r\n      balances[msg.sender] = safeSub(balances[msg.sender],_value);\r\n      balances[_to] = safeAdd(balances[_to],_value);\r\n      Transfer(msg.sender, _to, _value);\r\n      return true;\r\n    }\r\n    else{\r\n      return false;\r\n    }\r\n    \r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint _value) returns (bool success) {\r\n    uint _allowance = allowed[_from][msg.sender];\r\n\r\n    if (balances[_from] >= _value   // From a/c has balance\r\n        && _allowance >= _value    // Transfer approved\r\n        && _value > 0              // Non-zero transfer\r\n        && balances[_to] + _value > balances[_to]  // Overflow check\r\n        ){\r\n    balances[_to] = safeAdd(balances[_to],_value);\r\n    balances[_from] = safeSub(balances[_from],_value);\r\n    allowed[_from][msg.sender] = safeSub(_allowance,_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n        }\r\n    else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  function balanceOf(address _owner) constant returns (uint balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  function approve(address _spender, uint _value) returns (bool success) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) constant returns (uint remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\n\r\n    \r\n\r\n/**\r\n * A token that can increase its supply by another contract.\r\n *\r\n * This allows uncapped crowdsale by dynamically increasing the supply when money pours in.\r\n * Only mint agents, contracts whitelisted by owner, can mint new tokens.\r\n *\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n\r\n  bool public mintingFinished = false;\r\n\r\n  /** List of agents that are allowed to create new tokens */\r\n  mapping (address => bool) public mintAgents;\r\n\r\n  event MintingAgentChanged(address addr, bool state  );\r\n\r\n  /**\r\n   * Create new tokens and allocate them to an address..\r\n   *\r\n   * Only callably by a crowdsale contract (mint agent).\r\n   */\r\n  function mint(address receiver, uint amount) onlyMintAgent canMint public {\r\n    totalSupply = safeAdd(totalSupply, amount);\r\n    balances[receiver] = safeAdd(balances[receiver], amount);\r\n    // This will make the mint transaction apper in EtherScan.io\r\n    // We can remove this after there is a standardized minting event\r\n    Transfer(0, receiver, amount);\r\n  }\r\n\r\n  /**\r\n   * Owner can allow a crowdsale contract to mint new tokens.\r\n   */\r\n  function setMintAgent(address addr, bool state) onlyOwner canMint public {\r\n    mintAgents[addr] = state;\r\n    MintingAgentChanged(addr, state);\r\n  }\r\n\r\n  modifier onlyMintAgent() {\r\n    // Only crowdsale contracts are allowed to mint new tokens\r\n    require(mintAgents[msg.sender]);\r\n    _;\r\n  }\r\n\r\n  /** Make sure we are not done yet. */\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * Define interface for releasing the token transfer after a successful crowdsale.\r\n */\r\ncontract ReleasableToken is ERC20, Ownable {\r\n\r\n  /* The finalizer contract that allows unlift the transfer limits on this token */\r\n  address public releaseAgent;\r\n\r\n  /** A crowdsale contract can release us to the wild if ICO success. \r\n   * If false we are are in transfer lock up period.\r\n   */\r\n  bool public released = false;\r\n\r\n  /** Map of agents that are allowed to transfer tokens regardless of the lock down period. \r\n   * These are crowdsale contracts and possible the team multisig itself. \r\n   */\r\n  mapping (address => bool) public transferAgents;\r\n\r\n  /**\r\n   * Limit token transfer until the crowdsale is over.\r\n   */\r\n  modifier canTransfer(address _sender) {\r\n\r\n    if (!released) {\r\n        require(transferAgents[_sender]);\r\n    }\r\n\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * Set the contract that can call release and make the token transferable.\r\n   *\r\n   * Design choice. Allow reset the release agent to fix fat finger mistakes.\r\n   */\r\n  function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public {\r\n\r\n    // We don't do interface check here as we might want to a normal wallet address to act as a release agent\r\n    releaseAgent = addr;\r\n  }\r\n\r\n  /**\r\n   * Owner can allow a particular address (a crowdsale contract) to transfer tokens despite the lock up period.\r\n   */\r\n  function setTransferAgent(address addr, bool state) onlyOwner inReleaseState(false) public {\r\n    transferAgents[addr] = state;\r\n  }\r\n\r\n  /**\r\n   * One way function to release the tokens to the wild.\r\n   *\r\n   * Can be called only from the release agent that is the final ICO contract. \r\n   * It is only called if the crowdsale has been success (first milestone reached).\r\n   */\r\n  function releaseTokenTransfer() public onlyReleaseAgent {\r\n    released = true;\r\n  }\r\n\r\n  /** The function can be called only before or after the tokens have been releasesd */\r\n  modifier inReleaseState(bool releaseState) {\r\n    require(releaseState == released);\r\n    _;\r\n  }\r\n\r\n  /** The function can be called only by a whitelisted release agent. */\r\n  modifier onlyReleaseAgent() {\r\n    require(msg.sender == releaseAgent);\r\n    _;\r\n  }\r\n\r\n  function transfer(address _to, uint _value) canTransfer(msg.sender) returns (bool success) {\r\n    // Call StandardToken.transfer()\r\n   return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint _value) canTransfer(_from) returns (bool success) {\r\n    // Call StandardToken.transferForm()\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n}\r\n\r\n\r\n \r\n\r\n/**\r\n * Upgrade agent interface inspired by Lunyr.\r\n *\r\n * Upgrade agent transfers tokens to a new contract.\r\n * Upgrade agent itself can be the token contract, or just a middle man contract doing the heavy lifting.\r\n */\r\ncontract UpgradeAgent {\r\n  uint public originalSupply;\r\n  /** Interface marker */\r\n  function isUpgradeAgent() public constant returns (bool) {\r\n    return true;\r\n  }\r\n  function upgradeFrom(address _from, uint256 _value) public;\r\n}\r\n\r\n/**\r\n * A token upgrade mechanism where users can opt-in amount of tokens to the next smart contract revision.\r\n *\r\n * First envisioned by Golem and Lunyr projects.\r\n */\r\ncontract UpgradeableToken is StandardToken {\r\n\r\n  /** Contract / person who can set the upgrade path. \r\n   * This can be the same as team multisig wallet, as what it is with its default value. \r\n   */\r\n  address public upgradeMaster;\r\n\r\n  /** The next contract where the tokens will be migrated. */\r\n  UpgradeAgent public upgradeAgent;\r\n\r\n  /** How many tokens we have upgraded by now. */\r\n  uint256 public totalUpgraded;\r\n\r\n  /**\r\n   * Upgrade states.\r\n   *\r\n   * - NotAllowed: The child contract has not reached a condition where the upgrade can bgun\r\n   * - WaitingForAgent: Token allows upgrade, but we don't have a new agent yet\r\n   * - ReadyToUpgrade: The agent is set, but not a single token has been upgraded yet\r\n   * - Upgrading: Upgrade agent is set and the balance holders can upgrade their tokens\r\n   *\r\n   */\r\n  enum UpgradeState {Unknown, NotAllowed, WaitingForAgent, ReadyToUpgrade, Upgrading}\r\n\r\n  /**\r\n   * Somebody has upgraded some of their tokens.\r\n   */\r\n  event Upgrade(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n  /**\r\n   * New upgrade agent available.\r\n   */\r\n  event UpgradeAgentSet(address agent);\r\n\r\n  /**\r\n   * Do not allow construction without upgrade master set.\r\n   */\r\n  function UpgradeableToken(address _upgradeMaster) {\r\n    upgradeMaster = _upgradeMaster;\r\n  }\r\n\r\n  /**\r\n   * Allow the token holder to upgrade some of their tokens to a new contract.\r\n   */\r\n  function upgrade(uint256 value) public {\r\n    UpgradeState state = getUpgradeState();\r\n    require((state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading));\r\n    // Validate input value.\r\n    require(value!=0);\r\n\r\n    balances[msg.sender] = safeSub(balances[msg.sender],value);\r\n\r\n    // Take tokens out from circulation\r\n    totalSupply = safeSub(totalSupply,value);\r\n    totalUpgraded = safeAdd(totalUpgraded,value);\r\n\r\n    // Upgrade agent reissues the tokens\r\n    upgradeAgent.upgradeFrom(msg.sender, value);\r\n    Upgrade(msg.sender, upgradeAgent, value);\r\n  }\r\n\r\n  /**\r\n   * Set an upgrade agent that handles\r\n   */\r\n  function setUpgradeAgent(address agent) external {\r\n    require(canUpgrade());\r\n    require(agent != 0x0);\r\n    // Only a master can designate the next agent\r\n    require(msg.sender == upgradeMaster);\r\n    // Upgrade has already begun for an agent\r\n    require(getUpgradeState() != UpgradeState.Upgrading);\r\n\r\n    upgradeAgent = UpgradeAgent(agent);\r\n\r\n    // Bad interface\r\n    require(upgradeAgent.isUpgradeAgent());\r\n    // Make sure that token supplies match in source and target\r\n    require(upgradeAgent.originalSupply() == totalSupply);\r\n\r\n    UpgradeAgentSet(upgradeAgent);\r\n  }\r\n\r\n  /**\r\n   * Get the state of the token upgrade.\r\n   */\r\n  function getUpgradeState() public constant returns(UpgradeState) {\r\n    if (!canUpgrade()) return UpgradeState.NotAllowed;\r\n    else if(address(upgradeAgent) == 0x00) return UpgradeState.WaitingForAgent;\r\n    else if(totalUpgraded == 0) return UpgradeState.ReadyToUpgrade;\r\n    else return UpgradeState.Upgrading;\r\n  }\r\n\r\n  /**\r\n   * Change the upgrade master.\r\n   *\r\n   * This allows us to set a new owner for the upgrade mechanism.\r\n   */\r\n  function setUpgradeMaster(address master) public {\r\n    require(master != 0x0);\r\n    require(msg.sender == upgradeMaster);\r\n    upgradeMaster = master;\r\n  }\r\n\r\n  /**\r\n   * Child contract can enable to provide the condition when the upgrade can begun.\r\n   */\r\n  function canUpgrade() public constant returns(bool) {\r\n     return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * A crowdsale token.\r\n *\r\n * An ERC-20 token designed specifically for crowdsales with investor protection and \r\n * further development path.\r\n *\r\n * - The token transfer() is disabled until the crowdsale is over\r\n * - The token contract gives an opt-in upgrade path to a new contract\r\n * - The same token can be part of several crowdsales through approve() mechanism\r\n * - The token can be capped (supply set in the constructor) \r\n *   or uncapped (crowdsale contract can mint new tokens)\r\n */\r\ncontract DayToken is  ReleasableToken, MintableToken, UpgradeableToken {\r\n\r\n    enum sellingStatus {NOTONSALE, EXPIRED, ONSALE}\r\n\r\n    /** Basic structure for a contributor with a minting Address\r\n     * adr address of the contributor\r\n     * initialContributionDay initial contribution of the contributor in wei\r\n     * lastUpdatedOn day count from Minting Epoch when the account balance was last updated\r\n     * mintingPower Initial Minting power of the address\r\n     * expiryBlockNumber Variable to mark end of Minting address sale. Set by user\r\n     * minPriceInDay minimum price of Minting address in Day tokens. Set by user\r\n     * status Selling status Variable for transfer Minting address.\r\n     * sellingPriceInDay Variable for transfer Minting address. Price at which the address is actually sold\r\n     */ \r\n    struct Contributor {\r\n        address adr;\r\n        uint256 initialContributionDay;\r\n        uint256 lastUpdatedOn; //Day from Minting Epoch\r\n        uint256 mintingPower;\r\n        uint expiryBlockNumber;\r\n        uint256 minPriceInDay;\r\n        sellingStatus status;\r\n    }\r\n\r\n    /* Stores maximum days for which minting will happen since minting epoch */\r\n    uint256 public maxMintingDays = 1095;\r\n\r\n    /* Mapping to store id of each minting address */\r\n    mapping (address => uint) public idOf;\r\n    /* Mapping from id of each minting address to their respective structures */\r\n    mapping (uint256 => Contributor) public contributors;\r\n    /* mapping to store unix timestamp of when the minting address is issued to each team member */\r\n    mapping (address => uint256) public teamIssuedTimestamp;\r\n    mapping (address => bool) public soldAddresses;\r\n    mapping (address => uint256) public sellingPriceInDayOf;\r\n\r\n    /* Stores the id of the first  contributor */\r\n    uint256 public firstContributorId;\r\n    /* Stores total Pre + Post ICO TimeMints */\r\n    uint256 public totalNormalContributorIds;\r\n    /* Stores total Normal TimeMints allocated */\r\n    uint256 public totalNormalContributorIdsAllocated = 0;\r\n    \r\n    /* Stores the id of the first team TimeMint */\r\n    uint256 public firstTeamContributorId;\r\n    /* Stores the total team TimeMints */\r\n    uint256 public totalTeamContributorIds;\r\n    /* Stores total team TimeMints allocated */\r\n    uint256 public totalTeamContributorIdsAllocated = 0;\r\n\r\n    /* Stores the id of the first Post ICO contributor (for auctionable TimeMints) */\r\n    uint256 public firstPostIcoContributorId;\r\n    /* Stores total Post ICO TimeMints (for auction) */\r\n    uint256 public totalPostIcoContributorIds;\r\n    /* Stores total Auction TimeMints allocated */\r\n    uint256 public totalPostIcoContributorIdsAllocated = 0;\r\n\r\n    /* Maximum number of address */\r\n    uint256 public maxAddresses;\r\n\r\n    /* Min Minting power with 19 decimals: 0.5% : 5000000000000000000 */\r\n    uint256 public minMintingPower;\r\n    /* Max Minting power with 19 decimals: 1% : 10000000000000000000 */\r\n    uint256 public maxMintingPower;\r\n    /* Halving cycle in days (88) */\r\n    uint256 public halvingCycle; \r\n    /* Unix timestamp when minting is to be started */\r\n    uint256 public initialBlockTimestamp;\r\n    /* Flag to prevent setting initialBlockTimestamp more than once */\r\n    bool public isInitialBlockTimestampSet;\r\n    /* number of decimals in minting power */\r\n    uint256 public mintingDec; \r\n\r\n    /* Minimum Balance in Day tokens required to sell a minting address */\r\n    uint256 public minBalanceToSell;\r\n    /* Team address lock down period from issued time, in seconds */\r\n    uint256 public teamLockPeriodInSec;  //Initialize and set function\r\n    /* Duration in secs that we consider as a day. (For test deployment purposes, \r\n       if we want to decrease length of a day. default: 84600)*/\r\n    uint256 public DayInSecs;\r\n\r\n    event UpdatedTokenInformation(string newName, string newSymbol); \r\n    event MintingAdrTransferred(uint id, address from, address to);\r\n    event ContributorAdded(address adr, uint id);\r\n    event TimeMintOnSale(uint id, address seller, uint minPriceInDay, uint expiryBlockNumber);\r\n    event TimeMintSold(uint id, address buyer, uint offerInDay);\r\n    event PostInvested(address investor, uint weiAmount, uint tokenAmount, uint customerId, uint contributorId);\r\n    \r\n    event TeamAddressAdded(address teamAddress, uint id);\r\n    // Tell us invest was success\r\n    event Invested(address receiver, uint weiAmount, uint tokenAmount, uint customerId, uint contributorId);\r\n\r\n    modifier onlyContributor(uint id){\r\n        require(isValidContributorId(id));\r\n        _;\r\n    }\r\n\r\n    string public name; \r\n\r\n    string public symbol; \r\n\r\n    uint8 public decimals; \r\n\r\n    /**\r\n        * Construct the token.\r\n        *\r\n        * This token must be created through a team multisig wallet, so that it is owned by that wallet.\r\n        *\r\n        * @param _name Token name\r\n        * @param _symbol Token symbol - should be all caps\r\n        * @param _initialSupply How many tokens we start with\r\n        * @param _decimals Number of decimal places\r\n        * _mintable Are new tokens created over the crowdsale or do we distribute only the initial supply?\r\n        */\r\n    function DayToken(string _name, string _symbol, uint _initialSupply, uint8 _decimals, \r\n        bool _mintable, uint _maxAddresses, uint _firstTeamContributorId, uint _totalTeamContributorIds, \r\n        uint _totalPostIcoContributorIds, uint256 _minMintingPower, uint256 _maxMintingPower, uint _halvingCycle, \r\n        uint256 _minBalanceToSell, uint256 _dayInSecs, uint256 _teamLockPeriodInSec) \r\n        UpgradeableToken(msg.sender) {\r\n        \r\n        // Create any address, can be transferred\r\n        // to team multisig via changeOwner(),\r\n        // also remember to call setUpgradeMaster()\r\n        owner = msg.sender; \r\n        name = _name; \r\n        symbol = _symbol;  \r\n        totalSupply = _initialSupply; \r\n        decimals = _decimals; \r\n        // Create initially all balance on the team multisig\r\n        balances[owner] = totalSupply; \r\n        maxAddresses = _maxAddresses;\r\n        require(maxAddresses > 1); // else division by zero will occur in setInitialMintingPowerOf\r\n        \r\n        firstContributorId = 1;\r\n        totalNormalContributorIds = maxAddresses - _totalTeamContributorIds - _totalPostIcoContributorIds;\r\n\r\n        // check timeMint total is sane\r\n        require(totalNormalContributorIds >= 1);\r\n\r\n        firstTeamContributorId = _firstTeamContributorId;\r\n        totalTeamContributorIds = _totalTeamContributorIds;\r\n        totalPostIcoContributorIds = _totalPostIcoContributorIds;\r\n        \r\n        // calculate first contributor id to be auctioned post ICO\r\n        firstPostIcoContributorId = maxAddresses - totalPostIcoContributorIds + 1;\r\n        minMintingPower = _minMintingPower;\r\n        maxMintingPower = _maxMintingPower;\r\n        halvingCycle = _halvingCycle;\r\n        // setting future date far far away, year 2020, \r\n        // call setInitialBlockTimestamp to set proper timestamp\r\n        initialBlockTimestamp = 1577836800;\r\n        isInitialBlockTimestampSet = false;\r\n        // use setMintingDec to change this\r\n        mintingDec = 19;\r\n        minBalanceToSell = _minBalanceToSell;\r\n        DayInSecs = _dayInSecs;\r\n        teamLockPeriodInSec = _teamLockPeriodInSec;\r\n        \r\n        if (totalSupply > 0) {\r\n            Minted(owner, totalSupply); \r\n        }\r\n\r\n        if (!_mintable) {\r\n            mintingFinished = true; \r\n            require(totalSupply != 0); \r\n        }\r\n    }\r\n\r\n    /**\r\n    * Used to set timestamp at which minting power of TimeMints is activated\r\n    * Can be called only by owner\r\n    * @param _initialBlockTimestamp timestamp to be set.\r\n    */\r\n    function setInitialBlockTimestamp(uint _initialBlockTimestamp) internal onlyOwner {\r\n        require(!isInitialBlockTimestampSet);\r\n        isInitialBlockTimestampSet = true;\r\n        initialBlockTimestamp = _initialBlockTimestamp;\r\n    }\r\n\r\n    /**\r\n    * check if mintining power is activated and Day token and Timemint transfer is enabled\r\n    */\r\n    function isDayTokenActivated() constant returns (bool isActivated) {\r\n        return (block.timestamp >= initialBlockTimestamp);\r\n    }\r\n\r\n\r\n    /**\r\n    * to check if an id is a valid contributor\r\n    * @param _id contributor id to check.\r\n    */\r\n    function isValidContributorId(uint _id) constant returns (bool isValidContributor) {\r\n        return (_id > 0 && _id <= maxAddresses && contributors[_id].adr != 0 \r\n            && idOf[contributors[_id].adr] == _id); // cross checking\r\n    }\r\n\r\n    /**\r\n    * to check if an address is a valid contributor\r\n    * @param _address  contributor address to check.\r\n    */\r\n    function isValidContributorAddress(address _address) constant returns (bool isValidContributor) {\r\n        return isValidContributorId(idOf[_address]);\r\n    }\r\n\r\n\r\n    /**\r\n    * In case of Team address check if lock-in period is over (returns true for all non team addresses)\r\n    * @param _address team address to check lock in period for.\r\n    */\r\n    function isTeamLockInPeriodOverIfTeamAddress(address _address) constant returns (bool isLockInPeriodOver) {\r\n        isLockInPeriodOver = true;\r\n        if (teamIssuedTimestamp[_address] != 0) {\r\n                if (block.timestamp - teamIssuedTimestamp[_address] < teamLockPeriodInSec)\r\n                    isLockInPeriodOver = false;\r\n        }\r\n\r\n        return isLockInPeriodOver;\r\n    }\r\n\r\n    /**\r\n    * Used to set mintingDec\r\n    * Can be called only by owner\r\n    * @param _mintingDec bounty to be set.\r\n    */\r\n    function setMintingDec(uint256 _mintingDec) onlyOwner {\r\n        require(!isInitialBlockTimestampSet);\r\n        mintingDec = _mintingDec;\r\n    }\r\n\r\n    /**\r\n        * When token is released to be transferable, enforce no new tokens can be created.\r\n        */\r\n    function releaseTokenTransfer() public onlyOwner {\r\n        require(isInitialBlockTimestampSet);\r\n        mintingFinished = true; \r\n        super.releaseTokenTransfer(); \r\n    }\r\n\r\n    /**\r\n        * Allow upgrade agent functionality kick in only if the crowdsale was success.\r\n        */\r\n    function canUpgrade() public constant returns(bool) {\r\n        return released && super.canUpgrade(); \r\n    }\r\n\r\n    /**\r\n        * Owner can update token information here\r\n        */\r\n    function setTokenInformation(string _name, string _symbol) onlyOwner {\r\n        name = _name; \r\n        symbol = _symbol; \r\n        UpdatedTokenInformation(name, symbol); \r\n    }\r\n\r\n    /**\r\n        * Returns the current phase.  \r\n        * Note: Phase starts with 1\r\n        * @param _day Number of days since Minting Epoch\r\n        */\r\n    function getPhaseCount(uint _day) public constant returns (uint phase) {\r\n        phase = (_day/halvingCycle) + 1; \r\n        return (phase); \r\n    }\r\n    /**\r\n        * Returns current day number since minting epoch \r\n        * or zero if initialBlockTimestamp is in future or its DayZero.\r\n        */\r\n    function getDayCount() public constant returns (uint daySinceMintingEpoch) {\r\n        daySinceMintingEpoch = 0;\r\n        if (isDayTokenActivated())\r\n            daySinceMintingEpoch = (block.timestamp - initialBlockTimestamp)/DayInSecs; \r\n\r\n        return daySinceMintingEpoch; \r\n    }\r\n    /**\r\n        * Calculates and Sets the minting power of a particular id.\r\n        * Called before Minting Epoch by constructor\r\n        * @param _id id of the address whose minting power is to be set.\r\n        */\r\n    function setInitialMintingPowerOf(uint256 _id) internal onlyContributor(_id) {\r\n        contributors[_id].mintingPower = \r\n            (maxMintingPower - ((_id-1) * (maxMintingPower - minMintingPower)/(maxAddresses-1))); \r\n    }\r\n\r\n    /**\r\n        * Returns minting power of a particular id.\r\n        * @param _id Contribution id whose minting power is to be returned\r\n        */\r\n    function getMintingPowerById(uint _id) public constant returns (uint256 mintingPower) {\r\n        return contributors[_id].mintingPower/(2**(getPhaseCount(getDayCount())-1)); \r\n    }\r\n\r\n    /**\r\n        * Returns minting power of a particular address.\r\n        * @param _adr Address whose minting power is to be returned\r\n        */\r\n    function getMintingPowerByAddress(address _adr) public constant returns (uint256 mintingPower) {\r\n        return getMintingPowerById(idOf[_adr]);\r\n    }\r\n\r\n\r\n    /**\r\n        * Calculates and returns the balance based on the minting power, day and phase.\r\n        * Can only be called internally\r\n        * Can calculate balance based on last updated.\r\n        * @param _id id whose balnce is to be calculated\r\n        * @param _dayCount day count upto which balance is to be updated\r\n        */\r\n    function availableBalanceOf(uint256 _id, uint _dayCount) internal returns (uint256) {\r\n        uint256 balance = balances[contributors[_id].adr]; \r\n        uint maxUpdateDays = _dayCount < maxMintingDays ? _dayCount : maxMintingDays;\r\n        uint i = contributors[_id].lastUpdatedOn + 1;\r\n        while(i <= maxUpdateDays) {\r\n             uint phase = getPhaseCount(i);\r\n             uint phaseEndDay = phase * halvingCycle - 1; // as first day is 0\r\n             uint constantFactor = contributors[_id].mintingPower / 2**(phase-1);\r\n\r\n            for (uint j = i; j <= phaseEndDay && j <= maxUpdateDays; j++) {\r\n                balance = safeAdd( balance, constantFactor * balance / 10**(mintingDec + 2) );\r\n            }\r\n\r\n            i = j;\r\n            \r\n        } \r\n        return balance; \r\n    }\r\n\r\n    /**\r\n        * Updates the balance of the specified id in its structure and also in the balances[] mapping.\r\n        * returns true if successful.\r\n        * Only for internal calls. Not public.\r\n        * @param _id id whose balance is to be updated.\r\n        */\r\n    function updateBalanceOf(uint256 _id) internal returns (bool success) {\r\n        // check if its contributor\r\n        if (isValidContributorId(_id)) {\r\n            uint dayCount = getDayCount();\r\n            // proceed only if not already updated today\r\n            if (contributors[_id].lastUpdatedOn != dayCount && contributors[_id].lastUpdatedOn < maxMintingDays) {\r\n                address adr = contributors[_id].adr;\r\n                uint oldBalance = balances[adr];\r\n                totalSupply = safeSub(totalSupply, oldBalance);\r\n                uint newBalance = availableBalanceOf(_id, dayCount);\r\n                balances[adr] = newBalance;\r\n                totalSupply = safeAdd(totalSupply, newBalance);\r\n                contributors[_id].lastUpdatedOn = dayCount;\r\n                Transfer(0, adr, newBalance - oldBalance);\r\n                return true; \r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    /**\r\n        * Standard ERC20 function overridden.\r\n        * Returns the balance of the specified address.\r\n        * Calculates the balance on fly only if it is a minting address else \r\n        * simply returns balance from balances[] mapping.\r\n        * For public calls.\r\n        * @param _adr address whose balance is to be returned.\r\n        */\r\n    function balanceOf(address _adr) constant returns (uint balance) {\r\n        uint id = idOf[_adr];\r\n        if (id != 0)\r\n            return balanceById(id);\r\n        else \r\n            return balances[_adr]; \r\n    }\r\n\r\n\r\n    /**\r\n        * Standard ERC20 function overridden.\r\n        * Returns the balance of the specified id.\r\n        * Calculates the balance on fly only if it is a minting address else \r\n        * simply returns balance from balances[] mapping.\r\n        * For public calls.\r\n        * @param _id address whose balance is to be returned.\r\n        */\r\n    function balanceById(uint _id) public constant returns (uint256 balance) {\r\n        address adr = contributors[_id].adr; \r\n        if (isDayTokenActivated()) {\r\n            if (isValidContributorId(_id)) {\r\n                return ( availableBalanceOf(_id, getDayCount()) );\r\n            }\r\n        }\r\n        return balances[adr]; \r\n    }\r\n\r\n    /**\r\n        * Returns totalSupply of DAY tokens.\r\n        */\r\n    function getTotalSupply() public constant returns (uint) {\r\n        return totalSupply;\r\n    }\r\n\r\n    /** Function to update balance of a Timemint\r\n        * returns true if balance updated, false otherwise\r\n        * @param _id TimeMint to update\r\n        */\r\n    function updateTimeMintBalance(uint _id) public returns (bool) {\r\n        require(isDayTokenActivated());\r\n        return updateBalanceOf(_id);\r\n    }\r\n\r\n    /** Function to update balance of sender's Timemint\r\n        * returns true if balance updated, false otherwise\r\n        */\r\n    function updateMyTimeMintBalance() public returns (bool) {\r\n        require(isDayTokenActivated());\r\n        return updateBalanceOf(idOf[msg.sender]);\r\n    }\r\n\r\n    /**\r\n        * Standard ERC20 function overidden.\r\n        * Used to transfer day tokens from caller's address to another\r\n        * @param _to address to which Day tokens are to be transferred\r\n        * @param _value Number of Day tokens to be transferred\r\n        */\r\n    function transfer(address _to, uint _value) public returns (bool success) {\r\n        require(isDayTokenActivated());\r\n        // if Team address, check if lock-in period is over\r\n        require(isTeamLockInPeriodOverIfTeamAddress(msg.sender));\r\n\r\n        updateBalanceOf(idOf[msg.sender]);\r\n\r\n        // Check sender account has enough balance and transfer amount is non zero\r\n        require ( balanceOf(msg.sender) >= _value && _value != 0 ); \r\n        \r\n        updateBalanceOf(idOf[_to]);\r\n\r\n        balances[msg.sender] = safeSub(balances[msg.sender], _value); \r\n        balances[_to] = safeAdd(balances[_to], _value); \r\n        Transfer(msg.sender, _to, _value);\r\n\r\n        return true;\r\n    }\r\n    \r\n\r\n    /**\r\n        * Standard ERC20 Standard Token function overridden. Added Team address vesting period lock. \r\n        */\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\r\n        require(isDayTokenActivated());\r\n\r\n        // if Team address, check if lock-in period is over\r\n        require(isTeamLockInPeriodOverIfTeamAddress(_from));\r\n\r\n        uint _allowance = allowed[_from][msg.sender];\r\n\r\n        updateBalanceOf(idOf[_from]);\r\n\r\n        // Check from account has enough balance, transfer amount is non zero \r\n        // and _value is allowed to be transferred\r\n        require ( balanceOf(_from) >= _value && _value != 0  &&  _value <= _allowance); \r\n\r\n        updateBalanceOf(idOf[_to]);\r\n\r\n        allowed[_from][msg.sender] = safeSub(_allowance, _value);\r\n        balances[_from] = safeSub(balances[_from], _value);\r\n        balances[_to] = safeAdd(balances[_to], _value);\r\n    \r\n        Transfer(_from, _to, _value);\r\n        \r\n        return true;\r\n    }\r\n\r\n\r\n    /** \r\n        * Add any contributor structure (For every kind of contributors: Team/Pre-ICO/ICO/Test)\r\n        * @param _adr Address of the contributor to be added  \r\n        * @param _initialContributionDay Initial Contribution of the contributor to be added\r\n        */\r\n  function addContributor(uint contributorId, address _adr, uint _initialContributionDay) internal onlyOwner {\r\n        require(contributorId <= maxAddresses);\r\n        //address should not be an existing contributor\r\n        require(!isValidContributorAddress(_adr));\r\n        //TimeMint should not be already allocated\r\n        require(!isValidContributorId(contributorId));\r\n        contributors[contributorId].adr = _adr;\r\n        idOf[_adr] = contributorId;\r\n        setInitialMintingPowerOf(contributorId);\r\n        contributors[contributorId].initialContributionDay = _initialContributionDay;\r\n        contributors[contributorId].lastUpdatedOn = getDayCount();\r\n        ContributorAdded(_adr, contributorId);\r\n        contributors[contributorId].status = sellingStatus.NOTONSALE;\r\n    }\r\n\r\n\r\n    /** Function to be called by minting addresses in order to sell their address\r\n        * @param _minPriceInDay Minimum price in DAY tokens set by the seller\r\n        * @param _expiryBlockNumber Expiry Block Number set by the seller\r\n        */\r\n    function sellMintingAddress(uint256 _minPriceInDay, uint _expiryBlockNumber) public returns (bool) {\r\n        require(isDayTokenActivated());\r\n        require(_expiryBlockNumber > block.number);\r\n\r\n        // if Team address, check if lock-in period is over\r\n        require(isTeamLockInPeriodOverIfTeamAddress(msg.sender));\r\n\r\n        uint id = idOf[msg.sender];\r\n        require(contributors[id].status == sellingStatus.NOTONSALE);\r\n\r\n        // update balance of sender address before checking for minimum required balance\r\n        updateBalanceOf(id);\r\n        require(balances[msg.sender] >= minBalanceToSell);\r\n        contributors[id].minPriceInDay = _minPriceInDay;\r\n        contributors[id].expiryBlockNumber = _expiryBlockNumber;\r\n        contributors[id].status = sellingStatus.ONSALE;\r\n        balances[msg.sender] = safeSub(balances[msg.sender], minBalanceToSell);\r\n        balances[this] = safeAdd(balances[this], minBalanceToSell);\r\n        Transfer(msg.sender, this, minBalanceToSell);\r\n        TimeMintOnSale(id, msg.sender, contributors[id].minPriceInDay, contributors[id].expiryBlockNumber);\r\n        return true;\r\n    }\r\n\r\n\r\n    /** Function to be called by minting address in order to cancel the sale of their TimeMint\r\n        */\r\n    function cancelSaleOfMintingAddress() onlyContributor(idOf[msg.sender]) public {\r\n        uint id = idOf[msg.sender];\r\n        // TimeMint should be on sale\r\n        require(contributors[id].status == sellingStatus.ONSALE);\r\n        contributors[id].status = sellingStatus.EXPIRED;\r\n    }\r\n\r\n\r\n    /** Function to be called by any user to get a list of all On Sale TimeMints\r\n        */\r\n    function getOnSaleIds() constant public returns(uint[]) {\r\n        uint[] memory idsOnSale = new uint[](maxAddresses);\r\n        uint j = 0;\r\n        for(uint i=1; i <= maxAddresses; i++) {\r\n\r\n            if ( isValidContributorId(i) &&\r\n                block.number <= contributors[i].expiryBlockNumber && \r\n                contributors[i].status == sellingStatus.ONSALE ) {\r\n                    idsOnSale[j] = i;\r\n                    j++;     \r\n            }\r\n            \r\n        }\r\n        return idsOnSale;\r\n    }\r\n\r\n\r\n    /** Function to be called by any user to get status of a Time Mint.\r\n        * returns status 0 - Not on sale, 1 - Expired, 2 - On sale,\r\n        * @param _id ID number of the Time Mint \r\n        */\r\n    function getSellingStatus(uint _id) constant public returns(sellingStatus status) {\r\n        require(isValidContributorId(_id));\r\n        status = contributors[_id].status;\r\n        if ( block.number > contributors[_id].expiryBlockNumber && \r\n                status == sellingStatus.ONSALE )\r\n            status = sellingStatus.EXPIRED;\r\n\r\n        return status;\r\n    }\r\n\r\n    /** Function to be called by any user to buy a onsale address by offering an amount\r\n        * @param _offerId ID number of the address to be bought by the buyer\r\n        * @param _offerInDay Offer given by the buyer in number of DAY tokens\r\n        */\r\n    function buyMintingAddress(uint _offerId, uint256 _offerInDay) public returns(bool) {\r\n        if (contributors[_offerId].status == sellingStatus.ONSALE \r\n            && block.number > contributors[_offerId].expiryBlockNumber)\r\n        {\r\n            contributors[_offerId].status = sellingStatus.EXPIRED;\r\n        }\r\n        address soldAddress = contributors[_offerId].adr;\r\n        require(contributors[_offerId].status == sellingStatus.ONSALE);\r\n        require(_offerInDay >= contributors[_offerId].minPriceInDay);\r\n\r\n        // prevent seller from cancelling sale in between\r\n        contributors[_offerId].status = sellingStatus.NOTONSALE;\r\n\r\n        // first get the offered DayToken in the token contract & \r\n        // then transfer the total sum (minBalanceToSend+_offerInDay) to the seller\r\n        balances[msg.sender] = safeSub(balances[msg.sender], _offerInDay);\r\n        balances[this] = safeAdd(balances[this], _offerInDay);\r\n        Transfer(msg.sender, this, _offerInDay);\r\n        if(transferMintingAddress(contributors[_offerId].adr, msg.sender)) {\r\n            //mark the offer as sold & let seller pull the proceed to their own account.\r\n            sellingPriceInDayOf[soldAddress] = _offerInDay;\r\n            soldAddresses[soldAddress] = true; \r\n            TimeMintSold(_offerId, msg.sender, _offerInDay);  \r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n        * Transfer minting address from one user to another\r\n        * Gives the transfer-to address, the id of the original address\r\n        * returns true if successful and false if not.\r\n        * @param _to address of the user to which minting address is to be tranferred\r\n        */\r\n    function transferMintingAddress(address _from, address _to) internal onlyContributor(idOf[_from]) returns (bool) {\r\n        require(isDayTokenActivated());\r\n\r\n        // _to should be non minting address\r\n        require(!isValidContributorAddress(_to));\r\n        \r\n        uint id = idOf[_from];\r\n        // update balance of from address before transferring minting power\r\n        updateBalanceOf(id);\r\n\r\n        contributors[id].adr = _to;\r\n        idOf[_to] = id;\r\n        idOf[_from] = 0;\r\n        contributors[id].initialContributionDay = 0;\r\n        // needed as id is assigned to new address\r\n        contributors[id].lastUpdatedOn = getDayCount();\r\n        contributors[id].expiryBlockNumber = 0;\r\n        contributors[id].minPriceInDay = 0;\r\n        MintingAdrTransferred(id, _from, _to);\r\n        return true;\r\n    }\r\n\r\n\r\n    /** Function to allow seller to get back their deposited amount of day tokens(minBalanceToSell) and \r\n        * offer made by buyer after successful sale.\r\n        * Throws if sale is not successful\r\n        */\r\n    function fetchSuccessfulSaleProceed() public  returns(bool) {\r\n        require(soldAddresses[msg.sender] == true);\r\n        // to prevent re-entrancy attack\r\n        soldAddresses[msg.sender] = false;\r\n        uint saleProceed = safeAdd(minBalanceToSell, sellingPriceInDayOf[msg.sender]);\r\n        balances[this] = safeSub(balances[this], saleProceed);\r\n        balances[msg.sender] = safeAdd(balances[msg.sender], saleProceed);\r\n        Transfer(this, msg.sender, saleProceed);\r\n        return true;\r\n                \r\n    }\r\n\r\n    /** Function that lets a seller get their deposited day tokens (minBalanceToSell) back, if no buyer turns up.\r\n        * Allowed only after expiryBlockNumber\r\n        * Throws if any other state other than EXPIRED\r\n        */\r\n    function refundFailedAuctionAmount() onlyContributor(idOf[msg.sender]) public returns(bool){\r\n        uint id = idOf[msg.sender];\r\n        if(block.number > contributors[id].expiryBlockNumber && contributors[id].status == sellingStatus.ONSALE)\r\n        {\r\n            contributors[id].status = sellingStatus.EXPIRED;\r\n        }\r\n        require(contributors[id].status == sellingStatus.EXPIRED);\r\n        // reset selling status\r\n        contributors[id].status = sellingStatus.NOTONSALE;\r\n        balances[this] = safeSub(balances[this], minBalanceToSell);\r\n        // update balance of seller address before refunding\r\n        updateBalanceOf(id);\r\n        balances[msg.sender] = safeAdd(balances[msg.sender], minBalanceToSell);\r\n        contributors[id].minPriceInDay = 0;\r\n        contributors[id].expiryBlockNumber = 0;\r\n        Transfer(this, msg.sender, minBalanceToSell);\r\n        return true;\r\n    }\r\n\r\n\r\n    /** Function to add a team address as a contributor and store it's time issued to calculate vesting period\r\n        * Called by owner\r\n        */\r\n    function addTeamTimeMints(address _adr, uint _id, uint _tokens, bool _isTest) public onlyOwner {\r\n        //check if Id is in range of team Ids\r\n        require(_id >= firstTeamContributorId && _id < firstTeamContributorId + totalTeamContributorIds);\r\n        require(totalTeamContributorIdsAllocated < totalTeamContributorIds);\r\n        addContributor(_id, _adr, 0);\r\n        totalTeamContributorIdsAllocated++;\r\n        // enforce lockin period if not test address\r\n        if(!_isTest) teamIssuedTimestamp[_adr] = block.timestamp;\r\n        mint(_adr, _tokens);\r\n        TeamAddressAdded(_adr, _id);\r\n    }\r\n\r\n\r\n    /** Function to add reserved aution TimeMints post-ICO. Only by owner\r\n        * @param _receiver Address of the minting to be added\r\n        * @param _customerId Server side id of the customer\r\n        * @param _id contributorId\r\n        */\r\n    function postAllocateAuctionTimeMints(address _receiver, uint _customerId, uint _id) public onlyOwner {\r\n\r\n        //check if Id is in range of Auction Ids\r\n        require(_id >= firstPostIcoContributorId && _id < firstPostIcoContributorId + totalPostIcoContributorIds);\r\n        require(totalPostIcoContributorIdsAllocated < totalPostIcoContributorIds);\r\n        \r\n        require(released == true);\r\n        addContributor(_id, _receiver, 0);\r\n        totalPostIcoContributorIdsAllocated++;\r\n        PostInvested(_receiver, 0, 0, _customerId, _id);\r\n    }\r\n\r\n\r\n    /** Function to add all contributors except team, test and Auctions TimeMints. Only by owner\r\n        * @param _receiver Address of the minting to be added\r\n        * @param _customerId Server side id of the customer\r\n        * @param _id contributor id\r\n        * @param _tokens day tokens to allocate\r\n        * @param _weiAmount ether invested in wei\r\n        */\r\n    function allocateNormalTimeMints(address _receiver, uint _customerId, uint _id, uint _tokens, uint _weiAmount) public onlyOwner {\r\n        // check if Id is in range of Normal Ids\r\n        require(_id >= firstContributorId && _id <= totalNormalContributorIds);\r\n        require(totalNormalContributorIdsAllocated < totalNormalContributorIds);\r\n        addContributor(_id, _receiver, _tokens);\r\n        totalNormalContributorIdsAllocated++;\r\n        mint(_receiver, _tokens);\r\n        Invested(_receiver, _weiAmount, _tokens, _customerId, _id);\r\n        \r\n    }\r\n\r\n\r\n    /** Function to release token\r\n        * Called by owner\r\n        */\r\n    function releaseToken(uint _initialBlockTimestamp) public onlyOwner {\r\n        require(!released); // check not already released\r\n        \r\n        setInitialBlockTimestamp(_initialBlockTimestamp);\r\n\r\n        // Make token transferable\r\n        releaseTokenTransfer();\r\n    }\r\n    \r\n}", "OptimizationUsed": "1", "ContractName": "DayToken", "ByteCode": "0x606060405236156103b65763ffffffff60e060020a60003504166302f652a381146103bb57806304d41474146103e157806305d2035b1461040657806306fdde031461042d578063095ea7b3146104b85780630a402742146104ee5780630c58062b1461051b57806310f1726d14610540578063128e37611461056757806318160ddd1461058c5780631bf2a90a146105b157806323b872dd146105d657806329ff4f53146106125780632f83f78114610633578063313ce5671461065a578063331c55b414610683578063335494a4146106af57806335995022146106d75780633cb5d100146106ff5780633ed66d3d1461077557806340c10f19146107a257806342c1867b146107c657806343214675146107f957806345977d031461081f5780634778dfb8146108375780634813e3e51461085f578063485d5dd21461088457806348bb4067146108a95780634b3d81b6146108da5780634eee966f146108ff578063534439a31461099457806354f63105146109b95780635956b853146109de5780635d444ffb14610a115780635de4ccb014610a365780635df34ff214610a655780635f412d4f14610a92578063600440cb14610aa757806370a0823114610ad6578063718228fa14610b07578063740707cf14610b2c57806379ba509714610b415780638444b39114610b565780638526d09214610b8d578063867c285714610bc05780638da5cb5b14610bf35780638f7b7bce14610c22578063928e659214610c55578063936bbf9a14610c8657806393e5365f14610cab57806395d89b4114610cd05780639613252114610d5b57806396a8069914610d825780639738968c14610da95780639aaac86414610dd05780639bc8e9ee14610df7578063a222a52f14610e0f578063a293d1e814610e34578063a41ff1e514610e5f578063a5f2676014610e84578063a666190114610eae578063a9059cbb14610ed3578063b19b216214610f09578063b54d623814610f30578063b6033daf14610f48578063bef17ed014610f79578063c392f11814610f9e578063c4e41b2214610fd8578063c59513a414610ffd578063c752ff6214611024578063c96e83db14611049578063d05c78da1461106e578063d1f276d314611099578063d49dbb5c146110c8578063d4ee1d90146110ed578063d7e7088a1461111c578063d94fe8321461113d578063dd62ed3e1461116e578063df30e592146111a5578063e0faf0a8146111cf578063e6cb901314611236578063eb60764f14611261578063f2fde38b14611286578063ffeb7d75146112a7575b600080fd5b34156103c657600080fd5b6103df600160a060020a036004351660243515156112c8565b005b34156103ec57600080fd5b6103f4611329565b60405190815260200160405180910390f35b341561041157600080fd5b61041961132f565b604051901515815260200160405180910390f35b341561043857600080fd5b610440611338565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561047d5780820151818401525b602001610464565b50505050905090810190601f1680156104aa5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156104c357600080fd5b610419600160a060020a03600435166024356113d6565b604051901515815260200160405180910390f35b34156104f957600080fd5b6103df600160a060020a036004351660243560443560643560843561147d565b005b341561052657600080fd5b6103f461154e565b60405190815260200160405180910390f35b341561054b57600080fd5b610419611554565b604051901515815260200160405180910390f35b341561057257600080fd5b6103f461155e565b60405190815260200160405180910390f35b341561059757600080fd5b6103f4611564565b60405190815260200160405180910390f35b34156105bc57600080fd5b6103f461156a565b60405190815260200160405180910390f35b34156105e157600080fd5b610419600160a060020a0360043581169060243516604435611570565b604051901515815260200160405180910390f35b341561061d57600080fd5b6103df600160a060020a03600435166116f7565b005b341561063e57600080fd5b61041961174e565b604051901515815260200160405180910390f35b341561066557600080fd5b61066d611858565b60405160ff909116815260200160405180910390f35b341561068e57600080fd5b6103df600160a060020a03600435166024356044356064351515611861565b005b34156106ba57600080fd5b6103f460043561193c565b60405190815260200160405180910390f35b34156106e257600080fd5b6103f460043561197b565b60405190815260200160405180910390f35b341561070a57600080fd5b610715600435611996565b6040518088600160a060020a0316600160a060020a0316815260200187815260200186815260200185815260200184815260200183815260200182600281111561075b57fe5b60ff16815260200197505050505050505060405180910390f35b341561078057600080fd5b6104196004356024356119e0565b604051901515815260200160405180910390f35b34156107ad57600080fd5b6103df600160a060020a0360043516602435611bf8565b005b34156107d157600080fd5b610419600160a060020a0360043516611ca7565b604051901515815260200160405180910390f35b341561080457600080fd5b6103df600160a060020a03600435166024351515611cbc565b005b341561082a57600080fd5b6103df600435611d5b565b005b341561084257600080fd5b6103f4600435611eb5565b60405190815260200160405180910390f35b341561086a57600080fd5b6103f4611f23565b60405190815260200160405180910390f35b341561088f57600080fd5b6103f4611f29565b60405190815260200160405180910390f35b34156108b457600080fd5b6103f4600160a060020a0360043516611f2f565b60405190815260200160405180910390f35b34156108e557600080fd5b6103f4611f41565b60405190815260200160405180910390f35b341561090a57600080fd5b6103df60046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f016020809104026020016040519081016040528181529291906020840183838082843750949650611f4795505050505050565b005b341561099f57600080fd5b6103f46120b7565b60405190815260200160405180910390f35b34156109c457600080fd5b6103f46120bd565b60405190815260200160405180910390f35b34156109e957600080fd5b610419600160a060020a03600435166120c3565b604051901515815260200160405180910390f35b3415610a1c57600080fd5b6103f46120d8565b60405190815260200160405180910390f35b3415610a4157600080fd5b610a496120de565b604051600160a060020a03909116815260200160405180910390f35b3415610a7057600080fd5b6104196004356024356120ed565b604051901515815260200160405180910390f35b3415610a9d57600080fd5b6103df61232d565b005b3415610ab257600080fd5b610a49612372565b604051600160a060020a03909116815260200160405180910390f35b3415610ae157600080fd5b6103f4600160a060020a0360043516612381565b60405190815260200160405180910390f35b3415610b1257600080fd5b6103f46123d7565b60405190815260200160405180910390f35b3415610b3757600080fd5b6103df6123dd565b005b3415610b4c57600080fd5b6103df61247b565b005b3415610b6157600080fd5b610b696124fa565b60405180826004811115610b7957fe5b60ff16815260200191505060405180910390f35b3415610b9857600080fd5b610419600160a060020a036004351661254b565b604051901515815260200160405180910390f35b3415610bcb57600080fd5b610419600160a060020a0360043516612575565b604051901515815260200160405180910390f35b3415610bfe57600080fd5b610a4961258a565b604051600160a060020a03909116815260200160405180910390f35b3415610c2d57600080fd5b610419600160a060020a0360043516612599565b604051901515815260200160405180910390f35b3415610c6057600080fd5b6103f4600160a060020a03600435166125e9565b60405190815260200160405180910390f35b3415610c9157600080fd5b6103f46125fb565b60405190815260200160405180910390f35b3415610cb657600080fd5b6103f4612601565b60405190815260200160405180910390f35b3415610cdb57600080fd5b610440612607565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561047d5780820151818401525b602001610464565b50505050905090810190601f1680156104aa5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3415610d6657600080fd5b6104196126a5565b604051901515815260200160405180910390f35b3415610d8d57600080fd5b6103df600160a060020a03600435166024356044356126b5565b005b3415610db457600080fd5b61041961279a565b604051901515815260200160405180910390f35b3415610ddb57600080fd5b6104196127c0565b604051901515815260200160405180910390f35b3415610e0257600080fd5b6103df6004356127c9565b005b3415610e1a57600080fd5b6103f46127fe565b60405190815260200160405180910390f35b3415610e3f57600080fd5b6103f4600435602435612804565b60405190815260200160405180910390f35b3415610e6a57600080fd5b6103f461281b565b60405190815260200160405180910390f35b3415610e8f57600080fd5b610419600435612821565b604051901515815260200160405180910390f35b3415610eb957600080fd5b6103f4612847565b60405190815260200160405180910390f35b3415610ede57600080fd5b610419600160a060020a036004351660243561284d565b604051901515815260200160405180910390f35b3415610f1457600080fd5b610419612980565b604051901515815260200160405180910390f35b3415610f3b57600080fd5b6103df600435612b5a565b005b3415610f5357600080fd5b6103f4600160a060020a0360043516612ba2565b60405190815260200160405180910390f35b3415610f8457600080fd5b6103f4612bcc565b60405190815260200160405180910390f35b3415610fa957600080fd5b610fb4600435612bd2565b60405180826002811115610b7957fe5b60ff16815260200191505060405180910390f35b3415610fe357600080fd5b6103f4612c31565b60405190815260200160405180910390f35b341561100857600080fd5b610419612c38565b604051901515815260200160405180910390f35b341561102f57600080fd5b6103f4612c75565b60405190815260200160405180910390f35b341561105457600080fd5b6103f4612c7b565b60405190815260200160405180910390f35b341561107957600080fd5b6103f4600435602435612c81565b60405190815260200160405180910390f35b34156110a457600080fd5b610a49612cb0565b604051600160a060020a03909116815260200160405180910390f35b34156110d357600080fd5b6103f4612cbf565b60405190815260200160405180910390f35b34156110f857600080fd5b610a49612cc5565b604051600160a060020a03909116815260200160405180910390f35b341561112757600080fd5b6103df600160a060020a0360043516612cd4565b005b341561114857600080fd5b6103f4600160a060020a0360043516612e80565b60405190815260200160405180910390f35b341561117957600080fd5b6103f4600160a060020a0360043581169060243516612e92565b60405190815260200160405180910390f35b34156111b057600080fd5b610419600435612ebf565b604051901515815260200160405180910390f35b34156111da57600080fd5b6111e2612f2b565b60405160208082528190810183818151815260200191508051906020019060200280838360005b838110156112225780820151818401525b602001611209565b505050509050019250505060405180910390f35b341561124157600080fd5b6103f4600435602435612ffc565b60405190815260200160405180910390f35b341561126c57600080fd5b6103f4613016565b60405190815260200160405180910390f35b341561129157600080fd5b6103df600160a060020a036004351661303e565b005b34156112b257600080fd5b6103df600160a060020a0360043516613079565b005b60035433600160a060020a039081169116146112e357600080fd5b60055460009060a060020a900460ff16156112fd57600080fd5b600160a060020a0383166000908152600660205260409020805460ff19168315151790555b5b505b5050565b60145481565b60075460ff1681565b60258054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113ce5780601f106113a3576101008083540402835291602001916113ce565b820191906000526020600020905b8154815290600101906020018083116113b157829003601f168201915b505050505081565b60008115806114085750600160a060020a03338116600090815260026020908152604080832093871683529290522054155b151561141357600080fd5b600160a060020a03338116600081815260026020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b60035433600160a060020a0390811691161461149857600080fd5b60125483101580156114ac57506013548311155b15156114b757600080fd5b601354601454106114c757600080fd5b6114d28386846130c8565b6014805460010190556114e58583611bf8565b7f6bd11c91e66ab57411c3d72828f939eac4446988c1c1f5862442bf7fa9884e238582848787604051600160a060020a03909516855260208501939093526040808501929092526060840152608083019190915260a0909101905180910390a15b5b5050505050565b60235481565b601f544210155b90565b60155481565b60005481565b601a5481565b60008061157b611554565b151561158657600080fd5b61158f85612599565b151561159a57600080fd5b50600160a060020a03808516600081815260026020908152604080832033909516835293815283822054928252600d905291909120546115d9906131fb565b50826115e486612381565b101580156115f157508215155b80156115fd5750808311155b151561160857600080fd5b600160a060020a0384166000908152600d602052604090205461162a906131fb565b506116358184612804565b600160a060020a0380871660008181526002602090815260408083203390951683529381528382209490945590815260019092529020546116769084612804565b600160a060020a0380871660009081526001602052604080822093909355908616815220546116a59084612ffc565b600160a060020a03808616600081815260016020526040908190209390935591908716906000805160206137058339815191529086905190815260200160405180910390a3600191505b509392505050565b60035433600160a060020a0390811691161461171257600080fd5b60055460009060a060020a900460ff161561172c57600080fd5b60058054600160a060020a031916600160a060020a0384161790555b5b505b50565b600160a060020a033316600090815260106020526040812054819060ff16151560011461177a57600080fd5b600160a060020a0333166000908152601060209081526040808320805460ff191690556022546011909252909120546117b39190612ffc565b600160a060020a0330166000908152600160205260409020549091506117d99082612804565b600160a060020a033081166000908152600160205260408082209390935533909116815220546118099082612ffc565b600160a060020a0333811660008181526001602052604090819020939093559130909116906000805160206137058339815191529084905190815260200160405180910390a3600191505b5090565b60275460ff1681565b60035433600160a060020a0390811691161461187c57600080fd5b601554831015801561189357506016546015540183105b151561189e57600080fd5b601654601754106118ae57600080fd5b6118ba838560006130c8565b6017805460010190558015156118e657600160a060020a0384166000908152600f602052604090204290555b6118f08483611bf8565b7fe79fec6463e59273a1da7bc924872b8b35b64c591ce527b6329f0db8d6be71fd8484604051600160a060020a03909216825260208201526040908101905180910390a15b5b50505050565b6000600161195061194b613016565b61197b565b6000848152600e602052604090206003015491900360020a9081151561197257fe5b0490505b919050565b6000601e548281151561198a57fe5b0460010190505b919050565b600e602052600090815260409020805460018201546002830154600384015460048501546005860154600690960154600160a060020a039095169593949293919290919060ff1687565b6000806119eb611554565b15156119f657600080fd5b438311611a0257600080fd5b611a0b33612599565b1515611a1657600080fd5b50600160a060020a0333166000908152600d6020526040812054905b6000828152600e602052604090206006015460ff166002811115611a5257fe5b14611a5c57600080fd5b611a65816131fb565b50602254600160a060020a0333166000908152600160205260409020541015611a8d57600080fd5b6000818152600e60205260409020600581018590556004810184905560060180546002919060ff19166001835b0217905550600160a060020a033316600090815260016020526040902054602254611ae59190612804565b600160a060020a03338116600090815260016020526040808220939093553090911681522054602254611b189190612ffc565b6001600030600160a060020a0316600160a060020a031681526020019081526020016000208190555030600160a060020a031633600160a060020a031660008051602061370583398151915260225460405190815260200160405180910390a36000818152600e60205260409081902060058101546004909101547f789864ab03bca8d309c9bec6804307cfc416db24eab7873ba7f3df79797b09179284923392909151938452600160a060020a03909216602084015260408084019190915260608301919091526080909101905180910390a1600191505b5092915050565b600160a060020a03331660009081526008602052604090205460ff161515611c1f57600080fd5b60075460ff1615611c2f57600080fd5b611c3b60005482612ffc565b6000908155600160a060020a038316815260016020526040902054611c609082612ffc565b600160a060020a0383166000818152600160205260408082209390935590916000805160206137058339815191529084905190815260200160405180910390a35b5b5b5050565b60086020526000908152604090205460ff1681565b60035433600160a060020a03908116911614611cd757600080fd5b60075460ff1615611ce757600080fd5b600160a060020a03821660009081526008602052604090819020805460ff19168315151790557f4b0adf6c802794c7dde28a08a4e07131abcff3bf9603cd71f14f90bec7865efa908390839051600160a060020a039092168252151560208201526040908101905180910390a15b5b5b5050565b6000611d656124fa565b905060035b816004811115611d7657fe5b1480611d8e575060045b816004811115611d8c57fe5b145b1515611d9957600080fd5b811515611da557600080fd5b600160a060020a033316600090815260016020526040902054611dc89083612804565b600160a060020a03331660009081526001602052604081209190915554611def9083612804565b600055600b54611dff9083612ffc565b600b55600a54600160a060020a031663753e88e5338460405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b1515611e5857600080fd5b6102c65a03f11515611e6957600080fd5b5050600a54600160a060020a03908116915033167f7e5c344a8141a805725cb476f76c6953b842222b967edd1f78ddb6e8b3f397ac8460405190815260200160405180910390a35b5050565b6000818152600e6020526040812054600160a060020a0316611ed5611554565b15611f0057611ee383612ebf565b15611f0057611ef983611ef4613016565b613321565b9150611f1d565b5b600160a060020a03811660009081526001602052604090205491505b50919050565b601e5481565b60245481565b600f6020526000908152604090205481565b601f5481565b60035433600160a060020a03908116911614611f6257600080fd5b6025828051611f75929160200190613652565b506026818051611f89929160200190613652565b507fd131ab1e6f279deea74e13a18477e13e2107deb6dc8ae955648948be5841fb466025602660405160408082528354600260001961010060018416150201909116049082018190528190602082019060608301908690801561202d5780601f106120025761010080835404028352916020019161202d565b820191906000526020600020905b81548152906001019060200180831161201057829003601f168201915b50508381038252845460026000196101006001841615020190911604808252602090910190859080156120a15780601f10612076576101008083540402835291602001916120a1565b820191906000526020600020905b81548152906001019060200180831161208457829003601f168201915b505094505050505060405180910390a15b5b5050565b60215481565b601d5481565b60106020526000908152604090205460ff1681565b601c5481565b600a54600160a060020a031681565b60008060025b6000858152600e602052604090206006015460ff16600281111561211357fe5b14801561213057506000848152600e602052604090206004015443115b15612159576000848152600e6020526040902060060180546001919060ff191682805b02179055505b506000838152600e6020526040902054600160a060020a031660025b6000858152600e602052604090206006015460ff16600281111561219557fe5b1461219f57600080fd5b6000848152600e60205260409020600501548310156121bd57600080fd5b6000848152600e60205260408120600601805460ff19166001835b0217905550600160a060020a0333166000908152600160205260409020546122009084612804565b600160a060020a033381166000908152600160205260408082209390935530909116815220546122309084612ffc565b600160a060020a0330811660008181526001602052604090819020939093559133909116906000805160206137058339815191529086905190815260200160405180910390a36000848152600e602052604090205461229890600160a060020a031633613420565b1561232157600160a060020a0381166000908152601160209081526040808320869055601090915290819020805460ff191660011790557f72760e46b3824807567c13ec75882de5d9c789a91517ae7b474d2e6b62d3771e9085903390869051928352600160a060020a0390911660208301526040808301919091526060909101905180910390a15b600191505b5092915050565b60035433600160a060020a0390811691161461234857600080fd5b60205460ff16151561235957600080fd5b6007805460ff1916600117905561236e613574565b5b5b565b600954600160a060020a031681565b600160a060020a0381166000908152600d602052604081205480156123b057611ef981611eb5565b9150611f1d565b600160a060020a0383166000908152600160205260409020549150611f1d565b5b50919050565b60175481565b600160a060020a0333166000908152600d60205260408120546123ff81612ebf565b151561240a57600080fd5b600160a060020a0333166000908152600d6020526040902054915060025b6000838152600e602052604090206006015460ff16600281111561244857fe5b1461245257600080fd5b6000828152600e6020526040902060060180546001919060ff191682805b02179055505b5b5050565b60045433600160a060020a0390811691161461249657600080fd5b600454600354600160a060020a0391821691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360045460038054600160a060020a031916600160a060020a039092169190911790555b565b600061250461279a565b15156125125750600161155b565b600a54600160a060020a0316151561252c5750600261155b565b600b54151561253d5750600361155b565b50600461155b565b5b5b5b90565b600160a060020a0381166000908152600d602052604081205461256d90612ebf565b90505b919050565b60066020526000908152604090205460ff1681565b600354600160a060020a031681565b600160a060020a0381166000908152600f60205260409020546001901561197657602354600160a060020a0383166000908152600f602052604090205442031015611976575060005b5b5b919050565b60116020526000908152604090205481565b60195481565b601b5481565b60268054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113ce5780601f106113a3576101008083540402835291602001916113ce565b820191906000526020600020905b8154815290600101906020018083116113b157829003601f168201915b505050505081565b60055460a060020a900460ff1681565b60035433600160a060020a039081169116146126d057600080fd5b60185481101580156126e757506019546018540181105b15156126f257600080fd5b601954601a541061270257600080fd5b60055460a060020a900460ff16151560011461271d57600080fd5b612729818460006130c8565b601a805460010190557f5da87a24d5db985862dc335ff32e322d9588ae9b4a971bd1526a58051c8cbaa4836000808585604051600160a060020a03909516855260208501939093526040808501929092526060840152608083019190915260a0909101905180910390a15b5b505050565b60055460009060a060020a900460ff1680156127b957506127b96135b7565b5b90505b90565b60205460ff1681565b60035433600160a060020a039081169116146127e457600080fd5b60205460ff16156127f457600080fd5b60218190555b5b50565b60185481565b60008282111561281057fe5b508082035b92915050565b600c5481565b600061282b611554565b151561283657600080fd5b61256d826131fb565b90505b919050565b60135481565b6000612857611554565b151561286257600080fd5b61286b33612599565b151561287657600080fd5b600160a060020a0333166000908152600d6020526040902054612898906131fb565b50816128a333612381565b101580156128b057508115155b15156128bb57600080fd5b600160a060020a0383166000908152600d60205260409020546128dd906131fb565b50600160a060020a0333166000908152600160205260409020546129019083612804565b600160a060020a0333811660009081526001602052604080822093909355908516815220546129309083612ffc565b600160a060020a0380851660008181526001602052604090819020939093559133909116906000805160206137058339815191529085905190815260200160405180910390a35060015b92915050565b600160a060020a0333166000908152600d602052604081205481906129a481612ebf565b15156129af57600080fd5b600160a060020a0333166000908152600d6020908152604080832054808452600e9092529091206004015490925043118015612a0b575060025b6000838152600e602052604090206006015460ff166002811115612a0957fe5b145b15612a34576000828152600e6020526040902060060180546001919060ff191682805b02179055505b60015b6000838152600e602052604090206006015460ff166002811115612a5757fe5b14612a6157600080fd5b6000828152600e60205260408120600601805460ff19166001835b0217905550600160a060020a033016600090815260016020526040902054602254612aa79190612804565b600160a060020a033016600090815260016020526040902055612ac9826131fb565b50600160a060020a033316600090815260016020526040902054602254612af09190612ffc565b600160a060020a03338116600081815260016020908152604080832095909555868252600e905283812060058101829055600401556022549092309092169160008051602061370583398151915291905190815260200160405180910390a3600192505b5b505090565b60035433600160a060020a03908116911614612b7557600080fd5b60055460a060020a900460ff1615612b8c57600080fd5b612b95816135bd565b61174b61232d565b5b5b50565b600160a060020a0381166000908152600d602052604081205461256d9061193c565b90505b919050565b60165481565b6000612bdd82612ebf565b1515612be857600080fd5b506000818152600e60205260409020600681015460049091015460ff9091169043118015612c22575060025b816002811115612c2057fe5b145b15611976575060015b5b919050565b6000545b90565b6000612c42611554565b1515612c4d57600080fd5b600160a060020a0333166000908152600d60205260409020546127b9906131fb565b90505b90565b600b5481565b60125481565b6000828202831580612c9d5750828482811515612c9a57fe5b04145b1515612ca557fe5b8091505b5092915050565b600554600160a060020a031681565b60225481565b600454600160a060020a031681565b612cdc61279a565b1515612ce757600080fd5b600160a060020a0381161515612cfc57600080fd5b60095433600160a060020a03908116911614612d1757600080fd5b60045b612d226124fa565b6004811115612d2d57fe5b1415612d3857600080fd5b600a8054600160a060020a031916600160a060020a038381169190911791829055166361d3d7a66000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515612d9657600080fd5b6102c65a03f11515612da757600080fd5b505050604051805190501515612dbc57600080fd5b60008054600a549091600160a060020a0390911690634b2ba0dd90604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515612e0c57600080fd5b6102c65a03f11515612e1d57600080fd5b50505060405180519050141515612e3357600080fd5b600a547f7845d5aa74cc410e35571258d954f23b82276e160fe8c188fa80566580f279cc90600160a060020a0316604051600160a060020a03909116815260200160405180910390a15b50565b600d6020526000908152604090205481565b600160a060020a038083166000908152600260209081526040808320938516835292905220545b92915050565b60008082118015612ed25750601b548211155b8015612ef457506000828152600e6020526040902054600160a060020a031615155b801561256d57506000828152600e6020908152604080832054600160a060020a03168352600d90915290205482145b90505b919050565b612f336136d1565b612f3b6136d1565b600080601b54604051805910612f4e5750595b908082528060200260200182016040525b50925060009150600190505b601b548111612ff257612f7d81612ebf565b8015612f9a57506000818152600e60205260409020600401544311155b8015612fc6575060025b6000828152600e602052604090206006015460ff166002811115612fc457fe5b145b15612fe95780838381518110612fd857fe5b602090810290910101526001909101905b5b600101612f6b565b8293505b50505090565b600082820183811015612ca557fe5b8091505b5092915050565b6000613020611554565b1561155b57602454601f54420381151561303657fe5b0490505b5b90565b60035433600160a060020a0390811691161461305957600080fd5b60048054600160a060020a031916600160a060020a0383161790555b5b50565b600160a060020a038116151561308e57600080fd5b60095433600160a060020a039081169116146130a957600080fd5b60098054600160a060020a031916600160a060020a0383161790555b50565b60035433600160a060020a039081169116146130e357600080fd5b601b548311156130f257600080fd5b6130fb8261254b565b1561310557600080fd5b61310e83612ebf565b1561311857600080fd5b6000838152600e602090815260408083208054600160a060020a031916600160a060020a0387169081179091558352600d909152902083905561315a836135ff565b6000838152600e60205260409020600101819055613176613016565b600e6000858152602001908152602001600020600201819055507f5fd6d0b7e707fe344bd2a1887f9d0eeea8bfcac6f339ba4200e74f0647f101c08284604051600160a060020a03909216825260208201526040908101905180910390a16000838152600e60205260408120600601805460ff19166001835b02179055505b5b505050565b600080600080600061320c86612ebf565b1561331257613219613016565b6000878152600e6020526040902060020154909450841480159061324f5750600c546000878152600e6020526040902060020154105b15613312576000868152600e6020908152604080832054600160a060020a03168084526001909252822054915490945090925061328c9083612804565b6000556132998685613321565b600160a060020a0384166000908152600160205260408120829055549091506132c29082612ffc565b6000908155868152600e6020526040808220600201869055600160a060020a038516919060008051602061370583398151915290858503905190815260200160405180910390a360019450613318565b5b600094505b50505050919050565b6000828152600e6020908152604080832054600160a060020a031683526001909152812054600c54829081908190819081908190891061336357600c54613365565b885b60008b8152600e602052604090206002015490965060010194505b85851161340f576133908561197b565b601e5460008c8152600e602052604090206003015491955060001990860281019450850160020a908115156133c157fe5b0491508490505b8281111580156133d85750858111155b15613407576133fc87602154600201600a0a8985028115156133f657fe5b04612ffc565b96505b6001016133c8565b809450613380565b8697505b5050505050505092915050565b600160a060020a0382166000908152600d6020526040812054819061344481612ebf565b151561344f57600080fd5b613457611554565b151561346257600080fd5b61346b8461254b565b1561347557600080fd5b600160a060020a0385166000908152600d60205260409020549150613499826131fb565b506000828152600e602081815260408084208054600160a060020a031916600160a060020a038a81169182178355908652600d84528286208890558a168552908420849055858452919052600101556134f0613016565b6000838152600e60205260408082206002810193909355600483018290556005909201557ffb7aaa2ec871044b8cde9fee0cd727b02c8d6caf7aeb7f5fa2e02ffdfe1643349083908790879051928352600160a060020a039182166020840152166040808301919091526060909101905180910390a1600192505b5b505092915050565b60055433600160a060020a0390811691161461358f57600080fd5b6005805474ff0000000000000000000000000000000000000000191660a060020a1790555b5b565b60015b90565b60035433600160a060020a039081169116146135d857600080fd5b60205460ff16156135e857600080fd5b6020805460ff19166001179055601f8190555b5b50565b8061360981612ebf565b151561361457600080fd5b6001601b5403601c54601d5403600184030281151561362f57fe5b601d546000858152600e602052604090209290910490036003909101555b5b5050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061369357805160ff19168380011785556136c0565b828001600101855582156136c0579182015b828111156136c05782518255916020019190600101906136a5565b5b506118549291506136e3565b5090565b60206040519081016040526000815290565b61155b91905b8082111561185457600081556001016136e9565b5090565b905600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a723058203c8e25f14894b4155b24701de30f025078d8ed7672c303ae840676a0ea8b273f0029"}