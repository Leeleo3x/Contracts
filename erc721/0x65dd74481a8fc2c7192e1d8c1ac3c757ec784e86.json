{"Runs": "999", "SwarmSource": "bzzr://0d676fe24465ebffd9ae847e1e6afc3873cc97c2c844d6f91445b6135115a79c", "ABI": "[{\"inputs\":[{\"name\":\"mokenUpdates\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "Library": "", "CompilerVersion": "v0.4.24+commit.e67f0147", "ConstructorArguments": "0000000000000000000000009ff18ed77eab4117b2a25ac21c375d9e88cf9a2f", "SourceCode": "pragma solidity 0.4.24;\r\npragma experimental \"v0.5.0\";\r\n/******************************************************************************\\\r\n*..................................Mokens......................................*\r\n*.....................General purpose cryptocollectibles.......................*\r\n*..............................................................................*\r\n/******************************************************************************/\r\n\r\n/******************************************************************************\\\r\n* Author: Nick Mudge, [email\u00a0protected]\r\n* Copyright (c) 2018\r\n* Mokens\r\n*\r\n* The Mokens contract is a proxy contract that delegates all functionality\r\n* to delegate contracts. This design enables new functionality and improvements\r\n* to be added to the Mokens contract over time.\r\n*\r\n* Changes to the Mokens contract are transparent and visible. To make changes\r\n* easier to monitor the ContractUpdated event is emitted any time a function is\r\n* added, removed or updated. The ContractUpdated event exists in the\r\n* MokenUpdates delegate contract\r\n*\r\n* The source code for all delegate contracts used by the Mokens contract can be\r\n* found online and inspected.\r\n*\r\n* The Mokens contract is reflective or self inspecting. It contains functions\r\n* for inspecting what delegate contracts it has and what functions they have.\r\n* Specifically, the QueryMokenDelegates delegate contract contains functions for\r\n* querying delegate contracts and functions.\r\n*\r\n*    Here are some of the other delegate contracts:\r\n*\r\n*  - MokenERC721: Implements the ERC721 standard for mokens.\r\n*  - MokenERC721Batch: Implements batch transfers and approvals.\r\n*  - MokenERC998ERC721TopDown: Implements ERC998 composable functionality.\r\n*  - MokenERC998ERC20TopDown: Implements ERC998 composable functionality.\r\n*  - MokenERC998ERC721BottomUp: Implements ERC998 composable functionality.\r\n*  - MokenMinting: Implements moken minting functionality.\r\n*  - MokenEras: Implements moken era functionality.\r\n*  - QueryMokenData: Implements functions to query info about mokens.\r\n/******************************************************************************/\r\n///////////////////////////////////////////////////////////////////////////////////\r\n///////////////////////////////////////////////////////////////////////////////////\r\ncontract Storage0 {\r\n    // funcId => delegate contract\r\n    mapping(bytes4 => address) internal delegates;\r\n}\r\n\r\ncontract Mokens is Storage0 {\r\n    constructor(address mokenUpdates) public {\r\n        //0x584fc325 == \"initializeMokensContract()\"\r\n        bytes memory calldata = abi.encodeWithSelector(0x584fc325,mokenUpdates);\r\n        assembly {\r\n            let callSuccess := delegatecall(gas, mokenUpdates, add(calldata, 0x20), mload(calldata), 0, 0)\r\n            let size := returndatasize\r\n            returndatacopy(calldata, 0, size)\r\n            if eq(callSuccess,0) {revert(calldata, size)}\r\n        }\r\n    }\r\n    function() external payable {\r\n        address delegate = delegates[msg.sig];\r\n        require(delegate != address(0), \"Mokens function does not exist.\");\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            calldatacopy(ptr, 0, calldatasize)\r\n            let result := delegatecall(gas, delegate, ptr, calldatasize, 0, 0)\r\n            let size := returndatasize\r\n            returndatacopy(ptr, 0, size)\r\n            switch result\r\n            case 0 {revert(ptr, size)}\r\n            default {return (ptr, size)}\r\n        }\r\n    }\r\n}", "OptimizationUsed": "1", "ContractName": "Mokens", "ByteCode": "0x60806040908152600080357fffffffff000000000000000000000000000000000000000000000000000000001681526020819052205473ffffffffffffffffffffffffffffffffffffffff1680151560b857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4d6f6b656e732066756e6374696f6e20646f6573206e6f742065786973742e00604482015290519081900360640190fd5b60405136600082376000803683855af43d806000843e81801560d8578184f35b8184fd00a165627a7a723058200d676fe24465ebffd9ae847e1e6afc3873cc97c2c844d6f91445b6135115a79c0029"}