{"Runs": "200", "SwarmSource": "bzzr://a569b7054f9995c1906846443e96a492d28d975a665c2cdf93ae8ea466b8677c", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSaleContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"earlyInvestorWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyERC20Drain\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferableStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenTotalAmount\",\"type\":\"uint256\"},{\"name\":\"_transferableStartTime\",\"type\":\"uint256\"},{\"name\":\"_admin\",\"type\":\"address\"},{\"name\":\"_earlyInvestorWallet\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.15+commit.bbb8e64f", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000003B9ACA000000000000000000000000000000000000000000000000000000000059E99EF0000000000000000000000000dD76B55ee6dAfe0c7c978bff69206d476a5b9Ce7000000000000000000000000a579e31b930796e3df50a56829cf82db98b6f4b3", "SourceCode": "pragma solidity 0.4.15;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue)\r\n    returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue)\r\n    returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * @title StandardCrowdsale \r\n * @dev StandardCrowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a start and end timestamps, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive.\r\n * @dev from Crowdsale by Zepellin with small changes. Changes are commented with \"Request Modification\"\r\n */\r\ncontract StandardCrowdsale {\r\n    using SafeMath for uint256;\r\n\r\n    // The token being sold\r\n    StandardToken public token; // Request Modification : change to not mintable\r\n\r\n    // start and end timestamps where investments are allowed (both inclusive)\r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n\r\n    // address where funds are collected\r\n    address public wallet;\r\n\r\n    // how many token units a buyer gets per wei\r\n    uint256 public rate;\r\n\r\n    // amount of raised money in wei\r\n    uint256 public weiRaised;\r\n\r\n    /**\r\n     * event for token purchase logging\r\n     * @param purchaser who paid for the tokens\r\n     * @param value weis paid for purchase\r\n     * @param amount amount of tokens purchased\r\n     */\r\n    event TokenPurchase(address indexed purchaser, uint256 value, uint256 amount);\r\n\r\n    function StandardCrowdsale(\r\n        uint256 _startTime, \r\n        uint256 _endTime, \r\n        uint256 _rate, \r\n        address _wallet) \r\n    {\r\n        require(_startTime >= now);\r\n        require(_endTime >= _startTime);\r\n        require(_rate > 0);\r\n        require(_wallet != 0x0);\r\n\r\n        startTime = _startTime;\r\n        endTime = _endTime;\r\n        rate = _rate;\r\n        wallet = _wallet;\r\n\r\n        token = createTokenContract(); // Request Modification : change to StandardToken + position\r\n    }\r\n\r\n    // creates the token to be sold.\r\n    // Request Modification : change to StandardToken\r\n    // override this method to have crowdsale of a specific mintable token.\r\n    function createTokenContract() \r\n        internal \r\n        returns(StandardToken) \r\n    {\r\n        return new StandardToken();\r\n    }\r\n\r\n    // fallback function can be used to buy tokens\r\n    function () \r\n       payable \r\n    {\r\n        buyTokens();\r\n    }\r\n\r\n    // low level token purchase function\r\n    // Request Modification : change to not mint but transfer from this contract\r\n    function buyTokens() \r\n       public \r\n       payable \r\n    {\r\n        require(validPurchase());\r\n\r\n        uint256 weiAmount = msg.value;\r\n\r\n        // calculate token amount to be created\r\n        uint256 tokens = weiAmount.mul(rate);\r\n\r\n        // update state\r\n        weiRaised = weiRaised.add(weiAmount);\r\n\r\n        require(token.transfer(msg.sender, tokens)); // Request Modification : changed here - tranfer instead of mintable\r\n        TokenPurchase(msg.sender, weiAmount, tokens);\r\n\r\n        forwardFunds();\r\n    }\r\n\r\n    // send ether to the fund collection wallet\r\n    // override to create custom fund forwarding mechanisms\r\n    function forwardFunds() \r\n       internal \r\n    {\r\n        wallet.transfer(msg.value);\r\n    }\r\n\r\n    // @return true if the transaction can buy tokens\r\n    function validPurchase() \r\n        internal \r\n        returns(bool) \r\n    {\r\n        bool withinPeriod = now >= startTime && now <= endTime;\r\n        bool nonZeroPurchase = msg.value != 0;\r\n        return withinPeriod && nonZeroPurchase;\r\n    }\r\n\r\n    // @return true if crowdsale event has ended\r\n    function hasEnded() \r\n        public \r\n        constant \r\n        returns(bool) \r\n    {\r\n        return now > endTime;\r\n    }\r\n\r\n    modifier onlyBeforeSale() {\r\n        require(now < startTime);\r\n        _;\r\n    }\r\n\r\n    // Request Modification : Add check 24hours before token sale\r\n    modifier only24HBeforeSale() {\r\n        require(now < startTime.sub(1 days));\r\n        _;\r\n    }\r\n}\r\n\r\n/**\r\n * @title CappedCrowdsale\r\n * @dev Extension of Crowdsale with a max amount of funds raised\r\n */\r\ncontract CappedCrowdsale is StandardCrowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public cap;\r\n\r\n  function CappedCrowdsale(uint256 _cap) {\r\n    require(_cap > 0);\r\n    cap = _cap;\r\n  }\r\n\r\n  // overriding Crowdsale#validPurchase to add extra cap logic\r\n  // @return true if investors can buy at the moment\r\n  // Request Modification : delete constant because needed in son contract\r\n  function validPurchase() internal returns (bool) {\r\n    bool withinCap = weiRaised.add(msg.value) <= cap;\r\n    return super.validPurchase() && withinCap;\r\n  }\r\n\r\n  // overriding Crowdsale#hasEnded to add cap logic\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    bool capReached = weiRaised >= cap;\r\n    return super.hasEnded() || capReached;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ProgressiveIndividualCappedCrowdsale\r\n * @dev Extension of Crowdsale with a progressive individual cap\r\n * @dev This contract is not made for crowdsale superior to 256 * TIME_PERIOD_IN_SEC\r\n * @author Request.network\r\n */\r\ncontract ProgressiveIndividualCappedCrowdsale is StandardCrowdsale, Ownable {\r\n\r\n    uint public constant TIME_PERIOD_IN_SEC = 1 days;\r\n    uint public constant GAS_LIMIT_IN_WEI = 50000000000 wei; // limit gas price -50 Gwei wales stopper\r\n    uint256 public baseEthCapPerAddress = 0 ether;\r\n\r\n    mapping(address=>uint) public participated;\r\n\r\n    /**\r\n     * @dev overriding CappedCrowdsale#validPurchase to add an individual cap\r\n     * @return true if investors can buy at the moment\r\n     */\r\n    function validPurchase() \r\n        internal \r\n        returns(bool)\r\n    {\r\n        require(tx.gasprice <= GAS_LIMIT_IN_WEI);\r\n        uint ethCapPerAddress = getCurrentEthCapPerAddress();\r\n        participated[msg.sender] = participated[msg.sender].add(msg.value);\r\n        return super.validPurchase() && participated[msg.sender] <= ethCapPerAddress;\r\n    }\r\n\r\n    /**\r\n     * @dev Set the individual cap for the first day. This function can not be called withing the 24h before the sale for security reasons\r\n     * @param _baseEthCapPerAddress base cap in wei\r\n     */\r\n    function setBaseEthCapPerAddress(uint256 _baseEthCapPerAddress) \r\n        public\r\n        onlyOwner \r\n        only24HBeforeSale\r\n    {\r\n        baseEthCapPerAddress = _baseEthCapPerAddress;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the current individual cap. \r\n     * @dev This amount increase everyday in an exponential way. Day 1: base cap, Day 2: 2 * base cap, Day 3: 4 * base cap ...\r\n     * @return individual cap in wei\r\n     */\r\n    function getCurrentEthCapPerAddress() \r\n        public\r\n        constant\r\n        returns(uint)\r\n    {\r\n        if (block.timestamp < startTime) return 0;\r\n        uint timeSinceStartInSec = block.timestamp.sub(startTime);\r\n        uint currentPeriod = timeSinceStartInSec.div(TIME_PERIOD_IN_SEC).add(1);\r\n\r\n        // for currentPeriod > 256 will always return baseEthCapPerAddress\r\n        return (2 ** currentPeriod.sub(1)).mul(baseEthCapPerAddress);\r\n    }\r\n}\r\n\r\n/**\r\n * @title WhitelistedCrowdsale\r\n * @dev This is an extension to add whitelist to a crowdsale\r\n * @author Request.network\r\n *\r\n */\r\ncontract WhitelistedCrowdsale is StandardCrowdsale, Ownable {\r\n    \r\n    mapping(address=>bool) public registered;\r\n\r\n    event RegistrationStatusChanged(address target, bool isRegistered);\r\n\r\n    /**\r\n     * @dev Changes registration status of an address for participation.\r\n     * @param target Address that will be registered/deregistered.\r\n     * @param isRegistered New registration status of address.\r\n     */\r\n    function changeRegistrationStatus(address target, bool isRegistered)\r\n        public\r\n        onlyOwner\r\n        only24HBeforeSale\r\n    {\r\n        registered[target] = isRegistered;\r\n        RegistrationStatusChanged(target, isRegistered);\r\n    }\r\n\r\n    /**\r\n     * @dev Changes registration statuses of addresses for participation.\r\n     * @param targets Addresses that will be registered/deregistered.\r\n     * @param isRegistered New registration status of addresses.\r\n     */\r\n    function changeRegistrationStatuses(address[] targets, bool isRegistered)\r\n        public\r\n        onlyOwner\r\n        only24HBeforeSale\r\n    {\r\n        for (uint i = 0; i < targets.length; i++) {\r\n            changeRegistrationStatus(targets[i], isRegistered);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev overriding Crowdsale#validPurchase to add whilelist\r\n     * @return true if investors can buy at the moment, false otherwise\r\n     */\r\n    function validPurchase() internal returns (bool) {\r\n        return super.validPurchase() && registered[msg.sender];\r\n    }\r\n}\r\n\r\n/**\r\n * @title The RequestToken contract\r\n * @dev The Request Token contract\r\n * @dev inherite from StandardToken and Ownable by Zeppelin\r\n * @author Request.network\r\n */\r\ncontract RequestToken is StandardToken, Ownable {\r\n    string  public  constant name = \"Request Token\";\r\n    string  public  constant symbol = \"REQ\";\r\n    uint8    public  constant decimals = 18;\r\n\r\n    uint    public  transferableStartTime;\r\n\r\n    address public  tokenSaleContract;\r\n    address public  earlyInvestorWallet;\r\n\r\n\r\n    modifier onlyWhenTransferEnabled() \r\n    {\r\n        if ( now <= transferableStartTime ) {\r\n            require(msg.sender == tokenSaleContract || msg.sender == earlyInvestorWallet || msg.sender == owner);\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier validDestination(address to) \r\n    {\r\n        require(to != address(this));\r\n        _;\r\n    }\r\n\r\n    function RequestToken(\r\n        uint tokenTotalAmount, \r\n        uint _transferableStartTime, \r\n        address _admin, \r\n        address _earlyInvestorWallet) \r\n    {\r\n        // Mint all tokens. Then disable minting forever.\r\n        totalSupply = tokenTotalAmount * (10 ** uint256(decimals));\r\n\r\n        balances[msg.sender] = totalSupply;\r\n        Transfer(address(0x0), msg.sender, totalSupply);\r\n\r\n        transferableStartTime = _transferableStartTime;\r\n        tokenSaleContract = msg.sender;\r\n        earlyInvestorWallet = _earlyInvestorWallet;\r\n\r\n        transferOwnership(_admin); // admin could drain tokens and eth that were sent here by mistake\r\n    }\r\n\r\n    /**\r\n     * @dev override transfer token for a specified address to add onlyWhenTransferEnabled and validDestination\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     */\r\n    function transfer(address _to, uint _value)\r\n        public\r\n        validDestination(_to)\r\n        onlyWhenTransferEnabled\r\n        returns (bool) \r\n    {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev override transferFrom token for a specified address to add onlyWhenTransferEnabled and validDestination\r\n     * @param _from The address to transfer from.\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     */\r\n    function transferFrom(address _from, address _to, uint _value)\r\n        public\r\n        validDestination(_to)\r\n        onlyWhenTransferEnabled\r\n        returns (bool) \r\n    {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    event Burn(address indexed _burner, uint _value);\r\n\r\n    /**\r\n     * @dev burn tokens\r\n     * @param _value The amount to be burned.\r\n     * @return always true (necessary in case of override)\r\n     */\r\n    function burn(uint _value) \r\n        public\r\n        onlyWhenTransferEnabled\r\n        returns (bool)\r\n    {\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        Burn(msg.sender, _value);\r\n        Transfer(msg.sender, address(0x0), _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev burn tokens in the behalf of someone\r\n     * @param _from The address of the owner of the token.\r\n     * @param _value The amount to be burned.\r\n     * @return always true (necessary in case of override)\r\n     */\r\n    function burnFrom(address _from, uint256 _value) \r\n        public\r\n        onlyWhenTransferEnabled\r\n        returns(bool) \r\n    {\r\n        assert(transferFrom(_from, msg.sender, _value));\r\n        return burn(_value);\r\n    }\r\n\r\n    /**\r\n     * @dev transfer to owner any tokens send by mistake on this contracts\r\n     * @param token The address of the token to transfer.\r\n     * @param amount The amount to be transfered.\r\n     */\r\n    function emergencyERC20Drain(ERC20 token, uint amount )\r\n        public\r\n        onlyOwner \r\n    {\r\n        token.transfer(owner, amount);\r\n    }\r\n}\r\n\r\n/**\r\n * @title RequestTokenSale\r\n * @dev \r\n * We add new features to a base crowdsale using multiple inheritance.\r\n * We are using the following extensions:\r\n * CappedCrowdsale - sets a max boundary for raised funds\r\n * WhitelistedCrowdsale - add a whitelist\r\n * ProgressiveIndividualCappedCrowdsale - add a Progressive individual cap\r\n *\r\n * The code is based on the contracts of Open Zeppelin and we add our contracts : RequestTokenSale, WhiteListedCrowdsale, ProgressiveIndividualCappedCrowdsale and the Request Token\r\n *\r\n * @author Request.network\r\n */\r\ncontract RequestTokenSale is Ownable, CappedCrowdsale, WhitelistedCrowdsale, ProgressiveIndividualCappedCrowdsale {\r\n    // hard cap of the token sale in ether\r\n    uint private constant HARD_CAP_IN_WEI = 100000 ether;\r\n\r\n    // Total of Request Token supply\r\n    uint public constant TOTAL_REQUEST_TOKEN_SUPPLY = 1000000000;\r\n\r\n    // Token sale rate from ETH to REQ\r\n    uint private constant RATE_ETH_REQ = 5000;\r\n\r\n    // Token initialy distributed for the team (15%)\r\n    address public constant TEAM_VESTING_WALLET = 0xA76bC39aE4B88ef203C6Afe3fD219549d86D12f2;\r\n    uint public constant TEAM_VESTING_AMOUNT = 150000000e18;\r\n\r\n    // Token initialy distributed for the early investor (20%)\r\n    address public constant EARLY_INVESTOR_WALLET = 0xa579E31b930796e3Df50A56829cF82Db98b6F4B3;\r\n    uint public constant EARLY_INVESTOR_AMOUNT = 200000000e18;\r\n\r\n    // Token initialy distributed for the early foundation (15%)\r\n    // wallet use also to gather the ether of the token sale\r\n    address private constant REQUEST_FOUNDATION_WALLET = 0xdD76B55ee6dAfe0c7c978bff69206d476a5b9Ce7;\r\n    uint public constant REQUEST_FOUNDATION_AMOUNT = 150000000e18;\r\n\r\n    // PERIOD WHEN TOKEN IS NOT TRANSFERABLE AFTER THE SALE\r\n    uint public constant PERIOD_AFTERSALE_NOT_TRANSFERABLE_IN_SEC = 3 days;\r\n\r\n    function RequestTokenSale(uint256 _startTime, uint256 _endTime)\r\n      ProgressiveIndividualCappedCrowdsale()\r\n      WhitelistedCrowdsale()\r\n      CappedCrowdsale(HARD_CAP_IN_WEI)\r\n      StandardCrowdsale(_startTime, _endTime, RATE_ETH_REQ, REQUEST_FOUNDATION_WALLET)\r\n    {\r\n        token.transfer(TEAM_VESTING_WALLET, TEAM_VESTING_AMOUNT);\r\n\r\n        token.transfer(EARLY_INVESTOR_WALLET, EARLY_INVESTOR_AMOUNT);\r\n\r\n        token.transfer(REQUEST_FOUNDATION_WALLET, REQUEST_FOUNDATION_AMOUNT);\r\n    }\r\n\r\n    /**\r\n     * @dev Create the Request token (override createTokenContract of StandardCrowdsale)\r\n     * @return the StandardToken created\r\n     */\r\n    function createTokenContract () \r\n      internal \r\n      returns(StandardToken) \r\n    {\r\n        return new RequestToken(TOTAL_REQUEST_TOKEN_SUPPLY, endTime.add(PERIOD_AFTERSALE_NOT_TRANSFERABLE_IN_SEC), REQUEST_FOUNDATION_WALLET, EARLY_INVESTOR_WALLET);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer the unsold tokens to the request Foundation multisign wallet \r\n     * @dev Only for owner\r\n     * @return the StandardToken created\r\n     */\r\n    function drainRemainingToken () \r\n      public\r\n      onlyOwner\r\n    {\r\n        require(hasEnded());\r\n        token.transfer(REQUEST_FOUNDATION_WALLET, token.balanceOf(this));\r\n    }\r\n  \r\n}", "OptimizationUsed": "1", "ContractName": "RequestToken", "ByteCode": "0x606060405236156101045763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610109578063095ea7b31461019457806318160ddd146101ca57806323b872dd146101ef578063313ce5671461022b57806342966c68146102545780635d5aa2771461027e57806366188463146102ad578063661990bc146102e357806370a082311461031257806379cc6790146103435780638da5cb5b1461037957806395d89b41146103a8578063a9059cbb14610433578063d73dd62314610469578063db0e16f11461049f578063dd62ed3e146104c3578063f2fde38b146104fa578063f6f5eb591461051b575b600080fd5b341561011457600080fd5b61011c610540565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101595780820151818401525b602001610140565b50505050905090810190601f1680156101865780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561019f57600080fd5b6101b6600160a060020a0360043516602435610577565b604051901515815260200160405180910390f35b34156101d557600080fd5b6101dd6105e4565b60405190815260200160405180910390f35b34156101fa57600080fd5b6101b6600160a060020a03600435811690602435166044356105ea565b604051901515815260200160405180910390f35b341561023657600080fd5b61023e61067f565b60405160ff909116815260200160405180910390f35b341561025f57600080fd5b6101b6600435610684565b604051901515815260200160405180910390f35b341561028957600080fd5b6102916107bf565b604051600160a060020a03909116815260200160405180910390f35b34156102b857600080fd5b6101b6600160a060020a03600435166024356107ce565b604051901515815260200160405180910390f35b34156102ee57600080fd5b6102916108ca565b604051600160a060020a03909116815260200160405180910390f35b341561031d57600080fd5b6101dd600160a060020a03600435166108d9565b60405190815260200160405180910390f35b341561034e57600080fd5b6101b6600160a060020a03600435166024356108f8565b604051901515815260200160405180910390f35b341561038457600080fd5b61029161097a565b604051600160a060020a03909116815260200160405180910390f35b34156103b357600080fd5b61011c610989565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101595780820151818401525b602001610140565b50505050905090810190601f1680156101865780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561043e57600080fd5b6101b6600160a060020a03600435166024356109c0565b604051901515815260200160405180910390f35b341561047457600080fd5b6101b6600160a060020a0360043516602435610a53565b604051901515815260200160405180910390f35b34156104aa57600080fd5b6104c1600160a060020a0360043516602435610af8565b005b34156104ce57600080fd5b6101dd600160a060020a0360043581169060243516610bb0565b60405190815260200160405180910390f35b341561050557600080fd5b6104c1600160a060020a0360043516610bdd565b005b341561052657600080fd5b6101dd610c76565b60405190815260200160405180910390f35b60408051908101604052600d81527f5265717565737420546f6b656e00000000000000000000000000000000000000602082015281565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b60005481565b60008230600160a060020a031681600160a060020a03161415151561060e57600080fd5b60045442116106665760055433600160a060020a0390811691161480610642575060065433600160a060020a039081169116145b8061065b575060035433600160a060020a039081169116145b151561066657600080fd5b5b610672858585610c7c565b91505b5b5b509392505050565b601281565b60045460009042116106df5760055433600160a060020a03908116911614806106bb575060065433600160a060020a039081169116145b806106d4575060035433600160a060020a039081169116145b15156106df57600080fd5b5b600160a060020a033316600090815260016020526040902054610709908363ffffffff610da816565b600160a060020a03331660009081526001602052604081209190915554610736908363ffffffff610da816565b600055600160a060020a0333167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58360405190815260200160405180910390a2600033600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a35060015b5b919050565b600554600160a060020a031681565b600160a060020a0333811660009081526002602090815260408083209386168352929052908120548083111561082b57600160a060020a033381166000908152600260209081526040808320938816835292905290812055610862565b61083b818463ffffffff610da816565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a3600191505b5092915050565b600654600160a060020a031681565b600160a060020a0381166000908152600160205260409020545b919050565b60045460009042116109535760055433600160a060020a039081169116148061092f575060065433600160a060020a039081169116145b80610948575060035433600160a060020a039081169116145b151561095357600080fd5b5b61095f8333846105ea565b151561096757fe5b61097082610684565b90505b5b92915050565b600354600160a060020a031681565b60408051908101604052600381527f5245510000000000000000000000000000000000000000000000000000000000602082015281565b60008230600160a060020a031681600160a060020a0316141515156109e457600080fd5b6004544211610a3c5760055433600160a060020a0390811691161480610a18575060065433600160a060020a039081169116145b80610a31575060035433600160a060020a039081169116145b1515610a3c57600080fd5b5b610a478484610dbf565b91505b5b5b5092915050565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054610a8b908363ffffffff610e9616565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a35060015b92915050565b60035433600160a060020a03908116911614610b1357600080fd5b600354600160a060020a038084169163a9059cbb9116836000604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610b8f57600080fd5b6102c65a03f11515610ba057600080fd5b505050604051805150505b5b5050565b600160a060020a038083166000908152600260209081526040808320938516835292905220545b92915050565b60035433600160a060020a03908116911614610bf857600080fd5b600160a060020a0381161515610c0d57600080fd5b600354600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b50565b60045481565b600080600160a060020a0384161515610c9457600080fd5b50600160a060020a03808516600081815260026020908152604080832033909516835293815283822054928252600190529190912054610cda908463ffffffff610da816565b600160a060020a038087166000908152600160205260408082209390935590861681522054610d0f908463ffffffff610e9616565b600160a060020a038516600090815260016020526040902055610d38818463ffffffff610da816565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3600191505b509392505050565b600082821115610db457fe5b508082035b92915050565b6000600160a060020a0383161515610dd657600080fd5b600160a060020a033316600090815260016020526040902054610dff908363ffffffff610da816565b600160a060020a033381166000908152600160205260408082209390935590851681522054610e34908363ffffffff610e9616565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060015b92915050565b600082820183811015610ea557fe5b8091505b50929150505600a165627a7a72305820a569b7054f9995c1906846443e96a492d28d975a665c2cdf93ae8ea466b8677c0029"}