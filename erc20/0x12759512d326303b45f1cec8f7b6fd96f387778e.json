{"Runs": "200", "SwarmSource": "bzzr://ca830863a2c0b5e5cc579f5df04dd2bfc9aa6cd8ffffc625f6bb2891bcc610af", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"burnSuccess\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"changeTokensWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_oldValue\",\"type\":\"uint256\"},{\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"changeApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundraising\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_fundsWallet\",\"type\":\"address\"},{\"name\":\"initialSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.18+commit.9cf6e910", "ConstructorArguments": "00000000000000000000000054011a0d6252f50790acaf4340d9e46737ca0ab900000000000000000000000000000000000000000000000000000000094199a6", "SourceCode": "pragma solidity ^0.4.18;\r\n\r\n/* taking ideas from Zeppelin solidity module */\r\ncontract SafeMath {\r\n\r\n    // it is recommended to define functions which can neither read the state of blockchain nor write in it as pure instead of constant\r\n\r\n    function safeAdd(uint256 x, uint256 y) internal pure returns(uint256) {\r\n        uint256 z = x + y;\r\n        assert((z >= x));\r\n        return z;\r\n    }\r\n\r\n    function safeSubtract(uint256 x, uint256 y) internal pure returns(uint256) {\r\n        assert(x >= y);\r\n        return x - y;\r\n    }\r\n\r\n    function safeMult(uint256 x, uint256 y) internal pure returns(uint256) {\r\n        uint256 z = x * y;\r\n        assert((x == 0)||(z/x == y));\r\n        return z;\r\n    }\r\n\r\n    function safeDiv(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        uint256 z = x / y;\r\n        return z;\r\n    }\r\n\r\n    // mitigate short address attack\r\n    // thanks to https://github.com/numerai/contract/blob/c182465f82e50ced8dacb3977ec374a892f5fa8c/contracts/Safe.sol#L30-L34.\r\n    // TODO: doublecheck implication of >= compared to ==\r\n    modifier onlyPayloadSize(uint numWords) {\r\n        assert(msg.data.length >= numWords * 32 + 4);\r\n        _;\r\n    }\r\n\r\n}\r\n\r\n/// Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\ncontract ERC20 {\r\n    uint256 public totalSupply;\r\n\r\n    /*\r\n     *  Public functions\r\n     */\r\n    function balanceOf(address _owner) constant public returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n\r\n    /*\r\n     *  Events\r\n     */\r\n    // this generates a public event on blockchain that will notify clients\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    // This notifies clients about the amount burnt\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n\r\n}\r\n\r\n\r\n/*  ERC 20 token */\r\ncontract StandardToken is ERC20,SafeMath {\r\n\r\n    /*\r\n     *  Storage\r\n    */\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n    /*\r\n     *  Public functions\r\n     */\r\n    /// @dev Transfers sender's tokens to a given address. Returns success\r\n    /// @param _to Address of token receiver\r\n    /// @param _value Number of tokens to transfer\r\n    /// @return Was transfer successful?\r\n\r\n    function transfer(address _to, uint256 _value) onlyPayloadSize(2) public returns (bool success) {\r\n      if (balances[msg.sender] >= _value && _value > 0 && balances[_to] + _value > balances[_to]) {\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n\r\n\r\n    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success\r\n    /// @param _from Address from where tokens are withdrawn\r\n    /// @param _to Address to where tokens are sent\r\n    /// @param _value Number of tokens to transfer\r\n    /// @return Was transfer successful?\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3) public returns (bool success) {\r\n      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value;\r\n        allowed[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n\r\n\r\n    /// @dev Returns number of tokens owned by given address\r\n    /// @param _owner Address of token owner\r\n    /// @return Balance of owner\r\n\r\n    // it is recommended to define functions which can read the state of blockchain but cannot write in it as view instead of constant\r\n\r\n    function balanceOf(address _owner) view public returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /// @dev Sets approved amount of tokens for spender. Returns success\r\n    /// @param _spender Address of allowed account\r\n    /// @param _value Number of approved tokens\r\n    /// @return Was approval successful?\r\n\r\n    function approve(address _spender, uint256 _value) onlyPayloadSize(2) public returns (bool success) {\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n\r\n        require(_value == 0 && (allowed[msg.sender][_spender] == 0));\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    function changeApproval(address _spender, uint256 _oldValue, uint256 _newValue) onlyPayloadSize(3) public returns (bool success) {\r\n        require(allowed[msg.sender][_spender] == _oldValue);\r\n        allowed[msg.sender][_spender] = _newValue;\r\n        Approval(msg.sender, _spender, _newValue);\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    /// @dev Returns number of allowed tokens for given address\r\n    /// @param _owner Address of token owner\r\n    /// @param _spender Address of token spender\r\n    /// @return Remaining allowance for spender\r\n    function allowance(address _owner, address _spender) public  view returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Burns a specific amount of tokens.\r\n    * @param _value The amount of token to be burned.\r\n    */\r\n\r\n    function burn(uint256 _value) public returns (bool burnSuccess) {\r\n        require(_value > 0);\r\n        require(_value <= balances[msg.sender]);\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] =  safeSubtract(balances[burner],_value);\r\n        totalSupply = safeSubtract(totalSupply,_value);\r\n        Burn(burner, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\ncontract TrakToken is StandardToken {\r\n    // FIELDS\r\n    string constant public  name = \"TrakInvest Token\" ;\r\n    string constant public  symbol = \"TRAK\";\r\n    uint256 constant public  decimals = 18;\r\n\r\n    // The flag indicates if the crowdsale contract is in Funding state.\r\n    bool public fundraising = true;\r\n\r\n    // who created smart contract\r\n    address public creator;\r\n    // owns the total supply of tokens - it would be DAO\r\n    address public tokensOwner;\r\n    mapping (address => bool) public frozenAccounts;\r\n\r\n  /// events\r\n    event FrozenFund(address target ,bool frozen);\r\n\r\n  /// modifiers\r\n\r\n    modifier isCreator() { \r\n      require(msg.sender == creator);  \r\n      _; \r\n    }\r\n\r\n    modifier onlyPayloadSize(uint size) {\r\n        assert(msg.data.length >= size + 4);\r\n        _;\r\n    }\r\n\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == tokensOwner);\r\n        _;\r\n    }\r\n\r\n    modifier manageTransfer() {\r\n        if (msg.sender == tokensOwner) {\r\n            _;\r\n        }\r\n        else {\r\n            require(fundraising == false);\r\n            _;\r\n        }\r\n    }\r\n\r\n  /// constructor\r\n    function TrakToken(\r\n      address _fundsWallet,\r\n      uint256 initialSupply\r\n      ) public {\r\n      creator = msg.sender;\r\n\r\n      if (_fundsWallet !=0) {\r\n        tokensOwner = _fundsWallet;\r\n      }\r\n      else {\r\n        tokensOwner = msg.sender;\r\n      }\r\n\r\n      totalSupply = initialSupply * (uint256(10) ** decimals);\r\n      balances[tokensOwner] = totalSupply;\r\n      Transfer(0x0, tokensOwner, totalSupply);\r\n    }\r\n\r\n\r\n  /// overriden methods\r\n\r\n    function transfer(address _to, uint256 _value)  public manageTransfer onlyPayloadSize(2 * 32) returns (bool success) {\r\n      require(!frozenAccounts[msg.sender]);\r\n      require(_to != address(0));\r\n      return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)  public manageTransfer onlyPayloadSize(3 * 32) returns (bool success) {\r\n      require(!frozenAccounts[msg.sender]);\r\n      require(_to != address(0));\r\n      require(_from != address(0));\r\n      return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n\r\n    function freezeAccount (address target ,bool freeze) public onlyOwner {\r\n      frozenAccounts[target] = freeze;\r\n      FrozenFund(target,freeze);  \r\n    }\r\n\r\n    function burn(uint256 _value) public onlyOwner returns (bool burnSuccess) {\r\n        require(fundraising == false);\r\n        return super.burn(_value);\r\n    }\r\n\r\n    /// @param newAddress Address of new owner.\r\n    function changeTokensWallet(address newAddress) public onlyOwner returns (bool)\r\n    {\r\n        require(newAddress != address(0));\r\n        tokensOwner = newAddress;\r\n    }\r\n\r\n    function finalize() public  onlyOwner {\r\n        require(fundraising != false);\r\n        // Switch to Operational state. This is the only place this can happen.\r\n        fundraising = false;\r\n    }\r\n\r\n\r\n    function() public {\r\n        revert();\r\n    }\r\n\r\n}", "OptimizationUsed": "0", "ContractName": "TrakToken", "ByteCode": "0x6060604052600436106100fc576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806302d05d3f1461010c57806306fdde0314610161578063095ea7b3146101ef57806318160ddd1461024957806323b872dd14610272578063313ce567146102eb57806334309e971461031457806342966c68146103695780634bb278f3146103a45780636a734036146103b957806370a082311461040a578063860838a5146104575780639281cd65146104a857806395d89b411461050b578063a70fc68014610599578063a9059cbb146105c6578063dd62ed3e14610620578063e724529c1461068c575b341561010757600080fd5b600080fd5b341561011757600080fd5b61011f6106d0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561016c57600080fd5b6101746106f6565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101b4578082015181840152602081019050610199565b50505050905090810190601f1680156101e15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101fa57600080fd5b61022f600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061072f565b604051808215151515815260200191505060405180910390f35b341561025457600080fd5b61025c6108ce565b6040518082815260200191505060405180910390f35b341561027d57600080fd5b6102d1600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506108d4565b604051808215151515815260200191505060405180910390f35b34156102f657600080fd5b6102fe610b43565b6040518082815260200191505060405180910390f35b341561031f57600080fd5b610327610b48565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561037457600080fd5b61038a6004808035906020019091905050610b6e565b604051808215151515815260200191505060405180910390f35b34156103af57600080fd5b6103b7610bfe565b005b34156103c457600080fd5b6103f0600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610c9a565b604051808215151515815260200191505060405180910390f35b341561041557600080fd5b610441600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610d7a565b6040518082815260200191505060405180910390f35b341561046257600080fd5b61048e600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610dc3565b604051808215151515815260200191505060405180910390f35b34156104b357600080fd5b6104f1600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091908035906020019091905050610de3565b604051808215151515815260200191505060405180910390f35b341561051657600080fd5b61051e610f76565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561055e578082015181840152602081019050610543565b50505050905090810190601f16801561058b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156105a457600080fd5b6105ac610faf565b604051808215151515815260200191505060405180910390f35b34156105d157600080fd5b610606600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610fc2565b604051808215151515815260200191505060405180910390f35b341561062b57600080fd5b610676600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506111b6565b6040518082815260200191505060405180910390f35b341561069757600080fd5b6106ce600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035151590602001909190505061123d565b005b600360019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280601081526020017f5472616b496e7665737420546f6b656e0000000000000000000000000000000081525081565b600060026004810160003690501015151561074657fe5b6000831480156107d257506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b15156107dd57600080fd5b82600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040518082815260200191505060405180910390a3600191505092915050565b60005481565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610a255760606004810160003690501015151561094157fe5b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151561099a57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141515156109d657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614151515610a1257600080fd5b610a1d858585611363565b915050610b3c565b60001515600360009054906101000a900460ff161515141515610a4757600080fd5b606060048101600036905010151515610a5c57fe5b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515610ab557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614151515610af157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614151515610b2d57600080fd5b610b38858585611363565b9150505b9392505050565b601281565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bcc57600080fd5b60001515600360009054906101000a900460ff161515141515610bee57600080fd5b610bf7826115f5565b9050919050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c5a57600080fd5b60001515600360009054906101000a900460ff16151514151515610c7d57600080fd5b6000600360006101000a81548160ff021916908315150217905550565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610cf857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610d3457600080fd5b81600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550919050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60056020528060005260406000206000915054906101000a900460ff1681565b6000600360048101600036905010151515610dfa57fe5b83600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054141515610e8457600080fd5b82600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040518082815260200191505060405180910390a360019150509392505050565b6040805190810160405280600481526020017f5452414b0000000000000000000000000000000000000000000000000000000081525081565b600360009054906101000a900460ff1681565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156110d65760406004810160003690501015151561102f57fe5b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151561108857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141515156110c457600080fd5b6110ce848461174e565b9150506111b0565b60001515600360009054906101000a900460ff1615151415156110f857600080fd5b60406004810160003690501015151561110d57fe5b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151561116657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141515156111a257600080fd5b6111ac848461174e565b9150505b92915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561129957600080fd5b80600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f5ea9caffecf85bd277bd191ab41dd68c548f001913f64c16c3a9abe77dce2de58282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001821515151581526020019250505060405180910390a15050565b600060036004810160003690501015151561137a57fe5b82600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015611445575082600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b80156114515750600083115b156115e85782600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555082600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555082600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3600191506115ed565b600091505b509392505050565b60008060008311151561160757600080fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054831115151561165557600080fd5b3390506116a1600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484611958565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506116f060005484611958565b6000819055508073ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5846040518082815260200191505060405180910390a26001915050919050565b600060026004810160003690501015151561176557fe5b82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156117b45750600083115b801561183f5750600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401115b1561194c5782600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555082600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150611951565b600091505b5092915050565b600081831015151561196657fe5b8183039050929150505600a165627a7a72305820ca830863a2c0b5e5cc579f5df04dd2bfc9aa6cd8ffffc625f6bb2891bcc610af0029"}