{"Runs": "200", "SwarmSource": "bzzr://984b42e19b39d8af9e57ee743f4f2c810dea3db4d1711e05001543f0f63f8d72", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_approved\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"safeTransferByContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"doUnpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getOwnTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_actionAddr\",\"type\":\"address\"}],\"name\":\"getSafeContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"wonderArray\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"setMetadataProvider\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"doPause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"providerContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gene\",\"type\":\"uint256\"},{\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"initManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"safeGiveByContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addrAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getProtoIdByTokenId\",\"outputs\":[{\"name\":\"protoId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_actionAddr\",\"type\":\"address\"},{\"name\":\"_useful\",\"type\":\"bool\"}],\"name\":\"setSafeContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getOwnerTokens\",\"outputs\":[{\"name\":\"tokenIdArray\",\"type\":\"uint256[]\"},{\"name\":\"protoIdArray\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"preAdmin\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminTransferred\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.24+commit.e67f0147", "ConstructorArguments": "", "SourceCode": "/* ==================================================================== */\r\n/* Copyright (c) 2018 The TokenTycoon Project.  All rights reserved.\r\n/* \r\n/* https://tokentycoon.io\r\n/*  \r\n/* authors [email\u00a0protected]   \r\n/*         [email\u00a0protected]            \r\n/* ==================================================================== */\r\npragma solidity ^0.4.23;\r\n\r\n/// @title ERC-165 Standard Interface Detection\r\n/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\ninterface ERC165 {\r\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\r\n}\r\n\r\n/// @title ERC-721 Non-Fungible Token Standard\r\n/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\ncontract ERC721 is ERC165 {\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    function ownerOf(uint256 _tokenId) external view returns (address);\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) external;\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\r\n    function approve(address _approved, uint256 _tokenId) public;\r\n    function setApprovalForAll(address _operator, bool _approved) external;\r\n    function getApproved(uint256 _tokenId) external view returns (address);\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\r\n}\r\n\r\n/// @title ERC-721 Non-Fungible Token Standard\r\ninterface ERC721TokenReceiver {\r\n\tfunction onERC721Received(address _from, uint256 _tokenId, bytes data) external returns(bytes4);\r\n}\r\n\r\n/// @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\ninterface ERC721Metadata /* is ERC721 */ {\r\n    function name() external pure returns (string _name);\r\n    function symbol() external pure returns (string _symbol);\r\n    function tokenURI(uint256 _tokenId) external view returns (string);\r\n}\r\n\r\n/// @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\ninterface ERC721Enumerable /* is ERC721 */ {\r\n    function totalSupply() external view returns (uint256);\r\n    function tokenByIndex(uint256 _index) external view returns (uint256);\r\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256);\r\n}\r\n\r\ninterface ERC721MetadataProvider {\r\n    function tokenURI(uint256 _tokenId) external view returns (string);\r\n}\r\n\r\ncontract AccessAdmin {\r\n    bool public isPaused = false;\r\n    address public addrAdmin;  \r\n\r\n    event AdminTransferred(address indexed preAdmin, address indexed newAdmin);\r\n\r\n    constructor() public {\r\n        addrAdmin = msg.sender;\r\n    }  \r\n\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == addrAdmin);\r\n        _;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!isPaused);\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused {\r\n        require(isPaused);\r\n        _;\r\n    }\r\n\r\n    function setAdmin(address _newAdmin) external onlyAdmin {\r\n        require(_newAdmin != address(0));\r\n        emit AdminTransferred(addrAdmin, _newAdmin);\r\n        addrAdmin = _newAdmin;\r\n    }\r\n\r\n    function doPause() external onlyAdmin whenNotPaused {\r\n        isPaused = true;\r\n    }\r\n\r\n    function doUnpause() external onlyAdmin whenPaused {\r\n        isPaused = false;\r\n    }\r\n}\r\n\r\ninterface TokenRecipient { \r\n    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external;\r\n}\r\n\r\ncontract WonderToken is ERC721, ERC721Metadata, ERC721Enumerable, AccessAdmin {\r\n    /// @dev All manangers array(tokenId => gene)\r\n    uint256[] public wonderArray;\r\n    /// @dev Mananger tokenId vs owner address\r\n    mapping (uint256 => address) tokenIdToOwner;\r\n    /// @dev Manangers owner by the owner (array)\r\n    mapping (address => uint256[]) ownerToWonderArray;\r\n    /// @dev Mananger token ID search in owner array\r\n    mapping (uint256 => uint256) tokenIdToOwnerIndex;\r\n    /// @dev The authorized address for each TTW\r\n    mapping (uint256 => address) tokenIdToApprovals;\r\n    /// @dev The authorized operators for each address\r\n    mapping (address => mapping (address => bool)) operatorToApprovals;\r\n    /// @dev Trust contract\r\n    mapping (address => bool) safeContracts;\r\n    /// @dev Metadata provider\r\n    ERC721MetadataProvider public providerContract;\r\n\r\n    /// @dev This emits when the approved address for an TTW is changed or reaffirmed.\r\n    event Approval\r\n    (\r\n        address indexed _owner, \r\n        address indexed _approved,\r\n        uint256 _tokenId\r\n    );\r\n\r\n    /// @dev This emits when an operator is enabled or disabled for an owner.\r\n    event ApprovalForAll\r\n    (\r\n        address indexed _owner,\r\n        address indexed _operator,\r\n        bool _approved\r\n    );\r\n\r\n    /// @dev This emits when the equipment ownership changed \r\n    event Transfer\r\n    (\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 tokenId\r\n    );\r\n    \r\n    constructor() public {\r\n        addrAdmin = msg.sender;\r\n        wonderArray.length += 1;\r\n    }\r\n\r\n    // modifier\r\n    /// @dev Check if token ID is valid\r\n    modifier isValidToken(uint256 _tokenId) {\r\n        require(_tokenId >= 1 && _tokenId <= wonderArray.length, \"TokenId out of range\");\r\n        require(tokenIdToOwner[_tokenId] != address(0), \"Token have no owner\"); \r\n        _;\r\n    }\r\n\r\n    modifier canTransfer(uint256 _tokenId) {\r\n        address owner = tokenIdToOwner[_tokenId];\r\n        require(msg.sender == owner || msg.sender == tokenIdToApprovals[_tokenId] || operatorToApprovals[owner][msg.sender], \"Can not transfer\");\r\n        _;\r\n    }\r\n\r\n    // ERC721\r\n    function supportsInterface(bytes4 _interfaceId) external view returns(bool) {\r\n        // ERC165 || ERC721 || ERC165^ERC721\r\n        return (_interfaceId == 0x01ffc9a7 || _interfaceId == 0x80ac58cd || _interfaceId == 0x8153916a) && (_interfaceId != 0xffffffff);\r\n    }\r\n\r\n    function name() public pure returns(string) {\r\n        return \"Token Tycoon Wonders\";\r\n    }\r\n\r\n    function symbol() public pure returns(string) {\r\n        return \"TTW\";\r\n    }\r\n\r\n    function tokenURI(uint256 _tokenId) external view returns (string) {\r\n        if (address(providerContract) == address(0)) {\r\n            return \"\";\r\n        }\r\n        return providerContract.tokenURI(_tokenId);\r\n    }\r\n\r\n    /// @dev Search for token quantity address\r\n    /// @param _owner Address that needs to be searched\r\n    /// @return Returns token quantity\r\n    function balanceOf(address _owner) external view returns(uint256) {\r\n        require(_owner != address(0), \"Owner is 0\");\r\n        return ownerToWonderArray[_owner].length;\r\n    }\r\n\r\n    /// @dev Find the owner of an TTW\r\n    /// @param _tokenId The tokenId of TTW\r\n    /// @return Give The address of the owner of this TTW\r\n    function ownerOf(uint256 _tokenId) external view returns (address owner) {\r\n        return tokenIdToOwner[_tokenId];\r\n    }\r\n\r\n    /// @dev Transfers the ownership of an TTW from one address to another address\r\n    /// @param _from The current owner of the TTW\r\n    /// @param _to The new owner\r\n    /// @param _tokenId The TTW to transfer\r\n    /// @param data Additional data with no specified format, sent in call to `_to`\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) \r\n        external\r\n        whenNotPaused\r\n    {\r\n        _safeTransferFrom(_from, _to, _tokenId, data);\r\n    }\r\n\r\n    /// @dev Transfers the ownership of an TTW from one address to another address\r\n    /// @param _from The current owner of the TTW\r\n    /// @param _to The new owner\r\n    /// @param _tokenId The TTW to transfer\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) \r\n        external\r\n        whenNotPaused\r\n    {\r\n        _safeTransferFrom(_from, _to, _tokenId, \"\");\r\n    }\r\n\r\n    /// @dev Transfer ownership of an TTW, '_to' must be a vaild address, or the TTW will lost\r\n    /// @param _from The current owner of the TTW\r\n    /// @param _to The new owner\r\n    /// @param _tokenId The TTW to transfer\r\n    function transferFrom(address _from, address _to, uint256 _tokenId)\r\n        external\r\n        whenNotPaused\r\n        isValidToken(_tokenId)\r\n        canTransfer(_tokenId)\r\n    {\r\n        address owner = tokenIdToOwner[_tokenId];\r\n        require(owner != address(0), \"Owner is 0\");\r\n        require(_to != address(0), \"Transfer target address is 0\");\r\n        require(owner == _from, \"Transfer to self\");\r\n        \r\n        _transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    /// @dev Set or reaffirm the approved address for an TTW\r\n    /// @param _approved The new approved TTW controller\r\n    /// @param _tokenId The TTW to approve\r\n    function approve(address _approved, uint256 _tokenId) public whenNotPaused {\r\n        address owner = tokenIdToOwner[_tokenId];\r\n        require(owner != address(0));\r\n        require(msg.sender == owner || operatorToApprovals[owner][msg.sender]);\r\n\r\n        tokenIdToApprovals[_tokenId] = _approved;\r\n        emit Approval(owner, _approved, _tokenId);\r\n    }\r\n\r\n    /// @dev Enable or disable approval for a third party (\"operator\") to manage all your asset.\r\n    /// @param _operator Address to add to the set of authorized operators.\r\n    /// @param _approved True if the operators is approved, false to revoke approval\r\n    function setApprovalForAll(address _operator, bool _approved) \r\n        external \r\n        whenNotPaused\r\n    {\r\n        operatorToApprovals[msg.sender][_operator] = _approved;\r\n        emit ApprovalForAll(msg.sender, _operator, _approved);\r\n    }\r\n\r\n    /// @dev Get the approved address for a single TTW\r\n    /// @param _tokenId The TTW to find the approved address for\r\n    /// @return The approved address for this TTW, or the zero address if there is none\r\n    function getApproved(uint256 _tokenId) \r\n        external \r\n        view \r\n        isValidToken(_tokenId) \r\n        returns (address) \r\n    {\r\n        return tokenIdToApprovals[_tokenId];\r\n    }\r\n\r\n    /// @dev Query if an address is an authorized operator for another address\r\n    /// @param _owner The address that owns the TTWs\r\n    /// @param _operator The address that acts on behalf of the owner\r\n    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool) {\r\n        return operatorToApprovals[_owner][_operator];\r\n    }\r\n\r\n    /// @dev Count TTWs tracked by this contract\r\n    /// @return A count of valid TTWs tracked by this contract, where each one of\r\n    ///  them has an assigned and queryable owner not equal to the zero address\r\n    function totalSupply() external view returns (uint256) {\r\n        return wonderArray.length - 1;\r\n    }\r\n\r\n    /// @dev Enumerate valid TTWs\r\n    /// @param _index A counter less than totalSupply\r\n    /// @return The token identifier for the `_index`th TTW,\r\n    function tokenByIndex(uint256 _index) \r\n        external\r\n        view \r\n        returns (uint256) \r\n    {\r\n        require(_index < wonderArray.length);\r\n        return _index;\r\n    }\r\n\r\n    /// @notice Enumerate TTWs assigned to an owner\r\n    /// @param _owner Token owner address\r\n    /// @param _index A counter less than balanceOf(_owner)\r\n    /// @return The TTW tokenId\r\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) \r\n        external \r\n        view \r\n        returns (uint256) \r\n    {\r\n        require(_owner != address(0));\r\n        require(_index < ownerToWonderArray[_owner].length);\r\n        return ownerToWonderArray[_owner][_index];\r\n    }\r\n\r\n    /// @dev Do the real transfer with out any condition checking\r\n    /// @param _from The old owner of this TTW(If created: 0x0)\r\n    /// @param _to The new owner of this TTW \r\n    /// @param _tokenId The tokenId of the TTW\r\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\r\n        if (_from != address(0)) {\r\n            uint256 indexFrom = tokenIdToOwnerIndex[_tokenId];\r\n            uint256[] storage ttwArray = ownerToWonderArray[_from];\r\n            require(ttwArray[indexFrom] == _tokenId);\r\n\r\n            if (indexFrom != ttwArray.length - 1) {\r\n                uint256 lastTokenId = ttwArray[ttwArray.length - 1];\r\n                ttwArray[indexFrom] = lastTokenId; \r\n                tokenIdToOwnerIndex[lastTokenId] = indexFrom;\r\n            }\r\n            ttwArray.length -= 1; \r\n            \r\n            if (tokenIdToApprovals[_tokenId] != address(0)) {\r\n                delete tokenIdToApprovals[_tokenId];\r\n            }      \r\n        }\r\n\r\n        tokenIdToOwner[_tokenId] = _to;\r\n        ownerToWonderArray[_to].push(_tokenId);\r\n        tokenIdToOwnerIndex[_tokenId] = ownerToWonderArray[_to].length - 1;\r\n        \r\n        emit Transfer(_from != address(0) ? _from : this, _to, _tokenId);\r\n    }\r\n\r\n    /// @dev Actually perform the safeTransferFrom\r\n    function _safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) \r\n        internal\r\n        isValidToken(_tokenId) \r\n        canTransfer(_tokenId)\r\n    {\r\n        address owner = tokenIdToOwner[_tokenId];\r\n        require(owner != address(0));\r\n        require(_to != address(0));\r\n        require(owner == _from);\r\n        \r\n        _transfer(_from, _to, _tokenId);\r\n\r\n        // Do the callback after everything is done to avoid reentrancy attack\r\n        uint256 codeSize;\r\n        assembly { codeSize := extcodesize(_to) }\r\n        if (codeSize == 0) {\r\n            return;\r\n        }\r\n        bytes4 retval = ERC721TokenReceiver(_to).onERC721Received(_from, _tokenId, data);\r\n        // bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\")) = 0xf0b9e5ba;\r\n        require(retval == 0xf0b9e5ba);\r\n    }\r\n    \r\n    function setSafeContract(address _actionAddr, bool _useful) external onlyAdmin {\r\n        safeContracts[_actionAddr] = _useful;\r\n    }\r\n\r\n    function getSafeContract(address _actionAddr) external view onlyAdmin returns(bool) {\r\n        return safeContracts[_actionAddr];\r\n    }\r\n\r\n    function setMetadataProvider(address _provider) external onlyAdmin {\r\n        providerContract = ERC721MetadataProvider(_provider);\r\n    }\r\n\r\n    function getOwnTokens(address _owner) external view returns(uint256[]) {\r\n        require(_owner != address(0));\r\n        return ownerToWonderArray[_owner];\r\n    }\r\n\r\n    function safeGiveByContract(uint256 _tokenId, address _to) \r\n        external \r\n        whenNotPaused\r\n    {\r\n        require(safeContracts[msg.sender]);\r\n        // Only the token's owner is this can use this function\r\n        require(tokenIdToOwner[_tokenId] == address(this));\r\n        require(_to != address(0));\r\n\r\n        _transfer(address(this), _to, _tokenId);\r\n    }\r\n\r\n    /// @dev Safe transfer by trust contracts\r\n    function safeTransferByContract(uint256 _tokenId, address _to) \r\n        external\r\n        whenNotPaused\r\n    {\r\n        require(safeContracts[msg.sender]);\r\n\r\n        require(_tokenId >= 1 && _tokenId <= wonderArray.length);\r\n        address owner = tokenIdToOwner[_tokenId];\r\n        require(owner != address(0));\r\n        require(_to != address(0));\r\n        require(owner != _to);\r\n\r\n        _transfer(owner, _to, _tokenId);\r\n    }\r\n\r\n    function initManager(uint256 _gene, uint256 _count) external {\r\n        require(safeContracts[msg.sender] || msg.sender == addrAdmin);\r\n        require(_gene > 0 && _count <= 128);\r\n        address owner = address(this);\r\n        uint256[] storage ttwArray = ownerToWonderArray[owner];\r\n        uint256 newTokenId;\r\n        for (uint256 i = 0; i < _count; ++i) {\r\n            newTokenId = wonderArray.length;\r\n            wonderArray.push(_gene);\r\n            tokenIdToOwner[newTokenId] = owner;\r\n            tokenIdToOwnerIndex[newTokenId] = ttwArray.length;\r\n            ttwArray.push(newTokenId);\r\n            emit Transfer(address(0), owner, newTokenId);\r\n        }\r\n    }\r\n\r\n    function approveAndCall(address _spender, uint256 _tokenId, bytes _extraData)\r\n        external\r\n        whenNotPaused\r\n        returns (bool success) \r\n    {\r\n        TokenRecipient spender = TokenRecipient(_spender);\r\n        approve(_spender, _tokenId);\r\n        spender.receiveApproval(msg.sender, _tokenId, this, _extraData);\r\n        return true;\r\n    }\r\n\r\n    function getProtoIdByTokenId(uint256 _tokenId)\r\n        external \r\n        view \r\n        returns(uint256 protoId) \r\n    {\r\n        if (_tokenId > 0 && _tokenId < wonderArray.length) {\r\n            return wonderArray[_tokenId];\r\n        }\r\n    }\r\n\r\n    function getOwnerTokens(address _owner)\r\n        external\r\n        view \r\n        returns(uint256[] tokenIdArray, uint256[] protoIdArray) \r\n    {\r\n        uint256[] storage ownTokens = ownerToWonderArray[_owner];\r\n        uint256 count = ownTokens.length;\r\n        tokenIdArray = new uint256[](count);\r\n        protoIdArray = new uint256[](count);\r\n        for (uint256 i = 0; i < count; ++i) {\r\n            tokenIdArray[i] = ownTokens[i];\r\n            protoIdArray[i] = wonderArray[tokenIdArray[i]];\r\n        }\r\n    } \r\n}", "OptimizationUsed": "1", "ContractName": "WonderToken", "ByteCode": "0x6080604052600436106101a05763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301ffc9a781146101a557806306fdde03146101db578063081812fc14610265578063095ea7b31461029957806318160ddd146102bf57806318ad052b146102e657806323b872dd1461030a5780632f745c591461033457806330efb8d3146103585780633a562b781461036d57806342842e0e146103de578063441deede146104085780634f6ccce7146104295780635ce8e0fc146104415780636352211e1461045957806364b094021461047157806367d0661d14610492578063704b6c02146104a757806370a08231146104c857806395d89b41146104e95780639b263eca146104fe578063a22cb46514610513578063ac4ba3ea14610539578063aea1384414610554578063b187bd2614610578578063b88d4fde1461058d578063bfae2f0e146105c6578063c4fe2675146105db578063c87b56dd146105f3578063cae9ca511461060b578063cce0244d1461063c578063d63d4af014610662578063e985e9c51461071c575b600080fd5b3480156101b157600080fd5b506101c7600160e060020a031960043516610743565b604080519115158252519081900360200190f35b3480156101e757600080fd5b506101f06107f8565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561022a578181015183820152602001610212565b50505050905090810190601f1680156102575780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561027157600080fd5b5061027d600435610830565b60408051600160a060020a039092168252519081900360200190f35b3480156102a557600080fd5b506102bd600160a060020a0360043516602435610927565b005b3480156102cb57600080fd5b506102d4610a18565b60408051918252519081900360200190f35b3480156102f257600080fd5b506102bd600435600160a060020a0360243516610a22565b34801561031657600080fd5b506102bd600160a060020a0360043581169060243516604435610ad2565b34801561034057600080fd5b506102d4600160a060020a0360043516602435610dc5565b34801561036457600080fd5b506102bd610e37565b34801561037957600080fd5b5061038e600160a060020a0360043516610e70565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156103ca5781810151838201526020016103b2565b505050509050019250505060405180910390f35b3480156103ea57600080fd5b506102bd600160a060020a0360043581169060243516604435610ef1565b34801561041457600080fd5b506101c7600160a060020a0360043516610f1d565b34801561043557600080fd5b506102d4600435610f59565b34801561044d57600080fd5b506102d4600435610f6e565b34801561046557600080fd5b5061027d600435610f8d565b34801561047d57600080fd5b506102bd600160a060020a0360043516610fa8565b34801561049e57600080fd5b506102bd610ff3565b3480156104b357600080fd5b506102bd600160a060020a036004351661102e565b3480156104d457600080fd5b506102d4600160a060020a03600435166110d2565b3480156104f557600080fd5b506101f0611150565b34801561050a57600080fd5b5061027d611187565b34801561051f57600080fd5b506102bd600160a060020a03600435166024351515611196565b34801561054557600080fd5b506102bd600435602435611214565b34801561056057600080fd5b506102bd600435600160a060020a0360243516611359565b34801561058457600080fd5b506101c76113ce565b34801561059957600080fd5b506102bd600160a060020a03600480358216916024803590911691604435916064359081019101356113d7565b3480156105d257600080fd5b5061027d61142a565b3480156105e757600080fd5b506102d460043561143e565b3480156105ff57600080fd5b506101f0600435611475565b34801561061757600080fd5b506101c760048035600160a060020a0316906024803591604435918201910135611593565b34801561064857600080fd5b506102bd600160a060020a0360043516602435151561166e565b34801561066e57600080fd5b50610683600160a060020a03600435166116b5565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156106c75781810151838201526020016106af565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156107065781810151838201526020016106ee565b5050505090500194505050505060405180910390f35b34801561072857600080fd5b506101c7600160a060020a03600435811690602435166117c7565b60007f01ffc9a700000000000000000000000000000000000000000000000000000000600160e060020a0319831614806107a657507f80ac58cd00000000000000000000000000000000000000000000000000000000600160e060020a03198316145b806107da57507f8153916a00000000000000000000000000000000000000000000000000000000600160e060020a03198316145b80156107f05750600160e060020a031980831614155b90505b919050565b60408051808201909152601481527f546f6b656e205479636f6f6e20576f6e6465727300000000000000000000000060208201525b90565b6000816001811015801561084657506001548111155b151561089c576040805160e560020a62461bcd02815260206004820152601460248201527f546f6b656e4964206f7574206f662072616e6765000000000000000000000000604482015290519081900360640190fd5b600081815260026020526040902054600160a060020a0316151561090a576040805160e560020a62461bcd02815260206004820152601360248201527f546f6b656e2068617665206e6f206f776e657200000000000000000000000000604482015290519081900360640190fd5b5050600090815260056020526040902054600160a060020a031690565b6000805460ff161561093857600080fd5b50600081815260026020526040902054600160a060020a031680151561095d57600080fd5b33600160a060020a03821614806109975750600160a060020a038116600090815260066020908152604080832033845290915290205460ff165b15156109a257600080fd5b600082815260056020908152604091829020805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03878116918217909255835186815293519093918516927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a3505050565b6001546000190190565b6000805460ff1615610a3357600080fd5b3360009081526007602052604090205460ff161515610a5157600080fd5b60018310158015610a6457506001548311155b1515610a6f57600080fd5b50600082815260026020526040902054600160a060020a0316801515610a9457600080fd5b600160a060020a0382161515610aa957600080fd5b600160a060020a038181169083161415610ac257600080fd5b610acd8183856117f5565b505050565b6000805460ff1615610ae357600080fd5b8160018110158015610af757506001548111155b1515610b4d576040805160e560020a62461bcd02815260206004820152601460248201527f546f6b656e4964206f7574206f662072616e6765000000000000000000000000604482015290519081900360640190fd5b600081815260026020526040902054600160a060020a03161515610bbb576040805160e560020a62461bcd02815260206004820152601360248201527f546f6b656e2068617665206e6f206f776e657200000000000000000000000000604482015290519081900360640190fd5b6000838152600260205260409020548390600160a060020a031633811480610bf95750600082815260056020526040902054600160a060020a031633145b80610c275750600160a060020a038116600090815260066020908152604080832033845290915290205460ff165b1515610c7d576040805160e560020a62461bcd02815260206004820152601060248201527f43616e206e6f74207472616e7366657200000000000000000000000000000000604482015290519081900360640190fd5b600085815260026020526040902054600160a060020a03169350831515610cee576040805160e560020a62461bcd02815260206004820152600a60248201527f4f776e6572206973203000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600160a060020a0386161515610d4e576040805160e560020a62461bcd02815260206004820152601c60248201527f5472616e73666572207461726765742061646472657373206973203000000000604482015290519081900360640190fd5b600160a060020a0384811690881614610db1576040805160e560020a62461bcd02815260206004820152601060248201527f5472616e7366657220746f2073656c6600000000000000000000000000000000604482015290519081900360640190fd5b610dbc8787876117f5565b50505050505050565b6000600160a060020a0383161515610ddc57600080fd5b600160a060020a0383166000908152600360205260409020548210610e0057600080fd5b600160a060020a0383166000908152600360205260409020805483908110610e2457fe5b9060005260206000200154905092915050565b6000546101009004600160a060020a03163314610e5357600080fd5b60005460ff161515610e6457600080fd5b6000805460ff19169055565b6060600160a060020a0382161515610e8757600080fd5b600160a060020a03821660009081526003602090815260409182902080548351818402810184019094528084529091830182828015610ee557602002820191906000526020600020905b815481526020019060010190808311610ed1575b50505050509050919050565b60005460ff1615610f0157600080fd5b610acd83838360206040519081016040528060008152506119d3565b600080546101009004600160a060020a03163314610f3a57600080fd5b50600160a060020a031660009081526007602052604090205460ff1690565b6001546000908210610f6a57600080fd5b5090565b6001805482908110610f7c57fe5b600091825260209091200154905081565b600090815260026020526040902054600160a060020a031690565b6000546101009004600160a060020a03163314610fc457600080fd5b6008805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000546101009004600160a060020a0316331461100f57600080fd5b60005460ff161561101f57600080fd5b6000805460ff19166001179055565b6000546101009004600160a060020a0316331461104a57600080fd5b600160a060020a038116151561105f57600080fd5b60008054604051600160a060020a038085169361010090930416917ff8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec691a360008054600160a060020a039092166101000274ffffffffffffffffffffffffffffffffffffffff0019909216919091179055565b6000600160a060020a0382161515611134576040805160e560020a62461bcd02815260206004820152600a60248201527f4f776e6572206973203000000000000000000000000000000000000000000000604482015290519081900360640190fd5b50600160a060020a031660009081526003602052604090205490565b60408051808201909152600381527f5454570000000000000000000000000000000000000000000000000000000000602082015290565b600854600160a060020a031681565b60005460ff16156111a657600080fd5b336000818152600660209081526040808320600160a060020a03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b3360009081526007602052604081205481908190819060ff168061124757506000546101009004600160a060020a031633145b151561125257600080fd5b600086118015611263575060808511155b151561126e57600080fd5b503060008181526003602052604081209194509092505b84811015611351576001805480820182557fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf681018890556000818152600260209081526040808320805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038b1690811790915588546004845282852081905595860189558884528284209095018490558051848152905193965091927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a3600101611285565b505050505050565b60005460ff161561136957600080fd5b3360009081526007602052604090205460ff16151561138757600080fd5b600082815260026020526040902054600160a060020a031630146113aa57600080fd5b600160a060020a03811615156113bf57600080fd5b6113ca3082846117f5565b5050565b60005460ff1681565b60005460ff16156113e757600080fd5b61142385858585858080601f016020809104026020016040519081016040528093929190818152602001838380828437506119d3945050505050565b5050505050565b6000546101009004600160a060020a031681565b60008082118015611450575060015482105b156107f357600180548390811061146357fe5b906000526020600020015490506107f3565b600854606090600160a060020a0316151561149f57506040805160208101909152600081526107f3565b600854604080517fc87b56dd000000000000000000000000000000000000000000000000000000008152600481018590529051600160a060020a039092169163c87b56dd9160248082019260009290919082900301818387803b15801561150557600080fd5b505af1158015611519573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561154257600080fd5b81019080805164010000000081111561155a57600080fd5b8201602081018481111561156d57600080fd5b815164010000000081118282018710171561158757600080fd5b50909695505050505050565b60008054819060ff16156115a657600080fd5b50846115b28186610927565b6040517f8f4ffcb1000000000000000000000000000000000000000000000000000000008152336004820181815260248301889052306044840181905260806064850190815260848501889052600160a060020a03861694638f4ffcb194938b93928b928b92919060a40184848082843782019150509650505050505050600060405180830381600087803b15801561164a57600080fd5b505af115801561165e573d6000803e3d6000fd5b5060019998505050505050505050565b6000546101009004600160a060020a0316331461168a57600080fd5b600160a060020a03919091166000908152600760205260409020805460ff1916911515919091179055565b600160a060020a03811660009081526003602090815260408083208054825181815281850281019094019092526060938493919291828015611701578160200160208202803883390190505b5094508160405190808252806020026020018201604052801561172e578160200160208202803883390190505b509350600090505b818110156117bf57828181548110151561174c57fe5b9060005260206000200154858281518110151561176557fe5b60209081029091010152845160019086908390811061178057fe5b602090810290910101518154811061179457fe5b906000526020600020015484828151811015156117ad57fe5b60209081029091010152600101611736565b505050915091565b600160a060020a03918216600090815260066020908152604080832093909416825291909152205460ff1690565b60008080600160a060020a0386161561190d57600084815260046020908152604080832054600160a060020a038a168452600390925290912080549194509250849083908590811061184357fe5b906000526020600020015414151561185a57600080fd5b81546000190183146118b55781548290600019810190811061187857fe5b9060005260206000200154905080828481548110151561189457fe5b60009182526020808320909101929092558281526004909152604090208390555b8154600019016118c58382611d36565b50600084815260056020526040902054600160a060020a03161561190d576000848152600560205260409020805473ffffffffffffffffffffffffffffffffffffffff191690555b6000848152600260209081526040808320805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038a8116918217909255808552600384528285208054600181018255818752858720018a9055548986526004909452919093206000199092019091559087161515611989573061198b565b865b600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a3505050505050565b600080600084600181101580156119ec57506001548111155b1515611a42576040805160e560020a62461bcd02815260206004820152601460248201527f546f6b656e4964206f7574206f662072616e6765000000000000000000000000604482015290519081900360640190fd5b600081815260026020526040902054600160a060020a03161515611ab0576040805160e560020a62461bcd02815260206004820152601360248201527f546f6b656e2068617665206e6f206f776e657200000000000000000000000000604482015290519081900360640190fd5b6000868152600260205260409020548690600160a060020a031633811480611aee5750600082815260056020526040902054600160a060020a031633145b80611b1c5750600160a060020a038116600090815260066020908152604080832033845290915290205460ff165b1515611b72576040805160e560020a62461bcd02815260206004820152601060248201527f43616e206e6f74207472616e7366657200000000000000000000000000000000604482015290519081900360640190fd5b600088815260026020526040902054600160a060020a03169550851515611b9857600080fd5b600160a060020a0389161515611bad57600080fd5b600160a060020a03868116908b1614611bc557600080fd5b611bd08a8a8a6117f5565b883b9450841515611be057611d2a565b88600160a060020a031663f0b9e5ba8b8a8a6040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611c78578181015183820152602001611c60565b50505050905090810190601f168015611ca55780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b158015611cc657600080fd5b505af1158015611cda573d6000803e3d6000fd5b505050506040513d6020811015611cf057600080fd5b505193507ff0b9e5ba00000000000000000000000000000000000000000000000000000000600160e060020a0319851614611d2a57600080fd5b50505050505050505050565b815481835581811115610acd57600083815260209020610acd91810190830161082d91905b80821115610f6a5760008155600101611d5b5600a165627a7a72305820984b42e19b39d8af9e57ee743f4f2c810dea3db4d1711e05001543f0f63f8d720029"}