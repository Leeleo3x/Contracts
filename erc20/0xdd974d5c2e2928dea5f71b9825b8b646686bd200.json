{"Runs": "200", "SwarmSource": "bzzr://7caf63297f1744c81dc22b3fcc78ec19977d0bb4d5160ae1fd8cb6aca1957bcc", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSaleContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyERC20Drain\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenTotalAmount\",\"type\":\"uint256\"},{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"endTime\",\"type\":\"uint256\"},{\"name\":\"admin\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.15+commit.bbb8e64f", "ConstructorArguments": "000000000000000000000000000000000000000000baf15c8c90e9c8220000000000000000000000000000000000000000000000000000000000000059bb6c600000000000000000000000000000000000000000000000000000000059C749E0000000000000000000000000346fbe5d02c89fb4599f33bdce987981d573740a", "SourceCode": "pragma solidity ^0.4.13;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  \r\n  // KYBER-NOTE! code changed to comply with ERC20 standard\r\n  event Transfer(address indexed _from, address indexed _to, uint _value);\r\n  //event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  \r\n  // KYBER-NOTE! code changed to comply with ERC20 standard\r\n  event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n  //event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    // KYBER-NOTE! code changed to comply with ERC20 standard\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    //balances[_from] = balances[_from].sub(_value); // this was removed\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\ncontract KyberNetworkCrystal is StandardToken, Ownable {\r\n    string  public  constant name = \"Kyber Network Crystal\";\r\n    string  public  constant symbol = \"KNC\";\r\n    uint    public  constant decimals = 18;\r\n\r\n    uint    public  saleStartTime;\r\n    uint    public  saleEndTime;\r\n\r\n    address public  tokenSaleContract;\r\n\r\n    modifier onlyWhenTransferEnabled() {\r\n        if( now <= saleEndTime && now >= saleStartTime ) {\r\n            require( msg.sender == tokenSaleContract );\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier validDestination( address to ) {\r\n        require(to != address(0x0));\r\n        require(to != address(this) );\r\n        _;\r\n    }\r\n\r\n    function KyberNetworkCrystal( uint tokenTotalAmount, uint startTime, uint endTime, address admin ) {\r\n        // Mint all tokens. Then disable minting forever.\r\n        balances[msg.sender] = tokenTotalAmount;\r\n        totalSupply = tokenTotalAmount;\r\n        Transfer(address(0x0), msg.sender, tokenTotalAmount);\r\n\r\n        saleStartTime = startTime;\r\n        saleEndTime = endTime;\r\n\r\n        tokenSaleContract = msg.sender;\r\n        transferOwnership(admin); // admin could drain tokens that were sent here by mistake\r\n    }\r\n\r\n    function transfer(address _to, uint _value)\r\n        onlyWhenTransferEnabled\r\n        validDestination(_to)\r\n        returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value)\r\n        onlyWhenTransferEnabled\r\n        validDestination(_to)\r\n        returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    event Burn(address indexed _burner, uint _value);\r\n\r\n    function burn(uint _value) onlyWhenTransferEnabled\r\n        returns (bool){\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        Burn(msg.sender, _value);\r\n        Transfer(msg.sender, address(0x0), _value);\r\n        return true;\r\n    }\r\n\r\n    // save some gas by making only one contract call\r\n    function burnFrom(address _from, uint256 _value) onlyWhenTransferEnabled\r\n        returns (bool) {\r\n        assert( transferFrom( _from, msg.sender, _value ) );\r\n        return burn(_value);\r\n    }\r\n\r\n    function emergencyERC20Drain( ERC20 token, uint amount ) onlyOwner {\r\n        token.transfer( owner, amount );\r\n    }\r\n}", "OptimizationUsed": "1", "ContractName": "KyberNetworkCrystal", "ByteCode": "0x606060405236156100ee5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100f3578063095ea7b31461017e57806318160ddd146101b45780631cbaee2d146101d957806323b872dd146101fe578063313ce5671461023a57806342966c681461025f5780635d5aa2771461028957806370a08231146102b857806379cc6790146102e95780638da5cb5b1461031f57806395d89b411461034e578063a9059cbb146103d9578063db0e16f11461040f578063dd62ed3e14610433578063ed338ff11461046a578063f2fde38b1461048f575b600080fd5b34156100fe57600080fd5b6101066104b0565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101435780820151818401525b60200161012a565b50505050905090810190601f1680156101705780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561018957600080fd5b6101a0600160a060020a03600435166024356104e7565b604051901515815260200160405180910390f35b34156101bf57600080fd5b6101c761058e565b60405190815260200160405180910390f35b34156101e457600080fd5b6101c7610594565b60405190815260200160405180910390f35b341561020957600080fd5b6101a0600160a060020a036004358116906024351660443561059a565b604051901515815260200160405180910390f35b341561024557600080fd5b6101c7610620565b60405190815260200160405180910390f35b341561026a57600080fd5b6101a0600435610625565b604051901515815260200160405180910390f35b341561029457600080fd5b61029c61073b565b604051600160a060020a03909116815260200160405180910390f35b34156102c357600080fd5b6101c7600160a060020a036004351661074a565b60405190815260200160405180910390f35b34156102f457600080fd5b6101a0600160a060020a0360043516602435610769565b604051901515815260200160405180910390f35b341561032a57600080fd5b61029c6107c6565b604051600160a060020a03909116815260200160405180910390f35b341561035957600080fd5b6101066107d5565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101435780820151818401525b60200161012a565b50505050905090810190601f1680156101705780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103e457600080fd5b6101a0600160a060020a036004351660243561080c565b604051901515815260200160405180910390f35b341561041a57600080fd5b610431600160a060020a0360043516602435610890565b005b341561043e57600080fd5b6101c7600160a060020a0360043581169060243516610948565b60405190815260200160405180910390f35b341561047557600080fd5b6101c7610975565b60405190815260200160405180910390f35b341561049a57600080fd5b610431600160a060020a036004351661097b565b005b60408051908101604052601581527f4b79626572204e6574776f726b204372797374616c0000000000000000000000602082015281565b60008115806105195750600160a060020a03338116600090815260026020908152604080832093871683529290522054155b151561052457600080fd5b600160a060020a03338116600081815260026020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b60005481565b60045481565b600060055442111580156105b057506004544210155b156105d05760065433600160a060020a039081169116146105d057600080fd5b5b82600160a060020a03811615156105e757600080fd5b30600160a060020a031681600160a060020a03161415151561060857600080fd5b6106138585856109d3565b91505b5b505b9392505050565b601281565b6000600554421115801561063b57506004544210155b1561065b5760065433600160a060020a0390811691161461065b57600080fd5b5b600160a060020a033316600090815260016020526040902054610685908363ffffffff610ae516565b600160a060020a033316600090815260016020526040812091909155546106b2908363ffffffff610ae516565b600055600160a060020a0333167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58360405190815260200160405180910390a2600033600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a35060015b5b919050565b600654600160a060020a031681565b600160a060020a0381166000908152600160205260409020545b919050565b6000600554421115801561077f57506004544210155b1561079f5760065433600160a060020a0390811691161461079f57600080fd5b5b6107ab83338461059a565b15156107b357fe5b6107bc82610625565b90505b5b92915050565b600354600160a060020a031681565b60408051908101604052600381527f4b4e430000000000000000000000000000000000000000000000000000000000602082015281565b6000600554421115801561082257506004544210155b156108425760065433600160a060020a0390811691161461084257600080fd5b5b82600160a060020a038116151561085957600080fd5b30600160a060020a031681600160a060020a03161415151561087a57600080fd5b6108848484610afc565b91505b5b505b92915050565b60035433600160a060020a039081169116146108ab57600080fd5b600354600160a060020a038084169163a9059cbb9116836000604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561092757600080fd5b6102c65a03f1151561093857600080fd5b505050604051805150505b5b5050565b600160a060020a038083166000908152600260209081526040808320938516835292905220545b92915050565b60055481565b60035433600160a060020a0390811691161461099657600080fd5b600160a060020a038116156109ce576003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b5b50565b600160a060020a038084166000818152600260209081526040808320339095168352938152838220549282526001905291822054610a17908463ffffffff610ae516565b600160a060020a038087166000908152600160205260408082209390935590861681522054610a4c908463ffffffff610bbc16565b600160a060020a038516600090815260016020526040902055610a75818463ffffffff610ae516565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3600191505b509392505050565b600082821115610af157fe5b508082035b92915050565b600160a060020a033316600090815260016020526040812054610b25908363ffffffff610ae516565b600160a060020a033381166000908152600160205260408082209390935590851681522054610b5a908363ffffffff610bbc16565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060015b92915050565b600082820183811015610bcb57fe5b8091505b50929150505600a165627a7a723058207caf63297f1744c81dc22b3fcc78ec19977d0bb4d5160ae1fd8cb6aca1957bcc0029"}