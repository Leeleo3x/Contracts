{"Runs": "500", "SwarmSource": "bzzr://cad514b0837c1bd8a1c3bebd40184e66aab65e3b7aee6bf3739ace64b0ed5ceb", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_date\",\"type\":\"uint256\"}],\"name\":\"setReleaseDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"purchase_dates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RELEASE_DATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getMinimumAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"free_transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"canTransferIfLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"blocked_amounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"freeToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setCoOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"canTransferBefore\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"release_dates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_end\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setBlockingState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint256\"},{\"name\":\"_supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"purchase\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"end_date\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"UpdatedBlockingState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"CoOwnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"ReleaseDateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.19+commit.c4cbbb05", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000004d8c55aefb8c05b5c000000000000000000000000000000000000000000000000000000000000000000000c467269656e647a20436f696e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000346445a0000000000000000000000000000000000000000000000000000000000", "SourceCode": "pragma solidity 0.4.19;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    require(newOwner != owner);\r\n\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract Whitelisted is Ownable {\r\n\r\n\t// variables\r\n\tmapping (address => bool) public whitelist;\r\n\r\n\t// events\r\n\tevent WhitelistChanged(address indexed account, bool state);\r\n\r\n\t// modifiers\r\n\r\n\t// checkes if the address is whitelisted\r\n\tmodifier isWhitelisted(address _addr) {\r\n\t\trequire(whitelist[_addr] == true);\r\n\r\n\t\t_;\r\n\t}\r\n\r\n\t// methods\r\n\tfunction setWhitelist(address _addr, bool _state) onlyOwner external {\r\n\t\trequire(_addr != address(0));\r\n\t\trequire(whitelist[_addr] != _state);\r\n\r\n\t\twhitelist[_addr] = _state;\r\n\r\n\t\tWhitelistChanged(_addr, _state);\r\n\t}\r\n\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value > 0);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract BurnableToken is BasicToken {\r\n\t// events\r\n\tevent Burn(address indexed burner, uint256 amount);\r\n\r\n\t// reduce sender balance and Token total supply\r\n\tfunction burn(uint256 _value) public {\r\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\r\n\t\ttotalSupply = totalSupply.sub(_value);\r\n\r\n\t\tBurn(msg.sender, _value);\r\n\t}\r\n}\r\n\r\ncontract FriendzToken is BurnableToken, Ownable {\r\n\r\n\t// public variables\r\n\tmapping(address => uint256) public release_dates;\r\n\tmapping(address => uint256) public purchase_dates;\r\n\tmapping(address => uint256) public blocked_amounts;\r\n\tmapping (address => mapping (address => uint256)) public allowed;\r\n\tbool public free_transfer = false;\r\n\tuint256 public RELEASE_DATE = 1522540800; // 1th april 2018 00:00 UTC\r\n\r\n\t// private variables\r\n\taddress private co_owner;\r\n\taddress private presale_holder = 0x1ea128767610c944Ff9a60E4A1Cbd0C88773c17c;\r\n\taddress private ico_holder = 0xc1c643701803eca8DDfA2017547E8441516BE047;\r\n\taddress private reserved_holder = 0x26226CfaB092C89eF3D79653D692Cc1425a0B907;\r\n\taddress private wallet_holder = 0xBF0B56276e90fc4f0f1e2Ec66fa418E30E717215;\r\n\r\n\t// ERC20 variables\r\n\tstring public name;\r\n\tstring public symbol;\r\n\tuint256 public decimals;\r\n\r\n\t// constants\r\n\r\n\t// events\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n\tevent UpdatedBlockingState(address indexed to, uint256 purchase, uint256 end_date, uint256 value);\r\n\tevent CoOwnerSet(address indexed owner);\r\n\tevent ReleaseDateChanged(address indexed from, uint256 date);\r\n\r\n\tfunction FriendzToken(string _name, string _symbol, uint256 _decimals, uint256 _supply) public {\r\n\t\t// safety checks\r\n\t\trequire(_decimals > 0);\r\n\t\trequire(_supply > 0);\r\n\r\n\t\t// assign variables\r\n\t\tname = _name;\r\n\t\tsymbol = _symbol;\r\n\t\tdecimals = _decimals;\r\n\t\ttotalSupply = _supply;\r\n\r\n\t\t// assign the total supply to the owner\r\n\t\tbalances[owner] = _supply;\r\n\t}\r\n\r\n\t// modifiers\r\n\r\n\t// checks if the address can transfer tokens\r\n\tmodifier canTransfer(address _sender, uint256 _value) {\r\n\t\trequire(_sender != address(0));\r\n\r\n\t\trequire(\r\n\t\t\t(free_transfer) ||\r\n\t\t\tcanTransferBefore(_sender) ||\r\n\t\t\tcanTransferIfLocked(_sender, _value)\r\n\t \t);\r\n\r\n\t \t_;\r\n\t}\r\n\r\n\t// check if we're in a free-transfter state\r\n\tmodifier isFreeTransfer() {\r\n\t\trequire(free_transfer);\r\n\r\n\t\t_;\r\n\t}\r\n\r\n\t// check if we're in non free-transfter state\r\n\tmodifier isBlockingTransfer() {\r\n\t\trequire(!free_transfer);\r\n\r\n\t\t_;\r\n\t}\r\n\r\n\t// functions\r\n\r\n\tfunction canTransferBefore(address _sender) public view returns(bool) {\r\n\t\treturn (\r\n\t\t\t_sender == owner ||\r\n\t\t\t_sender == presale_holder ||\r\n\t\t\t_sender == ico_holder ||\r\n\t\t\t_sender == reserved_holder ||\r\n\t\t\t_sender == wallet_holder\r\n\t\t);\r\n\t}\r\n\r\n\tfunction canTransferIfLocked(address _sender, uint256 _value) public view returns(bool) {\r\n\t\tuint256 after_math = balances[_sender].sub(_value);\r\n\t\treturn (\r\n\t\t\tnow >= RELEASE_DATE &&\r\n\t\t    after_math >= getMinimumAmount(_sender)\r\n        );\r\n\t}\r\n\r\n\t// set co-owner, can be set to 0\r\n\tfunction setCoOwner(address _addr) onlyOwner public {\r\n\t\trequire(_addr != co_owner);\r\n\r\n\t\tco_owner = _addr;\r\n\r\n\t\tCoOwnerSet(_addr);\r\n\t}\r\n\r\n\t// set release date\r\n\tfunction setReleaseDate(uint256 _date) onlyOwner public {\r\n\t\trequire(_date > 0);\r\n\t\trequire(_date != RELEASE_DATE);\r\n\r\n\t\tRELEASE_DATE = _date;\r\n\r\n\t\tReleaseDateChanged(msg.sender, _date);\r\n\t}\r\n\r\n\t// calculate the amount of tokens an address can use\r\n\tfunction getMinimumAmount(address _addr) constant public returns (uint256) {\r\n\t\t// if the address ha no limitations just return 0\r\n\t\tif(blocked_amounts[_addr] == 0x0)\r\n\t\t\treturn 0x0;\r\n\r\n\t\t// if the purchase date is in the future block all the tokens\r\n\t\tif(purchase_dates[_addr] > now){\r\n\t\t\treturn blocked_amounts[_addr];\r\n\t\t}\r\n\r\n\t\tuint256 alpha = uint256(now).sub(purchase_dates[_addr]); // absolute purchase date\r\n\t\tuint256 beta = release_dates[_addr].sub(purchase_dates[_addr]); // absolute token release date\r\n\t\tuint256 tokens = blocked_amounts[_addr].sub(alpha.mul(blocked_amounts[_addr]).div(beta)); // T - (\u03b1 * T) / \u03b2\r\n\r\n\t\treturn tokens;\r\n\t}\r\n\r\n\t// set blocking state to an address\r\n\tfunction setBlockingState(address _addr, uint256 _end, uint256 _value) isBlockingTransfer public {\r\n\t\t// only the onwer and the co-owner can call this function\r\n\t\trequire(\r\n\t\t\tmsg.sender == owner ||\r\n\t\t\tmsg.sender == co_owner\r\n\t\t);\r\n\t\trequire(_addr != address(0));\r\n\r\n\t\tuint256 final_value = _value;\r\n\r\n\t\tif(release_dates[_addr] != 0x0){\r\n\t\t\t// if it's not the first time this function is beign called for this address\r\n\t\t\t// update its information instead of setting them (add value to previous value)\r\n\t\t\tfinal_value = blocked_amounts[_addr].add(_value);\r\n\t\t}\r\n\r\n\t\trelease_dates[_addr] = _end;\r\n\t\tpurchase_dates[_addr] = RELEASE_DATE;\r\n\t\tblocked_amounts[_addr] = final_value;\r\n\r\n\t\tUpdatedBlockingState(_addr, _end, RELEASE_DATE, final_value);\r\n\t}\r\n\r\n\t// all addresses can transfer tokens now\r\n\tfunction freeToken() public onlyOwner {\r\n\t\tfree_transfer = true;\r\n\t}\r\n\r\n\t// override function using canTransfer on the sender address\r\n\tfunction transfer(address _to, uint _value) canTransfer(msg.sender, _value) public returns (bool success) {\r\n\t\treturn super.transfer(_to, _value);\r\n\t}\r\n\r\n\t// transfer tokens from one address to another\r\n\tfunction transferFrom(address _from, address _to, uint _value) canTransfer(_from, _value) public returns (bool success) {\r\n\t\trequire(_from != address(0));\r\n\t\trequire(_to != address(0));\r\n\r\n\t    // SafeMath.sub will throw if there is not enough balance.\r\n\t    balances[_from] = balances[_from].sub(_value);\r\n\t    balances[_to] = balances[_to].add(_value);\r\n\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value); // this will throw if we don't have enough allowance\r\n\r\n\t    // this event comes from BasicToken.sol\r\n\t    Transfer(_from, _to, _value);\r\n\r\n\t    return true;\r\n\t}\r\n\r\n\t// erc20 functions\r\n  \tfunction approve(address _spender, uint256 _value) public returns (bool) {\r\n\t \trequire(_value == 0 || allowed[msg.sender][_spender] == 0);\r\n\r\n\t \tallowed[msg.sender][_spender] = _value;\r\n\t \tApproval(msg.sender, _spender, _value);\r\n\r\n\t \treturn true;\r\n  \t}\r\n\r\n\tfunction allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    \treturn allowed[_owner][_spender];\r\n  \t}\r\n\r\n\t/**\r\n\t* approve should be called when allowed[_spender] == 0. To increment\r\n\t* allowed value is better to use this function to avoid 2 calls (and wait until\r\n\t* the first transaction is mined)\r\n\t* From MonolithDAO Token.sol\r\n\t*/\r\n\tfunction increaseApproval (address _spender, uint256 _addedValue) public returns (bool success) {\r\n\t\tallowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n\t\tApproval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction decreaseApproval (address _spender, uint256 _subtractedValue) public returns (bool success) {\r\n\t\tuint256 oldValue = allowed[msg.sender][_spender];\r\n\t\tif (_subtractedValue >= oldValue) {\r\n\t\t\tallowed[msg.sender][_spender] = 0;\r\n\t\t} else {\r\n\t\t\tallowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n\t\t}\r\n\t\tApproval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\t\treturn true;\r\n\t}\r\n\r\n}", "OptimizationUsed": "1", "ContractName": "FriendzToken", "ByteCode": ""}