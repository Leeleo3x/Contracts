{"Runs": "200", "SwarmSource": "bzzr://08b6854b51779d6a02b9301af59b55e8da2f5b13d4b5352c3ed458cf35b586bd", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lockTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_villains\",\"type\":\"address[]\"}],\"name\":\"addManyToBlacklist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_villain\",\"type\":\"address\"}],\"name\":\"addToBlacklist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_villain\",\"type\":\"address\"}],\"name\":\"removeFromBlacklist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isUnlocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"deleteOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"root\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.23+commit.124ca40d", "ConstructorArguments": "000000000000000000000000a84c731c3dab00ce0dceb2265ff53b3032aec820", "SourceCode": "pragma solidity ^0.4.23;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title MultiOwnable\r\n */\r\ncontract MultiOwnable {\r\n  address public root;\r\n  mapping (address => address) public owners; // owner => parent of owner\r\n  \r\n  /**\r\n  * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n  * account.\r\n  */\r\n  constructor() public {\r\n    root = msg.sender;\r\n    owners[root] = root;\r\n  }\r\n  \r\n  /**\r\n  * @dev Throws if called by any account other than the owner.\r\n  */\r\n  modifier onlyOwner() {\r\n    require(owners[msg.sender] != 0);\r\n    _;\r\n  }\r\n  \r\n  /**\r\n  * @dev Adding new owners\r\n  */\r\n  function newOwner(address _owner) onlyOwner external returns (bool) {\r\n    require(_owner != 0);\r\n    require(owners[_owner] == 0);\r\n    owners[_owner] = msg.sender;\r\n    return true;\r\n  }\r\n  \r\n  /**\r\n    * @dev Deleting owners\r\n    */\r\n  function deleteOwner(address _owner) onlyOwner external returns (bool) {\r\n    require(owners[_owner] == msg.sender || (owners[_owner] != 0 && msg.sender == root));\r\n    owners[_owner] = 0;\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, MultiOwnable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is BasicToken {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) public {\r\n    _burn(msg.sender, _value);\r\n  }\r\n\r\n  function _burn(address _who, uint256 _value) internal {\r\n    require(_value <= balances[_who]);\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    balances[_who] = balances[_who].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    emit Burn(_who, _value);\r\n    emit Transfer(_who, address(0), _value);\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract Blacklisted is MultiOwnable {\r\n\r\n  mapping(address => bool) public blacklist;\r\n\r\n  /**\r\n  * @dev Throws if called by any account other than the owner.\r\n  */\r\n  modifier notBlacklisted() {\r\n    require(blacklist[msg.sender] == false);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Adds single address to blacklist.\r\n   * @param _villain Address to be added to the blacklist\r\n   */\r\n  function addToBlacklist(address _villain) external onlyOwner {\r\n    blacklist[_villain] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Adds list of addresses to blacklist. Not overloaded due to limitations with truffle testing.\r\n   * @param _villains Addresses to be added to the blacklist\r\n   */\r\n  function addManyToBlacklist(address[] _villains) external onlyOwner {\r\n    for (uint256 i = 0; i < _villains.length; i++) {\r\n      blacklist[_villains[i]] = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Removes single address from blacklist.\r\n   * @param _villain Address to be removed to the blacklist\r\n   */\r\n  function removeFromBlacklist(address _villain) external onlyOwner {\r\n    blacklist[_villain] = false;\r\n  }\r\n}\r\n\r\n/**\r\n * @title HUMToken\r\n * @dev ERC20 HUMToken.\r\n * Note they can later distribute these tokens as they wish using `transfer` and other\r\n * `StandardToken` functions.\r\n */\r\ncontract HUMToken is MintableToken, BurnableToken, Blacklisted {\r\n\r\n  string public constant name = \"HUMToken\"; // solium-disable-line uppercase\r\n  string public constant symbol = \"HUM\"; // solium-disable-line uppercase\r\n  uint8 public constant decimals = 18; // solium-disable-line uppercase, // 18 decimals is the strongly suggested default, avoid changing it\r\n\r\n  uint256 public constant INITIAL_SUPPLY = 125000 * 1000 * 1000 * (10 ** uint256(decimals)); // 125,000,000,000 HUM\r\n\r\n  bool public isUnlocked = false;\r\n  \r\n  /**\r\n   * @dev Constructor that gives msg.sender all of existing tokens.\r\n   */\r\n  constructor(address _wallet) public {\r\n    totalSupply_ = INITIAL_SUPPLY;\r\n    balances[_wallet] = INITIAL_SUPPLY;\r\n    emit Transfer(address(0), _wallet, INITIAL_SUPPLY);\r\n  }\r\n\r\n  modifier onlyTransferable() {\r\n    require(isUnlocked || owners[msg.sender] != 0);\r\n    _;\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public onlyTransferable notBlacklisted returns (bool) {\r\n      return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) public onlyTransferable notBlacklisted returns (bool) {\r\n      return super.transfer(_to, _value);\r\n  }\r\n  \r\n  function unlockTransfer() public onlyOwner {\r\n      isUnlocked = true;\r\n  }\r\n  \r\n  function lockTransfer() public onlyOwner {\r\n      isUnlocked = false;\r\n  }\r\n\r\n}", "OptimizationUsed": "1", "ContractName": "HUMToken", "ByteCode": "0x60806040526004361061015e5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663022914a7811461016357806305d2035b146101a057806306fdde03146101c9578063095ea7b31461025357806318160ddd146102775780631a9aea0a1461029e57806323b872dd146102b55780632815f50f146102df5780632ff2e9dc146102ff578063313ce5671461031457806340c10f191461033f57806342966c681461036357806344337ea11461037b578063537df3b61461039c57806366188463146103bd57806370a08231146103e15780637d64bcb4146104025780638380edb714610417578063859524541461042c57806395d89b411461044d578063a9059cbb14610462578063bf6d9abd14610486578063cd5c4c701461049b578063d73dd623146104bc578063dd62ed3e146104e0578063ebf0c71714610507578063f9f92be41461051c575b600080fd5b34801561016f57600080fd5b50610184600160a060020a036004351661053d565b60408051600160a060020a039092168252519081900360200190f35b3480156101ac57600080fd5b506101b5610558565b604080519115158252519081900360200190f35b3480156101d557600080fd5b506101de610561565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610218578181015183820152602001610200565b50505050905090810190601f1680156102455780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561025f57600080fd5b506101b5600160a060020a0360043516602435610598565b34801561028357600080fd5b5061028c610602565b60408051918252519081900360200190f35b3480156102aa57600080fd5b506102b3610608565b005b3480156102c157600080fd5b506101b5600160a060020a036004358116906024351660443561063a565b3480156102eb57600080fd5b506102b360048035602481019101356106ab565b34801561030b57600080fd5b5061028c61072f565b34801561032057600080fd5b50610329610740565b6040805160ff9092168252519081900360200190f35b34801561034b57600080fd5b506101b5600160a060020a0360043516602435610745565b34801561036f57600080fd5b506102b3600435610844565b34801561038757600080fd5b506102b3600160a060020a0360043516610851565b3480156103a857600080fd5b506102b3600160a060020a036004351661089b565b3480156103c957600080fd5b506101b5600160a060020a03600435166024356108e2565b3480156103ed57600080fd5b5061028c600160a060020a03600435166109db565b34801561040e57600080fd5b506101b56109f6565b34801561042357600080fd5b506101b5610a6a565b34801561043857600080fd5b506101b5600160a060020a0360043516610a73565b34801561045957600080fd5b506101de610b17565b34801561046e57600080fd5b506101b5600160a060020a0360043516602435610b4e565b34801561049257600080fd5b506102b3610bbd565b3480156104a757600080fd5b506101b5600160a060020a0360043516610bf2565b3480156104c857600080fd5b506101b5600160a060020a0360043516602435610cba565b3480156104ec57600080fd5b5061028c600160a060020a0360043581169060243516610d5c565b34801561051357600080fd5b50610184610d87565b34801561052857600080fd5b506101b5600160a060020a0360043516610d96565b600460205260009081526040902054600160a060020a031681565b60055460ff1681565b60408051808201909152600881527f48554d546f6b656e000000000000000000000000000000000000000000000000602082015281565b600160a060020a03338116600081815260026020908152604080832094871680845294825280832086905580518681529051929493927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60015490565b600160a060020a0333811660009081526004602052604090205416151561062e57600080fd5b6007805460ff19169055565b60075460009060ff16806106675750600160a060020a033381166000908152600460205260409020541615155b151561067257600080fd5b600160a060020a03331660009081526006602052604090205460ff161561069857600080fd5b6106a3848484610dab565b949350505050565b600160a060020a0333811660009081526004602052604081205490911615156106d357600080fd5b5060005b8181101561072a576001600660008585858181106106f157fe5b60209081029290920135600160a060020a0316835250810191909152604001600020805460ff19169115159190911790556001016106d7565b505050565b6c0193e5939a08ce9dbd4800000081565b601281565b600160a060020a03338116600090815260046020526040812054909116151561076d57600080fd5b60055460ff161561077d57600080fd5b600154610790908363ffffffff610f1916565b600155600160a060020a0383166000908152602081905260409020546107bc908363ffffffff610f1916565b600160a060020a03841660008181526020818152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a038516916000916000805160206111118339815191529181900360200190a350600192915050565b61084e3382610f28565b50565b600160a060020a0333811660009081526004602052604090205416151561087757600080fd5b600160a060020a03166000908152600660205260409020805460ff19166001179055565b600160a060020a033381166000908152600460205260409020541615156108c157600080fd5b600160a060020a03166000908152600660205260409020805460ff19169055565b600160a060020a0333811660009081526002602090815260408083209386168352929052908120548083111561093f57600160a060020a033381166000908152600260209081526040808320938816835292905290812055610976565b61094f818463ffffffff61101716565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529482529182902054825190815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a35060019392505050565b600160a060020a031660009081526020819052604090205490565b600160a060020a033381166000908152600460205260408120549091161515610a1e57600080fd5b60055460ff1615610a2e57600080fd5b6005805460ff191660011790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a150600190565b60075460ff1681565b600160a060020a033381166000908152600460205260408120549091161515610a9b57600080fd5b600160a060020a0382161515610ab057600080fd5b600160a060020a038083166000908152600460205260409020541615610ad557600080fd5b50600160a060020a039081166000908152600460205260409020805473ffffffffffffffffffffffffffffffffffffffff191633909216919091179055600190565b60408051808201909152600381527f48554d0000000000000000000000000000000000000000000000000000000000602082015281565b60075460009060ff1680610b7b5750600160a060020a033381166000908152600460205260409020541615155b1515610b8657600080fd5b600160a060020a03331660009081526006602052604090205460ff1615610bac57600080fd5b610bb68383611029565b9392505050565b600160a060020a03338116600090815260046020526040902054161515610be357600080fd5b6007805460ff19166001179055565b600160a060020a033381166000908152600460205260408120549091161515610c1a57600080fd5b600160a060020a0382811660009081526004602052604090205433821691161480610c775750600160a060020a038083166000908152600460205260409020541615801590610c77575060035433600160a060020a039081169116145b1515610c8257600080fd5b50600160a060020a03166000908152600460205260409020805473ffffffffffffffffffffffffffffffffffffffff19169055600190565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054610cf2908363ffffffff610f1916565b600160a060020a0333811660008181526002602090815260408083209489168084529482529182902085905581519485529051929391927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600354600160a060020a031681565b60066020526000908152604090205460ff1681565b6000600160a060020a0383161515610dc257600080fd5b600160a060020a038416600090815260208190526040902054821115610de757600080fd5b600160a060020a0380851660009081526002602090815260408083203390941683529290522054821115610e1a57600080fd5b600160a060020a038416600090815260208190526040902054610e43908363ffffffff61101716565b600160a060020a038086166000908152602081905260408082209390935590851681522054610e78908363ffffffff610f1916565b600160a060020a0380851660009081526020818152604080832094909455878316825260028152838220339093168252919091522054610ebe908363ffffffff61101716565b600160a060020a03808616600081815260026020908152604080832033861684528252918290209490945580518681529051928716939192600080516020611111833981519152929181900390910190a35060019392505050565b600082820183811015610bb657fe5b600160a060020a038216600090815260208190526040902054811115610f4d57600080fd5b600160a060020a038216600090815260208190526040902054610f76908263ffffffff61101716565b600160a060020a038316600090815260208190526040902055600154610fa2908263ffffffff61101716565b600155604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518281529051600091600160a060020a038516916000805160206111118339815191529181900360200190a35050565b60008282111561102357fe5b50900390565b6000600160a060020a038316151561104057600080fd5b600160a060020a03331660009081526020819052604090205482111561106557600080fd5b600160a060020a03331660009081526020819052604090205461108e908363ffffffff61101716565b600160a060020a0333811660009081526020819052604080822093909355908516815220546110c3908363ffffffff610f1916565b600160a060020a038085166000818152602081815260409182902094909455805186815290519193339093169260008051602061111183398151915292918290030190a3506001929150505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a7230582008b6854b51779d6a02b9301af59b55e8da2f5b13d4b5352c3ed458cf35b586bd0029"}