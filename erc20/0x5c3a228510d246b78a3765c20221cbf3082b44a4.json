{"Runs": "200", "SwarmSource": "bzzr://806aac597cf63a0e8500f39bd70c0bc9a6bdededd0b02717d9e0cf89c8e3956a", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startCirculation\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"m_numOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"m_externalMintingEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amIOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"detachController\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokensCreatedInSTQ\",\"type\":\"uint256\"}],\"name\":\"emission\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"m_multiOwnedRequired\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableMinting\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"m_emissions\",\"outputs\":[{\"name\":\"created\",\"type\":\"uint256\"},{\"name\":\"totalSupplyWas\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operation\",\"type\":\"bytes32\"}],\"name\":\"revoke\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRequired\",\"type\":\"uint256\"}],\"name\":\"changeRequirement\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operation\",\"type\":\"bytes32\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"hasConfirmed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ownerIndex\",\"type\":\"uint256\"}],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"requestDividends\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"m_controller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"m_isCirculating\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owners\",\"type\":\"address[]\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokensCreated\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalSupplyWas\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Emission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Dividend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CirculationEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"ControllerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"was\",\"type\":\"address\"}],\"name\":\"ControllerRetired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"operation\",\"type\":\"bytes32\"}],\"name\":\"Confirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"operation\",\"type\":\"bytes32\"}],\"name\":\"Revoke\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"operation\",\"type\":\"bytes32\"}],\"name\":\"FinalConfirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldOwner\",\"type\":\"address\"}],\"name\":\"OwnerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newRequirement\",\"type\":\"uint256\"}],\"name\":\"RequirementChanged\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.15+commit.bbb8e64f", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000af9eca973ba1bf87923d45dce471181f77de301e000000000000000000000000c21afa07ce196500d45cd13b835645a2b05760e70000000000000000000000007e71a0514d727a2828209cf74f05686f382e545d", "SourceCode": "pragma solidity 0.4.15;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\n\r\n/// @title StandardToken which circulation can be delayed and started by another contract.\r\n/// @dev To be used as a mixin contract.\r\n/// The contract is created in disabled state: circulation is disabled.\r\ncontract CirculatingToken is StandardToken {\r\n\r\n    event CirculationEnabled();\r\n\r\n    modifier requiresCirculation {\r\n        require(m_isCirculating);\r\n        _;\r\n    }\r\n\r\n\r\n    // PUBLIC interface\r\n\r\n    function transfer(address _to, uint256 _value) requiresCirculation returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) requiresCirculation returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) requiresCirculation returns (bool) {\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n\r\n    // INTERNAL functions\r\n\r\n    function enableCirculation() internal returns (bool) {\r\n        if (m_isCirculating)\r\n            return false;\r\n\r\n        m_isCirculating = true;\r\n        CirculationEnabled();\r\n        return true;\r\n    }\r\n\r\n\r\n    // FIELDS\r\n\r\n    /// @notice are the circulation started?\r\n    bool public m_isCirculating;\r\n}\r\n\r\n/// note: during any ownership changes all pending operations (waiting for more signatures) are cancelled\r\n// TODO acceptOwnership\r\ncontract multiowned {\r\n\r\n\t// TYPES\r\n\r\n    // struct for the status of a pending operation.\r\n    struct MultiOwnedOperationPendingState {\r\n        // count of confirmations needed\r\n        uint yetNeeded;\r\n\r\n        // bitmap of confirmations where owner #ownerIndex's decision corresponds to 2**ownerIndex bit\r\n        uint ownersDone;\r\n\r\n        // position of this operation key in m_multiOwnedPendingIndex\r\n        uint index;\r\n    }\r\n\r\n\t// EVENTS\r\n\r\n    event Confirmation(address owner, bytes32 operation);\r\n    event Revoke(address owner, bytes32 operation);\r\n    event FinalConfirmation(address owner, bytes32 operation);\r\n\r\n    // some others are in the case of an owner changing.\r\n    event OwnerChanged(address oldOwner, address newOwner);\r\n    event OwnerAdded(address newOwner);\r\n    event OwnerRemoved(address oldOwner);\r\n\r\n    // the last one is emitted if the required signatures change\r\n    event RequirementChanged(uint newRequirement);\r\n\r\n\t// MODIFIERS\r\n\r\n    // simple single-sig function modifier.\r\n    modifier onlyowner {\r\n        require(isOwner(msg.sender));\r\n        _;\r\n    }\r\n    // multi-sig function modifier: the operation must have an intrinsic hash in order\r\n    // that later attempts can be realised as the same underlying operation and\r\n    // thus count as confirmations.\r\n    modifier onlymanyowners(bytes32 _operation) {\r\n        if (confirmAndCheck(_operation)) {\r\n            _;\r\n        }\r\n        // Even if required number of confirmations has't been collected yet,\r\n        // we can't throw here - because changes to the state have to be preserved.\r\n        // But, confirmAndCheck itself will throw in case sender is not an owner.\r\n    }\r\n\r\n    modifier validNumOwners(uint _numOwners) {\r\n        require(_numOwners > 0 && _numOwners <= c_maxOwners);\r\n        _;\r\n    }\r\n\r\n    modifier multiOwnedValidRequirement(uint _required, uint _numOwners) {\r\n        require(_required > 0 && _required <= _numOwners);\r\n        _;\r\n    }\r\n\r\n    modifier ownerExists(address _address) {\r\n        require(isOwner(_address));\r\n        _;\r\n    }\r\n\r\n    modifier ownerDoesNotExist(address _address) {\r\n        require(!isOwner(_address));\r\n        _;\r\n    }\r\n\r\n    modifier multiOwnedOperationIsActive(bytes32 _operation) {\r\n        require(isOperationActive(_operation));\r\n        _;\r\n    }\r\n\r\n\t// METHODS\r\n\r\n    // constructor is given number of sigs required to do protected \"onlymanyowners\" transactions\r\n    // as well as the selection of addresses capable of confirming them (msg.sender is not added to the owners!).\r\n    function multiowned(address[] _owners, uint _required)\r\n        validNumOwners(_owners.length)\r\n        multiOwnedValidRequirement(_required, _owners.length)\r\n    {\r\n        assert(c_maxOwners <= 255);\r\n\r\n        m_numOwners = _owners.length;\r\n        m_multiOwnedRequired = _required;\r\n\r\n        for (uint i = 0; i < _owners.length; ++i)\r\n        {\r\n            address owner = _owners[i];\r\n            // invalid and duplicate addresses are not allowed\r\n            require(0 != owner && !isOwner(owner) /* not isOwner yet! */);\r\n\r\n            uint currentOwnerIndex = checkOwnerIndex(i + 1 /* first slot is unused */);\r\n            m_owners[currentOwnerIndex] = owner;\r\n            m_ownerIndex[owner] = currentOwnerIndex;\r\n        }\r\n\r\n        assertOwnersAreConsistent();\r\n    }\r\n\r\n    /// @notice replaces an owner `_from` with another `_to`.\r\n    /// @param _from address of owner to replace\r\n    /// @param _to address of new owner\r\n    // All pending operations will be canceled!\r\n    function changeOwner(address _from, address _to)\r\n        external\r\n        ownerExists(_from)\r\n        ownerDoesNotExist(_to)\r\n        onlymanyowners(sha3(msg.data))\r\n    {\r\n        assertOwnersAreConsistent();\r\n\r\n        clearPending();\r\n        uint ownerIndex = checkOwnerIndex(m_ownerIndex[_from]);\r\n        m_owners[ownerIndex] = _to;\r\n        m_ownerIndex[_from] = 0;\r\n        m_ownerIndex[_to] = ownerIndex;\r\n\r\n        assertOwnersAreConsistent();\r\n        OwnerChanged(_from, _to);\r\n    }\r\n\r\n    /// @notice adds an owner\r\n    /// @param _owner address of new owner\r\n    // All pending operations will be canceled!\r\n    function addOwner(address _owner)\r\n        external\r\n        ownerDoesNotExist(_owner)\r\n        validNumOwners(m_numOwners + 1)\r\n        onlymanyowners(sha3(msg.data))\r\n    {\r\n        assertOwnersAreConsistent();\r\n\r\n        clearPending();\r\n        m_numOwners++;\r\n        m_owners[m_numOwners] = _owner;\r\n        m_ownerIndex[_owner] = checkOwnerIndex(m_numOwners);\r\n\r\n        assertOwnersAreConsistent();\r\n        OwnerAdded(_owner);\r\n    }\r\n\r\n    /// @notice removes an owner\r\n    /// @param _owner address of owner to remove\r\n    // All pending operations will be canceled!\r\n    function removeOwner(address _owner)\r\n        external\r\n        ownerExists(_owner)\r\n        validNumOwners(m_numOwners - 1)\r\n        multiOwnedValidRequirement(m_multiOwnedRequired, m_numOwners - 1)\r\n        onlymanyowners(sha3(msg.data))\r\n    {\r\n        assertOwnersAreConsistent();\r\n\r\n        clearPending();\r\n        uint ownerIndex = checkOwnerIndex(m_ownerIndex[_owner]);\r\n        m_owners[ownerIndex] = 0;\r\n        m_ownerIndex[_owner] = 0;\r\n        //make sure m_numOwners is equal to the number of owners and always points to the last owner\r\n        reorganizeOwners();\r\n\r\n        assertOwnersAreConsistent();\r\n        OwnerRemoved(_owner);\r\n    }\r\n\r\n    /// @notice changes the required number of owner signatures\r\n    /// @param _newRequired new number of signatures required\r\n    // All pending operations will be canceled!\r\n    function changeRequirement(uint _newRequired)\r\n        external\r\n        multiOwnedValidRequirement(_newRequired, m_numOwners)\r\n        onlymanyowners(sha3(msg.data))\r\n    {\r\n        m_multiOwnedRequired = _newRequired;\r\n        clearPending();\r\n        RequirementChanged(_newRequired);\r\n    }\r\n\r\n    /// @notice Gets an owner by 0-indexed position\r\n    /// @param ownerIndex 0-indexed owner position\r\n    function getOwner(uint ownerIndex) public constant returns (address) {\r\n        return m_owners[ownerIndex + 1];\r\n    }\r\n\r\n    /// @notice Gets owners\r\n    /// @return memory array of owners\r\n    function getOwners() public constant returns (address[]) {\r\n        address[] memory result = new address[](m_numOwners);\r\n        for (uint i = 0; i < m_numOwners; i++)\r\n            result[i] = getOwner(i);\r\n\r\n        return result;\r\n    }\r\n\r\n    /// @notice checks if provided address is an owner address\r\n    /// @param _addr address to check\r\n    /// @return true if it's an owner\r\n    function isOwner(address _addr) public constant returns (bool) {\r\n        return m_ownerIndex[_addr] > 0;\r\n    }\r\n\r\n    /// @notice Tests ownership of the current caller.\r\n    /// @return true if it's an owner\r\n    // It's advisable to call it by new owner to make sure that the same erroneous address is not copy-pasted to\r\n    // addOwner/changeOwner and to isOwner.\r\n    function amIOwner() external constant onlyowner returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    /// @notice Revokes a prior confirmation of the given operation\r\n    /// @param _operation operation value, typically sha3(msg.data)\r\n    function revoke(bytes32 _operation)\r\n        external\r\n        multiOwnedOperationIsActive(_operation)\r\n        onlyowner\r\n    {\r\n        uint ownerIndexBit = makeOwnerBitmapBit(msg.sender);\r\n        var pending = m_multiOwnedPending[_operation];\r\n        require(pending.ownersDone & ownerIndexBit > 0);\r\n\r\n        assertOperationIsConsistent(_operation);\r\n\r\n        pending.yetNeeded++;\r\n        pending.ownersDone -= ownerIndexBit;\r\n\r\n        assertOperationIsConsistent(_operation);\r\n        Revoke(msg.sender, _operation);\r\n    }\r\n\r\n    /// @notice Checks if owner confirmed given operation\r\n    /// @param _operation operation value, typically sha3(msg.data)\r\n    /// @param _owner an owner address\r\n    function hasConfirmed(bytes32 _operation, address _owner)\r\n        external\r\n        constant\r\n        multiOwnedOperationIsActive(_operation)\r\n        ownerExists(_owner)\r\n        returns (bool)\r\n    {\r\n        return !(m_multiOwnedPending[_operation].ownersDone & makeOwnerBitmapBit(_owner) == 0);\r\n    }\r\n\r\n    // INTERNAL METHODS\r\n\r\n    function confirmAndCheck(bytes32 _operation)\r\n        private\r\n        onlyowner\r\n        returns (bool)\r\n    {\r\n        if (512 == m_multiOwnedPendingIndex.length)\r\n            // In case m_multiOwnedPendingIndex grows too much we have to shrink it: otherwise at some point\r\n            // we won't be able to do it because of block gas limit.\r\n            // Yes, pending confirmations will be lost. Dont see any security or stability implications.\r\n            // TODO use more graceful approach like compact or removal of clearPending completely\r\n            clearPending();\r\n\r\n        var pending = m_multiOwnedPending[_operation];\r\n\r\n        // if we're not yet working on this operation, switch over and reset the confirmation status.\r\n        if (! isOperationActive(_operation)) {\r\n            // reset count of confirmations needed.\r\n            pending.yetNeeded = m_multiOwnedRequired;\r\n            // reset which owners have confirmed (none) - set our bitmap to 0.\r\n            pending.ownersDone = 0;\r\n            pending.index = m_multiOwnedPendingIndex.length++;\r\n            m_multiOwnedPendingIndex[pending.index] = _operation;\r\n            assertOperationIsConsistent(_operation);\r\n        }\r\n\r\n        // determine the bit to set for this owner.\r\n        uint ownerIndexBit = makeOwnerBitmapBit(msg.sender);\r\n        // make sure we (the message sender) haven't confirmed this operation previously.\r\n        if (pending.ownersDone & ownerIndexBit == 0) {\r\n            // ok - check if count is enough to go ahead.\r\n            assert(pending.yetNeeded > 0);\r\n            if (pending.yetNeeded == 1) {\r\n                // enough confirmations: reset and run interior.\r\n                delete m_multiOwnedPendingIndex[m_multiOwnedPending[_operation].index];\r\n                delete m_multiOwnedPending[_operation];\r\n                FinalConfirmation(msg.sender, _operation);\r\n                return true;\r\n            }\r\n            else\r\n            {\r\n                // not enough: record that this owner in particular confirmed.\r\n                pending.yetNeeded--;\r\n                pending.ownersDone |= ownerIndexBit;\r\n                assertOperationIsConsistent(_operation);\r\n                Confirmation(msg.sender, _operation);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Reclaims free slots between valid owners in m_owners.\r\n    // TODO given that its called after each removal, it could be simplified.\r\n    function reorganizeOwners() private {\r\n        uint free = 1;\r\n        while (free < m_numOwners)\r\n        {\r\n            // iterating to the first free slot from the beginning\r\n            while (free < m_numOwners && m_owners[free] != 0) free++;\r\n\r\n            // iterating to the first occupied slot from the end\r\n            while (m_numOwners > 1 && m_owners[m_numOwners] == 0) m_numOwners--;\r\n\r\n            // swap, if possible, so free slot is located at the end after the swap\r\n            if (free < m_numOwners && m_owners[m_numOwners] != 0 && m_owners[free] == 0)\r\n            {\r\n                // owners between swapped slots should't be renumbered - that saves a lot of gas\r\n                m_owners[free] = m_owners[m_numOwners];\r\n                m_ownerIndex[m_owners[free]] = free;\r\n                m_owners[m_numOwners] = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    function clearPending() private onlyowner {\r\n        uint length = m_multiOwnedPendingIndex.length;\r\n        for (uint i = 0; i < length; ++i) {\r\n            if (m_multiOwnedPendingIndex[i] != 0)\r\n                delete m_multiOwnedPending[m_multiOwnedPendingIndex[i]];\r\n        }\r\n        delete m_multiOwnedPendingIndex;\r\n    }\r\n\r\n    function checkOwnerIndex(uint ownerIndex) private constant returns (uint) {\r\n        assert(0 != ownerIndex && ownerIndex <= c_maxOwners);\r\n        return ownerIndex;\r\n    }\r\n\r\n    function makeOwnerBitmapBit(address owner) private constant returns (uint) {\r\n        uint ownerIndex = checkOwnerIndex(m_ownerIndex[owner]);\r\n        return 2 ** ownerIndex;\r\n    }\r\n\r\n    function isOperationActive(bytes32 _operation) private constant returns (bool) {\r\n        return 0 != m_multiOwnedPending[_operation].yetNeeded;\r\n    }\r\n\r\n\r\n    function assertOwnersAreConsistent() private constant {\r\n        assert(m_numOwners > 0);\r\n        assert(m_numOwners <= c_maxOwners);\r\n        assert(m_owners[0] == 0);\r\n        assert(0 != m_multiOwnedRequired && m_multiOwnedRequired <= m_numOwners);\r\n    }\r\n\r\n    function assertOperationIsConsistent(bytes32 _operation) private constant {\r\n        var pending = m_multiOwnedPending[_operation];\r\n        assert(0 != pending.yetNeeded);\r\n        assert(m_multiOwnedPendingIndex[pending.index] == _operation);\r\n        assert(pending.yetNeeded <= m_multiOwnedRequired);\r\n    }\r\n\r\n\r\n   \t// FIELDS\r\n\r\n    uint constant c_maxOwners = 250;\r\n\r\n    // the number of owners that must confirm the same operation before it is run.\r\n    uint public m_multiOwnedRequired;\r\n\r\n\r\n    // pointer used to find a free slot in m_owners\r\n    uint public m_numOwners;\r\n\r\n    // list of owners (addresses),\r\n    // slot 0 is unused so there are no owner which index is 0.\r\n    // TODO could we save space at the end of the array for the common case of <10 owners? and should we?\r\n    address[256] internal m_owners;\r\n\r\n    // index on the list of owners to allow reverse lookup: owner address => index in m_owners\r\n    mapping(address => uint) internal m_ownerIndex;\r\n\r\n\r\n    // the ongoing operations.\r\n    mapping(bytes32 => MultiOwnedOperationPendingState) internal m_multiOwnedPending;\r\n    bytes32[] internal m_multiOwnedPendingIndex;\r\n}\r\n\r\n\r\n/**\r\n * @title Contract which is owned by owners and operated by controller.\r\n *\r\n * @notice Provides a way to set up an entity (typically other contract) entitled to control actions of this contract.\r\n * Controller is set up by owners or during construction.\r\n *\r\n * @dev controller check is performed by onlyController modifier.\r\n */\r\ncontract MultiownedControlled is multiowned {\r\n\r\n    event ControllerSet(address controller);\r\n    event ControllerRetired(address was);\r\n\r\n\r\n    modifier onlyController {\r\n        require(msg.sender == m_controller);\r\n        _;\r\n    }\r\n\r\n\r\n    // PUBLIC interface\r\n\r\n    function MultiownedControlled(address[] _owners, uint _signaturesRequired, address _controller)\r\n        multiowned(_owners, _signaturesRequired)\r\n    {\r\n        m_controller = _controller;\r\n        ControllerSet(m_controller);\r\n    }\r\n\r\n    /// @dev sets the controller\r\n    function setController(address _controller) external onlymanyowners(sha3(msg.data)) {\r\n        m_controller = _controller;\r\n        ControllerSet(m_controller);\r\n    }\r\n\r\n    /// @dev ability for controller to step down\r\n    function detachController() external onlyController {\r\n        address was = m_controller;\r\n        m_controller = address(0);\r\n        ControllerRetired(was);\r\n    }\r\n\r\n\r\n    // FIELDS\r\n\r\n    /// @notice address of entity entitled to mint new tokens\r\n    address public m_controller;\r\n}\r\n\r\n\r\n/// @title StandardToken which can be minted by another contract.\r\ncontract MintableMultiownedToken is MultiownedControlled, StandardToken {\r\n\r\n    /// @dev parameters of an extra token emission\r\n    struct EmissionInfo {\r\n        // tokens created\r\n        uint256 created;\r\n\r\n        // totalSupply at the moment of emission (excluding created tokens)\r\n        uint256 totalSupplyWas;\r\n    }\r\n\r\n    event Mint(address indexed to, uint256 amount);\r\n    event Emission(uint256 tokensCreated, uint256 totalSupplyWas, uint256 time);\r\n    event Dividend(address indexed to, uint256 amount);\r\n\r\n\r\n    // PUBLIC interface\r\n\r\n    function MintableMultiownedToken(address[] _owners, uint _signaturesRequired, address _minter)\r\n        MultiownedControlled(_owners, _signaturesRequired, _minter)\r\n    {\r\n        dividendsPool = this;   // or any other special unforgeable value, actually\r\n\r\n        // emission #0 is a dummy: because of default value 0 in m_lastAccountEmission\r\n        m_emissions.push(EmissionInfo({created: 0, totalSupplyWas: 0}));\r\n    }\r\n\r\n    /// @notice Request dividends for current account.\r\n    function requestDividends() external {\r\n        payDividendsTo(msg.sender);\r\n    }\r\n\r\n    /// @notice hook on standard ERC20#transfer to pay dividends\r\n    function transfer(address _to, uint256 _value) returns (bool) {\r\n        payDividendsTo(msg.sender);\r\n        payDividendsTo(_to);\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    /// @notice hook on standard ERC20#transferFrom to pay dividends\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n        payDividendsTo(_from);\r\n        payDividendsTo(_to);\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    // Disabled: this could be undesirable because sum of (balanceOf() for each token owner) != totalSupply\r\n    // (but: sum of (balances[owner] for each token owner) == totalSupply!).\r\n    //\r\n    // @notice hook on standard ERC20#balanceOf to take dividends into consideration\r\n    // function balanceOf(address _owner) constant returns (uint256) {\r\n    //     var (hasNewDividends, dividends) = calculateDividendsFor(_owner);\r\n    //     return hasNewDividends ? super.balanceOf(_owner).add(dividends) : super.balanceOf(_owner);\r\n    // }\r\n\r\n\r\n    /// @dev mints new tokens\r\n    function mint(address _to, uint256 _amount) external onlyController {\r\n        require(m_externalMintingEnabled);\r\n        payDividendsTo(_to);\r\n        mintInternal(_to, _amount);\r\n    }\r\n\r\n    /// @dev disables mint(), irreversible!\r\n    function disableMinting() external onlyController {\r\n        require(m_externalMintingEnabled);\r\n        m_externalMintingEnabled = false;\r\n    }\r\n\r\n\r\n    // INTERNAL functions\r\n\r\n    /**\r\n     * @notice Starts new token emission\r\n     * @param _tokensCreated Amount of tokens to create\r\n     * @dev Dividends are not distributed immediately as it could require billions of gas,\r\n     * instead they are `pulled` by a holder from dividends pool account before any update to the holder account occurs.\r\n     */\r\n    function emissionInternal(uint256 _tokensCreated) internal {\r\n        require(0 != _tokensCreated);\r\n        require(_tokensCreated < totalSupply / 2);  // otherwise it looks like an error\r\n\r\n        uint256 totalSupplyWas = totalSupply;\r\n\r\n        m_emissions.push(EmissionInfo({created: _tokensCreated, totalSupplyWas: totalSupplyWas}));\r\n        mintInternal(dividendsPool, _tokensCreated);\r\n\r\n        Emission(_tokensCreated, totalSupplyWas, now);\r\n    }\r\n\r\n    function mintInternal(address _to, uint256 _amount) internal {\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Transfer(this, _to, _amount);\r\n        Mint(_to, _amount);\r\n    }\r\n\r\n    /// @dev adds dividends to the account _to\r\n    function payDividendsTo(address _to) internal {\r\n        var (hasNewDividends, dividends) = calculateDividendsFor(_to);\r\n        if (!hasNewDividends)\r\n            return;\r\n\r\n        if (0 != dividends) {\r\n            balances[dividendsPool] = balances[dividendsPool].sub(dividends);\r\n            balances[_to] = balances[_to].add(dividends);\r\n            Transfer(dividendsPool, _to, dividends);\r\n        }\r\n        m_lastAccountEmission[_to] = getLastEmissionNum();\r\n    }\r\n\r\n    /// @dev calculates dividends for the account _for\r\n    /// @return (true if state has to be updated, dividend amount (could be 0!))\r\n    function calculateDividendsFor(address _for) constant internal returns (bool hasNewDividends, uint dividends) {\r\n        assert(_for != dividendsPool);  // no dividends for the pool!\r\n\r\n        uint256 lastEmissionNum = getLastEmissionNum();\r\n        uint256 lastAccountEmissionNum = m_lastAccountEmission[_for];\r\n        assert(lastAccountEmissionNum <= lastEmissionNum);\r\n        if (lastAccountEmissionNum == lastEmissionNum)\r\n            return (false, 0);\r\n\r\n        uint256 initialBalance = balances[_for];    // beware of recursion!\r\n        if (0 == initialBalance)\r\n            return (true, 0);\r\n\r\n        uint256 balance = initialBalance;\r\n        for (uint256 emissionToProcess = lastAccountEmissionNum + 1; emissionToProcess <= lastEmissionNum; emissionToProcess++) {\r\n            EmissionInfo storage emission = m_emissions[emissionToProcess];\r\n            assert(0 != emission.created && 0 != emission.totalSupplyWas);\r\n\r\n            uint256 dividend = balance.mul(emission.created).div(emission.totalSupplyWas);\r\n            Dividend(_for, dividend);\r\n\r\n            balance = balance.add(dividend);\r\n        }\r\n\r\n        return (true, balance.sub(initialBalance));\r\n    }\r\n\r\n    function getLastEmissionNum() private constant returns (uint256) {\r\n        return m_emissions.length - 1;\r\n    }\r\n\r\n\r\n    // FIELDS\r\n\r\n    /// @notice if this true then token is still externally mintable (but this flag does't affect emissions!)\r\n    bool public m_externalMintingEnabled = true;\r\n\r\n    /// @dev internal address of dividends in balances mapping.\r\n    address dividendsPool;\r\n\r\n    /// @notice record of issued dividend emissions\r\n    EmissionInfo[] public m_emissions;\r\n\r\n    /// @dev for each token holder: last emission (index in m_emissions) which was processed for this holder\r\n    mapping(address => uint256) m_lastAccountEmission;\r\n}\r\n\r\n\r\n/// @title Storiqa coin contract\r\ncontract STQToken is CirculatingToken, MintableMultiownedToken {\r\n\r\n\r\n    // PUBLIC interface\r\n\r\n    function STQToken(address[] _owners)\r\n        MintableMultiownedToken(_owners, 2, /* minter: */ address(0))\r\n    {\r\n        require(3 == _owners.length);\r\n    }\r\n\r\n    /// @dev Allows token transfers\r\n    function startCirculation() external onlyController {\r\n        assert(enableCirculation());    // must be called once\r\n    }\r\n\r\n    /// @notice Starts new token emission\r\n    /// @param _tokensCreatedInSTQ Amount of STQ (not STQ-wei!) to create, like 30 000 or so\r\n    function emission(uint256 _tokensCreatedInSTQ) external onlymanyowners(sha3(msg.data)) {\r\n        emissionInternal(_tokensCreatedInSTQ.mul(uint256(10) ** uint256(decimals)));\r\n    }\r\n\r\n\r\n    // FIELDS\r\n\r\n    string public constant name = 'Storiqa Token';\r\n    string public constant symbol = 'STQ';\r\n    uint8 public constant decimals = 18;\r\n}", "OptimizationUsed": "1", "ContractName": "STQToken", "ByteCode": "0x606060405236156101935763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610198578063095ea7b314610223578063173825d91461025957806318160ddd1461027a57806320190ccd1461029f57806323b872dd146102b45780632f54bf6e146102f0578063313ce5671461032357806340c10f191461034c5780634123cb6b1461037057806344cc5f7e146103955780634e4ab830146103bc57806357d444fd146103e357806358292a3d146103f85780637065cb481461041057806370a0823114610431578063787d64e4146104625780637e5cd5c11461048757806392eefe9b1461049c57806395d89b41146104bd578063a0e67e2b14610548578063a9059cbb146105af578063af107749146105e5578063b75c7dc614610613578063ba51a6df1461062b578063c2cf732614610643578063c41a360a14610679578063d4a9991f146106ab578063d7311963146106c0578063d785e5c9146106ef578063dd62ed3e14610716578063f00d4b5d1461074d575b600080fd5b34156101a357600080fd5b6101ab610774565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101e85780820151818401525b6020016101cf565b50505050905090810190601f1680156102155780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561022e57600080fd5b610245600160a060020a03600435166024356107ab565b604051901515815260200160405180910390f35b341561026457600080fd5b610278600160a060020a03600435166107d4565b005b341561028557600080fd5b61028d610931565b60405190815260200160405180910390f35b34156102aa57600080fd5b610278610938565b005b34156102bf57600080fd5b610245600160a060020a0360043581169060243516604435610968565b604051901515815260200160405180910390f35b34156102fb57600080fd5b610245600160a060020a0360043516610991565b604051901515815260200160405180910390f35b341561032e57600080fd5b6103366109b2565b60405160ff909116815260200160405180910390f35b341561035757600080fd5b610278600160a060020a03600435166024356109b7565b005b341561037b57600080fd5b61028d610a03565b60405190815260200160405180910390f35b34156103a057600080fd5b610245610a09565b604051901515815260200160405180910390f35b34156103c757600080fd5b610245610a18565b604051901515815260200160405180910390f35b34156103ee57600080fd5b610278610a36565b005b341561040357600080fd5b610278600435610ac1565b005b341561041b57600080fd5b610278600160a060020a0360043516610b14565b005b341561043c57600080fd5b61028d600160a060020a0360043516610c3b565b60405190815260200160405180910390f35b341561046d57600080fd5b61028d610c5b565b60405190815260200160405180910390f35b341561049257600080fd5b610278610c61565b005b34156104a757600080fd5b610278600160a060020a0360043516610ca4565b005b34156104c857600080fd5b6101ab610d44565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101e85780820151818401525b6020016101cf565b50505050905090810190601f1680156102155780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561055357600080fd5b61055b610d7b565b60405160208082528190810183818151815260200191508051906020019060200280838360005b8381101561059b5780820151818401525b602001610582565b505050509050019250505060405180910390f35b34156105ba57600080fd5b610245600160a060020a0360043516602435610dfe565b604051901515815260200160405180910390f35b34156105f057600080fd5b6105fb600435610e25565b60405191825260208201526040908101905180910390f35b341561061e57600080fd5b610278600435610e54565b005b341561063657600080fd5b610278600435610f20565b005b341561064e57600080fd5b610245600435600160a060020a0360243516610fb5565b604051901515815260200160405180910390f35b341561068457600080fd5b61068f60043561100d565b604051600160a060020a03909116815260200160405180910390f35b34156106b657600080fd5b61027861103e565b005b34156106cb57600080fd5b61068f61104a565b604051600160a060020a03909116815260200160405180910390f35b34156106fa57600080fd5b61024561105a565b604051901515815260200160405180910390f35b341561072157600080fd5b61028d600160a060020a0360043581169060243516611064565b60405190815260200160405180910390f35b341561075857600080fd5b610278600160a060020a0360043581169060243516611092565b005b60408051908101604052600d81527f53746f7269716120546f6b656e00000000000000000000000000000000000000602082015281565b6101095460009060ff1615156107c057600080fd5b6107ca83836111ca565b90505b5b92915050565b6000816107e081610991565b15156107eb57600080fd5b6001805403600081118015610801575060fa8111155b151561080c57600080fd5b60005460018054036000821180156108245750808211155b151561082f57600080fd5b60003660405180838380828437820191505092505050604051809103902061085681611273565b1561092357610863611453565b61086b6114b2565b600160a060020a0387166000908152610102602052604090205461088e90611560565b9550600060028761010081106108a057fe5b0160005b8154600160a060020a039384166101009290920a91820291840219161790558716600090815261010260205260408120556108dd611582565b6108e5611453565b7f58619076adf5bb0943d100ef88d52d7c3fd691b19d3a9071b555b651fbf418da87604051600160a060020a03909116815260200160405180910390a15b5b5b505b50505b505b505050565b6101065481565b6101055433600160a060020a0390811691161461095457600080fd5b61095c611768565b151561096457fe5b5b5b565b6000610973846117c0565b61097c836117c0565b6109878484846118ca565b90505b9392505050565b600160a060020a03811660009081526101026020526040812054115b919050565b601281565b6101055433600160a060020a039081169116146109d357600080fd5b61010954610100900460ff1615156109ea57600080fd5b6109f3826117c0565b6109fd82826118f5565b5b5b5050565b60015481565b61010954610100900460ff1681565b6000610a2333610991565b1515610a2e57600080fd5b5060015b5b90565b6101055460009033600160a060020a03908116911614610a5557600080fd5b50610105805473ffffffffffffffffffffffffffffffffffffffff198116909155600160a060020a03167fc82cd8e6862d9c7b2c4c1d4f8dbac09a809e276399883e1070457f61a0f5349081604051600160a060020a03909116815260200160405180910390a15b5b50565b600036604051808383808284378201915050925050506040518091039020610ae881611273565b156109fd576109fd610b0883670de0b6b3a764000063ffffffff6119c016565b6119ef565b5b5b5b5050565b80610b1e81610991565b15610b2857600080fd5b600154600101600081118015610b3f575060fa8111155b1515610b4a57600080fd5b600036604051808383808284378201915050925050506040518091039020610b7181611273565b1561092a57610b7e611453565b610b866114b2565b6001805481019081905584906002906101008110610ba057fe5b0160005b6101000a815481600160a060020a030219169083600160a060020a03160217905550610bd1600154611560565b600160a060020a03851660009081526101026020526040902055610bf3611453565b7f994a936646fe87ffe4f1e469d3d6aa417d6b855598397f323de5b449f765f0c384604051600160a060020a03909116815260200160405180910390a15b5b5b505b505b5050565b600160a060020a038116600090815261010760205260409020545b919050565b60005481565b6101055433600160a060020a03908116911614610c7d57600080fd5b61010954610100900460ff161515610c9457600080fd5b610109805461ff00191690555b5b565b600036604051808383808284378201915050925050506040518091039020610ccb81611273565b156109fd57610105805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0384811691909117918290557f79f74fd5964b6943d8a1865abfb7f668c92fa3f32c0a2e3195da7d0946703ad79116604051600160a060020a03909116815260200160405180910390a15b5b5b5050565b60408051908101604052600381527f5354510000000000000000000000000000000000000000000000000000000000602082015281565b610d83611f5a565b610d8b611f5a565b6000600154604051805910610d9d5750595b908082528060200260200182016040525b509150600090505b600154811015610df557610dc98161100d565b828281518110610dd557fe5b600160a060020a039092166020928302909101909101525b600101610db6565b8192505b505090565b6000610e09336117c0565b610e12836117c0565b6107ca8383611acc565b90505b92915050565b61010a805482908110610e3457fe5b906000526020600020906002020160005b50805460019091015490915082565b60008082610e6181611af5565b1515610e6c57600080fd5b610e7533610991565b1515610e8057600080fd5b610e8933611b0d565b6000858152610103602052604081206001810154929550935090841611610eaf57600080fd5b610eb884611b41565b815460019081018355820180548490039055610ed384611b41565b7fc7fb647e59b18047309aa15aad418e5d7ca96d173ad704f1031a2c3d7591734b3385604051600160a060020a03909216825260208201526040908101905180910390a15b5b5b50505050565b80600154600082118015610f345750808211155b1515610f3f57600080fd5b600036604051808383808284378201915050925050506040518091039020610f6681611273565b1561092a576000849055610f786114b2565b7facbdb084c721332ac59f9b8e392196c9eb0e4932862da8eb9beaf0dad4f550da8460405190815260200160405180910390a15b5b5b505b505050565b600082610fc181611af5565b1515610fcc57600080fd5b82610fd681610991565b1515610fe157600080fd5b610fea84611b0d565b6000868152610103602052604090206001015416151592505b5b505b5092915050565b6000600260018301610100811061102057fe5b0160005b9054906101000a9004600160a060020a031690505b919050565b610964336117c0565b5b565b61010554600160a060020a031681565b6101095460ff1681565b600160a060020a03808316600090815261010860209081526040808320938516835292905220545b92915050565b60008261109e81610991565b15156110a957600080fd5b826110b381610991565b156110bd57600080fd5b6000366040518083838082843782019150509250505060405180910390206110e481611273565b15610927576110f1611453565b6110f96114b2565b600160a060020a0386166000908152610102602052604090205461111c90611560565b935084600285610100811061112d57fe5b0160005b8154600160a060020a039384166101009290920a918202918402191617905586811660009081526101026020526040808220829055918716815220849055611177611453565b7fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c8686604051600160a060020a039283168152911660208201526040908101905180910390a15b5b5b505b505b50505050565b60008115806111fd5750600160a060020a0333811660009081526101086020908152604080832093871683529290522054155b151561120857600080fd5b600160a060020a0333811660008181526101086020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b600080600061128133610991565b151561128c57600080fd5b6101045461020014156112a1576112a16114b2565b5b60008481526101036020526040902091506112bc84611af5565b1515611313576000805483556001808401919091556101048054916112e391908301611f6c565b60028301819055610104805486929081106112fa57fe5b906000526020600020900160005b505561131384611b41565b5b61131d33611b0d565b905080826001015416600014156114495781546000901161133a57fe5b8154600114156113e957600084815261010360205260409020600201546101048054909190811061136757fe5b906000526020600020900160005b50600090819055848152610103602052604080822082815560018101839055600201919091557f367569357efc39b74a025c4ba1d64068b2b574e3b0d081c48d42f7feeca4cd16903390869051600160a060020a03909216825260208201526040908101905180910390a160019250611449565b81546000190182556001820180548217905561140484611b41565b7fe1c52dc63b719ade82e8bea94cc41a0d5d28e4aaf536adb5e9cccc9ff8c1aeda3385604051600160a060020a03909216825260208201526040908101905180910390a15b5b5b5b5050919050565b6001546000901161146057fe5b60015460fa90111561146e57fe5b600260005b0160005b9054600160a060020a036101009290920a9004161561149257fe5b6000541580159061095c575060015460005411155b151561096457fe5b5b565b6000806114be33610991565b15156114c957600080fd5b50506101045460005b8181101561154d576101048054829081106114e957fe5b906000526020600020900160005b5054156115445761010360006101048381548110151561151357fe5b906000526020600020900160005b505481526020810191909152604001600090812081815560018101829055600201555b5b6001016114d2565b6109fd6101046000611f96565b5b5b5050565b60008115801590611572575060fa8211155b151561157a57fe5b50805b919050565b60015b600154811015610abd575b600154811080156115c5575060028161010081106115aa57fe5b0160005b9054600160a060020a036101009290920a90041615155b156115d257600101611590565b5b6001805411801561160a575060015460029061010081106115f057fe5b0160005b9054600160a060020a036101009290920a900416155b1561161e57600180546000190190556115d2565b600154811080156116565750600154600290610100811061163b57fe5b0160005b9054600160a060020a036101009290920a90041615155b80156116855750600281610100811061166b57fe5b0160005b9054600160a060020a036101009290920a900416155b1561175f57600154600290610100811061169b57fe5b0160005b9054906101000a9004600160a060020a0316600282610100811015156116c157fe5b0160005b6101000a815481600160a060020a030219169083600160a060020a03160217905550806101026000600284610100811015156116fd57fe5b0160005b905461010091820a9004600160a060020a031682526020820192909252604001600090812092909255600154600291811061173857fe5b0160005b6101000a815481600160a060020a030219169083600160a060020a031602179055505b611585565b5b50565b6101095460009060ff161561177f57506000610a32565b610109805460ff191660011790557f61ff8191b26826d8bb82f4fa7cb8ef434fa4f34635af54cac08f7c476c5e279460405160405180910390a15060015b90565b6000806117cc83611b98565b915091508115156117dc5761092c565b80156118a25761010954620100009004600160a060020a03166000908152610107602052604090205461180f9082611d48565b61010954600160a060020a0362010000909104811660009081526101076020526040808220939093559085168152205461184f908263ffffffff611d5f16565b600160a060020a0380851660008181526101076020526040908190209390935561010954909262010000909104909116906000805160206120338339815191529084905190815260200160405180910390a35b6118aa611d79565b600160a060020a038416600090815261010b60205260409020555b505050565b6101095460009060ff1615156118df57600080fd5b610987848484611d85565b90505b5b9392505050565b61010654611909908263ffffffff611d5f16565b61010655600160a060020a03821660009081526101076020526040902054611937908263ffffffff611d5f16565b600160a060020a038084166000818152610107602052604090819020939093559130909116906000805160206120338339815191529084905190815260200160405180910390a381600160a060020a03167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968858260405190815260200160405180910390a25b5050565b60008282028315806119dc57508284828115156119d957fe5b04145b15156119e457fe5b8091505b5092915050565b60008115156119fd57600080fd5b610106546002905b048210611a1157600080fd5b506101065461010a805460018101611a298382611fb8565b916000526020600020906002020160005b6040805190810160405285815260208101859052919050815181556020820151600190910155505061010954611a8090600160a060020a036201000090910416836118f5565b7fb6d34f12e241bbb736de0a0cc42ddcb06ed877521d75a28e8c375794fadaf23582824260405180848152602001838152602001828152602001935050505060405180910390a15b5050565b6101095460009060ff161515611ae157600080fd5b6107ca8383611e8d565b90505b5b92915050565b6000818152610103602052604090205415155b919050565b600160a060020a038116600090815261010260205260408120548190611b3290611560565b90508060020a91505b50919050565b60008181526101036020526040902080541515611b5a57fe5b600281015461010480548492908110611b6f57fe5b906000526020600020900160005b505414611b8657fe5b600054815411156109fd57fe5b5b5050565b600080600080600080600080600061010960029054906101000a9004600160a060020a0316600160a060020a03168a600160a060020a031614151515611bda57fe5b611be2611d79565b600160a060020a038b16600090815261010b6020526040902054909750955086861115611c0b57fe5b86861415611c1f5760009850889750611d3c565b600160a060020a038a16600090815261010760205260409020549450841515611c4f576001985060009750611d3c565b8493508560010192505b868311611d255761010a805484908110611c6f57fe5b906000526020600020906002020160005b50805490925015801590611c975750600182015415155b1515611c9f57fe5b60018201548254611cc89190611cbc90879063ffffffff6119c016565b9063ffffffff611f3e16565b905089600160a060020a03167ff6a7e669306918b018d1eb595a21c8180bdecc0c90847daef23f9cf5fbd4902a8260405190815260200160405180910390a2611d17848263ffffffff611d5f16565b93505b600190920191611c59565b6001611d37858763ffffffff611d4816565b985098505b50505050505050915091565b600082821115611d5457fe5b508082035b92915050565b6000828201838110156119e457fe5b8091505b5092915050565b61010a54600019015b90565b600160a060020a0380841660009081526101086020908152604080832033851684528252808320549386168352610107909152812054909190611dce908463ffffffff611d5f16565b600160a060020a03808616600090815261010760205260408082209390935590871681522054611e04908463ffffffff611d4816565b600160a060020a03861660009081526101076020526040902055611e2e818463ffffffff611d4816565b600160a060020a0380871660008181526101086020908152604080832033861684529091529081902093909355908616916000805160206120338339815191529086905190815260200160405180910390a3600191505b509392505050565b600160a060020a03331660009081526101076020526040812054611eb7908363ffffffff611d4816565b600160a060020a03338116600090815261010760205260408082209390935590851681522054611eed908363ffffffff611d5f16565b600160a060020a038085166000818152610107602052604090819020939093559133909116906000805160206120338339815191529085905190815260200160405180910390a35060015b92915050565b6000808284811515611f4c57fe5b0490508091505b5092915050565b60206040519081016040526000815290565b81548183558181151161092c5760008381526020902061092c918101908301611fea565b5b505050565b5080546000825590600052602060002090810190610abd9190611fea565b5b50565b81548183558181151161092c5760020281600202836000526020600020918201910161092c919061200b565b5b505050565b610a3291905b808211156120045760008155600101611ff0565b5090565b90565b610a3291905b808211156120045760008082556001820155600201612011565b5090565b905600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820806aac597cf63a0e8500f39bd70c0bc9a6bdededd0b02717d9e0cf89c8e3956a0029"}