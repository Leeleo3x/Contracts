{"Runs": "200", "SwarmSource": "bzzr://8766be1882aee7b9c86cd7a9733d6de2c80e43c48bc506ec77771c2d460fd417", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_saleAgent\",\"type\":\"address\"}],\"name\":\"setSaleAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"InterfaceId_ERC165\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_type\",\"type\":\"uint8\"},{\"name\":\"_name\",\"type\":\"bytes32\"},{\"name\":\"_url\",\"type\":\"bytes32\"},{\"name\":\"_isSnatchable\",\"type\":\"bool\"}],\"name\":\"adminsTokenCreation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenPriceForIncreasing\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_type\",\"type\":\"uint8\"},{\"name\":\"_name\",\"type\":\"bytes32\"},{\"name\":\"_url\",\"type\":\"bytes32\"},{\"name\":\"_isSnatchable\",\"type\":\"bool\"}],\"name\":\"rewriteTokenFromPresale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"allTokensOfUsers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenById\",\"outputs\":[{\"name\":\"typeOfToken\",\"type\":\"uint8\"},{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"URL\",\"type\":\"bytes32\"},{\"name\":\"isSnatchable\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"bytes32\"}],\"name\":\"bytes32ToString\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setUnpauseForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_presale\",\"type\":\"address\"}],\"name\":\"setPresaleAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"source\",\"type\":\"string\"}],\"name\":\"stringToBytes32\",\"outputs\":[{\"name\":\"result\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setPauseForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Type\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"Name\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"URL\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"TokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"IsSnatchable\",\"type\":\"bool\"}],\"name\":\"TokenCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Type\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"Name\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"URL\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"TokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"IsSnatchable\",\"type\":\"bool\"}],\"name\":\"TokenChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.24+commit.e67f0147", "ConstructorArguments": "", "SourceCode": "pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @author Part of Freaking Awesome Blockchain Games project. Copyright by FABG Team 2018\r\n */\r\n\r\n\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   * as the code is not actually created until after the constructor finishes.\r\n   * @param _addr address to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address _addr) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(_addr) }\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address previousOwner);\r\n  event OwnershipTransferred(\r\n    address previousOwner,\r\n    address newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ncontract ERC721Receiver {\r\n  /**\r\n   * @dev Magic value to be returned upon successful reception of an NFT\r\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`,\r\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n   */\r\n  bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n  /**\r\n   * @notice Handle the receipt of an NFT\r\n   * @dev The ERC721 smart contract calls this function on the recipient\r\n   * after a `safetransfer`. This function MAY throw to revert and reject the\r\n   * transfer. Return of other than the magic value MUST result in the\r\n   * transaction being reverted.\r\n   * Note: the contract address is always the message sender.\r\n   * @param _operator The address which called `safeTransferFrom` function\r\n   * @param _from The address which previously owned the token\r\n   * @param _tokenId The NFT identifier which is being transferred\r\n   * @param _data Additional data with no specified format\r\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n   */\r\n  function onERC721Received(\r\n    address _operator,\r\n    address _from,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n    returns(bytes4);\r\n}\r\n\r\ninterface ERC165 {\r\n\r\n  /**\r\n   * @notice Query if a contract implements an interface\r\n   * @param _interfaceId The interface identifier, as specified in ERC-165\r\n   * @dev Interface identification is specified in ERC-165. This function\r\n   * uses less than 30,000 gas.\r\n   */\r\n  function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool);\r\n}\r\n\r\ncontract ERC721Basic is ERC165 {\r\n\r\n  bytes4 internal constant InterfaceId_ERC721 = 0x80ac58cd;\r\n  /*\r\n   * 0x80ac58cd ===\r\n   *   bytes4(keccak256('balanceOf(address)')) ^\r\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\r\n   *   bytes4(keccak256('approve(address,uint256)')) ^\r\n   *   bytes4(keccak256('getApproved(uint256)')) ^\r\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\r\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\r\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\r\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\r\n   */\r\n\r\n  bytes4 internal constant InterfaceId_ERC721Exists = 0x4f558e79;\r\n  /*\r\n   * 0x4f558e79 ===\r\n   *   bytes4(keccak256('exists(uint256)'))\r\n   */\r\n\r\n  bytes4 internal constant InterfaceId_ERC721Enumerable = 0x780e9d63;\r\n  /**\r\n   * 0x780e9d63 ===\r\n   *   bytes4(keccak256('totalSupply()')) ^\r\n   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\r\n   *   bytes4(keccak256('tokenByIndex(uint256)'))\r\n   */\r\n\r\n  bytes4 internal constant InterfaceId_ERC721Metadata = 0x5b5e139f;\r\n  /**\r\n   * 0x5b5e139f ===\r\n   *   bytes4(keccak256('name()')) ^\r\n   *   bytes4(keccak256('symbol()')) ^\r\n   *   bytes4(keccak256('tokenURI(uint256)'))\r\n   */\r\n\r\n  event Transfer(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  );\r\n  event Approval(\r\n    address _owner,\r\n    address _approved,\r\n    uint256 _tokenId\r\n  );\r\n  event ApprovalForAll(\r\n    address _owner,\r\n    address _operator,\r\n    bool _approved\r\n  );\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 _balance);\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n  function exists(uint256 _tokenId) public view returns (bool _exists);\r\n\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function getApproved(uint256 _tokenId)\r\n    public view returns (address _operator);\r\n\r\n  function setApprovalForAll(address _operator, bool _approved) public;\r\n  function isApprovedForAll(address _owner, address _operator)\r\n    public view returns (bool);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId)\r\n    public;\r\n\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public;\r\n}\r\n\r\ncontract ERC721Enumerable is ERC721Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function tokenOfOwnerByIndex(\r\n    address _owner,\r\n    uint256 _index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256 _tokenId);\r\n\r\n  function tokenByIndex(uint256 _index) public view returns (uint256);\r\n}\r\n\r\ncontract SupportsInterfaceWithLookup is ERC165 {\r\n\r\n  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\r\n  /**\r\n   * 0x01ffc9a7 ===\r\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\r\n   */\r\n\r\n  /**\r\n   * @dev a mapping of interface id to whether or not it's supported\r\n   */\r\n  mapping(bytes4 => bool) internal supportedInterfaces;\r\n\r\n  /**\r\n   * @dev A contract implementing SupportsInterfaceWithLookup\r\n   * implement ERC165 itself\r\n   */\r\n  constructor()\r\n    public\r\n  {\r\n    _registerInterface(InterfaceId_ERC165);\r\n  }\r\n\r\n  /**\r\n   * @dev implement supportsInterface(bytes4) using a lookup table\r\n   */\r\n  function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool)\r\n  {\r\n    return supportedInterfaces[_interfaceId];\r\n  }\r\n\r\n  /**\r\n   * @dev private method for registering an interface\r\n   */\r\n  function _registerInterface(bytes4 _interfaceId)\r\n    internal\r\n  {\r\n    require(_interfaceId != 0xffffffff);\r\n    supportedInterfaces[_interfaceId] = true;\r\n  }\r\n}\r\n\r\ncontract ERC721BasicToken is SupportsInterfaceWithLookup, ERC721Basic {\r\n  using SafeMath for uint256;\r\n  using AddressUtils for address;\r\n\r\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n  bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n  bool public isPaused = false;\r\n  // Mapping from token ID to owner\r\n  mapping (uint256 => address) internal tokenOwner;\r\n\r\n  // Mapping from token ID to approved address\r\n  mapping (uint256 => address) internal tokenApprovals;\r\n\r\n  // Mapping from owner to number of owned token\r\n  mapping (address => uint256) internal ownedTokensCount;\r\n\r\n  // Mapping from owner to operator approvals\r\n  mapping (address => mapping (address => bool)) internal operatorApprovals;\r\n\r\n  address public saleAgent = 0x0;\r\n\r\n  uint256 public numberOfTokens;\r\n\r\n  constructor() public {\r\n    // register the supported interfaces to conform to ERC721 via ERC165\r\n    _registerInterface(InterfaceId_ERC721);\r\n    _registerInterface(InterfaceId_ERC721Exists);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the balance of the specified address\r\n   * @param _owner address to query the balance of\r\n   * @return uint256 representing the amount owned by the passed address\r\n   */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    require(_owner != address(0), \"owner couldn't be 0x0\");\r\n    return ownedTokensCount[_owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the owner of the specified token ID\r\n   * @param _tokenId uint256 ID of the token to query the owner of\r\n   * @return owner address currently marked as the owner of the given token ID\r\n   */\r\n  function ownerOf(uint256 _tokenId) public view returns (address) {\r\n    address owner = tokenOwner[_tokenId];\r\n    require(owner != address(0), \"owner couldn't be 0x0\");\r\n    return owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the specified token exists\r\n   * @param _tokenId uint256 ID of the token to query the existence of\r\n   * @return whether the token exists\r\n   */\r\n  function exists(uint256 _tokenId) public view returns (bool) {\r\n    address owner = tokenOwner[_tokenId];\r\n    return owner != address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Approves another address to transfer the given token ID\r\n   * The zero address indicates there is no approved address.\r\n   * There can only be one approved address per token at a given time.\r\n   * Can only be called by the token owner or an approved operator.\r\n   * @param _to address to be approved for the given token ID\r\n   * @param _tokenId uint256 ID of the token to be approved\r\n   */\r\n  function approve(address _to, uint256 _tokenId) public {\r\n    require(isPaused == false, \"transactions on pause\");    \r\n    address owner = ownerOf(_tokenId);\r\n    require(_to != owner, \"can't approve to yourself\");\r\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n    tokenApprovals[_tokenId] = _to;\r\n    emit Approval(owner, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the approved address for a token ID, or zero if no address set\r\n   * @param _tokenId uint256 ID of the token to query the approval of\r\n   * @return address currently approved for the given token ID\r\n   */\r\n  function getApproved(uint256 _tokenId) public view returns (address) {\r\n    return tokenApprovals[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Sets or unsets the approval of a given operator\r\n   * An operator is allowed to transfer all tokens of the sender on their behalf\r\n   * @param _to operator address to set the approval\r\n   * @param _approved representing the status of the approval to be set\r\n   */\r\n  function setApprovalForAll(address _to, bool _approved) public {\r\n    require(_to != msg.sender, \"can't send to yourself\");\r\n    require(isPaused == false, \"transactions on pause\");\r\n    operatorApprovals[msg.sender][_to] = _approved;\r\n    emit ApprovalForAll(msg.sender, _to, _approved);\r\n  }\r\n\r\n  /**\r\n   * @dev Tells whether an operator is approved by a given owner\r\n   * @param _owner owner address which you want to query the approval of\r\n   * @param _operator operator address which you want to query the approval of\r\n   * @return bool whether the given operator is approved by the given owner\r\n   */\r\n  function isApprovedForAll(\r\n    address _owner,\r\n    address _operator\r\n  )\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return operatorApprovals[_owner][_operator];\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers the ownership of a given token ID to another address\r\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n  {\r\n    require(isPaused == false, \"transactions on pause\");\r\n    require(isApprovedOrOwner(msg.sender, _tokenId) || msg.sender == saleAgent);\r\n    require(_from != address(0), \"sender can't be 0x0\");\r\n    require(_to != address(0), \"receiver can't be 0x0\");\r\n\r\n    clearApproval(_from, _tokenId);\r\n    removeTokenFrom(_from, _tokenId);\r\n    addTokenTo(_to, _tokenId);\r\n\r\n    emit Transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * If the target address is a contract, it must implement `onERC721Received`,\r\n   * which is called upon a safe transfer, and return the magic value\r\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n   * the transfer is reverted.\r\n   *\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n  {\r\n    // solium-disable-next-line arg-overflow\r\n    safeTransferFrom(_from, _to, _tokenId, \"\");\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * If the target address is a contract, it must implement `onERC721Received`,\r\n   * which is called upon a safe transfer, and return the magic value\r\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n   * the transfer is reverted.\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes data to send along with a safe transfer check\r\n   */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n  {\r\n    transferFrom(_from, _to, _tokenId);\r\n    // solium-disable-next-line arg-overflow\r\n    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the given spender can transfer a given token ID\r\n   * @param _spender address of the spender to query\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @return bool whether the msg.sender is approved for the given token ID,\r\n   *  is an operator of the owner, or is the owner of the token\r\n   */\r\n  function isApprovedOrOwner(\r\n    address _spender,\r\n    uint256 _tokenId\r\n  )\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    address owner = ownerOf(_tokenId);\r\n    // Disable solium check because of\r\n    // https://github.com/duaraghav8/Solium/issues/175\r\n    // solium-disable-next-line operator-whitespace\r\n    return (\r\n      _spender == owner ||\r\n      getApproved(_tokenId) == _spender ||\r\n      isApprovedForAll(owner, _spender)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * Reverts if the given token ID already exists\r\n   * @param _to The address that will own the minted token\r\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    require(_to != address(0));\r\n    addTokenTo(_to, _tokenId);\r\n    numberOfTokens++;\r\n    emit Transfer(address(0), _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * Reverts if the token does not exist\r\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    clearApproval(_owner, _tokenId);\r\n    removeTokenFrom(_owner, _tokenId);\r\n    emit Transfer(_owner, address(0), _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to clear current approval of a given token ID\r\n   * Reverts if the given address is not indeed the owner of the token\r\n   * @param _owner owner of the token\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   */\r\n  function clearApproval(address _owner, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _owner);\r\n    if (tokenApprovals[_tokenId] != address(0)) {\r\n      tokenApprovals[_tokenId] = address(0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * @param _to address representing the new owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    require(tokenOwner[_tokenId] == address(0));\r\n    tokenOwner[_tokenId] = _to;\r\n    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _from);\r\n    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\r\n    tokenOwner[_tokenId] = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to invoke `onERC721Received` on a target address\r\n   * The call is not executed if the target address is not a contract\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _to target address that will receive the tokens\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes optional data to send along with the call\r\n   * @return whether the call correctly returned the expected magic value\r\n   */\r\n  function checkAndCallSafeTransfer(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    internal\r\n    returns (bool)\r\n  {\r\n    if (!_to.isContract() || _to == saleAgent) {\r\n      return true;\r\n    }\r\n    bytes4 retval = ERC721Receiver(_to).onERC721Received(\r\n      msg.sender, _from, _tokenId, _data);\r\n    return (retval == ERC721_RECEIVED);\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Metadata is ERC721Basic {\r\n  function name() external view returns (string _name);\r\n  function symbol() external view returns (string _symbol);\r\n  function tokenURI(uint256 _tokenId) public view returns (string);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\r\n}\r\n\r\ncontract ERC721Token is SupportsInterfaceWithLookup, ERC721BasicToken, ERC721 {\r\n\r\n  // Token name\r\n  string internal name_;\r\n\r\n  // Token symbol\r\n  string internal symbol_;\r\n\r\n  // Mapping from owner to list of owned token IDs\r\n  mapping(address => uint256[]) internal ownedTokens;\r\n\r\n  // Mapping from token ID to index of the owner tokens list\r\n  mapping(uint256 => uint256) internal ownedTokensIndex;\r\n\r\n  // Array with all token ids, used for enumeration\r\n  uint256[] internal allTokens;\r\n\r\n  // Mapping from token id to position in the allTokens array\r\n  mapping(uint256 => uint256) internal allTokensIndex;\r\n\r\n  // Optional mapping for token URIs\r\n  mapping(uint256 => string) internal tokenURIs;\r\n\r\n  /**\r\n   * @dev Constructor function\r\n   */\r\n   constructor(string _name, string _symbol) public {\r\n    name_ = _name;\r\n    symbol_ = _symbol;\r\n\r\n    // register the supported interfaces to conform to ERC721 via ERC165\r\n    _registerInterface(InterfaceId_ERC721Enumerable);\r\n    _registerInterface(InterfaceId_ERC721Metadata);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token name\r\n   * @return string representing the token name\r\n   */\r\n  function name() external view returns (string) {\r\n    return name_;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token symbol\r\n   * @return string representing the token symbol\r\n   */\r\n  function symbol() external view returns (string) {\r\n    return symbol_;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns an URI for a given token ID\r\n   * Throws if the token ID does not exist. May return an empty string.\r\n   * @param _tokenId uint256 ID of the token to query\r\n   */\r\n  function tokenURI(uint256 _tokenId) public view returns (string) {\r\n    require(exists(_tokenId));\r\n    return tokenURIs[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\r\n   * @param _owner address owning the tokens list to be accessed\r\n   * @param _index uint256 representing the index to be accessed of the requested tokens list\r\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\r\n   */\r\n  function tokenOfOwnerByIndex(\r\n    address _owner,\r\n    uint256 _index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    require(_index < balanceOf(_owner));\r\n    return ownedTokens[_owner][_index];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the total amount of tokens stored by the contract\r\n   * @return uint256 representing the total amount of tokens\r\n   */\r\n  function totalSupply() public view returns (uint256) {\r\n    return allTokens.length;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of all the tokens in this contract\r\n   * Reverts if the index is greater or equal to the total number of tokens\r\n   * @param _index uint256 representing the index to be accessed of the tokens list\r\n   * @return uint256 token ID at the given index of the tokens list\r\n   */\r\n  function tokenByIndex(uint256 _index) public view returns (uint256) {\r\n    require(_index < totalSupply());\r\n    return allTokens[_index];\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to set the token URI for a given token\r\n   * Reverts if the token ID does not exist\r\n   * @param _tokenId uint256 ID of the token to set its URI\r\n   * @param _uri string URI to assign\r\n   */\r\n  function _setTokenURI(uint256 _tokenId, string _uri) internal {\r\n    require(exists(_tokenId));\r\n    tokenURIs[_tokenId] = _uri;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * @param _to address representing the new owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    super.addTokenTo(_to, _tokenId);\r\n    uint256 length = ownedTokens[_to].length;\r\n    ownedTokens[_to].push(_tokenId);\r\n    ownedTokensIndex[_tokenId] = length;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    super.removeTokenFrom(_from, _tokenId);\r\n\r\n    // To prevent a gap in the array, we store the last token in the index of the token to delete, and\r\n    // then delete the last slot.\r\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\r\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\r\n\r\n    ownedTokens[_from][tokenIndex] = lastToken;\r\n    // This also deletes the contents at the last position of the array\r\n    ownedTokens[_from].length--;\r\n\r\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\r\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\r\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\r\n\r\n    ownedTokensIndex[_tokenId] = 0;\r\n    ownedTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * Reverts if the given token ID already exists\r\n   * @param _to address the beneficiary that will own the minted token\r\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    super._mint(_to, _tokenId);\r\n\r\n    allTokensIndex[_tokenId] = allTokens.length;\r\n    allTokens.push(_tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * Reverts if the token does not exist\r\n   * @param _owner owner of the token to burn\r\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    super._burn(_owner, _tokenId);\r\n\r\n    // Clear metadata (if any)\r\n    if (bytes(tokenURIs[_tokenId]).length != 0) {\r\n      delete tokenURIs[_tokenId];\r\n    }\r\n\r\n    // Reorg all tokens array\r\n    uint256 tokenIndex = allTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = allTokens.length.sub(1);\r\n    uint256 lastToken = allTokens[lastTokenIndex];\r\n\r\n    allTokens[tokenIndex] = lastToken;\r\n    allTokens[lastTokenIndex] = 0;\r\n\r\n    allTokens.length--;\r\n    allTokensIndex[_tokenId] = 0;\r\n    allTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n}\r\n\r\ncontract FabgToken is ERC721Token, Ownable {\r\n    struct data {\r\n        tokenType typeOfToken;\r\n        bytes32 name;\r\n        bytes32 url;\r\n        bool isSnatchable;\r\n    }\r\n    \r\n    mapping(uint256 => data) internal tokens;\r\n    mapping(uint256 => uint256) internal pricesForIncreasingAuction;\r\n    \r\n    address presale;\r\n\r\n    enum tokenType{MASK, LAND}\r\n    \r\n    event TokenCreated(\r\n        address Receiver, \r\n        tokenType Type, \r\n        bytes32 Name, \r\n        bytes32 URL, \r\n        uint256 TokenId, \r\n        bool IsSnatchable\r\n    );\r\n    event TokenChanged(\r\n        address Receiver, \r\n        tokenType Type, \r\n        bytes32 Name, \r\n        bytes32 URL, \r\n        uint256 TokenId, \r\n        bool IsSnatchable\r\n    );\r\n    event Paused();\r\n    event Unpaused();\r\n    \r\n    modifier onlySaleAgent {\r\n        require(msg.sender == saleAgent);\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * @dev constructor which calling parent's constructor with params\r\n     */\r\n    constructor() ERC721Token(\"FABGToken\", \"FABG\") public {\r\n    }\r\n\r\n    /**\r\n     * @dev fallback function which can't receive ether\r\n     */\r\n    function() public payable {\r\n        revert();\r\n    }\r\n\r\n    /**\r\n     * @dev onlyOwner func for stopping all operations with contract\r\n     */ \r\n    function setPauseForAll() public onlyOwner {\r\n        require(isPaused == false, \"transactions on pause\");\r\n        isPaused = true;\r\n        PreSale(saleAgent).setPauseForAll();\r\n\r\n        emit Paused();\r\n    }\r\n\r\n    /**\r\n     * @dev onlyOwner func for unpausing all operations with contract\r\n     */ \r\n    function setUnpauseForAll() public onlyOwner {\r\n        require(isPaused == true, \"transactions isn't on pause\");\r\n        isPaused = false;\r\n        PreSale(saleAgent).setUnpauseForAll();\r\n\r\n        emit Unpaused();\r\n    }\r\n\r\n    /**\r\n     * @dev setting the address of contract which can get tokens from users wallets\r\n     * @param _saleAgent address of contract of auction\r\n     */\r\n    function setSaleAgent(address _saleAgent) public onlyOwner {\r\n        saleAgent = _saleAgent;\r\n    }\r\n    \r\n    /**\r\n     * @dev process of creation of card \r\n     * @param _receiver address of token receiver\r\n     * @param _type type of token from enum\r\n     * @param _name bytes32 name of token\r\n     * @param _url bytes32 url of token\r\n     * @param _isSnatchable type of market for trading\r\n     */\r\n    function adminsTokenCreation(address _receiver, uint256 _price, tokenType _type, bytes32 _name, bytes32 _url, bool _isSnatchable) public onlyOwner {\r\n        tokenCreation(_receiver, _price, _type, _name, _url, _isSnatchable);\r\n    }\r\n\r\n    /**\r\n     * @dev process of creation of card \r\n     * @param _receiver address of token receiver\r\n     * @param _type type of token from enum\r\n     * @param _name bytes32 name of token\r\n     * @param _url bytes32 url of token\r\n     * @param _isSnatchable type of market for trading\r\n     */\r\n    function tokenCreation(address _receiver, uint256 _price, tokenType _type, bytes32 _name, bytes32 _url, bool _isSnatchable) internal {\r\n        require(isPaused == false, \"transactions on pause\");\r\n        uint256 tokenId = totalSupply();\r\n        \r\n        data memory info = data(_type, _name, _url, _isSnatchable);\r\n        tokens[tokenId] = info;\r\n        \r\n        if(_isSnatchable == true) {\r\n            pricesForIncreasingAuction[tokenId] = _price;\r\n        }\r\n        \r\n        _mint(_receiver, tokenId);\r\n\r\n        emit TokenCreated(_receiver, _type, _name, _url, tokenId, _isSnatchable);\r\n    }\r\n\r\n    /**\r\n     * @dev convert string to bytes32 and revert it if length was more than 32\r\n     * @param source current string for convertion\r\n     * @return bytes32 result of string convertation\r\n     */\r\n    function stringToBytes32(string memory source) public pure returns (bytes32 result) {\r\n        require(bytes(source).length <= 32, \"too high length of source\");\r\n        bytes memory tempEmptyStringTest = bytes(source);\r\n        if (tempEmptyStringTest.length == 0) {\r\n            return 0x0;\r\n        }\r\n\r\n        assembly {\r\n            result := mload(add(source, 32))\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev convert bytes32 to string and revert it if length was more than 32\r\n     * @param x current bytes for convertion\r\n     * @return string result of bytes32 convertation\r\n     */\r\n    function bytes32ToString(bytes32 x) public pure returns (string) {\r\n        bytes memory bytesString = new bytes(32);\r\n        uint charCount = 0;\r\n        for (uint j = 0; j < 32; j++) {\r\n            byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));\r\n            if (char != 0) {\r\n                bytesString[charCount] = char;\r\n                charCount++;\r\n            }\r\n        }\r\n        bytes memory bytesStringTrimmed = new bytes(charCount);\r\n        for (j = 0; j < charCount; j++) {\r\n            bytesStringTrimmed[j] = bytesString[j];\r\n        }\r\n        return string(bytesStringTrimmed);\r\n    }\r\n\r\n    /**\r\n     * @dev token info by Id\r\n     * @param _tokenId Id of token\r\n     * @return typeOfToken index of enum\r\n     * @return name bytes32 name of token\r\n     * @return URL bytes32 URL of token\r\n     * @return isSnatchable type of auction\r\n     */\r\n    function getTokenById(uint256 _tokenId) public view returns (\r\n        tokenType typeOfToken, \r\n        bytes32 name, \r\n        bytes32 URL, \r\n        bool isSnatchable\r\n    ) {\r\n        typeOfToken = tokens[_tokenId].typeOfToken;\r\n        name = tokens[_tokenId].name;\r\n        URL = tokens[_tokenId].url;\r\n        isSnatchable = tokens[_tokenId].isSnatchable;\r\n    }\r\n        \r\n    /**\r\n     * @dev token price for increasing auction\r\n     * @param _tokenId Id of token for selling\r\n     * @return uint256 price in Wei\r\n     */\r\n    function getTokenPriceForIncreasing(uint256 _tokenId) public view returns (uint256) {\r\n        require(tokens[_tokenId].isSnatchable == true);\r\n\r\n        return pricesForIncreasingAuction[_tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev list of tokens of user\r\n     * @param _owner address of user\r\n     * @return uint256[] array of token's ID which are belomg to user\r\n     */\r\n    function allTokensOfUsers(address _owner) public view returns(uint256[]) {\r\n        return ownedTokens[_owner];\r\n    }\r\n    \r\n    /**\r\n     * @dev store information about presale contract\r\n     * @param _presale address of presale contract\r\n     */ \r\n    function setPresaleAddress(address _presale) public onlyOwner {\r\n        presale = _presale;\r\n    }\r\n\r\n    /**\r\n     * @dev process of changing information of card \r\n     * @param _receiver address of token receiver\r\n     * @param _type type of token from enum\r\n     * @param _name bytes32 name of token\r\n     * @param _url bytes32 url of token\r\n     * @param _isSnatchable type of market for trading\r\n     */    \r\n    function rewriteTokenFromPresale(\r\n        uint256 _tokenId,\r\n        address _receiver, \r\n        uint256 _price, \r\n        tokenType _type, \r\n        bytes32 _name, \r\n        bytes32 _url, \r\n        bool _isSnatchable\r\n    ) public onlyOwner {\r\n        require(ownerOf(_tokenId) == presale);\r\n        data memory info = data(_type, _name, _url, _isSnatchable);\r\n        tokens[_tokenId] = info;\r\n        \r\n        if(_isSnatchable == true) {\r\n            pricesForIncreasingAuction[_tokenId] = _price;\r\n        }\r\n        \r\n        emit TokenChanged(_receiver, _type, _name, _url, _tokenId, _isSnatchable);\r\n    }\r\n}\r\ncontract PreSale is Ownable {\r\n    using SafeMath for uint;\r\n    \r\n    FabgToken token;\r\n    /**\r\n     * @notice address of wallet for comission payment. can be hardcoded\r\n     */\r\n    address adminsWallet;\r\n    bool public isPaused;\r\n    uint256 totalMoney;\r\n    \r\n    event TokenBought(address Buyer, uint256 tokenID, uint256 price);\r\n    event Payment(address payer, uint256 weiAmount);\r\n    event Withdrawal(address receiver, uint256 weiAmount);\r\n    \r\n    modifier onlyToken() {\r\n        require(msg.sender == address(token), \"called not from token\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev setted address of token contract and wallet where will be eth in withdrawal\r\n     * @param _tokenAddress address of token\r\n     * @param _walletForEth address for receiving payments\r\n     */\r\n    constructor(FabgToken _tokenAddress, address _walletForEth) public {\r\n        token = _tokenAddress;\r\n        adminsWallet = _walletForEth;\r\n    }\r\n    \r\n    /**\r\n     * @dev fallback function which can receive ether with no actions\r\n     */\r\n    function() public payable {\r\n       emit Payment(msg.sender, msg.value);\r\n    }\r\n    \r\n    /**\r\n     * @dev only token func for stopping all operations with contract\r\n     */ \r\n    function setPauseForAll() public onlyToken {\r\n        require(isPaused == false, \"transactions on pause\");\r\n        isPaused = true;\r\n    }\r\n\r\n    /**\r\n     * @dev only token func for unpausing all operations with contract\r\n     */ \r\n    function setUnpauseForAll() public onlyToken {\r\n        require(isPaused == true, \"transactions on pause\");\r\n        isPaused = false;\r\n    }   \r\n    \r\n    /**\r\n     * @dev buy token, owner of which is market. contract will send back change\r\n     * @param _tokenId id of token for buying\r\n     */\r\n    function buyToken(uint256 _tokenId) public payable {\r\n        require(isPaused == false, \"transactions on pause\");\r\n        require(token.exists(_tokenId), \"token doesn't exist\");\r\n        require(token.ownerOf(_tokenId) == address(this), \"contract isn't owner of token\");\r\n        require(msg.value >= token.getTokenPriceForIncreasing(_tokenId), \"was sent not enough ether\");\r\n        \r\n        token.transferFrom(address(this), msg.sender, _tokenId);\r\n        (msg.sender).transfer(msg.value.sub(token.getTokenPriceForIncreasing(_tokenId)));\r\n        \r\n        totalMoney = totalMoney.add(token.getTokenPriceForIncreasing(_tokenId));\r\n\r\n        emit TokenBought(msg.sender, _tokenId, token.getTokenPriceForIncreasing(_tokenId));\r\n    }\r\n\r\n    /**\r\n     * @dev set address for wallet for withdrawal\r\n     * @param _newMultisig new address for withdrawal\r\n     */\r\n    function setAddressForPayment(address _newMultisig) public onlyOwner {\r\n        adminsWallet = _newMultisig;\r\n    }    \r\n    \r\n    /**\r\n     * @dev withdraw all ether from this contract to sender's wallet\r\n     */\r\n    function withdraw() public onlyOwner {\r\n        require(adminsWallet != address(0), \"admins wallet couldn't be 0x0\");\r\n\r\n        uint256 amount = address(this).balance;  \r\n        (adminsWallet).transfer(amount);\r\n        emit Withdrawal(adminsWallet, amount);\r\n    }\r\n}", "OptimizationUsed": "1", "ContractName": "FabgToken", "ByteCode": "0x6080604052600436106101b65763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301ffc9a781146101bb57806306fdde03146101f1578063081812fc1461027b578063095ea7b3146102af57806314133a7c146102d557806318160ddd146102f657806319fa8f501461031d57806323b872dd1461034f5780632e354261146103795780632f745c59146103ae5780633cfe49af146103d257806342842e0e146103ea5780634f558e79146104145780634f6ccce71461042c5780635f089e8d146104445780636352211e1461047c578063666ade081461049457806370a0823114610505578063715018a6146105265780637bdc60d91461053b5780638da5cb5b1461058d5780639201de55146105a257806395d89b41146105ba578063a22cb465146105cf578063b0207436146105f5578063b187bd261461060a578063b1d6a2f01461061f578063b88d4fde14610634578063bdb9f28d146106a3578063c87b56dd146106c4578063cfb51928146106dc578063d0253dda14610735578063e985e9c51461074a578063f2fde38b14610771578063f9f16ef214610792575b600080fd5b3480156101c757600080fd5b506101dd600160e060020a0319600435166107a7565b604080519115158252519081900360200190f35b3480156101fd57600080fd5b506102066107c6565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610240578181015183820152602001610228565b50505050905090810190601f16801561026d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561028757600080fd5b5061029360043561085d565b60408051600160a060020a039092168252519081900360200190f35b3480156102bb57600080fd5b506102d3600160a060020a0360043516602435610878565b005b3480156102e157600080fd5b506102d3600160a060020a03600435166109cf565b34801561030257600080fd5b5061030b610a08565b60408051918252519081900360200190f35b34801561032957600080fd5b50610332610a0e565b60408051600160e060020a03199092168252519081900360200190f35b34801561035b57600080fd5b506102d3600160a060020a0360043581169060243516604435610a32565b34801561038557600080fd5b506102d3600160a060020a036004351660243560ff6044351660643560843560a4351515610bd2565b3480156103ba57600080fd5b5061030b600160a060020a0360043516602435610bff565b3480156103de57600080fd5b5061030b600435610c4c565b3480156103f657600080fd5b506102d3600160a060020a0360043581169060243516604435610c82565b34801561042057600080fd5b506101dd600435610ca3565b34801561043857600080fd5b5061030b600435610cc6565b34801561045057600080fd5b506102d3600435600160a060020a036024351660443560ff6064351660843560a43560c4351515610cfb565b34801561048857600080fd5b50610293600435610e7d565b3480156104a057600080fd5b506104b5600160a060020a0360043516610ef2565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156104f15781810151838201526020016104d9565b505050509050019250505060405180910390f35b34801561051157600080fd5b5061030b600160a060020a0360043516610f5e565b34801561053257600080fd5b506102d3610fdc565b34801561054757600080fd5b50610553600435611044565b6040518085600181111561056357fe5b60ff1681526020810194909452506040808401929092521515606083015251908190036080019150f35b34801561059957600080fd5b50610293611071565b3480156105ae57600080fd5b50610206600435611080565b3480156105c657600080fd5b5061020661122e565b3480156105db57600080fd5b506102d3600160a060020a0360043516602435151561128f565b34801561060157600080fd5b506102d36113ae565b34801561061657600080fd5b506101dd6114cf565b34801561062b57600080fd5b506102936114d8565b34801561064057600080fd5b50604080516020601f6064356004818101359283018490048402850184019095528184526102d394600160a060020a0381358116956024803590921695604435953695608494019181908401838280828437509497506114e79650505050505050565b3480156106af57600080fd5b506102d3600160a060020a036004351661150f565b3480156106d057600080fd5b50610206600435611548565b3480156106e857600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261030b9436949293602493928401919081908401838280828437509497506115f39650505050505050565b34801561074157600080fd5b506102d3611670565b34801561075657600080fd5b506101dd600160a060020a036004358116906024351661177e565b34801561077d57600080fd5b506102d3600160a060020a03600435166117ac565b34801561079e57600080fd5b5061030b6117cf565b600160e060020a03191660009081526020819052604090205460ff1690565b60088054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156108525780601f1061082757610100808354040283529160200191610852565b820191906000526020600020905b81548152906001019060200180831161083557829003601f168201915b505050505090505b90565b600090815260036020526040902054600160a060020a031690565b60015460009060ff16156108c4576040805160e560020a62461bcd0281526020600482015260156024820152600080516020611fb0833981519152604482015290519081900360640190fd5b6108cd82610e7d565b9050600160a060020a038381169082161415610933576040805160e560020a62461bcd02815260206004820152601960248201527f63616e277420617070726f766520746f20796f757273656c6600000000000000604482015290519081900360640190fd5b33600160a060020a038216148061094f575061094f813361177e565b151561095a57600080fd5b6000828152600360209081526040918290208054600160a060020a03808816600160a060020a03199092168217909255835191851682529181019190915280820184905290517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259181900360600190a1505050565b600f54600160a060020a031633146109e657600080fd5b60068054600160a060020a031916600160a060020a0392909216919091179055565b600c5490565b7f01ffc9a70000000000000000000000000000000000000000000000000000000081565b60015460ff1615610a7b576040805160e560020a62461bcd0281526020600482015260156024820152600080516020611fb0833981519152604482015290519081900360640190fd5b610a8533826117d5565b80610a9a5750600654600160a060020a031633145b1515610aa557600080fd5b600160a060020a0383161515610b05576040805160e560020a62461bcd02815260206004820152601360248201527f73656e6465722063616e27742062652030783000000000000000000000000000604482015290519081900360640190fd5b600160a060020a0382161515610b65576040805160e560020a62461bcd02815260206004820152601560248201527f72656365697665722063616e2774206265203078300000000000000000000000604482015290519081900360640190fd5b610b6f8382611834565b610b798382611898565b610b83828261199f565b60408051600160a060020a0380861682528416602082015280820183905290517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360600190a1505050565b600f54600160a060020a03163314610be957600080fd5b610bf78686868686866119e8565b505050505050565b6000610c0a83610f5e565b8210610c1557600080fd5b600160a060020a0383166000908152600a60205260409020805483908110610c3957fe5b9060005260206000200154905092915050565b60008181526010602052604081206003015460ff161515600114610c6f57600080fd5b5060009081526011602052604090205490565b610c9e83838360206040519081016040528060008152506114e7565b505050565b600081815260026020526040902054600160a060020a0316801515905b50919050565b6000610cd0610a08565b8210610cdb57600080fd5b600c805483908110610ce957fe5b90600052602060002001549050919050565b610d03611f49565b600f54600160a060020a03163314610d1a57600080fd5b601254600160a060020a0316610d2f89610e7d565b600160a060020a031614610d4257600080fd5b608060405190810160405280866001811115610d5a57fe5b81526020808201879052604080830187905285151560609093019290925260008b8152601090915220815181549293508392829060ff191660018381811115610d9f57fe5b02179055506020820151600182810191909155604083015160028301556060909201516003909101805460ff19169115159190911790558215151415610df15760008881526011602052604090208690555b7fa026496083b355957faf2a29d9744321a9384caf1c4600c96bd7425c10e729fe878686868c876040518087600160a060020a0316600160a060020a03168152602001866001811115610e4057fe5b60ff168152602081019590955250604080850193909352606084019190915215156080830152519081900360a00192509050a15050505050505050565b600081815260026020526040812054600160a060020a0316801515610eec576040805160e560020a62461bcd02815260206004820152601560248201527f6f776e657220636f756c646e2774206265203078300000000000000000000000604482015290519081900360640190fd5b92915050565b600160a060020a0381166000908152600a6020908152604091829020805483518184028101840190945280845260609392830182828015610f5257602002820191906000526020600020905b815481526020019060010190808311610f3e575b50505050509050919050565b6000600160a060020a0382161515610fc0576040805160e560020a62461bcd02815260206004820152601560248201527f6f776e657220636f756c646e2774206265203078300000000000000000000000604482015290519081900360640190fd5b50600160a060020a031660009081526004602052604090205490565b600f54600160a060020a03163314610ff357600080fd5b600f5460408051600160a060020a039092168252517ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c648209181900360200190a1600f8054600160a060020a0319169055565b600090815260106020526040902080546001820154600283015460039093015460ff928316949193921690565b600f54600160a060020a031681565b6040805160208082528183019092526060918291600091829182918591908082016104008038833901905050945060009350600092505b6020831015611144576008830260020a870291507fff000000000000000000000000000000000000000000000000000000000000008216156111395781858581518110151561110257fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506001909301925b6001909201916110b7565b836040519080825280601f01601f191660200182016040528015611172578160200160208202803883390190505b509050600092505b8383101561122457848381518110151561119057fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f01000000000000000000000000000000000000000000000000000000000000000281848151811015156111e957fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060019092019161117a565b9695505050505050565b60098054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156108525780601f1061082757610100808354040283529160200191610852565b600160a060020a0382163314156112f0576040805160e560020a62461bcd02815260206004820152601660248201527f63616e27742073656e6420746f20796f757273656c6600000000000000000000604482015290519081900360640190fd5b60015460ff1615611339576040805160e560020a62461bcd0281526020600482015260156024820152600080516020611fb0833981519152604482015290519081900360640190fd5b336000818152600560209081526040808320600160a060020a03871680855290835292819020805486151560ff19909116811790915581519485529184019290925282820152517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319181900360600190a15050565b600f54600160a060020a031633146113c557600080fd5b6001805460ff16151514611423576040805160e560020a62461bcd02815260206004820152601b60248201527f7472616e73616374696f6e732069736e2774206f6e2070617573650000000000604482015290519081900360640190fd5b6001805460ff19169055600654604080517fb02074360000000000000000000000000000000000000000000000000000000081529051600160a060020a039092169163b02074369160048082019260009290919082900301818387803b15801561148c57600080fd5b505af11580156114a0573d6000803e3d6000fd5b50506040517fa45f47fdea8a1efdd9029a5691c7f759c32b7c698632b563573e155625d16933925060009150a1565b60015460ff1681565b600654600160a060020a031681565b6114f2848484610a32565b6114fe84848484611b4d565b151561150957600080fd5b50505050565b600f54600160a060020a0316331461152657600080fd5b60128054600160a060020a031916600160a060020a0392909216919091179055565b606061155382610ca3565b151561155e57600080fd5b6000828152600e602090815260409182902080548351601f600260001961010060018616150201909316929092049182018490048402810184019094528084529091830182828015610f525780601f106115c657610100808354040283529160200191610f52565b820191906000526020600020905b8154815290600101906020018083116115d45750939695505050505050565b600060606020835111151515611653576040805160e560020a62461bcd02815260206004820152601960248201527f746f6f2068696768206c656e677468206f6620736f7572636500000000000000604482015290519081900360640190fd5b508151829015156116675760009150610cc0565b50506020015190565b600f54600160a060020a0316331461168757600080fd5b60015460ff16156116d0576040805160e560020a62461bcd0281526020600482015260156024820152600080516020611fb0833981519152604482015290519081900360640190fd5b6001805460ff191681179055600654604080517fd0253dda0000000000000000000000000000000000000000000000000000000081529051600160a060020a039092169163d0253dda9160048082019260009290919082900301818387803b15801561173b57600080fd5b505af115801561174f573d6000803e3d6000fd5b50506040517f9e87fac88ff661f02d44f95383c817fece4bce600a3dab7a54406878b965e752925060009150a1565b600160a060020a03918216600090815260056020908152604080832093909416825291909152205460ff1690565b600f54600160a060020a031633146117c357600080fd5b6117cc81611cd2565b50565b60075481565b6000806117e183610e7d565b905080600160a060020a031684600160a060020a0316148061181c575083600160a060020a03166118118461085d565b600160a060020a0316145b8061182c575061182c818561177e565b949350505050565b81600160a060020a031661184782610e7d565b600160a060020a03161461185a57600080fd5b600081815260036020526040902054600160a060020a0316156118945760008181526003602052604090208054600160a060020a03191690555b5050565b60008060006118a78585611d51565b6000848152600b6020908152604080832054600160a060020a0389168452600a909252909120549093506118e290600163ffffffff611dda16565b600160a060020a0386166000908152600a602052604090208054919350908390811061190a57fe5b9060005260206000200154905080600a600087600160a060020a0316600160a060020a031681526020019081526020016000208481548110151561194a57fe5b6000918252602080832090910192909255600160a060020a0387168152600a90915260409020805490611981906000198301611f72565b506000938452600b6020526040808520859055908452909220555050565b60006119ab8383611dec565b50600160a060020a039091166000908152600a6020908152604080832080546001810182559084528284208101859055938352600b909152902055565b60006119f2611f49565b60015460ff1615611a3b576040805160e560020a62461bcd0281526020600482015260156024820152600080516020611fb0833981519152604482015290519081900360640190fd5b611a43610a08565b9150608060405190810160405280876001811115611a5d57fe5b8152602080820188905260408083018890528615156060909301929092526000858152601090915220815181549293508392829060ff191660018381811115611aa257fe5b02179055506020820151600182810191909155604083015160028301556060909201516003909101805460ff19169115159190911790558315151415611af45760008281526011602052604090208790555b611afe8883611e70565b7f04c6b115a5a2a20550ae19065ab838ca6a4a1ead36c85bf62092016a0ade5a7b8887878786886040518087600160a060020a0316600160a060020a03168152602001866001811115610e4057fe5b600080611b6285600160a060020a0316611ebf565b1580611b7b5750600654600160a060020a038681169116145b15611b895760019150611cc9565b6040517f150b7a020000000000000000000000000000000000000000000000000000000081523360048201818152600160a060020a03898116602485015260448401889052608060648501908152875160848601528751918a169463150b7a0294938c938b938b93909160a490910190602085019080838360005b83811015611c1c578181015183820152602001611c04565b50505050905090810190601f168015611c495780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015611c6b57600080fd5b505af1158015611c7f573d6000803e3d6000fd5b505050506040513d6020811015611c9557600080fd5b5051600160e060020a031981167f150b7a020000000000000000000000000000000000000000000000000000000014925090505b50949350505050565b600160a060020a0381161515611ce757600080fd5b600f5460408051600160a060020a039283168152918316602083015280517f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09281900390910190a1600f8054600160a060020a031916600160a060020a0392909216919091179055565b81600160a060020a0316611d6482610e7d565b600160a060020a031614611d7757600080fd5b600160a060020a038216600090815260046020526040902054611da190600163ffffffff611dda16565b600160a060020a039092166000908152600460209081526040808320949094559181526002909152208054600160a060020a0319169055565b600082821115611de657fe5b50900390565b600081815260026020526040902054600160a060020a031615611e0e57600080fd5b60008181526002602090815260408083208054600160a060020a031916600160a060020a03871690811790915583526004909152902054611e50906001611ec7565b600160a060020a0390921660009081526004602052604090209190915550565b611e7a8282611ed4565b600c80546000838152600d60205260408120829055600182018355919091527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c7015550565b6000903b1190565b81810182811015610eec57fe5b600160a060020a0382161515611ee957600080fd5b611ef3828261199f565b6007805460010190556040805160008152600160a060020a038416602082015280820183905290517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360600190a15050565b604080516080810190915280600081526000602082018190526040820181905260609091015290565b815481835581811115610c9e57600083815260209020610c9e91810190830161085a91905b80821115611fab5760008155600101611f97565b509056007472616e73616374696f6e73206f6e2070617573650000000000000000000000a165627a7a723058208766be1882aee7b9c86cd7a9733d6de2c80e43c48bc506ec77771c2d460fd4170029"}