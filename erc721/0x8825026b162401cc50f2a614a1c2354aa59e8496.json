{"Runs": "200", "SwarmSource": "bzzr://2043f77c5621c3334437429807f1a1c2db8c7448868ae3f146262584dea956c2", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_liscence\",\"type\":\"string\"},{\"name\":\"_URL\",\"type\":\"string\"}],\"name\":\"addTokenData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"InterfaceId_ERC165\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol_\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenData\",\"outputs\":[{\"name\":\"Liscence\",\"type\":\"string\"},{\"name\":\"URL\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"arrayOfTokensByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name_\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.24+commit.e67f0147", "ConstructorArguments": "", "SourceCode": "pragma solidity ^0.4.23;\r\n\r\n\r\n\r\n/**\r\n\r\n * @title SafeMath\r\n\r\n * @dev Math operations with safety checks that throw on error\r\n\r\n */\r\n\r\nlibrary SafeMath {\r\n\r\n\r\n    /**\r\n\r\n     * @dev Multiplies two numbers, throws on overflow.\r\n\r\n     */\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n\r\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n\r\n        // benefit is lost if 'b' is also tested.\r\n\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n\r\n        if (a == 0) {\r\n\r\n            return 0;\r\n\r\n        }\r\n\r\n\r\n        c = a * b;\r\n\r\n        assert(c / a == b);\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev Integer division of two numbers, truncating the quotient.\r\n\r\n     */\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n\r\n        // uint256 c = a / b;\r\n\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return a / b;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n\r\n     */\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        assert(b <= a);\r\n\r\n        return a - b;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev Adds two numbers, throws on overflow.\r\n\r\n     */\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n\r\n        c = a + b;\r\n\r\n        assert(c >= a);\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n\r\n * Utility library of inline functions on addresses\r\n\r\n */\r\n\r\nlibrary AddressUtils {\r\n\r\n\r\n    /**\r\n\r\n     * Returns whether the target address is a contract\r\n\r\n     * @dev This function will return false if invoked during the constructor of a contract,\r\n\r\n     *  as the code is not actually created until after the constructor finishes.\r\n\r\n     * @param addr address to check\r\n\r\n     * @return whether the target address is a contract\r\n\r\n     */\r\n\r\n    function isContract(address addr) internal view returns (bool) {\r\n\r\n        uint256 size;\r\n\r\n        // XXX Currently there is no better way to check if there is a contract in an address\r\n\r\n        // than to check the size of the code at that address.\r\n\r\n        // See https://ethereum.stackexchange.com/a/14016/36603\r\n\r\n        // for more details about how this works.\r\n\r\n        // TODO Check this again before the Serenity release, because all addresses will be\r\n\r\n        // contracts then.\r\n\r\n        // solium-disable-next-line security/no-inline-assembly\r\n\r\n        assembly { size := extcodesize(addr) }\r\n\r\n        return size > 0;\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n\r\n * @title ERC721 token receiver interface\r\n\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n\r\n * from ERC721 asset contracts.\r\n\r\n */\r\n\r\ncontract ERC721Receiver {\r\n\r\n    /**\r\n\r\n    * @dev Magic value to be returned upon successful reception of an NFT\r\n\r\n    *  Equals to `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`,\r\n\r\n    *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n\r\n    */\r\n\r\n    bytes4 internal constant ERC721_RECEIVED = 0xf0b9e5ba;\r\n\r\n\r\n    /**\r\n\r\n    * @notice Handle the receipt of an NFT\r\n\r\n    * @dev The ERC721 smart contract calls this function on the recipient\r\n\r\n    * after a `safetransfer`. This function MAY throw to revert and reject the\r\n\r\n    * transfer. This function MUST use 50,000 gas or less. Return of other\r\n\r\n    * than the magic value MUST result in the transaction being reverted.\r\n\r\n    * Note: the contract address is always the message sender.\r\n\r\n    * @param _from The sending address\r\n\r\n    * @param _tokenId The NFT identifier which is being transfered\r\n\r\n    * @param _data Additional data with no specified format\r\n\r\n    * @return `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`\r\n\r\n    */\r\n\r\n    function onERC721Received(address _from, uint256 _tokenId, bytes _data) public returns(bytes4);\r\n\r\n}\r\n\r\n\r\n/**\r\n\r\n * @title ERC165\r\n\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n\r\n */\r\n\r\ninterface ERC165 {\r\n\r\n\r\n    /**\r\n\r\n     * @notice Query if a contract implements an interface\r\n\r\n     * @param _interfaceId The interface identifier, as specified in ERC-165\r\n\r\n     * @dev Interface identification is specified in ERC-165. This function\r\n\r\n     * uses less than 30,000 gas.\r\n\r\n     */\r\n\r\n    function supportsInterface(bytes4 _interfaceId) external view returns (bool);\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n\r\n * @title ERC721 Non-Fungible Token Standard basic interface\r\n\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n\r\n */\r\n\r\ncontract ERC721Basic is ERC165 {\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\r\n\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\r\n\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 _balance);\r\n\r\n    function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n\r\n    function exists(uint256 _tokenId) public view returns (bool _exists);\r\n\r\n\r\n    function approve(address _to, uint256 _tokenId) public;\r\n\r\n    function getApproved(uint256 _tokenId) public view returns (address _operator);\r\n\r\n\r\n    function setApprovalForAll(address _operator, bool _approved) public;\r\n\r\n    function isApprovedForAll(address _owner, address _operator) public view returns (bool);\r\n\r\n\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) public;\r\n\r\n\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) public;\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n\r\n */\r\n\r\ncontract ERC721Enumerable is ERC721Basic {\r\n\r\n    function totalSupply() public view returns (uint256);\r\n\r\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256 _tokenId);\r\n\r\n    function tokenByIndex(uint256 _index) public view returns (uint256);\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n\r\n */\r\n\r\ncontract ERC721Metadata is ERC721Basic {\r\n\r\n    function name() external view returns (string _name);\r\n\r\n    function symbol() external view returns (string _symbol);\r\n\r\n    function tokenURI(uint256 _tokenId) public view returns (string);\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n\r\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\r\n\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n\r\n */\r\n\r\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\r\n\r\n\r\n}\r\n\r\n\r\n\r\ncontract ERC721Holder is ERC721Receiver {\r\n\r\n    function onERC721Received(address, uint256, bytes) public returns(bytes4) {\r\n\r\n        return ERC721_RECEIVED;\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n\r\n * @title SupportsInterfaceWithLookup\r\n\r\n * @author Matt Condon (@shrugs)\r\n\r\n * @dev Implements ERC165 using a lookup table.\r\n\r\n */\r\n\r\ncontract SupportsInterfaceWithLookup is ERC165 {\r\n\r\n    bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\r\n\r\n    /**\r\n\r\n     * 0x01ffc9a7 ===\r\n\r\n     *   bytes4(keccak256('supportsInterface(bytes4)'))\r\n\r\n     */\r\n\r\n\r\n    /**\r\n\r\n     * @dev a mapping of interface id to whether or not it's supported\r\n\r\n     */\r\n\r\n    mapping(bytes4 => bool) internal supportedInterfaces;\r\n\r\n\r\n    /**\r\n\r\n     * @dev A contract implementing SupportsInterfaceWithLookup\r\n\r\n     * implement ERC165 itself\r\n\r\n     */\r\n\r\n    constructor() public {\r\n\r\n        _registerInterface(InterfaceId_ERC165);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev implement supportsInterface(bytes4) using a lookup table\r\n\r\n     */\r\n\r\n    function supportsInterface(bytes4 _interfaceId) external view returns (bool) {\r\n\r\n        return supportedInterfaces[_interfaceId];\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev private method for registering an interface\r\n\r\n     */\r\n\r\n    function _registerInterface(bytes4 _interfaceId) internal {\r\n\r\n        require(_interfaceId != 0xffffffff);\r\n\r\n        supportedInterfaces[_interfaceId] = true;\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n\r\n * @title ERC721 Non-Fungible Token Standard basic implementation\r\n\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n\r\n */\r\n\r\ncontract ERC721BasicToken is SupportsInterfaceWithLookup, ERC721Basic {\r\n\r\n\r\n    bytes4 private constant InterfaceId_ERC721 = 0x80ac58cd;\r\n\r\n    /*\r\n\r\n     * 0x80ac58cd ===\r\n\r\n     *   bytes4(keccak256('balanceOf(address)')) ^\r\n\r\n     *   bytes4(keccak256('ownerOf(uint256)')) ^\r\n\r\n     *   bytes4(keccak256('approve(address,uint256)')) ^\r\n\r\n     *   bytes4(keccak256('getApproved(uint256)')) ^\r\n\r\n     *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\r\n\r\n     *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\r\n\r\n     *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n\r\n     *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\r\n\r\n     *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\r\n\r\n     */\r\n\r\n\r\n    bytes4 private constant InterfaceId_ERC721Exists = 0x4f558e79;\r\n\r\n    /*\r\n\r\n     * 0x4f558e79 ===\r\n\r\n     *   bytes4(keccak256('exists(uint256)'))\r\n\r\n     */\r\n\r\n\r\n    using SafeMath for uint256;\r\n\r\n    using AddressUtils for address;\r\n\r\n\r\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`\r\n\r\n    // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n\r\n    bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\r\n\r\n\r\n    // Mapping from token ID to owner\r\n\r\n    mapping (uint256 => address) internal tokenOwner;\r\n\r\n\r\n    // Mapping from token ID to approved address\r\n\r\n    mapping (uint256 => address) internal tokenApprovals;\r\n\r\n\r\n    // Mapping from owner to number of owned token\r\n\r\n    mapping (address => uint256) internal ownedTokensCount;\r\n\r\n\r\n    // Mapping from owner to operator approvals\r\n\r\n    mapping (address => mapping (address => bool)) internal operatorApprovals;\r\n\r\n\r\n    /**\r\n\r\n     * @dev Guarantees msg.sender is owner of the given token\r\n\r\n     * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\r\n\r\n     */\r\n\r\n    modifier onlyOwnerOf(uint256 _tokenId) {\r\n\r\n        require(ownerOf(_tokenId) == msg.sender);\r\n\r\n        _;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\r\n\r\n     * @param _tokenId uint256 ID of the token to validate\r\n\r\n     */\r\n\r\n    modifier canTransfer(uint256 _tokenId) {\r\n\r\n        require(isApprovedOrOwner(msg.sender, _tokenId));\r\n\r\n        _;\r\n\r\n    }\r\n\r\n\r\n    constructor() public {\r\n\r\n        // register the supported interfaces to conform to ERC721 via ERC165\r\n\r\n        _registerInterface(InterfaceId_ERC721);\r\n\r\n        _registerInterface(InterfaceId_ERC721Exists);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev Gets the balance of the specified address\r\n\r\n     * @param _owner address to query the balance of\r\n\r\n     * @return uint256 representing the amount owned by the passed address\r\n\r\n     */\r\n\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n\r\n        require(_owner != address(0));\r\n\r\n        return ownedTokensCount[_owner];\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev Gets the owner of the specified token ID\r\n\r\n     * @param _tokenId uint256 ID of the token to query the owner of\r\n\r\n     * @return owner address currently marked as the owner of the given token ID\r\n\r\n     */\r\n\r\n    function ownerOf(uint256 _tokenId) public view returns (address) {\r\n\r\n        address owner = tokenOwner[_tokenId];\r\n\r\n        require(owner != address(0));\r\n\r\n        return owner;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns whether the specified token exists\r\n\r\n     * @param _tokenId uint256 ID of the token to query the existence of\r\n\r\n     * @return whether the token exists\r\n\r\n     */\r\n\r\n    function exists(uint256 _tokenId) public view returns (bool) {\r\n\r\n        address owner = tokenOwner[_tokenId];\r\n\r\n        return owner != address(0);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev Approves another address to transfer the given token ID\r\n\r\n     * @dev The zero address indicates there is no approved address.\r\n\r\n     * @dev There can only be one approved address per token at a given time.\r\n\r\n     * @dev Can only be called by the token owner or an approved operator.\r\n\r\n     * @param _to address to be approved for the given token ID\r\n\r\n     * @param _tokenId uint256 ID of the token to be approved\r\n\r\n     */\r\n\r\n    function approve(address _to, uint256 _tokenId) public {\r\n\r\n        address owner = ownerOf(_tokenId);\r\n\r\n        require(_to != owner);\r\n\r\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n\r\n        tokenApprovals[_tokenId] = _to;\r\n\r\n        emit Approval(owner, _to, _tokenId);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev Gets the approved address for a token ID, or zero if no address set\r\n\r\n     * @param _tokenId uint256 ID of the token to query the approval of\r\n\r\n     * @return address currently approved for the given token ID\r\n\r\n     */\r\n\r\n    function getApproved(uint256 _tokenId) public view returns (address) {\r\n\r\n        return tokenApprovals[_tokenId];\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev Sets or unsets the approval of a given operator\r\n\r\n     * @dev An operator is allowed to transfer all tokens of the sender on their behalf\r\n\r\n     * @param _to operator address to set the approval\r\n\r\n     * @param _approved representing the status of the approval to be set\r\n\r\n     */\r\n\r\n    function setApprovalForAll(address _to, bool _approved) public {\r\n\r\n        require(_to != msg.sender);\r\n\r\n        operatorApprovals[msg.sender][_to] = _approved;\r\n\r\n        emit ApprovalForAll(msg.sender, _to, _approved);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev Tells whether an operator is approved by a given owner\r\n\r\n     * @param _owner owner address which you want to query the approval of\r\n\r\n     * @param _operator operator address which you want to query the approval of\r\n\r\n     * @return bool whether the given operator is approved by the given owner\r\n\r\n     */\r\n\r\n    function isApprovedForAll(address _owner, address _operator) public view returns (bool) {\r\n\r\n        return operatorApprovals[_owner][_operator];\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev Transfers the ownership of a given token ID to another address\r\n\r\n     * @dev Usage of this method is discouraged, use `safeTransferFrom` whenever possible\r\n\r\n     * @dev Requires the msg sender to be the owner, approved, or operator\r\n\r\n     * @param _from current owner of the token\r\n\r\n     * @param _to address to receive the ownership of the given token ID\r\n\r\n     * @param _tokenId uint256 ID of the token to be transferred\r\n\r\n    */\r\n\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public canTransfer(_tokenId) {\r\n\r\n        require(_from != address(0));\r\n\r\n        require(_to != address(0));\r\n\r\n\r\n        clearApproval(_from, _tokenId);\r\n\r\n        removeTokenFrom(_from, _tokenId);\r\n\r\n        addTokenTo(_to, _tokenId);\r\n\r\n\r\n        emit Transfer(_from, _to, _tokenId);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev Safely transfers the ownership of a given token ID to another address\r\n\r\n     * @dev If the target address is a contract, it must implement `onERC721Received`,\r\n\r\n     *  which is called upon a safe transfer, and return the magic value\r\n\r\n     *  `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`; otherwise,\r\n\r\n     *  the transfer is reverted.\r\n\r\n     * @dev Requires the msg sender to be the owner, approved, or operator\r\n\r\n     * @param _from current owner of the token\r\n\r\n     * @param _to address to receive the ownership of the given token ID\r\n\r\n     * @param _tokenId uint256 ID of the token to be transferred\r\n\r\n    */\r\n\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) public canTransfer(_tokenId) {\r\n\r\n        // solium-disable-next-line arg-overflow\r\n\r\n        safeTransferFrom(_from, _to, _tokenId, \"\");\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev Safely transfers the ownership of a given token ID to another address\r\n\r\n     * @dev If the target address is a contract, it must implement `onERC721Received`,\r\n\r\n     *  which is called upon a safe transfer, and return the magic value\r\n\r\n     *  `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`; otherwise,\r\n\r\n     *  the transfer is reverted.\r\n\r\n     * @dev Requires the msg sender to be the owner, approved, or operator\r\n\r\n     * @param _from current owner of the token\r\n\r\n     * @param _to address to receive the ownership of the given token ID\r\n\r\n     * @param _tokenId uint256 ID of the token to be transferred\r\n\r\n     * @param _data bytes data to send along with a safe transfer check\r\n\r\n     */\r\n\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) public canTransfer(_tokenId) {\r\n\r\n        transferFrom(_from, _to, _tokenId);\r\n\r\n        // solium-disable-next-line arg-overflow\r\n\r\n        require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns whether the given spender can transfer a given token ID\r\n\r\n     * @param _spender address of the spender to query\r\n\r\n     * @param _tokenId uint256 ID of the token to be transferred\r\n\r\n     * @return bool whether the msg.sender is approved for the given token ID,\r\n\r\n     *  is an operator of the owner, or is the owner of the token\r\n\r\n     */\r\n\r\n    function isApprovedOrOwner(\r\n\r\n        address _spender,\r\n\r\n        uint256 _tokenId\r\n\r\n    )\r\n\r\n        internal\r\n\r\n        view\r\n\r\n        returns (bool)\r\n\r\n    {\r\n\r\n        address owner = ownerOf(_tokenId);\r\n\r\n        // Disable solium check because of\r\n\r\n        // https://github.com/duaraghav8/Solium/issues/175\r\n\r\n        // solium-disable-next-line operator-whitespace\r\n\r\n        return (\r\n\r\n            _spender == owner ||\r\n\r\n            getApproved(_tokenId) == _spender ||\r\n\r\n            isApprovedForAll(owner, _spender)\r\n\r\n        );\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev Internal function to mint a new token\r\n\r\n     * @dev Reverts if the given token ID already exists\r\n\r\n     * @param _to The address that will own the minted token\r\n\r\n     * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n\r\n     */\r\n\r\n    function _mint(address _to, uint256 _tokenId) internal {\r\n\r\n        require(_to != address(0));\r\n\r\n        addTokenTo(_to, _tokenId);\r\n\r\n        emit Transfer(address(0), _to, _tokenId);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev Internal function to clear current approval of a given token ID\r\n\r\n     * @dev Reverts if the given address is not indeed the owner of the token\r\n\r\n     * @param _owner owner of the token\r\n\r\n     * @param _tokenId uint256 ID of the token to be transferred\r\n\r\n     */\r\n\r\n    function clearApproval(address _owner, uint256 _tokenId) internal {\r\n\r\n        require(ownerOf(_tokenId) == _owner);\r\n\r\n        if (tokenApprovals[_tokenId] != address(0)) {\r\n\r\n            tokenApprovals[_tokenId] = address(0);\r\n\r\n            emit Approval(_owner, address(0), _tokenId);\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev Internal function to add a token ID to the list of a given address\r\n\r\n     * @param _to address representing the new owner of the given token ID\r\n\r\n     * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n\r\n     */\r\n\r\n    function addTokenTo(address _to, uint256 _tokenId) internal {\r\n\r\n        require(tokenOwner[_tokenId] == address(0));\r\n\r\n        tokenOwner[_tokenId] = _to;\r\n\r\n        ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev Internal function to remove a token ID from the list of a given address\r\n\r\n     * @param _from address representing the previous owner of the given token ID\r\n\r\n     * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n\r\n     */\r\n\r\n    function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n\r\n        require(ownerOf(_tokenId) == _from);\r\n\r\n        ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\r\n\r\n        tokenOwner[_tokenId] = address(0);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev Internal function to invoke `onERC721Received` on a target address\r\n\r\n     * The call is not executed if the target address is not a contract\r\n\r\n     * @param _from address representing the previous owner of the given token ID\r\n\r\n     * @param _to target address that will receive the tokens\r\n\r\n     * @param _tokenId uint256 ID of the token to be transferred\r\n\r\n     * @param _data bytes optional data to send along with the call\r\n\r\n     * @return whether the call correctly returned the expected magic value\r\n\r\n     */\r\n\r\n    function checkAndCallSafeTransfer(\r\n\r\n        address _from,\r\n\r\n        address _to,\r\n\r\n        uint256 _tokenId,\r\n\r\n        bytes _data\r\n\r\n    )\r\n\r\n        internal\r\n\r\n        returns (bool)\r\n\r\n    {\r\n\r\n        if (!_to.isContract()) {\r\n\r\n            return true;\r\n\r\n        }\r\n\r\n\r\n        bytes4 retval = ERC721Receiver(_to).onERC721Received(\r\n\r\n        _from, _tokenId, _data);\r\n\r\n        return (retval == ERC721_RECEIVED);\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n\r\n * @title Ownable\r\n\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n\r\n */\r\n\r\n contract Ownable {\r\n\r\n     address public owner;\r\n\r\n     address public pendingOwner;\r\n\r\n     address public manager;\r\n\r\n\r\n     event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n     /**\r\n\r\n     * @dev Throws if called by any account other than the owner.\r\n\r\n     */\r\n\r\n     modifier onlyOwner() {\r\n\r\n         require(msg.sender == owner);\r\n\r\n         _;\r\n\r\n     }\r\n\r\n\r\n     /**\r\n\r\n      * @dev Modifier throws if called by any account other than the manager.\r\n\r\n      */\r\n\r\n     modifier onlyManager() {\r\n\r\n         require(msg.sender == manager);\r\n\r\n         _;\r\n\r\n     }\r\n\r\n\r\n     /**\r\n\r\n      * @dev Modifier throws if called by any account other than the pendingOwner.\r\n\r\n      */\r\n\r\n     modifier onlyPendingOwner() {\r\n\r\n         require(msg.sender == pendingOwner);\r\n\r\n         _;\r\n\r\n     }\r\n\r\n\r\n     constructor() public {\r\n\r\n         owner = msg.sender;\r\n\r\n     }\r\n\r\n\r\n     /**\r\n\r\n      * @dev Allows the current owner to set the pendingOwner address.\r\n\r\n      * @param newOwner The address to transfer ownership to.\r\n\r\n      */\r\n\r\n     function transferOwnership(address newOwner) public onlyOwner {\r\n\r\n         pendingOwner = newOwner;\r\n\r\n     }\r\n\r\n\r\n     /**\r\n\r\n      * @dev Allows the pendingOwner address to finalize the transfer.\r\n\r\n      */\r\n\r\n     function claimOwnership() public onlyPendingOwner {\r\n\r\n         emit OwnershipTransferred(owner, pendingOwner);\r\n\r\n         owner = pendingOwner;\r\n\r\n         pendingOwner = address(0);\r\n\r\n     }\r\n\r\n\r\n     /**\r\n\r\n      * @dev Sets the manager address.\r\n\r\n      * @param _manager The manager address.\r\n\r\n      */\r\n\r\n     function setManager(address _manager) public onlyOwner {\r\n\r\n         require(_manager != address(0));\r\n\r\n         manager = _manager;\r\n\r\n     }\r\n\r\n\r\n }\r\n\r\n\r\n\r\n\r\n/**\r\n\r\n * @title Full ERC721 Token\r\n\r\n * This implementation includes all the required and some optional functionality of the ERC721 standard\r\n\r\n * Moreover, it includes approve all functionality using operator terminology\r\n\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n\r\n */\r\n\r\ncontract AviationSecurityToken is SupportsInterfaceWithLookup, ERC721, ERC721BasicToken, Ownable {\r\n\r\n\r\n    bytes4 private constant InterfaceId_ERC721Enumerable = 0x780e9d63;\r\n\r\n    /**\r\n\r\n     * 0x780e9d63 ===\r\n\r\n     *   bytes4(keccak256('totalSupply()')) ^\r\n\r\n     *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\r\n\r\n     *   bytes4(keccak256('tokenByIndex(uint256)'))\r\n\r\n     */\r\n\r\n\r\n    bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\r\n\r\n    /**\r\n\r\n     * 0x5b5e139f ===\r\n\r\n     *   bytes4(keccak256('name()')) ^\r\n\r\n     *   bytes4(keccak256('symbol()')) ^\r\n\r\n     *   bytes4(keccak256('tokenURI(uint256)'))\r\n\r\n     */\r\n\r\n\r\n    // Token name\r\n\r\n    string public name_ = \"AviationSecurityToken\";\r\n\r\n\r\n    // Token symbol\r\n\r\n    string public symbol_ = \"AVNS\";\r\n\r\n\r\n    // Mapping from owner to list of owned token IDs\r\n\r\n    mapping(address => uint256[]) internal ownedTokens;\r\n\r\n\r\n    // Mapping from token ID to index of the owner tokens list\r\n\r\n    mapping(uint256 => uint256) internal ownedTokensIndex;\r\n\r\n\r\n    // Array with all token ids, used for enumeration\r\n\r\n    uint256[] internal allTokens;\r\n\r\n\r\n    // Mapping from token id to position in the allTokens array\r\n\r\n    mapping(uint256 => uint256) internal allTokensIndex;\r\n\r\n\r\n    // Optional mapping for token URIs\r\n\r\n    mapping(uint256 => string) internal tokenURIs;\r\n\r\n\r\n    struct Data{\r\n\r\n        string liscence;\r\n\r\n        string URL;\r\n\r\n    }\r\n\r\n    \r\n\r\n    mapping(uint256 => Data) internal tokenData;\r\n\r\n    /**\r\n\r\n     * @dev Constructor function\r\n\r\n     */\r\n\r\n    constructor() public {\r\n\r\n\r\n\r\n        // register the supported interfaces to conform to ERC721 via ERC165\r\n\r\n        _registerInterface(InterfaceId_ERC721Enumerable);\r\n\r\n        _registerInterface(InterfaceId_ERC721Metadata);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev External function to mint a new token\r\n\r\n     * @dev Reverts if the given token ID already exists\r\n\r\n     * @param _to address the beneficiary that will own the minted token\r\n\r\n     */\r\n\r\n    function mint(address _to, uint256 _id) external onlyManager {\r\n\r\n        _mint(_to, _id);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev Gets the token name\r\n\r\n     * @return string representing the token name\r\n\r\n     */\r\n\r\n    function name() external view returns (string) {\r\n\r\n        return name_;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev Gets the token symbol\r\n\r\n     * @return string representing the token symbol\r\n\r\n     */\r\n\r\n    function symbol() external view returns (string) {\r\n\r\n        return symbol_;\r\n\r\n    }\r\n\r\n\r\n    function arrayOfTokensByAddress(address _holder) public view returns(uint256[]) {\r\n\r\n        return ownedTokens[_holder];\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns an URI for a given token ID\r\n\r\n     * @dev Throws if the token ID does not exist. May return an empty string.\r\n\r\n     * @param _tokenId uint256 ID of the token to query\r\n\r\n     */\r\n\r\n    function tokenURI(uint256 _tokenId) public view returns (string) {\r\n\r\n        require(exists(_tokenId));\r\n\r\n        return tokenURIs[_tokenId];\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev Gets the token ID at a given index of the tokens list of the requested owner\r\n\r\n     * @param _owner address owning the tokens list to be accessed\r\n\r\n     * @param _index uint256 representing the index to be accessed of the requested tokens list\r\n\r\n     * @return uint256 token ID at the given index of the tokens list owned by the requested address\r\n\r\n     */\r\n\r\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256) {\r\n\r\n        require(_index < balanceOf(_owner));\r\n\r\n        return ownedTokens[_owner][_index];\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev Gets the total amount of tokens stored by the contract\r\n\r\n     * @return uint256 representing the total amount of tokens\r\n\r\n     */\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n\r\n        return allTokens.length;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev Gets the token ID at a given index of all the tokens in this contract\r\n\r\n     * @dev Reverts if the index is greater or equal to the total number of tokens\r\n\r\n     * @param _index uint256 representing the index to be accessed of the tokens list\r\n\r\n     * @return uint256 token ID at the given index of the tokens list\r\n\r\n     */\r\n\r\n    function tokenByIndex(uint256 _index) public view returns (uint256) {\r\n\r\n        require(_index < totalSupply());\r\n\r\n        return allTokens[_index];\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev Internal function to set the token URI for a given token\r\n\r\n     * @dev Reverts if the token ID does not exist\r\n\r\n     * @param _tokenId uint256 ID of the token to set its URI\r\n\r\n     * @param _uri string URI to assign\r\n\r\n     */\r\n\r\n    function _setTokenURI(uint256 _tokenId, string _uri) internal {\r\n\r\n        require(exists(_tokenId));\r\n\r\n        tokenURIs[_tokenId] = _uri;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev Internal function to add a token ID to the list of a given address\r\n\r\n     * @param _to address representing the new owner of the given token ID\r\n\r\n     * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n\r\n     */\r\n\r\n    function addTokenTo(address _to, uint256 _tokenId) internal {\r\n\r\n        super.addTokenTo(_to, _tokenId);\r\n\r\n        uint256 length = ownedTokens[_to].length;\r\n\r\n        ownedTokens[_to].push(_tokenId);\r\n\r\n        ownedTokensIndex[_tokenId] = length;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev Internal function to remove a token ID from the list of a given address\r\n\r\n     * @param _from address representing the previous owner of the given token ID\r\n\r\n     * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n\r\n     */\r\n\r\n    function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n\r\n        super.removeTokenFrom(_from, _tokenId);\r\n\r\n\r\n        uint256 tokenIndex = ownedTokensIndex[_tokenId];\r\n\r\n        uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\r\n\r\n        uint256 lastToken = ownedTokens[_from][lastTokenIndex];\r\n\r\n\r\n        ownedTokens[_from][tokenIndex] = lastToken;\r\n\r\n        ownedTokens[_from][lastTokenIndex] = 0;\r\n\r\n        // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are\r\n\r\n        // going to be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are\r\n\r\n        // first swapping the lastToken to the first position, and then dropping the element placed in the last\r\n\r\n        // position of the list\r\n\r\n\r\n        ownedTokens[_from].length--;\r\n\r\n        ownedTokensIndex[_tokenId] = 0;\r\n\r\n        ownedTokensIndex[lastToken] = tokenIndex;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev Internal function to mint a new token\r\n\r\n     * @dev Reverts if the given token ID already exists\r\n\r\n     * @param _to address the beneficiary that will own the minted token\r\n\r\n     */\r\n\r\n    function _mint(address _to, uint256 _id) internal {\r\n\r\n        allTokens.push(_id);\r\n\r\n        allTokensIndex[_id] = _id;\r\n\r\n        super._mint(_to, _id);\r\n\r\n    }\r\n\r\n    \r\n\r\n    function addTokenData(uint _tokenId, string _liscence, string _URL) public {\r\n\r\n            require(ownerOf(_tokenId) == msg.sender);\r\n\r\n            tokenData[_tokenId].liscence = _liscence;\r\n\r\n            tokenData[_tokenId].URL = _URL;\r\n\r\n\r\n        \r\n\r\n    }\r\n\r\n    \r\n\r\n    function getTokenData(uint _tokenId) public view returns(string Liscence, string URL){\r\n\r\n        require(exists(_tokenId));\r\n\r\n        Liscence = tokenData[_tokenId].liscence;\r\n\r\n        URL = tokenData[_tokenId].URL;\r\n\r\n    }\r\n\r\n}", "OptimizationUsed": "1", "ContractName": "AviationSecurityToken", "ByteCode": "0x60806040526004361061017f5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301ffc9a7811461018457806306fdde03146101ba578063081812fc14610244578063095ea7b3146102785780631244861e1461029e57806318160ddd1461033a57806319fa8f501461036157806323b872dd146103935780632f745c59146103bd57806340c10f19146103e157806342842e0e14610405578063481c6a751461042f5780634e71e0c8146104445780634f558e79146104595780634f6ccce7146104715780636352211e1461048957806370a08231146104a15780638da5cb5b146104c257806395d89b41146104d7578063a22cb465146104ec578063af17dea614610512578063b09afec114610527578063b1cee3301461061d578063b88d4fde1461068e578063c87b56dd146106fd578063d0ebdbe714610715578063e2b9e18614610736578063e30c39781461074b578063e985e9c514610760578063f2fde38b14610787575b600080fd5b34801561019057600080fd5b506101a6600160e060020a0319600435166107a8565b604080519115158252519081900360200190f35b3480156101c657600080fd5b506101cf6107c7565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102095781810151838201526020016101f1565b50505050905090810190601f1680156102365780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561025057600080fd5b5061025c60043561085e565b60408051600160a060020a039092168252519081900360200190f35b34801561028457600080fd5b5061029c600160a060020a0360043516602435610879565b005b3480156102aa57600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855261029c95833595369560449491939091019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506109229650505050505050565b34801561034657600080fd5b5061034f61098a565b60408051918252519081900360200190f35b34801561036d57600080fd5b50610376610990565b60408051600160e060020a03199092168252519081900360200190f35b34801561039f57600080fd5b5061029c600160a060020a03600435811690602435166044356109b4565b3480156103c957600080fd5b5061034f600160a060020a0360043516602435610a59565b3480156103ed57600080fd5b5061029c600160a060020a0360043516602435610aa6565b34801561041157600080fd5b5061029c600160a060020a0360043581169060243516604435610acb565b34801561043b57600080fd5b5061025c610afd565b34801561045057600080fd5b5061029c610b0c565b34801561046557600080fd5b506101a6600435610b89565b34801561047d57600080fd5b5061034f600435610ba6565b34801561049557600080fd5b5061025c600435610bdb565b3480156104ad57600080fd5b5061034f600160a060020a0360043516610c05565b3480156104ce57600080fd5b5061025c610c38565b3480156104e357600080fd5b506101cf610c47565b3480156104f857600080fd5b5061029c600160a060020a03600435166024351515610ca8565b34801561051e57600080fd5b506101cf610d2c565b34801561053357600080fd5b5061053f600435610dba565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b83811015610580578181015183820152602001610568565b50505050905090810190601f1680156105ad5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156105e05781810151838201526020016105c8565b50505050905090810190601f16801561060d5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b34801561062957600080fd5b5061063e600160a060020a0360043516610f21565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561067a578181015183820152602001610662565b505050509050019250505060405180910390f35b34801561069a57600080fd5b50604080516020601f60643560048181013592830184900484028501840190955281845261029c94600160a060020a038135811695602480359092169560443595369560849401918190840183828082843750949750610f8d9650505050505050565b34801561070957600080fd5b506101cf600435610fcc565b34801561072157600080fd5b5061029c600160a060020a0360043516611077565b34801561074257600080fd5b506101cf6110c5565b34801561075757600080fd5b5061025c611120565b34801561076c57600080fd5b506101a6600160a060020a036004358116906024351661112f565b34801561079357600080fd5b5061029c600160a060020a036004351661115d565b600160e060020a03191660009081526020819052604090205460ff1690565b60088054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156108535780601f1061082857610100808354040283529160200191610853565b820191906000526020600020905b81548152906001019060200180831161083657829003601f168201915b505050505090505b90565b600090815260026020526040902054600160a060020a031690565b600061088482610bdb565b9050600160a060020a03838116908216141561089f57600080fd5b33600160a060020a03821614806108bb57506108bb813361112f565b15156108c657600080fd5b6000828152600260205260408082208054600160a060020a031916600160a060020a0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b3361092c84610bdb565b600160a060020a03161461093f57600080fd5b6000838152600f60209081526040909120835161095e92850190611759565b506000838152600f60209081526040909120825161098492600190920191840190611759565b50505050565b600c5490565b7f01ffc9a70000000000000000000000000000000000000000000000000000000081565b806109bf3382611196565b15156109ca57600080fd5b600160a060020a03841615156109df57600080fd5b600160a060020a03831615156109f457600080fd5b6109fe84836111f5565b610a08848361128d565b610a1283836113c6565b8183600160a060020a031685600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a450505050565b6000610a6483610c05565b8210610a6f57600080fd5b600160a060020a0383166000908152600a60205260409020805483908110610a9357fe5b9060005260206000200154905092915050565b600754600160a060020a03163314610abd57600080fd5b610ac7828261140f565b5050565b80610ad63382611196565b1515610ae157600080fd5b6109848484846020604051908101604052806000815250610f8d565b600754600160a060020a031681565b600654600160a060020a03163314610b2357600080fd5b600654600554604051600160a060020a0392831692909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36006805460058054600160a060020a0319908116600160a060020a03841617909155169055565b600090815260016020526040902054600160a060020a0316151590565b6000610bb061098a565b8210610bbb57600080fd5b600c805483908110610bc957fe5b90600052602060002001549050919050565b600081815260016020526040812054600160a060020a0316801515610bff57600080fd5b92915050565b6000600160a060020a0382161515610c1c57600080fd5b50600160a060020a031660009081526003602052604090205490565b600554600160a060020a031681565b60098054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156108535780601f1061082857610100808354040283529160200191610853565b600160a060020a038216331415610cbe57600080fd5b336000818152600460209081526040808320600160a060020a03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b6009805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610db25780601f10610d8757610100808354040283529160200191610db2565b820191906000526020600020905b815481529060010190602001808311610d9557829003601f168201915b505050505081565b606080610dc683610b89565b1515610dd157600080fd5b6000838152600f602090815260409182902080548351601f600260001961010060018616150201909316929092049182018490048402810184019094528084529091830182828015610e645780601f10610e3957610100808354040283529160200191610e64565b820191906000526020600020905b815481529060010190602001808311610e4757829003601f168201915b50505050509150600f60008481526020019081526020016000206001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f155780601f10610eea57610100808354040283529160200191610f15565b820191906000526020600020905b815481529060010190602001808311610ef857829003601f168201915b50505050509050915091565b600160a060020a0381166000908152600a6020908152604091829020805483518184028101840190945280845260609392830182828015610f8157602002820191906000526020600020905b815481526020019060010190808311610f6d575b50505050509050919050565b81610f983382611196565b1515610fa357600080fd5b610fae8585856109b4565b610fba8585858561145a565b1515610fc557600080fd5b5050505050565b6060610fd782610b89565b1515610fe257600080fd5b6000828152600e602090815260409182902080548351601f600260001961010060018616150201909316929092049182018490048402810184019094528084529091830182828015610f815780601f1061104a57610100808354040283529160200191610f81565b820191906000526020600020905b8154815290600101906020018083116110585750939695505050505050565b600554600160a060020a0316331461108e57600080fd5b600160a060020a03811615156110a357600080fd5b60078054600160a060020a031916600160a060020a0392909216919091179055565b6008805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610db25780601f10610d8757610100808354040283529160200191610db2565b600654600160a060020a031681565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205460ff1690565b600554600160a060020a0316331461117457600080fd5b60068054600160a060020a031916600160a060020a0392909216919091179055565b6000806111a283610bdb565b905080600160a060020a031684600160a060020a031614806111dd575083600160a060020a03166111d28461085e565b600160a060020a0316145b806111ed57506111ed818561112f565b949350505050565b81600160a060020a031661120882610bdb565b600160a060020a03161461121b57600080fd5b600081815260026020526040902054600160a060020a031615610ac7576000818152600260205260408082208054600160a060020a031916905551829190600160a060020a038516907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925908390a45050565b600080600061129c85856115cb565b6000848152600b6020908152604080832054600160a060020a0389168452600a909252909120549093506112d790600163ffffffff61165416565b600160a060020a0386166000908152600a60205260409020805491935090839081106112ff57fe5b9060005260206000200154905080600a600087600160a060020a0316600160a060020a031681526020019081526020016000208481548110151561133f57fe5b6000918252602080832090910192909255600160a060020a0387168152600a9091526040812080548490811061137157fe5b6000918252602080832090910192909255600160a060020a0387168152600a909152604090208054906113a89060001983016117d7565b506000938452600b6020526040808520859055908452909220555050565b60006113d28383611666565b50600160a060020a039091166000908152600a6020908152604080832080546001810182559084528284208101859055938352600b909152902055565b600c8054600181019091557fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c7018190556000818152600d60205260409020819055610ac782826116e9565b60008061146f85600160a060020a0316611744565b151561147e57600191506115c2565b84600160a060020a031663f0b9e5ba8786866040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156115165781810151838201526020016114fe565b50505050905090810190601f1680156115435780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b15801561156457600080fd5b505af1158015611578573d6000803e3d6000fd5b505050506040513d602081101561158e57600080fd5b5051600160e060020a031981167ff0b9e5ba0000000000000000000000000000000000000000000000000000000014925090505b50949350505050565b81600160a060020a03166115de82610bdb565b600160a060020a0316146115f157600080fd5b600160a060020a03821660009081526003602052604090205461161b90600163ffffffff61165416565b600160a060020a039092166000908152600360209081526040808320949094559181526001909152208054600160a060020a0319169055565b60008282111561166057fe5b50900390565b600081815260016020526040902054600160a060020a03161561168857600080fd5b60008181526001602081815260408084208054600160a060020a031916600160a060020a03881690811790915584526003909152909120546116c99161174c565b600160a060020a0390921660009081526003602052604090209190915550565b600160a060020a03821615156116fe57600080fd5b61170882826113c6565b6040518190600160a060020a038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000903b1190565b81810182811015610bff57fe5b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061179a57805160ff19168380011785556117c7565b828001600101855582156117c7579182015b828111156117c75782518255916020019190600101906117ac565b506117d3929150611800565b5090565b8154818355818111156117fb576000838152602090206117fb918101908301611800565b505050565b61085b91905b808211156117d357600081556001016118065600a165627a7a723058202043f77c5621c3334437429807f1a1c2db8c7448868ae3f146262584dea956c20029"}