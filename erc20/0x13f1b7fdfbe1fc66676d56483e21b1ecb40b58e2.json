{"Runs": "200", "SwarmSource": "bzzr://0c09aa0335e379e3b87aaf6a88ed138416899818b91ce6f8962589498347d634", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ownerSetStakeStartTime\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getBlockNumber\",\"outputs\":[{\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"AcceleratorStart\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"chainStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakeStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mine\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInitialSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"coinAge\",\"outputs\":[{\"name\":\"myCoinAge\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"annualInterest\",\"outputs\":[{\"name\":\"interest\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakeMinAge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"chainStartBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakeMaxAge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxMintProofOfStake\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"Mine\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.15+commit.bbb8e64f", "ConstructorArguments": "", "SourceCode": "pragma solidity ^0.4.4;\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        require(newOwner != address(0));\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) constant returns (uint256);\r\n    function transfer(address to, uint256 value) returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) constant returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) returns (bool);\r\n    function approve(address spender, uint256 value) returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n/**\r\n * @title PoSTokenStandard\r\n * @dev the interface of PoSTokenStandard\r\n */\r\ncontract PoSTokenStandard {\r\n    uint256 public stakeStartTime;\r\n    uint256 public stakeMinAge;\r\n    uint256 public stakeMaxAge;\r\n   //Accelerator - Modified the correct technical term \"mint\" to a well know term \"mine\" for marketing purposes\r\n    function mine() returns (bool);\r\n    function coinAge(address who) constant returns (uint256);\r\n    function annualInterest() constant returns (uint256);\r\n    event Mine(address indexed _address, uint _reward);\r\n}\r\n//Accelerator - Changed name of contract\r\ncontract Accelerator is ERC20,PoSTokenStandard,Ownable {\r\n    using SafeMath for uint256;\r\n//Accelerator - Changed name of contract\r\n    string public name = \"Accelerator\";\r\n    string public symbol = \"ACC\";\r\n    uint public decimals = 18;\r\n\r\n    uint public chainStartTime; //chain start time\r\n    uint public chainStartBlockNumber; //chain start block number\r\n    uint public stakeStartTime; //stake start time\r\n    uint public stakeMinAge = 3 days; // minimum age for coin age: 3D\r\n    uint public stakeMaxAge = 90 days; // stake age of full weight: 90D\r\n    uint public maxMintProofOfStake = 10**17; // default 10% annual interest\r\n\r\n    uint public totalSupply;\r\n    uint public maxTotalSupply;\r\n    uint public totalInitialSupply;\r\n\r\n    struct transferInStruct{\r\n    uint128 amount;\r\n    uint64 time;\r\n    }\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n    mapping(address => transferInStruct[]) transferIns;\r\n\r\n//Accelerator - Removed burn system\r\n    //event Burn(address indexed burner, uint256 value);\r\n\r\n    /**\r\n     * @dev Fix for the ERC20 short address attack.\r\n     */\r\n    modifier onlyPayloadSize(uint size) {\r\n        require(msg.data.length >= size + 4);\r\n        _;\r\n    }\r\n\r\n    modifier canPoSMint() {\r\n        require(totalSupply < maxTotalSupply);\r\n        _;\r\n    }\r\n\r\n    function AcceleratorStart() onlyOwner {\r\n        address recipient;\r\n        uint value;\r\n        uint64 _now = uint64(now);\r\n        //kill start if this has already been ran\r\n        require((maxTotalSupply <= 0));\r\n\r\n        maxTotalSupply = 10**25; // 10 Mil.\r\n        \r\n        //Accelerator - Modified initial supply to 250k\r\n        totalInitialSupply = 2.5*(10**23); // 250K\r\n\r\n        chainStartTime = now;\r\n        chainStartBlockNumber = block.number;\r\n\r\n        //Free Airdrop to Affiliates and Website Visitors - 200K\r\n        recipient = 0xFd3fBD60f3d394374d692C0cb7E3B90f064009b0;\r\n        value = 2 * (10**23);\r\n\r\n        //run\r\n        balances[recipient] = value;\r\n        transferIns[recipient].push(transferInStruct(uint128(value),_now));\r\n\r\n        //Core development Team - 50K\r\n        recipient = 0x347fdeCA4F170E59CE54AE63D2a841BCb39d3062;\r\n        value = 5 * (10**22);\r\n\r\n        //run\r\n        balances[recipient] = value;\r\n        transferIns[recipient].push(transferInStruct(uint128(value),_now));\r\n\r\n        totalSupply = totalInitialSupply;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) returns (bool) {\r\n        //Accelerator - Modified to mine\r\n        if(msg.sender == _to) return mine();\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        if(transferIns[msg.sender].length > 0) delete transferIns[msg.sender];\r\n        uint64 _now = uint64(now);\r\n        transferIns[msg.sender].push(transferInStruct(uint128(balances[msg.sender]),_now));\r\n        transferIns[_to].push(transferInStruct(uint128(_value),_now));\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) returns (bool) {\r\n        require(_to != address(0));\r\n\r\n        var _allowance = allowed[_from][msg.sender];\r\n\r\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n        // require (_value <= _allowance);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = _allowance.sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        if(transferIns[_from].length > 0) delete transferIns[_from];\r\n        uint64 _now = uint64(now);\r\n        transferIns[_from].push(transferInStruct(uint128(balances[_from]),_now));\r\n        transferIns[_to].push(transferInStruct(uint128(_value),_now));\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool) {\r\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n//Accelerator - Modified the correct technical term \"mint\" to a well know term \"mine\" for marketing purposes.\r\n    function mine() canPoSMint returns (bool) {\r\n        if(balances[msg.sender] <= 0) return false;\r\n        if(transferIns[msg.sender].length <= 0) return false;\r\n\r\n        uint reward = getProofOfStakeReward(msg.sender);\r\n        if(reward <= 0) return false;\r\n\r\n        totalSupply = totalSupply.add(reward);\r\n        balances[msg.sender] = balances[msg.sender].add(reward);\r\n        delete transferIns[msg.sender];\r\n        transferIns[msg.sender].push(transferInStruct(uint128(balances[msg.sender]),uint64(now)));\r\n//Accelerator - Change event to Mine\r\n        Mine(msg.sender, reward);\r\n        return true;\r\n    }\r\n\r\n    function getBlockNumber() returns (uint blockNumber) {\r\n        blockNumber = block.number.sub(chainStartBlockNumber);\r\n    }\r\n\r\n    function coinAge(address who) constant returns (uint myCoinAge) {\r\n        myCoinAge = getCoinAge(who,now);\r\n    }\r\n\r\n    function annualInterest() constant returns(uint interest) {\r\n        uint _now = now;\r\n        interest = maxMintProofOfStake;\r\n        //Accelerator - Modified initial interest rate to 300%\r\n        if((_now.sub(stakeStartTime)).div(1 years) == 0) {\r\n            interest = (1650 * maxMintProofOfStake).div(100);\r\n        } else if((_now.sub(stakeStartTime)).div(1 years) == 1) {\r\n            interest = (770 * maxMintProofOfStake).div(100);\r\n        } else if((_now.sub(stakeStartTime)).div(1 years) == 2){\r\n            interest = (435 * maxMintProofOfStake).div(100);\r\n        }\r\n    }\r\n\r\n    function getProofOfStakeReward(address _address) internal returns (uint) {\r\n        require( (now >= stakeStartTime) && (stakeStartTime > 0) );\r\n\r\n        uint _now = now;\r\n        uint _coinAge = getCoinAge(_address, _now);\r\n        if(_coinAge <= 0) return 0;\r\n\r\n        uint interest = maxMintProofOfStake;\r\n        // Due to the high interest rate for the first two years, compounding should be taken into account.\r\n        // Effective annual interest rate = (1 + (nominal rate / number of compounding periods)) ^ (number of compounding periods) - 1\r\n        //Accelerator - Modified initial interest rate to 300%\r\n        if((_now.sub(stakeStartTime)).div(1 years) == 0) {\r\n            // 1st year effective annual interest rate is 300% when we select the stakeMaxAge (90 days) as the compounding period.\r\n            interest = (1650 * maxMintProofOfStake).div(100);\r\n        } else if((_now.sub(stakeStartTime)).div(1 years) == 1) {\r\n            // 2nd year effective annual interest rate is 100% when we select the stakeMaxAge (90 days) as the compounding period.\r\n            interest = (770 * maxMintProofOfStake).div(100);\r\n        } else if((_now.sub(stakeStartTime)).div(1 years) == 2){\r\n            // 3nd year effective annual interest rate is 50%\r\n            interest = (435 * maxMintProofOfStake).div(100);\r\n        }\r\n\r\n        return (_coinAge * interest).div(365 * (10**decimals));\r\n    }\r\n\r\n    function getCoinAge(address _address, uint _now) internal returns (uint _coinAge) {\r\n        if(transferIns[_address].length <= 0) return 0;\r\n\r\n        for (uint i = 0; i < transferIns[_address].length; i++){\r\n            if( _now < uint(transferIns[_address][i].time).add(stakeMinAge) ) continue;\r\n\r\n            uint nCoinSeconds = _now.sub(uint(transferIns[_address][i].time));\r\n            if( nCoinSeconds > stakeMaxAge ) nCoinSeconds = stakeMaxAge;\r\n\r\n            _coinAge = _coinAge.add(uint(transferIns[_address][i].amount) * nCoinSeconds.div(1 days));\r\n        }\r\n    }\r\n\r\n    function ownerSetStakeStartTime(uint timestamp) onlyOwner {\r\n        require((stakeStartTime <= 0) && (timestamp >= chainStartTime));\r\n        stakeStartTime = timestamp;\r\n    }\r\n\r\n}", "OptimizationUsed": "1", "ContractName": "Accelerator", "ByteCode": "0x606060405236156101465763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461014b578063095ea7b3146101d657806318160ddd1461020c57806323b872dd146102315780632a9edf6f1461026d5780632ab4d05214610285578063313ce567146102aa57806342cbb15c146102cf5780635821c831146102f45780635b054f9b1461030957806370a082311461032e5780637419f1901461035f5780638da5cb5b1461038457806395d89b41146103b357806399f4b2511461043e5780639fd4da4014610465578063a9059cbb1461048a578063aa9cdaf4146104c0578063b2552fc4146104f1578063cbd8877e14610516578063cd474b041461053b578063dd62ed3e14610560578063e1c3bac614610597578063f2bb5ce1146105bc578063f2fde38b146105e1575b600080fd5b341561015657600080fd5b61015e610602565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561019b5780820151818401525b602001610182565b50505050905090810190601f1680156101c85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101e157600080fd5b6101f8600160a060020a03600435166024356106a0565b604051901515815260200160405180910390f35b341561021757600080fd5b61021f610747565b60405190815260200160405180910390f35b341561023c57600080fd5b6101f8600160a060020a036004358116906024351660443561074d565b604051901515815260200160405180910390f35b341561027857600080fd5b610283600435610a59565b005b341561029057600080fd5b61021f610a9e565b60405190815260200160405180910390f35b34156102b557600080fd5b61021f610aa4565b60405190815260200160405180910390f35b34156102da57600080fd5b61021f610aaa565b60405190815260200160405180910390f35b34156102ff57600080fd5b610283610ac7565b005b341561031457600080fd5b61021f610d57565b60405190815260200160405180910390f35b341561033957600080fd5b61021f600160a060020a0360043516610d5d565b60405190815260200160405180910390f35b341561036a57600080fd5b61021f610d7c565b60405190815260200160405180910390f35b341561038f57600080fd5b610397610d82565b604051600160a060020a03909116815260200160405180910390f35b34156103be57600080fd5b61015e610d91565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561019b5780820151818401525b602001610182565b50505050905090810190601f1680156101c85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561044957600080fd5b6101f8610e2f565b604051901515815260200160405180910390f35b341561047057600080fd5b61021f611033565b60405190815260200160405180910390f35b341561049557600080fd5b6101f8600160a060020a0360043516602435611039565b604051901515815260200160405180910390f35b34156104cb57600080fd5b61021f600160a060020a0360043516611303565b60405190815260200160405180910390f35b34156104fc57600080fd5b61021f611317565b60405190815260200160405180910390f35b341561052157600080fd5b61021f61140e565b60405190815260200160405180910390f35b341561054657600080fd5b61021f611414565b60405190815260200160405180910390f35b341561056b57600080fd5b61021f600160a060020a036004358116906024351661141a565b60405190815260200160405180910390f35b34156105a257600080fd5b61021f611447565b60405190815260200160405180910390f35b34156105c757600080fd5b61021f61144d565b60405190815260200160405180910390f35b34156105ec57600080fd5b610283600160a060020a0360043516611453565b005b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106985780601f1061066d57610100808354040283529160200191610698565b820191906000526020600020905b81548152906001019060200180831161067b57829003601f168201915b505050505081565b60008115806106d25750600160a060020a03338116600090815260126020908152604080832093871683529290522054155b15156106dd57600080fd5b600160a060020a03338116600081815260126020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b600e5481565b600080806060606436101561076157600080fd5b600160a060020a038616151561077657600080fd5b600160a060020a038088166000818152601260209081526040808320339095168352938152838220549282526011905291909120549093506107be908663ffffffff6114b016565b600160a060020a0380891660009081526011602052604080822093909355908816815220546107f3908663ffffffff6114c716565b600160a060020a03871660009081526011602052604090205561081c838663ffffffff6114b016565b600160a060020a03808916600081815260126020908152604080832033861684529091529081902093909355908816917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9088905190815260200160405180910390a3600160a060020a03871660009081526013602052604081205411156108bf57600160a060020a03871660009081526013602052604081206108bf916117ea565b5b600160a060020a03871660009081526013602052604090208054429350600181016108eb838261180c565b916000526020600020900160005b604080519081016040908152600160a060020a038c16600090815260116020908152919020546001608060020a0316825267ffffffffffffffff871690820152919050815181546fffffffffffffffffffffffffffffffff19166001608060020a03919091161781556020820151815467ffffffffffffffff91909116608060020a026000805160206118738339815191529091161790555050600160a060020a03861660009081526013602052604090208054600181016109bb838261180c565b916000526020600020900160005b604080519081016040526001608060020a038916815267ffffffffffffffff86166020820152919050815181546fffffffffffffffffffffffffffffffff19166001608060020a03919091161781556020820151815467ffffffffffffffff91909116608060020a026000805160206118738339815191529091161790555060019450505b5b5050509392505050565b60045433600160a060020a03908116911614610a7457600080fd5b6000600a5411158015610a8957506008548110155b1515610a9457600080fd5b600a8190555b5b50565b600f5481565b60075481565b6000610ac1600954436114b090919063ffffffff16565b90505b90565b6004546000908190819033600160a060020a03908116911614610ae957600080fd5b50600f5442906000901115610afd57600080fd5b6a084595161401484a000000600f556934f086f3b33b68400000601055426008554360095573fd3fbd60f3d394374d692c0cb7e3b90f064009b06000819052692a5a058fc295ed0000007f207cd0510c11aa50278d22647230809bbca1f931f50f202c2d426ca666e0276c81905560136020527f8aa239added894749079e566f05bb21dea09995eec6a88a15f5b2671fe267b2d80549295509093509060018101610ba8838261180c565b916000526020600020900160005b604080519081016040526001608060020a038616815267ffffffffffffffff85166020820152919050815181546fffffffffffffffffffffffffffffffff19166001608060020a03919091161781556020820151815467ffffffffffffffff91909116608060020a02600080516020611873833981519152909116179055505073347fdeca4f170e59ce54ae63d2a841bcb39d30626000819052690a968163f0a57b4000007f57125b37ce5da331df07bfdd9a785cc752f7d84aa98cd88567fcae81ffc969e781905560136020527f5aab45ae41b733120fb14f4904b1220a1e78727d2d4e2f5247799e2d137671c480549295509093509060018101610cbc838261180c565b916000526020600020900160005b604080519081016040526001608060020a038616815267ffffffffffffffff85166020820152919050815181546fffffffffffffffffffffffffffffffff19166001608060020a03919091161781556020820151815467ffffffffffffffff91909116608060020a026000805160206118738339815191529091161790555050601054600e555b5b505050565b60085481565b600160a060020a0381166000908152601160205260409020545b919050565b600a5481565b600454600160a060020a031681565b60068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106985780601f1061066d57610100808354040283529160200191610698565b820191906000526020600020905b81548152906001019060200180831161067b57829003601f168201915b505050505081565b600080600f54600e54101515610e4457600080fd5b600160a060020a03331660009081526011602052604081205411610e6b576000915061102e565b600160a060020a03331660009081526013602052604081205411610e92576000915061102e565b610e9b336114e1565b905060008111610eae576000915061102e565b600e54610ec1908263ffffffff6114c716565b600e55600160a060020a033316600090815260116020526040902054610eed908263ffffffff6114c716565b600160a060020a03331660009081526011602090815260408083209390935560139052908120610f1c916117ea565b600160a060020a0333166000908152601360205260409020805460018101610f44838261180c565b916000526020600020900160005b604080519081016040908152600160a060020a033316600090815260116020908152919020546001608060020a0316825267ffffffffffffffff421690820152919050815181546fffffffffffffffffffffffffffffffff19166001608060020a03919091161781556020820151815467ffffffffffffffff91909116608060020a026000805160206118738339815191529091161790555050600160a060020a0333167ff23a961744a760027f8811c59a0eaef0d29cf965578b17412bcc375b52fa39d18260405190815260200160405180910390a2600191505b5b5090565b60105481565b6000806040604436101561104c57600080fd5b84600160a060020a031633600160a060020a031614156110755761106e610e2f565b92506112fa565b600160a060020a03331660009081526011602052604090205461109e908563ffffffff6114b016565b600160a060020a0333811660009081526011602052604080822093909355908716815220546110d3908563ffffffff6114c716565b600160a060020a0380871660008181526011602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9087905190815260200160405180910390a3600160a060020a033316600090815260136020526040812054111561116b57600160a060020a033316600090815260136020526040812061116b916117ea565b5b600160a060020a0333166000908152601360205260409020805442935060018101611197838261180c565b916000526020600020900160005b604080519081016040908152600160a060020a033316600090815260116020908152919020546001608060020a0316825267ffffffffffffffff871690820152919050815181546fffffffffffffffffffffffffffffffff19166001608060020a03919091161781556020820151815467ffffffffffffffff91909116608060020a026000805160206118738339815191529091161790555050600160a060020a0385166000908152601360205260409020805460018101611267838261180c565b916000526020600020900160005b604080519081016040526001608060020a038816815267ffffffffffffffff86166020820152919050815181546fffffffffffffffffffffffffffffffff19166001608060020a03919091161781556020820151815467ffffffffffffffff91909116608060020a026000805160206118738339815191529091161790555060019350505b5b505092915050565b600061130f8242611640565b90505b919050565b600d54600a544290611346906301e133809061133a90849063ffffffff6114b016565b9063ffffffff6117ce16565b151561136b57600d546113649061067202606463ffffffff6117ce16565b915061102e565b6113946301e1338061133a600a54846114b090919063ffffffff16565b9063ffffffff6117ce16565b600114156113bb57600d546113649061030202606463ffffffff6117ce16565b915061102e565b6113e46301e1338061133a600a54846114b090919063ffffffff16565b9063ffffffff6117ce16565b6002141561102e57600d54611404906101b302606463ffffffff6117ce16565b91505b5b5b5b5090565b600b5481565b60095481565b600160a060020a038083166000908152601260209081526040808320938516835292905220545b92915050565b600c5481565b600d5481565b60045433600160a060020a0390811691161461146e57600080fd5b600160a060020a038116151561148357600080fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b50565b6000828211156114bc57fe5b508082035b92915050565b6000828201838110156114d657fe5b8091505b5092915050565b600080600080600a5442101580156114fb57506000600a54115b151561150657600080fd5b4292506115138584611640565b9150600082116115265760009350611638565b600d5490506115546301e1338061133a600a54866114b090919063ffffffff16565b9063ffffffff6117ce16565b151561157957600d546115729061067202606463ffffffff6117ce16565b9050611615565b6115a26301e1338061133a600a54866114b090919063ffffffff16565b9063ffffffff6117ce16565b600114156115c957600d546115729061030202606463ffffffff6117ce16565b9050611615565b6115f26301e1338061133a600a54866114b090919063ffffffff16565b9063ffffffff6117ce16565b6002141561161557600d54611612906101b302606463ffffffff6117ce16565b90505b5b5b611635600754600a0a61016d028284026117ce90919063ffffffff16565b93505b505050919050565b600160a060020a0382166000908152601360205260408120548190819081901161166d57600092506112fa565b600091505b600160a060020a0385166000908152601360205260409020548210156112fa57600b54600160a060020a038616600090815260136020526040902080546116e6929190859081106116bf57fe5b906000526020600020900160005b5054608060020a900467ffffffffffffffff16906114c7565b8410156116f2576117ba565b600160a060020a0385166000908152601360205260409020805461174391908490811061171b57fe5b906000526020600020900160005b50548590608060020a900467ffffffffffffffff166114b0565b9050600c548111156117545750600c545b6117b761176a826201518063ffffffff6117ce16565b600160a060020a038716600090815260136020526040902080548590811061178e57fe5b906000526020600020900160005b505485916001608060020a039091160263ffffffff6114c716565b92505b600190910190611672565b5b505092915050565b60008082848115156117dc57fe5b0490508091505b5092915050565b5080546000825590600052602060002090810190610a9a9190611836565b5b50565b815481835581811511610d5157600083815260209020610d51918101908301611836565b5b505050565b610ac491905b8082111561102e57805477ffffffffffffffffffffffffffffffffffffffffffffffff1916815560010161183c565b5090565b905600ffffffffffffffff0000000000000000ffffffffffffffffffffffffffffffffa165627a7a723058200c09aa0335e379e3b87aaf6a88ed138416899818b91ce6f8962589498347d6340029"}