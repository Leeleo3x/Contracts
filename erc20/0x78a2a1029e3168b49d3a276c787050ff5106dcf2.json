{"Runs": "200", "SwarmSource": "bzzr://2fb8666c5b350530e56fda40cc4df82598554c99660088caf60ea521dee24ebb", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isICORunning\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"manualWithdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"manualWithdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensForCrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensForOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"},{\"name\":\"exchangeRateInWei\",\"type\":\"uint256\"},{\"name\":\"TokensAllocationForICO\",\"type\":\"uint256\"}],\"name\":\"startIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newExchangeRate\",\"type\":\"uint256\"}],\"name\":\"setICOExchangeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensForTeam\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.24+commit.e67f0147", "ConstructorArguments": "", "SourceCode": "pragma solidity 0.4.24;\r\n// ----------------------------------------------------------------------------\r\n// 'Ezoow' contract\r\n//\r\n// Deployed to : 0x7acA75682eDd35355917B8bdDD85fc0821b3cc8f\r\n// Symbol      : EZW\r\n// Name        : Ezoow\r\n// Total supply: 15,000,000,000\r\n// Decimals    : 18\r\n//\r\n// Copyright (c) 2018 Ezoow Inc. (https://ezoow.com) The MIT Licence.\r\n// Contract designed by: GDO Infotech Pvt Ltd (https://GDO.co.in) \r\n// ----------------------------------------------------------------------------\r\n   \r\n    /**\r\n     * @title SafeMath\r\n     * @dev Math operations with safety checks that throw on error\r\n     */\r\n    library SafeMath {\r\n      function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n          return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n      }\r\n    \r\n      function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n      }\r\n    \r\n      function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n      }\r\n    \r\n      function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n      }\r\n    }\r\n    \r\n    contract owned {\r\n        address public owner;\r\n    \tusing SafeMath for uint256;\r\n    \t\r\n        constructor() public {\r\n            owner = msg.sender;\r\n        }\r\n    \r\n        modifier onlyOwner {\r\n            require(msg.sender == owner);\r\n            _;\r\n        }\r\n    \r\n        function transferOwnership(address newOwner) onlyOwner public {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n    \r\n    interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external ; }\r\n    \r\n    contract TokenERC20 {\r\n        // Public variables of the token\r\n        using SafeMath for uint256;\r\n    \tstring public name = \"EZOOW\";\r\n        string public symbol = \"EZW\";\r\n        uint8 public decimals = 18;         // 18 decimals is the strongly suggested default, avoid changing it\r\n        uint256 public totalSupply          = 15000000000 * (1 ether);   \r\n        uint256 public tokensForCrowdsale   = 10000000000 * (1 ether);\r\n        uint256 public tokensForTeam        = 4000000000  * (1 ether);\r\n        uint256 public tokensForOwner       = 1000000000  * (1 ether);\r\n        \r\n\t\taddress public teamWallet = 0x7acA75682eDd35355917B8bdDD85fc0821b3cc8f;\r\n    \r\n        // This creates an array with all balances\r\n        mapping (address => uint256) public balanceOf;\r\n        mapping (address => mapping (address => uint256)) public allowance;\r\n    \r\n        // This generates a public event on the blockchain that will notify clients\r\n        event Transfer(address indexed from, address indexed to, uint256 value);\r\n    \r\n        // This notifies clients about the amount burnt\r\n        event Burn(address indexed from, uint256 value);\r\n    \r\n        /**\r\n         * Constrctor function\r\n         *\r\n         * Initializes contract with initial supply tokens to the creator of the contract\r\n         */\r\n        constructor() public {\r\n\t\t\t \r\n            balanceOf[this] = tokensForCrowdsale;          // 10 Billion will remain in contract for crowdsale\r\n            balanceOf[teamWallet] = tokensForTeam;         // 4 Billion will be allocated to Team\r\n            balanceOf[msg.sender] = tokensForOwner;        // 1 Billon will be sent to contract owner\r\n\r\n        }\r\n    \r\n        /**\r\n         * Internal transfer, only can be called by this contract\r\n         */\r\n        function _transfer(address _from, address _to, uint _value) internal {\r\n            // Prevent transfer to 0x0 address. Use burn() instead\r\n            require(_to != 0x0);\r\n            // Check if the sender has enough\r\n            require(balanceOf[_from] >= _value);\r\n            // Check for overflows\r\n            require(balanceOf[_to].add(_value) > balanceOf[_to]);\r\n            // Save this for an assertion in the future\r\n            uint previousBalances = balanceOf[_from].add(balanceOf[_to]);\r\n            // Subtract from the sender\r\n            balanceOf[_from] = balanceOf[_from].sub(_value);\r\n            // Add the same to the recipient\r\n            balanceOf[_to] = balanceOf[_to].add(_value);\r\n            emit Transfer(_from, _to, _value);\r\n            // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n            assert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);\r\n        }\r\n    \r\n        /**\r\n         * Transfer tokens\r\n         *\r\n         * Send `_value` tokens to `_to` from your account\r\n         *\r\n         * @param _to The address of the recipient\r\n         * @param _value the amount to send\r\n         */\r\n        function transfer(address _to, uint256 _value) public {\r\n            _transfer(msg.sender, _to, _value);\r\n        }\r\n    \r\n        /**\r\n         * Transfer tokens from other address\r\n         *\r\n         * Send `_value` tokens to `_to` in behalf of `_from`\r\n         *\r\n         * @param _from The address of the sender\r\n         * @param _to The address of the recipient\r\n         * @param _value the amount to send\r\n         */\r\n        function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n            require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n            _transfer(_from, _to, _value);\r\n            return true;\r\n        }\r\n    \r\n        /**\r\n         * Set allowance for other address\r\n         *\r\n         * Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n         *\r\n         * @param _spender The address authorized to spend\r\n         * @param _value the max amount they can spend\r\n         */\r\n        function approve(address _spender, uint256 _value) public\r\n            returns (bool success) {\r\n            allowance[msg.sender][_spender] = _value;\r\n            return true;\r\n        }\r\n    \r\n        /**\r\n         * Set allowance for other address and notify\r\n         *\r\n         * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\r\n         *\r\n         * @param _spender The address authorized to spend\r\n         * @param _value the max amount they can spend\r\n         * @param _extraData some extra information to send to the approved contract\r\n         */\r\n        function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n            public\r\n            returns (bool success) {\r\n            tokenRecipient spender = tokenRecipient(_spender);\r\n            if (approve(_spender, _value)) {\r\n                spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n                return true;\r\n            }\r\n        }\r\n    \r\n        /**\r\n         * Destroy tokens\r\n         *\r\n         * Remove `_value` tokens from the system irreversibly\r\n         *\r\n         * @param _value the amount of money to burn\r\n         */\r\n        function burn(uint256 _value) public returns (bool success) {\r\n            require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\r\n            balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);            // Subtract from the sender\r\n            totalSupply = totalSupply.sub(_value);                      // Updates totalSupply\r\n           emit Burn(msg.sender, _value);\r\n            return true;\r\n        }\r\n    \r\n        /**\r\n         * Destroy tokens from other account\r\n         *\r\n         * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n         *\r\n         * @param _from the address of the sender\r\n         * @param _value the amount of money to burn\r\n         */\r\n        function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n            require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\r\n            require(_value <= allowance[_from][msg.sender]);    // Check allowance\r\n            balanceOf[_from] = balanceOf[_from].sub(_value);                         // Subtract from the targeted balance\r\n            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);             // Subtract from the sender's allowance\r\n            totalSupply = totalSupply.sub(_value);                              // Update totalSupply\r\n          emit  Burn(_from, _value);\r\n            return true;\r\n        }\r\n    }\r\n    \r\n    /******************************************/\r\n    /*       ADVANCED TOKEN STARTS HERE       */\r\n    /******************************************/\r\n    \r\n    contract Ezoow is owned, TokenERC20 {\r\n\r\n    \tusing SafeMath for uint256;\r\n    \tuint256 public startTime = 0; //client wants ICO run Infinite time, so startTimeStamp 0\r\n    \tuint256 public endTime = 9999999999999999999999; //and entTimeStamp higher number\r\n\t\tuint256 public exchangeRate = 20000000; // this is how many tokens for 1 Ether\r\n\t\tuint256 public tokensSold = 0; // how many tokens sold in crowdsale\r\n\t\t\r\n        mapping (address => bool) public frozenAccount;\r\n    \r\n        /* This generates a public event on the blockchain that will notify clients */\r\n        event FrozenFunds(address target, bool frozen);\r\n    \r\n        /* Initializes contract with initial supply tokens to the creator of the contract */\r\n        constructor() TokenERC20() public {}\r\n\r\n        /* Internal transfer, only can be called by this contract */\r\n        function _transfer(address _from, address _to, uint _value) internal {\r\n            require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\r\n            require (balanceOf[_from] >= _value);               // Check if the sender has enough\r\n            require (balanceOf[_to].add(_value) >= balanceOf[_to]); // Check for overflows\r\n            require(!frozenAccount[_from]);                     // Check if sender is frozen\r\n            require(!frozenAccount[_to]);                       // Check if recipient is frozen\r\n            balanceOf[_from] = balanceOf[_from].sub(_value);                         // Subtract from the sender\r\n            balanceOf[_to] = balanceOf[_to].add(_value);                           // Add the same to the recipient\r\n            emit Transfer(_from, _to, _value);\r\n        }\r\n        \r\n        //@dev fallback function, only accepts ether if ICO is running or Reject\r\n        function () payable public {\r\n            require(endTime > now);\r\n            require(startTime < now);\r\n            uint ethervalueWEI=msg.value;\r\n            // calculate token amount to be sent\r\n            uint256 token = ethervalueWEI.mul(exchangeRate); //weiamount * price\r\n            tokensSold = tokensSold.add(token);\r\n            _transfer(this, msg.sender, token);              // makes the transfers\r\n            forwardEherToOwner();\r\n        }\r\n        \r\n        //Automatocally forwards ether from smart contract to owner address\r\n        function forwardEherToOwner() internal {\r\n            owner.transfer(msg.value); \r\n          }\r\n        \r\n        //function to start an ICO.\r\n        //It requires: start and end timestamp, exchange rate in Wei, and token amounts to allocate for the ICO\r\n\t\t//It will transfer allocated amount to the smart contract\r\n\t\tfunction startIco(uint256 start,uint256 end, uint256 exchangeRateInWei, uint256 TokensAllocationForICO) onlyOwner public {\r\n\t\t\trequire(start < end);\r\n\t\t\tuint256 tokenAmount = TokensAllocationForICO.mul(1 ether);\r\n\t\t\trequire(balanceOf[msg.sender] > tokenAmount);\r\n\t\t\tstartTime=start;\r\n\t\t\tendTime=end;\r\n\t\t\texchangeRate = exchangeRateInWei;\r\n\t\t\tapprove(this,tokenAmount);\r\n\t\t\ttransfer(this,tokenAmount);\r\n        }    \t\r\n        \r\n        //Stops an ICO.\r\n        //It will also transfer remaining tokens to owner\r\n\t\tfunction stopICO() onlyOwner public{\r\n            endTime = 0;\r\n            uint256 tokenAmount=balanceOf[this];\r\n            _transfer(this, msg.sender, tokenAmount);\r\n        }\r\n        \r\n        //function to check wheter ICO is running or not.\r\n        function isICORunning() public view returns(bool){\r\n            if(endTime > now && startTime < now){\r\n                return true;                \r\n            }else{\r\n                return false;\r\n            }\r\n        }\r\n        \r\n        //Function to set ICO Exchange rate. \r\n    \tfunction setICOExchangeRate(uint256 newExchangeRate) onlyOwner public {\r\n\t\t\texchangeRate=newExchangeRate;\r\n        }\r\n        \r\n        //Just in case, owner wants to transfer Tokens from contract to owner address\r\n        function manualWithdrawToken(uint256 _amount) onlyOwner public {\r\n            uint256 tokenAmount = _amount.mul(1 ether);\r\n            _transfer(this, msg.sender, tokenAmount);\r\n          }\r\n          \r\n        //Just in case, owner wants to transfer Ether from contract to owner address\r\n        function manualWithdrawEther()onlyOwner public{\r\n\t\t\tuint256 amount=address(this).balance;\r\n\t\t\towner.transfer(amount);\r\n\t\t}\r\n\t\t\r\n        /// @notice Create `mintedAmount` tokens and send it to `target`\r\n        /// @param target Address to receive the tokens\r\n        /// @param mintedAmount the amount of tokens it will receive\r\n        function mintToken(address target, uint256 mintedAmount) onlyOwner public {\r\n            balanceOf[target] = balanceOf[target].add(mintedAmount);\r\n            totalSupply = totalSupply.add(mintedAmount);\r\n           emit Transfer(0, this, mintedAmount);\r\n           emit Transfer(this, target, mintedAmount);\r\n        }\r\n    \r\n        /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\r\n        /// @param target Address to be frozen\r\n        /// @param freeze either to freeze it or not\r\n        function freezeAccount(address target, bool freeze) onlyOwner public {\r\n            frozenAccount[target] = freeze;\r\n          emit  FrozenFunds(target, freeze);\r\n        }\r\n\r\n\r\n\r\n    }", "OptimizationUsed": "1", "ContractName": "Ezoow", "ByteCode": ""}