{"Runs": "200", "SwarmSource": "bzzr://a96176ff4e5138ab43d61cbb44cc0c7379f7036c871d64505e164b6515e22d66", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pixelByCoordinate\",\"outputs\":[{\"name\":\"id\",\"type\":\"bytes32\"},{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"auctionId\",\"type\":\"bytes32\"},{\"name\":\"contentData\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"InterfaceId_ERC165\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newEFPercentage\",\"type\":\"uint256\"},{\"name\":\"_newTaxCollectorPercentage\",\"type\":\"uint256\"}],\"name\":\"updateTaxPercentages\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_x\",\"type\":\"uint256[]\"},{\"name\":\"_y\",\"type\":\"uint256[]\"},{\"name\":\"_price\",\"type\":\"uint256[]\"},{\"name\":\"_contentData\",\"type\":\"bytes32[]\"}],\"name\":\"buyUninitializedPixelBlocks\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastPaidTaxes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"auctionById\",\"outputs\":[{\"name\":\"auctionId\",\"type\":\"bytes32\"},{\"name\":\"blockId\",\"type\":\"bytes32\"},{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"},{\"name\":\"currentPrice\",\"type\":\"uint256\"},{\"name\":\"currentLeader\",\"type\":\"address\"},{\"name\":\"endTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"isInAuction\",\"type\":\"bool\"}],\"name\":\"transferTaxes\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBalanceAtLastPaid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_x\",\"type\":\"uint256[]\"},{\"name\":\"_y\",\"type\":\"uint256[]\"},{\"name\":\"_price\",\"type\":\"uint256[]\"}],\"name\":\"setPixelBlockPrices\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"valueHeld\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_x\",\"type\":\"uint256[]\"},{\"name\":\"_y\",\"type\":\"uint256[]\"},{\"name\":\"_price\",\"type\":\"uint256[]\"},{\"name\":\"_contentData\",\"type\":\"bytes32[]\"}],\"name\":\"buyPixelBlocks\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethFoundation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_x\",\"type\":\"uint256\"},{\"name\":\"_y\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPixelBlockPrice\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_x\",\"type\":\"uint256\"},{\"name\":\"_y\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_contentData\",\"type\":\"bytes32\"}],\"name\":\"buyUninitializedPixelBlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"xMax\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"addFunds\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentFoundationContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethFoundationPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"taxPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"taxCollectorPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_x\",\"type\":\"uint256\"},{\"name\":\"_y\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"taxCollector\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_x\",\"type\":\"uint256\"},{\"name\":\"_y\",\"type\":\"uint256\"},{\"name\":\"_bid\",\"type\":\"uint256\"}],\"name\":\"bidInAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCollector\",\"type\":\"address\"}],\"name\":\"updateCollector\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_x\",\"type\":\"uint256\"},{\"name\":\"_y\",\"type\":\"uint256\"},{\"name\":\"_contentData\",\"type\":\"bytes32\"}],\"name\":\"changeContentData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_x\",\"type\":\"uint256\"},{\"name\":\"_y\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_contentData\",\"type\":\"bytes32\"}],\"name\":\"buyPixelBlock\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userHasPositveBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_x\",\"type\":\"uint256\"},{\"name\":\"_y\",\"type\":\"uint256\"}],\"name\":\"encodeTokenId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_x\",\"type\":\"uint256\"},{\"name\":\"_y\",\"type\":\"uint256\"}],\"name\":\"endDutchAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payoutEF\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"yMax\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_x\",\"type\":\"uint256\"},{\"name\":\"_y\",\"type\":\"uint256\"}],\"name\":\"beginDutchAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_xMax\",\"type\":\"uint256\"},{\"name\":\"_yMax\",\"type\":\"uint256\"},{\"name\":\"_taxPercentage\",\"type\":\"uint256\"},{\"name\":\"_taxCollector\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"x\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"y\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"contentData\",\"type\":\"bytes32\"}],\"name\":\"BuyPixel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"x\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"y\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"SetPixelPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"pixelId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"auctionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"x\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"y\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"BeginDutchAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"pixelId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"auctionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountBet\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeBet\",\"type\":\"uint256\"}],\"name\":\"UpdateAuctionBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"pixelId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"x\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"EndDutchAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"pixelId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"x\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"y\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newContentData\",\"type\":\"bytes32\"}],\"name\":\"UpdateContentData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newCollector\",\"type\":\"address\"}],\"name\":\"UpdateCollector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newEFPercentage\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"newTaxCollectorPercentage\",\"type\":\"uint256\"}],\"name\":\"UpdateTaxPercentages\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.24+commit.e67f0147", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000140000000000000000000000005e0a1c878f4809b7d51a7ec6a259b50dd5b2c3cd", "SourceCode": "pragma solidity ^0.4.24;\r\n\r\n// File: openzeppelin-solidity/contracts/introspection/ERC165.sol\r\n\r\n/**\r\n * @title ERC165\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n */\r\ninterface ERC165 {\r\n\r\n  /**\r\n   * @notice Query if a contract implements an interface\r\n   * @param _interfaceId The interface identifier, as specified in ERC-165\r\n   * @dev Interface identification is specified in ERC-165. This function\r\n   * uses less than 30,000 gas.\r\n   */\r\n  function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/ERC721Basic.sol\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic interface\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Basic is ERC165 {\r\n\r\n  bytes4 internal constant InterfaceId_ERC721 = 0x80ac58cd;\r\n  /*\r\n   * 0x80ac58cd ===\r\n   *   bytes4(keccak256('balanceOf(address)')) ^\r\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\r\n   *   bytes4(keccak256('approve(address,uint256)')) ^\r\n   *   bytes4(keccak256('getApproved(uint256)')) ^\r\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\r\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\r\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\r\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\r\n   */\r\n\r\n  bytes4 internal constant InterfaceId_ERC721Exists = 0x4f558e79;\r\n  /*\r\n   * 0x4f558e79 ===\r\n   *   bytes4(keccak256('exists(uint256)'))\r\n   */\r\n\r\n  bytes4 internal constant InterfaceId_ERC721Enumerable = 0x780e9d63;\r\n  /**\r\n   * 0x780e9d63 ===\r\n   *   bytes4(keccak256('totalSupply()')) ^\r\n   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\r\n   *   bytes4(keccak256('tokenByIndex(uint256)'))\r\n   */\r\n\r\n  bytes4 internal constant InterfaceId_ERC721Metadata = 0x5b5e139f;\r\n  /**\r\n   * 0x5b5e139f ===\r\n   *   bytes4(keccak256('name()')) ^\r\n   *   bytes4(keccak256('symbol()')) ^\r\n   *   bytes4(keccak256('tokenURI(uint256)'))\r\n   */\r\n\r\n  event Transfer(\r\n    address indexed _from,\r\n    address indexed _to,\r\n    uint256 indexed _tokenId\r\n  );\r\n  event Approval(\r\n    address indexed _owner,\r\n    address indexed _approved,\r\n    uint256 indexed _tokenId\r\n  );\r\n  event ApprovalForAll(\r\n    address indexed _owner,\r\n    address indexed _operator,\r\n    bool _approved\r\n  );\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 _balance);\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n  function exists(uint256 _tokenId) public view returns (bool _exists);\r\n\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function getApproved(uint256 _tokenId)\r\n    public view returns (address _operator);\r\n\r\n  function setApprovalForAll(address _operator, bool _approved) public;\r\n  function isApprovedForAll(address _owner, address _operator)\r\n    public view returns (bool);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId)\r\n    public;\r\n\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public;\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/ERC721.sol\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Enumerable is ERC721Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function tokenOfOwnerByIndex(\r\n    address _owner,\r\n    uint256 _index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256 _tokenId);\r\n\r\n  function tokenByIndex(uint256 _index) public view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Metadata is ERC721Basic {\r\n  function name() external view returns (string _name);\r\n  function symbol() external view returns (string _symbol);\r\n  function tokenURI(uint256 _tokenId) public view returns (string);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/ERC721Receiver.sol\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ncontract ERC721Receiver {\r\n  /**\r\n   * @dev Magic value to be returned upon successful reception of an NFT\r\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`,\r\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n   */\r\n  bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n  /**\r\n   * @notice Handle the receipt of an NFT\r\n   * @dev The ERC721 smart contract calls this function on the recipient\r\n   * after a `safetransfer`. This function MAY throw to revert and reject the\r\n   * transfer. Return of other than the magic value MUST result in the\r\n   * transaction being reverted.\r\n   * Note: the contract address is always the message sender.\r\n   * @param _operator The address which called `safeTransferFrom` function\r\n   * @param _from The address which previously owned the token\r\n   * @param _tokenId The NFT identifier which is being transferred\r\n   * @param _data Additional data with no specified format\r\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n   */\r\n  function onERC721Received(\r\n    address _operator,\r\n    address _from,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n    returns(bytes4);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/AddressUtils.sol\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   * as the code is not actually created until after the constructor finishes.\r\n   * @param _addr address to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address _addr) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(_addr) }\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/introspection/SupportsInterfaceWithLookup.sol\r\n\r\n/**\r\n * @title SupportsInterfaceWithLookup\r\n * @author Matt Condon (@shrugs)\r\n * @dev Implements ERC165 using a lookup table.\r\n */\r\ncontract SupportsInterfaceWithLookup is ERC165 {\r\n\r\n  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\r\n  /**\r\n   * 0x01ffc9a7 ===\r\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\r\n   */\r\n\r\n  /**\r\n   * @dev a mapping of interface id to whether or not it's supported\r\n   */\r\n  mapping(bytes4 => bool) internal supportedInterfaces;\r\n\r\n  /**\r\n   * @dev A contract implementing SupportsInterfaceWithLookup\r\n   * implement ERC165 itself\r\n   */\r\n  constructor()\r\n    public\r\n  {\r\n    _registerInterface(InterfaceId_ERC165);\r\n  }\r\n\r\n  /**\r\n   * @dev implement supportsInterface(bytes4) using a lookup table\r\n   */\r\n  function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool)\r\n  {\r\n    return supportedInterfaces[_interfaceId];\r\n  }\r\n\r\n  /**\r\n   * @dev private method for registering an interface\r\n   */\r\n  function _registerInterface(bytes4 _interfaceId)\r\n    internal\r\n  {\r\n    require(_interfaceId != 0xffffffff);\r\n    supportedInterfaces[_interfaceId] = true;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/ERC721BasicToken.sol\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic implementation\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721BasicToken is SupportsInterfaceWithLookup, ERC721Basic {\r\n\r\n  using SafeMath for uint256;\r\n  using AddressUtils for address;\r\n\r\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n  bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n  // Mapping from token ID to owner\r\n  mapping (uint256 => address) internal tokenOwner;\r\n\r\n  // Mapping from token ID to approved address\r\n  mapping (uint256 => address) internal tokenApprovals;\r\n\r\n  // Mapping from owner to number of owned token\r\n  mapping (address => uint256) internal ownedTokensCount;\r\n\r\n  // Mapping from owner to operator approvals\r\n  mapping (address => mapping (address => bool)) internal operatorApprovals;\r\n\r\n  constructor()\r\n    public\r\n  {\r\n    // register the supported interfaces to conform to ERC721 via ERC165\r\n    _registerInterface(InterfaceId_ERC721);\r\n    _registerInterface(InterfaceId_ERC721Exists);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the balance of the specified address\r\n   * @param _owner address to query the balance of\r\n   * @return uint256 representing the amount owned by the passed address\r\n   */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    require(_owner != address(0));\r\n    return ownedTokensCount[_owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the owner of the specified token ID\r\n   * @param _tokenId uint256 ID of the token to query the owner of\r\n   * @return owner address currently marked as the owner of the given token ID\r\n   */\r\n  function ownerOf(uint256 _tokenId) public view returns (address) {\r\n    address owner = tokenOwner[_tokenId];\r\n    require(owner != address(0));\r\n    return owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the specified token exists\r\n   * @param _tokenId uint256 ID of the token to query the existence of\r\n   * @return whether the token exists\r\n   */\r\n  function exists(uint256 _tokenId) public view returns (bool) {\r\n    address owner = tokenOwner[_tokenId];\r\n    return owner != address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Approves another address to transfer the given token ID\r\n   * The zero address indicates there is no approved address.\r\n   * There can only be one approved address per token at a given time.\r\n   * Can only be called by the token owner or an approved operator.\r\n   * @param _to address to be approved for the given token ID\r\n   * @param _tokenId uint256 ID of the token to be approved\r\n   */\r\n  function approve(address _to, uint256 _tokenId) public {\r\n    address owner = ownerOf(_tokenId);\r\n    require(_to != owner);\r\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n    tokenApprovals[_tokenId] = _to;\r\n    emit Approval(owner, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the approved address for a token ID, or zero if no address set\r\n   * @param _tokenId uint256 ID of the token to query the approval of\r\n   * @return address currently approved for the given token ID\r\n   */\r\n  function getApproved(uint256 _tokenId) public view returns (address) {\r\n    return tokenApprovals[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Sets or unsets the approval of a given operator\r\n   * An operator is allowed to transfer all tokens of the sender on their behalf\r\n   * @param _to operator address to set the approval\r\n   * @param _approved representing the status of the approval to be set\r\n   */\r\n  function setApprovalForAll(address _to, bool _approved) public {\r\n    require(_to != msg.sender);\r\n    operatorApprovals[msg.sender][_to] = _approved;\r\n    emit ApprovalForAll(msg.sender, _to, _approved);\r\n  }\r\n\r\n  /**\r\n   * @dev Tells whether an operator is approved by a given owner\r\n   * @param _owner owner address which you want to query the approval of\r\n   * @param _operator operator address which you want to query the approval of\r\n   * @return bool whether the given operator is approved by the given owner\r\n   */\r\n  function isApprovedForAll(\r\n    address _owner,\r\n    address _operator\r\n  )\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return operatorApprovals[_owner][_operator];\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers the ownership of a given token ID to another address\r\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n  {\r\n    require(isApprovedOrOwner(msg.sender, _tokenId));\r\n    require(_from != address(0));\r\n    require(_to != address(0));\r\n\r\n    clearApproval(_from, _tokenId);\r\n    removeTokenFrom(_from, _tokenId);\r\n    addTokenTo(_to, _tokenId);\r\n\r\n    emit Transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * If the target address is a contract, it must implement `onERC721Received`,\r\n   * which is called upon a safe transfer, and return the magic value\r\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n   * the transfer is reverted.\r\n   *\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n  {\r\n    // solium-disable-next-line arg-overflow\r\n    safeTransferFrom(_from, _to, _tokenId, \"\");\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * If the target address is a contract, it must implement `onERC721Received`,\r\n   * which is called upon a safe transfer, and return the magic value\r\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n   * the transfer is reverted.\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes data to send along with a safe transfer check\r\n   */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n  {\r\n    transferFrom(_from, _to, _tokenId);\r\n    // solium-disable-next-line arg-overflow\r\n    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the given spender can transfer a given token ID\r\n   * @param _spender address of the spender to query\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @return bool whether the msg.sender is approved for the given token ID,\r\n   *  is an operator of the owner, or is the owner of the token\r\n   */\r\n  function isApprovedOrOwner(\r\n    address _spender,\r\n    uint256 _tokenId\r\n  )\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    address owner = ownerOf(_tokenId);\r\n    // Disable solium check because of\r\n    // https://github.com/duaraghav8/Solium/issues/175\r\n    // solium-disable-next-line operator-whitespace\r\n    return (\r\n      _spender == owner ||\r\n      getApproved(_tokenId) == _spender ||\r\n      isApprovedForAll(owner, _spender)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * Reverts if the given token ID already exists\r\n   * @param _to The address that will own the minted token\r\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    require(_to != address(0));\r\n    addTokenTo(_to, _tokenId);\r\n    emit Transfer(address(0), _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * Reverts if the token does not exist\r\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    clearApproval(_owner, _tokenId);\r\n    removeTokenFrom(_owner, _tokenId);\r\n    emit Transfer(_owner, address(0), _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to clear current approval of a given token ID\r\n   * Reverts if the given address is not indeed the owner of the token\r\n   * @param _owner owner of the token\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   */\r\n  function clearApproval(address _owner, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _owner);\r\n    if (tokenApprovals[_tokenId] != address(0)) {\r\n      tokenApprovals[_tokenId] = address(0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * @param _to address representing the new owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    require(tokenOwner[_tokenId] == address(0));\r\n    tokenOwner[_tokenId] = _to;\r\n    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _from);\r\n    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\r\n    tokenOwner[_tokenId] = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to invoke `onERC721Received` on a target address\r\n   * The call is not executed if the target address is not a contract\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _to target address that will receive the tokens\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes optional data to send along with the call\r\n   * @return whether the call correctly returned the expected magic value\r\n   */\r\n  function checkAndCallSafeTransfer(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    internal\r\n    returns (bool)\r\n  {\r\n    if (!_to.isContract()) {\r\n      return true;\r\n    }\r\n    bytes4 retval = ERC721Receiver(_to).onERC721Received(\r\n      msg.sender, _from, _tokenId, _data);\r\n    return (retval == ERC721_RECEIVED);\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/ERC721Token.sol\r\n\r\n/**\r\n * @title Full ERC721 Token\r\n * This implementation includes all the required and some optional functionality of the ERC721 standard\r\n * Moreover, it includes approve all functionality using operator terminology\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Token is SupportsInterfaceWithLookup, ERC721BasicToken, ERC721 {\r\n\r\n  // Token name\r\n  string internal name_;\r\n\r\n  // Token symbol\r\n  string internal symbol_;\r\n\r\n  // Mapping from owner to list of owned token IDs\r\n  mapping(address => uint256[]) internal ownedTokens;\r\n\r\n  // Mapping from token ID to index of the owner tokens list\r\n  mapping(uint256 => uint256) internal ownedTokensIndex;\r\n\r\n  // Array with all token ids, used for enumeration\r\n  uint256[] internal allTokens;\r\n\r\n  // Mapping from token id to position in the allTokens array\r\n  mapping(uint256 => uint256) internal allTokensIndex;\r\n\r\n  // Optional mapping for token URIs\r\n  mapping(uint256 => string) internal tokenURIs;\r\n\r\n  /**\r\n   * @dev Constructor function\r\n   */\r\n  constructor(string _name, string _symbol) public {\r\n    name_ = _name;\r\n    symbol_ = _symbol;\r\n\r\n    // register the supported interfaces to conform to ERC721 via ERC165\r\n    _registerInterface(InterfaceId_ERC721Enumerable);\r\n    _registerInterface(InterfaceId_ERC721Metadata);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token name\r\n   * @return string representing the token name\r\n   */\r\n  function name() external view returns (string) {\r\n    return name_;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token symbol\r\n   * @return string representing the token symbol\r\n   */\r\n  function symbol() external view returns (string) {\r\n    return symbol_;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns an URI for a given token ID\r\n   * Throws if the token ID does not exist. May return an empty string.\r\n   * @param _tokenId uint256 ID of the token to query\r\n   */\r\n  function tokenURI(uint256 _tokenId) public view returns (string) {\r\n    require(exists(_tokenId));\r\n    return tokenURIs[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\r\n   * @param _owner address owning the tokens list to be accessed\r\n   * @param _index uint256 representing the index to be accessed of the requested tokens list\r\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\r\n   */\r\n  function tokenOfOwnerByIndex(\r\n    address _owner,\r\n    uint256 _index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    require(_index < balanceOf(_owner));\r\n    return ownedTokens[_owner][_index];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the total amount of tokens stored by the contract\r\n   * @return uint256 representing the total amount of tokens\r\n   */\r\n  function totalSupply() public view returns (uint256) {\r\n    return allTokens.length;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of all the tokens in this contract\r\n   * Reverts if the index is greater or equal to the total number of tokens\r\n   * @param _index uint256 representing the index to be accessed of the tokens list\r\n   * @return uint256 token ID at the given index of the tokens list\r\n   */\r\n  function tokenByIndex(uint256 _index) public view returns (uint256) {\r\n    require(_index < totalSupply());\r\n    return allTokens[_index];\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to set the token URI for a given token\r\n   * Reverts if the token ID does not exist\r\n   * @param _tokenId uint256 ID of the token to set its URI\r\n   * @param _uri string URI to assign\r\n   */\r\n  function _setTokenURI(uint256 _tokenId, string _uri) internal {\r\n    require(exists(_tokenId));\r\n    tokenURIs[_tokenId] = _uri;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * @param _to address representing the new owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    super.addTokenTo(_to, _tokenId);\r\n    uint256 length = ownedTokens[_to].length;\r\n    ownedTokens[_to].push(_tokenId);\r\n    ownedTokensIndex[_tokenId] = length;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    super.removeTokenFrom(_from, _tokenId);\r\n\r\n    // To prevent a gap in the array, we store the last token in the index of the token to delete, and\r\n    // then delete the last slot.\r\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\r\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\r\n\r\n    ownedTokens[_from][tokenIndex] = lastToken;\r\n    // This also deletes the contents at the last position of the array\r\n    ownedTokens[_from].length--;\r\n\r\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\r\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\r\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\r\n\r\n    ownedTokensIndex[_tokenId] = 0;\r\n    ownedTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * Reverts if the given token ID already exists\r\n   * @param _to address the beneficiary that will own the minted token\r\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    super._mint(_to, _tokenId);\r\n\r\n    allTokensIndex[_tokenId] = allTokens.length;\r\n    allTokens.push(_tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * Reverts if the token does not exist\r\n   * @param _owner owner of the token to burn\r\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    super._burn(_owner, _tokenId);\r\n\r\n    // Clear metadata (if any)\r\n    if (bytes(tokenURIs[_tokenId]).length != 0) {\r\n      delete tokenURIs[_tokenId];\r\n    }\r\n\r\n    // Reorg all tokens array\r\n    uint256 tokenIndex = allTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = allTokens.length.sub(1);\r\n    uint256 lastToken = allTokens[lastTokenIndex];\r\n\r\n    allTokens[tokenIndex] = lastToken;\r\n    allTokens[lastTokenIndex] = 0;\r\n\r\n    allTokens.length--;\r\n    allTokensIndex[_tokenId] = 0;\r\n    allTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: contracts/HarbergerTaxable.sol\r\n\r\ncontract HarbergerTaxable is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public taxPercentage;\r\n  address public taxCollector;\r\n  address public ethFoundation;\r\n  uint256 public currentFoundationContribution;\r\n  uint256 public ethFoundationPercentage;\r\n  uint256 public taxCollectorPercentage;\r\n\r\n  event UpdateCollector(address indexed newCollector);\r\n  event UpdateTaxPercentages(uint256 indexed newEFPercentage, uint256 indexed newTaxCollectorPercentage);\r\n\r\n  constructor(uint256 _taxPercentage, address _taxCollector) public {\r\n    taxPercentage = _taxPercentage;\r\n    taxCollector = _taxCollector;\r\n    ethFoundation = 0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359;\r\n    ethFoundationPercentage = 20;\r\n    taxCollectorPercentage = 80;\r\n  }\r\n\r\n  // The total self-assessed value of user's assets\r\n  mapping(address => uint256) public valueHeld;\r\n\r\n  // Timestamp for the last time taxes were deducted from a user's account\r\n  mapping(address => uint256) public lastPaidTaxes;\r\n\r\n  // The amount of ETH a user can withdraw at the last time taxes were deducted from their account\r\n  mapping(address => uint256) public userBalanceAtLastPaid;\r\n\r\n  /**\r\n   * Modifiers\r\n   */\r\n\r\n  modifier hasPositveBalance(address user) {\r\n    require(userHasPositveBalance(user) == true, \"User has a negative balance\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * Public functions\r\n   */\r\n\r\n  function updateCollector(address _newCollector)\r\n    public\r\n    onlyOwner\r\n  {\r\n    require(_newCollector != address(0));\r\n    taxCollector == _newCollector;\r\n    emit UpdateCollector(_newCollector);\r\n  }\r\n\r\n  function updateTaxPercentages(uint256 _newEFPercentage, uint256 _newTaxCollectorPercentage)\r\n    public\r\n    onlyOwner\r\n  {\r\n    require(_newEFPercentage < 100);\r\n    require(_newTaxCollectorPercentage < 100);\r\n    require(_newEFPercentage.add(_newTaxCollectorPercentage) == 100);\r\n\r\n    ethFoundationPercentage = _newEFPercentage;\r\n    taxCollectorPercentage = _newTaxCollectorPercentage;\r\n    emit UpdateTaxPercentages(_newEFPercentage, _newTaxCollectorPercentage);\r\n  }\r\n\r\n  function addFunds()\r\n    public\r\n    payable\r\n  {\r\n    userBalanceAtLastPaid[msg.sender] = userBalanceAtLastPaid[msg.sender].add(msg.value);\r\n  }\r\n\r\n  function withdraw(uint256 value) public onlyOwner {\r\n    // Settle latest taxes\r\n    require(transferTaxes(msg.sender, false), \"User has a negative balance\");\r\n\r\n    // Subtract the withdrawn value from the user's account\r\n    userBalanceAtLastPaid[msg.sender] = userBalanceAtLastPaid[msg.sender].sub(value);\r\n\r\n    // Transfer remaining balance to msg.sender\r\n    msg.sender.transfer(value);\r\n  }\r\n\r\n  function userHasPositveBalance(address user) public view returns (bool) {\r\n    return userBalanceAtLastPaid[user] >= _taxesDue(user);\r\n  }\r\n\r\n  function userBalance(address user) public view returns (uint256) {\r\n    return userBalanceAtLastPaid[user].sub(_taxesDue(user));\r\n  }\r\n\r\n  // Transfers the taxes a user owes from their account to the taxCollector and resets lastPaidTaxes to now\r\n  function transferTaxes(address user, bool isInAuction) public returns (bool) {\r\n\r\n    if (isInAuction) {\r\n      return true;\r\n    }\r\n\r\n    uint256 taxesDue = _taxesDue(user);\r\n\r\n    // Make sure the user has enough funds to pay the taxesDue\r\n    if (userBalanceAtLastPaid[user] < taxesDue) {\r\n        return false;\r\n    }\r\n\r\n    // Transfer taxes due from this contract to the tax collector\r\n    _payoutTaxes(taxesDue);\r\n    // Update the user's lastPaidTaxes\r\n    lastPaidTaxes[user] = now;\r\n    // subtract the taxes paid from the user's balance\r\n    userBalanceAtLastPaid[user] = userBalanceAtLastPaid[user].sub(taxesDue);\r\n\r\n    return true;\r\n  }\r\n\r\n  function payoutEF()\r\n    public\r\n  {\r\n    uint256 uincornsRequirement = 2.014 ether;\r\n    require(currentFoundationContribution >= uincornsRequirement);\r\n\r\n    currentFoundationContribution = currentFoundationContribution.sub(uincornsRequirement);\r\n    ethFoundation.transfer(uincornsRequirement);\r\n  }\r\n\r\n  /**\r\n   * Internal functions\r\n   */\r\n\r\n  function _payoutTaxes(uint256 _taxesDue)\r\n    internal\r\n  {\r\n    uint256 foundationContribution = _taxesDue.mul(ethFoundationPercentage).div(100);\r\n    uint256 taxCollectorContribution = _taxesDue.mul(taxCollectorPercentage).div(100);\r\n\r\n    currentFoundationContribution += foundationContribution;\r\n\r\n    taxCollector.transfer(taxCollectorContribution);\r\n  }\r\n\r\n  // Calculate taxes due since the last time they had taxes deducted\r\n  // from their account or since they bought their first token.\r\n  function _taxesDue(address user) internal view returns (uint256) {\r\n    // Make sure user owns tokens\r\n    if (lastPaidTaxes[user] == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 timeElapsed = now.sub(lastPaidTaxes[user]);\r\n    return (valueHeld[user].mul(timeElapsed).div(365 days)).mul(taxPercentage).div(100);\r\n  }\r\n\r\n  function _addToValueHeld(address user, uint256 value) internal {\r\n    require(transferTaxes(user, false), \"User has a negative balance\");\r\n    require(userBalanceAtLastPaid[user] > 0);\r\n    valueHeld[user] = valueHeld[user].add(value);\r\n  }\r\n\r\n  function _subFromValueHeld(address user, uint256 value, bool isInAuction) internal {\r\n    require(transferTaxes(user, isInAuction), \"User has a negative balance\");\r\n    valueHeld[user] = valueHeld[user].sub(value);\r\n  }\r\n}\r\n\r\n// File: contracts/RadicalPixels.sol\r\n\r\n/**\r\n * @title RadicalPixels\r\n */\r\ncontract RadicalPixels is HarbergerTaxable, ERC721Token {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public   xMax;\r\n  uint256 public   yMax;\r\n  uint256 constant clearLow = 0xffffffffffffffffffffffffffffffff00000000000000000000000000000000;\r\n  uint256 constant clearHigh = 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff;\r\n  uint256 constant factor = 0x100000000000000000000000000000000;\r\n\r\n  struct Pixel {\r\n    // Id of the pixel block\r\n    bytes32 id;\r\n    // Owner of the pixel block\r\n    address seller;\r\n    // Pixel block x coordinate\r\n    uint256 x;\r\n    // Pixel block y coordinate\r\n    uint256 y;\r\n    // Pixel block price\r\n    uint256 price;\r\n    // Auction Id\r\n    bytes32 auctionId;\r\n    // Content data\r\n    bytes32 contentData;\r\n  }\r\n\r\n  struct Auction {\r\n    // Id of the auction\r\n    bytes32 auctionId;\r\n    // Id of the pixel block\r\n    bytes32 blockId;\r\n    // Pixel block x coordinate\r\n    uint256 x;\r\n    // Pixel block y coordinate\r\n    uint256 y;\r\n    // Current price\r\n    uint256 currentPrice;\r\n    // Current Leader\r\n    address currentLeader;\r\n    // End Time\r\n    uint256 endTime;\r\n  }\r\n\r\n  mapping(uint256 => mapping(uint256 => Pixel)) public pixelByCoordinate;\r\n  mapping(bytes32 => Auction) public auctionById;\r\n\r\n  /**\r\n   * Modifiers\r\n   */\r\n   modifier validRange(uint256 _x, uint256 _y)\r\n  {\r\n    require(_x < xMax, \"X coordinate is out of range\");\r\n    require(_y < yMax, \"Y coordinate is out of range\");\r\n    _;\r\n  }\r\n\r\n  modifier auctionNotOngoing(uint256 _x, uint256 _y)\r\n  {\r\n    Pixel memory pixel = pixelByCoordinate[_x][_y];\r\n    require(pixel.auctionId == 0);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * Events\r\n   */\r\n\r\n  event BuyPixel(\r\n    bytes32 indexed id,\r\n    address indexed seller,\r\n    address indexed buyer,\r\n    uint256 x,\r\n    uint256 y,\r\n    uint256 price,\r\n    bytes32 contentData\r\n  );\r\n\r\n  event SetPixelPrice(\r\n    bytes32 indexed id,\r\n    address indexed seller,\r\n    uint256 x,\r\n    uint256 y,\r\n    uint256 price\r\n  );\r\n\r\n  event BeginDutchAuction(\r\n    bytes32 indexed pixelId,\r\n    uint256 indexed tokenId,\r\n    bytes32 indexed auctionId,\r\n    address initiator,\r\n    uint256 x,\r\n    uint256 y,\r\n    uint256 startTime,\r\n    uint256 endTime\r\n  );\r\n\r\n  event UpdateAuctionBid(\r\n    bytes32 indexed pixelId,\r\n    uint256 indexed tokenId,\r\n    bytes32 indexed auctionId,\r\n    address bidder,\r\n    uint256 amountBet,\r\n    uint256 timeBet\r\n  );\r\n\r\n  event EndDutchAuction(\r\n    bytes32 indexed pixelId,\r\n    uint256 indexed tokenId,\r\n    address indexed claimer,\r\n    uint256 x,\r\n    uint256 y\r\n  );\r\n\r\n  event UpdateContentData(\r\n    bytes32 indexed pixelId,\r\n    address indexed owner,\r\n    uint256 x,\r\n    uint256 y,\r\n    bytes32 newContentData\r\n  );\r\n\r\n  constructor(uint256 _xMax, uint256 _yMax, uint256 _taxPercentage, address _taxCollector)\r\n    public\r\n    ERC721Token(\"Radical Pixels\", \"RPX\")\r\n    HarbergerTaxable(_taxPercentage, _taxCollector)\r\n  {\r\n    require(_xMax > 0, \"xMax must be a valid number\");\r\n    require(_yMax > 0, \"yMax must be a valid number\");\r\n\r\n    xMax = _xMax;\r\n    yMax = _yMax;\r\n  }\r\n\r\n  /**\r\n   * Public Functions\r\n   */\r\n\r\n  /**\r\n   * @dev Overwrite ERC721 transferFrom with our specific needs\r\n   * @notice This transfer has to be approved and then triggered by the _to\r\n   * address in order to avoid sending unwanted pixels\r\n   * @param _from Address sending token\r\n   * @param _to Address receiving token\r\n   * @param _tokenId ID of the transacting token\r\n   * @param _price Price of the token being transfered\r\n   * @param _x X coordinate of the desired block\r\n   * @param _y Y coordinate of the desired block\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _tokenId, uint256 _price, uint256 _x, uint256 _y)\r\n    public\r\n    auctionNotOngoing(_x, _y)\r\n  {\r\n    _subFromValueHeld(msg.sender, _price, false);\r\n    _addToValueHeld(_to, _price);\r\n    require(_to == msg.sender);\r\n    Pixel memory pixel = pixelByCoordinate[_x][_y];\r\n\r\n    super.transferFrom(_from, _to, _tokenId);\r\n  }\r\n\r\n   /**\r\n   * @dev Buys pixel block\r\n   * @param _x X coordinate of the desired block\r\n   * @param _y Y coordinate of the desired block\r\n   * @param _price New price of the pixel block\r\n   * @param _contentData Data for the pixel\r\n   */\r\n   function buyUninitializedPixelBlock(uint256 _x, uint256 _y, uint256 _price, bytes32 _contentData)\r\n     public\r\n   {\r\n     require(_price > 0);\r\n     _buyUninitializedPixelBlock(_x, _y, _price, _contentData);\r\n   }\r\n\r\n  /**\r\n  * @dev Buys pixel blocks\r\n  * @param _x X coordinates of the desired blocks\r\n  * @param _y Y coordinates of the desired blocks\r\n  * @param _price New prices of the pixel blocks\r\n  * @param _contentData Data for the pixel\r\n  */\r\n  function buyUninitializedPixelBlocks(uint256[] _x, uint256[] _y, uint256[] _price, bytes32[] _contentData)\r\n    public\r\n  {\r\n    require(_x.length == _y.length && _x.length == _price.length && _x.length == _contentData.length);\r\n    for (uint i = 0; i < _x.length; i++) {\r\n      require(_price[i] > 0);\r\n      _buyUninitializedPixelBlock(_x[i], _y[i], _price[i], _contentData[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @dev Buys pixel block\r\n  * @param _x X coordinate of the desired block\r\n  * @param _y Y coordinate of the desired block\r\n  * @param _price New price of the pixel block\r\n  * @param _contentData Data for the pixel\r\n  */\r\n  function buyPixelBlock(uint256 _x, uint256 _y, uint256 _price, bytes32 _contentData)\r\n    public\r\n    payable\r\n  {\r\n    require(_price > 0);\r\n    uint256 _ = _buyPixelBlock(_x, _y, _price, msg.value, _contentData);\r\n  }\r\n\r\n  /**\r\n  * @dev Buys pixel block\r\n  * @param _x X coordinates of the desired blocks\r\n  * @param _y Y coordinates of the desired blocks\r\n  * @param _price New prices of the pixel blocks\r\n  * @param _contentData Data for the pixel\r\n  */\r\n  function buyPixelBlocks(uint256[] _x, uint256[] _y, uint256[] _price, bytes32[] _contentData)\r\n    public\r\n    payable\r\n  {\r\n    require(_x.length == _y.length && _x.length == _price.length && _x.length == _contentData.length);\r\n    uint256 currentValue = msg.value;\r\n    for (uint i = 0; i < _x.length; i++) {\r\n      require(_price[i] > 0);\r\n      currentValue = _buyPixelBlock(_x[i], _y[i], _price[i], currentValue, _contentData[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @dev Set prices for specific blocks\r\n  * @param _x X coordinate of the desired block\r\n  * @param _y Y coordinate of the desired block\r\n  * @param _price New price of the pixel block\r\n  */\r\n  function setPixelBlockPrice(uint256 _x, uint256 _y, uint256 _price)\r\n    public\r\n    payable\r\n  {\r\n    require(_price > 0);\r\n    _setPixelBlockPrice(_x, _y, _price);\r\n  }\r\n\r\n  /**\r\n  * @dev Set prices for specific blocks\r\n  * @param _x X coordinates of the desired blocks\r\n  * @param _y Y coordinates of the desired blocks\r\n  * @param _price New prices of the pixel blocks\r\n  */\r\n  function setPixelBlockPrices(uint256[] _x, uint256[] _y, uint256[] _price)\r\n    public\r\n    payable\r\n  {\r\n    require(_x.length == _y.length && _x.length == _price.length);\r\n    for (uint i = 0; i < _x.length; i++) {\r\n      require(_price[i] > 0);\r\n      _setPixelBlockPrice(_x[i], _y[i], _price[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Trigger a dutch auction\r\n   * @param _x X coordinate of the desired block\r\n   * @param _y Y coordinate of the desired block\r\n   */\r\n  function beginDutchAuction(uint256 _x, uint256 _y)\r\n    public\r\n    auctionNotOngoing(_x, _y)\r\n    validRange(_x, _y)\r\n  {\r\n    Pixel storage pixel = pixelByCoordinate[_x][_y];\r\n\r\n    require(!userHasPositveBalance(pixel.seller));\r\n    require(pixel.auctionId == 0);\r\n\r\n    // Start a dutch auction\r\n    pixel.auctionId = _generateDutchAuction(_x, _y);\r\n    uint256 tokenId = _encodeTokenId(_x, _y);\r\n\r\n    _updatePixelMapping(pixel.seller, _x, _y, pixel.price, pixel.auctionId, \"\");\r\n\r\n    emit BeginDutchAuction(\r\n      pixel.id,\r\n      tokenId,\r\n      pixel.auctionId,\r\n      msg.sender,\r\n      _x,\r\n      _y,\r\n      block.timestamp,\r\n      block.timestamp.add(1 days)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Allow a user to bid in an auction\r\n   * @param _x X coordinate of the desired block\r\n   * @param _y Y coordinate of the desired block\r\n   * @param _bid Desired bid of the user\r\n   */\r\n  function bidInAuction(uint256 _x, uint256 _y, uint256 _bid)\r\n    public\r\n    validRange(_x, _y)\r\n  {\r\n    Pixel memory pixel = pixelByCoordinate[_x][_y];\r\n    Auction storage auction = auctionById[pixel.auctionId];\r\n\r\n    uint256 _tokenId = _encodeTokenId(_x, _y);\r\n    require(pixel.auctionId != 0);\r\n    require(auction.currentPrice < _bid);\r\n    require(block.timestamp < auction.endTime);\r\n\r\n    auction.currentPrice = _bid;\r\n    auction.currentLeader = msg.sender;\r\n\r\n    emit UpdateAuctionBid(\r\n      pixel.id,\r\n      _tokenId,\r\n      auction.auctionId,\r\n      msg.sender,\r\n      _bid,\r\n      block.timestamp\r\n    );\r\n  }\r\n\r\n  /**\r\n   * End the auction\r\n   * @param _x X coordinate of the desired block\r\n   * @param _y Y coordinate of the desired block\r\n   */\r\n  function endDutchAuction(uint256 _x, uint256 _y)\r\n    public\r\n    validRange(_x, _y)\r\n  {\r\n    Pixel memory pixel = pixelByCoordinate[_x][_y];\r\n    Auction memory auction = auctionById[pixel.auctionId];\r\n\r\n    require(pixel.auctionId != 0);\r\n    require(auction.endTime < block.timestamp);\r\n\r\n    // End dutch auction\r\n    address winner = _endDutchAuction(_x, _y);\r\n    _updatePixelMapping(winner, _x, _y, auction.currentPrice, 0, \"\");\r\n\r\n    // Update user values\r\n    _subFromValueHeld(pixel.seller, pixel.price, true);\r\n    _addToValueHeld(winner, auction.currentPrice);\r\n\r\n    uint256 tokenId = _encodeTokenId(_x, _y);\r\n    removeTokenFrom(pixel.seller, tokenId);\r\n    addTokenTo(winner, tokenId);\r\n    emit Transfer(pixel.seller, winner, tokenId);\r\n\r\n    emit EndDutchAuction(\r\n      pixel.id,\r\n      tokenId,\r\n      winner,\r\n      _x,\r\n      _y\r\n    );\r\n  }\r\n\r\n  /**\r\n  * @dev Change content data of a pixel\r\n  * @param _x X coordinates of the desired blocks\r\n  * @param _y Y coordinates of the desired blocks\r\n  * @param _contentData Data for the pixel\r\n  */\r\n  function changeContentData(uint256 _x, uint256 _y, bytes32 _contentData)\r\n    public\r\n  {\r\n    Pixel storage pixel = pixelByCoordinate[_x][_y];\r\n\r\n    require(msg.sender == pixel.seller);\r\n\r\n    pixel.contentData = _contentData;\r\n\r\n    emit UpdateContentData(\r\n      pixel.id,\r\n      pixel.seller,\r\n      _x,\r\n      _y,\r\n      _contentData\r\n  );\r\n\r\n  }\r\n\r\n  /**\r\n   * Encode a token ID for transferability\r\n   * @param _x X coordinate of the desired block\r\n   * @param _y Y coordinate of the desired block\r\n   */\r\n  function encodeTokenId(uint256 _x, uint256 _y)\r\n    public\r\n    view\r\n    validRange(_x, _y)\r\n    returns (uint256)\r\n  {\r\n    return _encodeTokenId(_x, _y);\r\n  }\r\n\r\n  /**\r\n   * Internal Functions\r\n   */\r\n\r\n  /**\r\n  * @dev Buys an uninitialized pixel block for 0 ETH\r\n  * @param _x X coordinate of the desired block\r\n  * @param _y Y coordinate of the desired block\r\n  * @param _price New price for the pixel\r\n  * @param _contentData Data for the pixel\r\n  */\r\n  function _buyUninitializedPixelBlock(uint256 _x, uint256 _y, uint256 _price, bytes32 _contentData)\r\n    internal\r\n    validRange(_x, _y)\r\n    hasPositveBalance(msg.sender)\r\n  {\r\n    Pixel memory pixel = pixelByCoordinate[_x][_y];\r\n\r\n    require(pixel.seller == address(0), \"Pixel must not be initialized\");\r\n\r\n    uint256 tokenId = _encodeTokenId(_x, _y);\r\n    bytes32 pixelId = _updatePixelMapping(msg.sender, _x, _y, _price, 0, _contentData);\r\n\r\n    _addToValueHeld(msg.sender, _price);\r\n    _mint(msg.sender, tokenId);\r\n\r\n    emit BuyPixel(\r\n      pixelId,\r\n      address(0),\r\n      msg.sender,\r\n      _x,\r\n      _y,\r\n      _price,\r\n      _contentData\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Buys a pixel block\r\n   * @param _x X coordinate of the desired block\r\n   * @param _y Y coordinate of the desired block\r\n   * @param _price New price of the pixel block\r\n   * @param _currentValue Current value of the transaction\r\n   * @param _contentData Data for the pixel\r\n   */\r\n  function _buyPixelBlock(uint256 _x, uint256 _y, uint256 _price, uint256 _currentValue, bytes32 _contentData)\r\n    internal\r\n    validRange(_x, _y)\r\n    hasPositveBalance(msg.sender)\r\n    returns (uint256)\r\n  {\r\n    Pixel memory pixel = pixelByCoordinate[_x][_y];\r\n    require(pixel.auctionId == 0);  // Stack to deep if this is a modifier\r\n    uint256 _taxOnPrice = _calculateTax(_price);\r\n\r\n    require(pixel.seller != address(0), \"Pixel must be initialized\");\r\n    require(userBalanceAtLastPaid[msg.sender] >= _taxOnPrice);\r\n    require(pixel.price <= _currentValue, \"Must have sent sufficient funds\");\r\n\r\n    uint256 tokenId = _encodeTokenId(_x, _y);\r\n\r\n    removeTokenFrom(pixel.seller, tokenId);\r\n    addTokenTo(msg.sender, tokenId);\r\n    emit Transfer(pixel.seller, msg.sender, tokenId);\r\n\r\n    _addToValueHeld(msg.sender, _price);\r\n    _subFromValueHeld(pixel.seller, pixel.price, false);\r\n\r\n    _updatePixelMapping(msg.sender, _x, _y, _price, 0, _contentData);\r\n    pixel.seller.transfer(pixel.price);\r\n\r\n    emit BuyPixel(\r\n      pixel.id,\r\n      pixel.seller,\r\n      msg.sender,\r\n      _x,\r\n      _y,\r\n      pixel.price,\r\n      _contentData\r\n    );\r\n\r\n    return _currentValue.sub(pixel.price);\r\n  }\r\n\r\n  /**\r\n  * @dev Set prices for a specific block\r\n  * @param _x X coordinate of the desired block\r\n  * @param _y Y coordinate of the desired block\r\n  * @param _price New price of the pixel block\r\n  */\r\n  function _setPixelBlockPrice(uint256 _x, uint256 _y, uint256 _price)\r\n    internal\r\n    auctionNotOngoing(_x, _y)\r\n    validRange(_x, _y)\r\n  {\r\n    Pixel memory pixel = pixelByCoordinate[_x][_y];\r\n\r\n    require(pixel.seller == msg.sender, \"Sender must own the block\");\r\n    _addToValueHeld(msg.sender, _price);\r\n\r\n    delete pixelByCoordinate[_x][_y];\r\n\r\n    bytes32 pixelId = _updatePixelMapping(msg.sender, _x, _y, _price, 0, \"\");\r\n\r\n    emit SetPixelPrice(\r\n      pixelId,\r\n      pixel.seller,\r\n      _x,\r\n      _y,\r\n      pixel.price\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Generate a dutch auction\r\n   * @param _x X coordinate of the desired block\r\n   * @param _y Y coordinate of the desired block\r\n   */\r\n  function _generateDutchAuction(uint256 _x, uint256 _y)\r\n    internal\r\n    returns (bytes32)\r\n  {\r\n    Pixel memory pixel = pixelByCoordinate[_x][_y];\r\n\r\n    bytes32 _auctionId = keccak256(\r\n      abi.encodePacked(\r\n        block.timestamp,\r\n        _x,\r\n        _y\r\n      )\r\n    );\r\n\r\n    auctionById[_auctionId] = Auction({\r\n      auctionId: _auctionId,\r\n      blockId: pixel.id,\r\n      x: _x,\r\n      y: _y,\r\n      currentPrice: 0,\r\n      currentLeader: msg.sender,\r\n      endTime: block.timestamp.add(1 days)\r\n    });\r\n\r\n    return _auctionId;\r\n  }\r\n\r\n  /**\r\n   * End a finished dutch auction\r\n   * @param _x X coordinate of the desired block\r\n   * @param _y Y coordinate of the desired block\r\n   */\r\n  function _endDutchAuction(uint256 _x, uint256 _y)\r\n    internal\r\n    returns (address)\r\n  {\r\n    Pixel memory pixel = pixelByCoordinate[_x][_y];\r\n    Auction memory auction = auctionById[pixel.auctionId];\r\n\r\n    address _winner = auction.currentLeader;\r\n\r\n    delete auctionById[auction.auctionId];\r\n\r\n    return _winner;\r\n  }\r\n  /**\r\n    * @dev Update pixel mapping every time it is purchase or the price is\r\n    * changed\r\n    * @param _seller Seller of the pixel block\r\n    * @param _x X coordinate of the desired block\r\n    * @param _y Y coordinate of the desired block\r\n    * @param _price Price of the pixel block\r\n    * @param _contentData Data for the pixel\r\n    */\r\n  function _updatePixelMapping\r\n  (\r\n    address _seller,\r\n    uint256 _x,\r\n    uint256 _y,\r\n    uint256 _price,\r\n    bytes32 _auctionId,\r\n    bytes32 _contentData\r\n  )\r\n    internal\r\n    returns (bytes32)\r\n  {\r\n    bytes32 pixelId = keccak256(\r\n      abi.encodePacked(\r\n        _x,\r\n        _y\r\n      )\r\n    );\r\n\r\n    pixelByCoordinate[_x][_y] = Pixel({\r\n      id: pixelId,\r\n      seller: _seller,\r\n      x: _x,\r\n      y: _y,\r\n      price: _price,\r\n      auctionId: _auctionId,\r\n      contentData: _contentData\r\n    });\r\n\r\n    return pixelId;\r\n  }\r\n\r\n  function _calculateTax(uint256 _price)\r\n    internal\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return _price.mul(taxPercentage).div(100);\r\n  }\r\n  /**\r\n   * Encode token ID\r\n   * @param _x X coordinate of the desired block\r\n   * @param _y Y coordinate of the desired block\r\n   */\r\n  function _encodeTokenId(uint256 _x, uint256 _y)\r\n    internal\r\n    pure\r\n    returns (uint256 result)\r\n  {\r\n    return ((_x * factor) & clearLow) | (_y & clearHigh);\r\n  }\r\n}", "OptimizationUsed": "1", "ContractName": "RadicalPixels", "ByteCode": "0x6080604052600436106102875763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630103c92b811461028c57806301ffc9a7146102bf57806306fdde03146102f5578063081812fc1461037f5780630855b6d4146103b3578063095ea7b31461040e57806318160ddd1461043457806319fa8f50146104495780631ba1f10b1461047b5780631c39c375146104965780631f153836146105965780632353f37b146105b757806323b872dd146106105780632cddc4881461063a5780632e1a7d4d146106605780632f745c59146106785780632fd536741461069c57806335de5e89146106bd5780633caa2ea11461077757806342842e0e146107985780634f558e79146107c25780634f6ccce7146107da578063597df768146107f25780636352211e146108e5578063677412e4146108fd57806370a0823114610912578063715018a61461093357806388cb8a73146109485780638da5cb5b146109595780638ecc107f1461096e57806395d89b411461098f5780639d8a5eaf146109a4578063a22cb465146109b9578063a26759cb146109df578063a38783bf146109e7578063acdbd320146109fc578063ae7b6d1614610a11578063b4aff36e14610a26578063b88d4fde14610a3b578063bc57d5f514610aaa578063bea1dcf814610add578063c1f573ca14610af2578063c316c98b14610b10578063c87b56dd14610b31578063cb2410b914610b49578063d3c764f214610b67578063dad6b48214610b7b578063e985e9c514610b9c578063ebd46d6414610bc3578063f255628914610bde578063f2fde38b14610bf9578063faf87b8a14610c1a578063fc6ff9e114610c2f578063fe13b11814610c44575b600080fd5b34801561029857600080fd5b506102ad600160a060020a0360043516610c5f565b60408051918252519081900360200190f35b3480156102cb57600080fd5b506102e1600160e060020a031960043516610c98565b604080519115158252519081900360200190f35b34801561030157600080fd5b5061030a610cb7565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561034457818101518382015260200161032c565b50505050905090810190601f1680156103715780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561038b57600080fd5b50610397600435610d4e565b60408051600160a060020a039092168252519081900360200190f35b3480156103bf57600080fd5b506103ce600435602435610d69565b60408051978852600160a060020a039096166020880152868601949094526060860192909252608085015260a084015260c0830152519081900360e00190f35b34801561041a57600080fd5b50610432600160a060020a0360043516602435610dbb565b005b34801561044057600080fd5b506102ad610e64565b34801561045557600080fd5b5061045e610e6a565b60408051600160e060020a03199092168252519081900360200190f35b34801561048757600080fd5b50610432600435602435610e8e565b3480156104a257600080fd5b506040805160206004803580820135838102808601850190965280855261043295369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750949750610f169650505050505050565b3480156105a257600080fd5b506102ad600160a060020a0360043516610fea565b3480156105c357600080fd5b506105cf600435610ffc565b6040805197885260208801969096528686019490945260608601929092526080850152600160a060020a031660a084015260c0830152519081900360e00190f35b34801561061c57600080fd5b50610432600160a060020a0360043581169060243516604435611042565b34801561064657600080fd5b506102e1600160a060020a036004351660243515156110d3565b34801561066c57600080fd5b5061043260043561117e565b34801561068457600080fd5b506102ad600160a060020a0360043516602435611246565b3480156106a857600080fd5b506102ad600160a060020a0360043516611293565b6040805160206004803580820135838102808601850190965280855261043295369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506112a59650505050505050565b34801561078357600080fd5b506102ad600160a060020a0360043516611353565b3480156107a457600080fd5b50610432600160a060020a0360043581169060243516604435611365565b3480156107ce57600080fd5b506102e1600435611386565b3480156107e657600080fd5b506102ad6004356113a9565b6040805160206004803580820135838102808601850190965280855261043295369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506113de9650505050505050565b3480156108f157600080fd5b506103976004356114ba565b34801561090957600080fd5b506103976114de565b34801561091e57600080fd5b506102ad600160a060020a03600435166114ed565b34801561093f57600080fd5b50610432611520565b61043260043560243560443561157f565b34801561096557600080fd5b50610397611597565b34801561097a57600080fd5b506104326004356024356044356064356115a6565b34801561099b57600080fd5b5061030a6115bf565b3480156109b057600080fd5b506102ad611620565b3480156109c557600080fd5b50610432600160a060020a03600435166024351515611626565b6104326116aa565b3480156109f357600080fd5b506102ad6116dc565b348015610a0857600080fd5b506102ad6116e2565b348015610a1d57600080fd5b506102ad6116e8565b348015610a3257600080fd5b506102ad6116ee565b348015610a4757600080fd5b50604080516020601f60643560048181013592830184900484028501840190955281845261043294600160a060020a0381358116956024803590921695604435953695608494019181908401838280828437509497506116f49650505050505050565b348015610ab657600080fd5b50610432600160a060020a036004358116906024351660443560643560843560a435611716565b348015610ae957600080fd5b5061039761185a565b348015610afe57600080fd5b50610432600435602435604435611869565b348015610b1c57600080fd5b50610432600160a060020a0360043516611a2c565b348015610b3d57600080fd5b5061030a600435611a8f565b348015610b5557600080fd5b50610432600435602435604435611b44565b610432600435602435604435606435611bd6565b348015610b8757600080fd5b506102e1600160a060020a0360043516611bf1565b348015610ba857600080fd5b506102e1600160a060020a0360043581169060243516611c1e565b348015610bcf57600080fd5b506102ad600435602435611c4c565b348015610bea57600080fd5b50610432600435602435611cf3565b348015610c0557600080fd5b50610432600160a060020a0360043516612013565b348015610c2657600080fd5b50610432612036565b348015610c3b57600080fd5b506102ad61209f565b348015610c5057600080fd5b506104326004356024356120a5565b6000610c92610c6d836122d8565b600160a060020a0384166000908152600960205260409020549063ffffffff61238d16565b92915050565b600160e060020a0319166000908152600a602052604090205460ff1690565b600f8054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610d435780601f10610d1857610100808354040283529160200191610d43565b820191906000526020600020905b815481529060010190602001808311610d2657829003601f168201915b505050505090505b90565b6000908152600c6020526040902054600160a060020a031690565b601860209081526000928352604080842090915290825290208054600182015460028301546003840154600485015460058601546006909601549495600160a060020a03909416949293919290919087565b6000610dc6826114ba565b9050600160a060020a038381169082161415610de157600080fd5b33600160a060020a0382161480610dfd5750610dfd8133611c1e565b1515610e0857600080fd5b6000828152600c60205260408082208054600160a060020a031916600160a060020a0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b60135490565b7f01ffc9a70000000000000000000000000000000000000000000000000000000081565b600054600160a060020a03163314610ea557600080fd5b60648210610eb257600080fd5b60648110610ebf57600080fd5b610ecf828263ffffffff61239f16565b606414610edb57600080fd5b60058290556006819055604051819083907f428928fed5b7befc8bffdcf6cec44600799cc028dccae3bb25c7badcdfeb607f90600090a35050565b600083518551148015610f2a575082518551145b8015610f37575081518551145b1515610f4257600080fd5b5060005b8451811015610fe35760008382815181101515610f5f57fe5b6020908102909101015111610f7357600080fd5b610fdb8582815181101515610f8457fe5b906020019060200201518583815181101515610f9c57fe5b906020019060200201518584815181101515610fb457fe5b906020019060200201518585815181101515610fcc57fe5b906020019060200201516123ac565b600101610f46565b5050505050565b60086020526000908152604090205481565b601960205260009081526040902080546001820154600283015460038401546004850154600586015460069096015494959394929391929091600160a060020a03169087565b61104c33826125eb565b151561105757600080fd5b600160a060020a038316151561106c57600080fd5b600160a060020a038216151561108157600080fd5b61108b838261264a565b61109583826126ac565b61109f82826127b3565b8082600160a060020a031684600160a060020a0316600080516020613a2d83398151915260405160405180910390a4505050565b60008082156110e55760019150611177565b6110ee846122d8565b600160a060020a03851660009081526009602052604090205490915081111561111a5760009150611177565b611123816127fc565b600160a060020a03841660009081526008602090815260408083204290556009909152902054611159908263ffffffff61238d16565b600160a060020a038516600090815260096020526040902055600191505b5092915050565b600054600160a060020a0316331461119557600080fd5b6111a03360006110d3565b15156111e4576040805160e560020a62461bcd02815260206004820152601b6024820152600080516020613a4d833981519152604482015290519081900360640190fd5b33600090815260096020526040902054611204908263ffffffff61238d16565b33600081815260096020526040808220939093559151909183156108fc02918491818181858888f19350505050158015611242573d6000803e3d6000fd5b5050565b6000611251836114ed565b821061125c57600080fd5b600160a060020a038316600090815260116020526040902080548390811061128057fe5b9060005260206000200154905092915050565b60096020526000908152604090205481565b6000825184511480156112b9575081518451145b15156112c457600080fd5b5060005b835181101561134d57600082828151811015156112e157fe5b60209081029091010151116112f557600080fd5b611345848281518110151561130657fe5b90602001906020020151848381518110151561131e57fe5b90602001906020020151848481518110151561133657fe5b90602001906020020151612878565b6001016112c8565b50505050565b60076020526000908152604090205481565b61138183838360206040519081016040528060008152506116f4565b505050565b6000818152600b6020526040902054600160a060020a0316801515905b50919050565b60006113b3610e64565b82106113be57600080fd5b60138054839081106113cc57fe5b90600052602060002001549050919050565b600080845186511480156113f3575083518651145b8015611400575082518651145b151561140b57600080fd5b5034905060005b85518110156114b2576000848281518110151561142b57fe5b602090810290910101511161143f57600080fd5b6114a8868281518110151561145057fe5b90602001906020020151868381518110151561146857fe5b90602001906020020151868481518110151561148057fe5b9060200190602002015185878681518110151561149957fe5b90602001906020020151612b34565b9150600101611412565b505050505050565b6000818152600b6020526040812054600160a060020a0316801515610c9257600080fd5b600354600160a060020a031681565b6000600160a060020a038216151561150457600080fd5b50600160a060020a03166000908152600d602052604090205490565b600054600160a060020a0316331461153757600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a260008054600160a060020a0319169055565b6000811161158c57600080fd5b611381838383612878565b600054600160a060020a031681565b600082116115b357600080fd5b61134d848484846123ac565b60108054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610d435780601f10610d1857610100808354040283529160200191610d43565b60165481565b600160a060020a03821633141561163c57600080fd5b336000818152600e60209081526040808320600160a060020a03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b336000908152600960205260409020546116ca903463ffffffff61239f16565b33600090815260096020526040902055565b60045481565b60055481565b60015481565b60065481565b6116ff848484611042565b61170b84848484612ef3565b151561134d57600080fd5b61171e613993565b8282611728613993565b506000828152601860209081526040808320848452825291829020825160e081018452815481526001820154600160a060020a0316928101929092526002810154928201929092526003820154606082015260048201546080820152600582015460a0820181905260069092015460c082015290156117a657600080fd5b6117b233886000613060565b6117bc89886130f8565b600160a060020a03891633146117d157600080fd5b6000868152601860209081526040808320888452825291829020825160e081018452815481526001820154600160a060020a0316928101929092526002810154928201929092526003820154606082015260048201546080820152600582015460a082015260069091015460c0820152935061184e8a8a8a611042565b50505050505050505050565b600254600160a060020a031681565b611871613993565b6000808585601654821015156118bf576040805160e560020a62461bcd02815260206004820152601c6024820152600080516020613a0d833981519152604482015290519081900360640190fd5b6017548110611906576040805160e560020a62461bcd02815260206004820152601c6024820152600080516020613a6d833981519152604482015290519081900360640190fd5b60008881526018602090815260408083208a84528252808320815160e081018352815481526001820154600160a060020a0316818501526002820154818401526003820154606082015260048201546080820152600582015460a0820181905260069092015460c08201529084526019909252909120909550935061198b88886131b3565b60a0860151909350151561199e57600080fd5b600484015486116119ae57600080fd5b600684015442106119be57600080fd5b60048401869055600584018054600160a060020a031916339081179091558454865160408051938452602084018a9052428482015251919286927f40cc8a83f6c546057aa75aabf21f3dd1e7011bcbc7a54d9c11d05ae76cbc8b5b9181900360600190a45050505050505050565b600054600160a060020a03163314611a4357600080fd5b600160a060020a0381161515611a5857600080fd5b604051600160a060020a038216907fb28dafc5a1c0e625219a9580c074724968184435cbc8ea7fe42f0b6c99dbed9490600090a250565b6060611a9a82611386565b1515611aa557600080fd5b60008281526015602090815260409182902080548351601f600260001961010060018616150201909316929092049182018490048402810184019094528084529091830182828015611b385780601f10611b0d57610100808354040283529160200191611b38565b820191906000526020600020905b815481529060010190602001808311611b1b57829003601f168201915b50505050509050919050565b600083815260186020908152604080832085845290915290206001810154600160a060020a03163314611b7657600080fd5b600681018290556001810154815460408051878152602081018790528082018690529051600160a060020a03909316927fa8287b5ca05c2bee0ad3916a06b5df440691dbd9e7110b9eaf42467c8a8e524e9181900360600190a350505050565b6000808311611be457600080fd5b6114b28585853486612b34565b6000611bfc826122d8565b600160a060020a03831660009081526009602052604090205410159050919050565b600160a060020a039182166000908152600e6020908152604080832093909416825291909152205460ff1690565b6000828260165482101515611c99576040805160e560020a62461bcd02815260206004820152601c6024820152600080516020613a0d833981519152604482015290519081900360640190fd5b6017548110611ce0576040805160e560020a62461bcd02815260206004820152601c6024820152600080516020613a6d833981519152604482015290519081900360640190fd5b611cea85856131b3565b95945050505050565b611cfb613993565b611d03613993565b600080858560165482101515611d51576040805160e560020a62461bcd02815260206004820152601c6024820152600080516020613a0d833981519152604482015290519081900360640190fd5b6017548110611d98576040805160e560020a62461bcd02815260206004820152601c6024820152600080516020613a6d833981519152604482015290519081900360640190fd5b60186000898152602001908152602001600020600088815260200190815260200160002060e060405190810160405290816000820154600019166000191681526020016001820160009054906101000a9004600160a060020a0316600160a060020a0316600160a060020a0316815260200160028201548152602001600382015481526020016004820154815260200160058201546000191660001916815260200160068201546000191660001916815250509550601960008760a001516000191660001916815260200190815260200160002060e060405190810160405290816000820154600019166000191681526020016001820154600019166000191681526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a9004600160a060020a0316600160a060020a0316600160a060020a0316815260200160068201548152505094508560a0015160001916600060010214151515611f1057600080fd5b60c08501514211611f2057600080fd5b611f2a88886131f4565b9350611f438489898860800151600060010260006133e4565b50611f58866020015187608001516001613060565b611f668486608001516130f8565b611f7088886131b3565b9250611f808660200151846126ac565b611f8a84846127b3565b8284600160a060020a03168760200151600160a060020a0316600080516020613a2d83398151915260405160405180910390a48551604080518a8152602081018a90528151600160a060020a03881693879390927fe7d4e7416c380ec3ff1a2559464d5abf9a67dda168935fed9f4b2f0218b9ace4929081900390910190a45050505050505050565b600054600160a060020a0316331461202a57600080fd5b61203381613566565b50565b600454671bf32a5451a300009081111561204f57600080fd5b600454612062908263ffffffff61238d16565b600455600354604051600160a060020a039091169082156108fc029083906000818181858888f19350505050158015611242573d6000803e3d6000fd5b60175481565b60008083836120b2613993565b506000828152601860209081526040808320848452825291829020825160e081018452815481526001820154600160a060020a0316928101929092526002810154928201929092526003820154606082015260048201546080820152600582015460a0820181905260069092015460c0820152901561213057600080fd5b86866016548210151561217b576040805160e560020a62461bcd02815260206004820152601c6024820152600080516020613a0d833981519152604482015290519081900360640190fd5b60175481106121c2576040805160e560020a62461bcd02815260206004820152601c6024820152600080516020613a6d833981519152604482015290519081900360640190fd5b60008981526018602090815260408083208b8452909152902060018101549097506121f590600160a060020a0316611bf1565b156121ff57600080fd5b60058701541561220e57600080fd5b61221889896135d6565b600588015561222789896131b3565b95506122578760010160009054906101000a9004600160a060020a03168a8a8a600401548b6005015460006133e4565b506005870154875487907fbe5c52e6db6f0b0b69e8357b5fcfa0c6efe7caca0602b28e4219885042fc264c338d8d42612299816201518063ffffffff61239f16565b60408051600160a060020a03909616865260208601949094528484019290925260608401526080830152519081900360a00190a4505050505050505050565b600160a060020a0381166000908152600860205260408120548190151561230257600091506113a3565b600160a060020a03831660009081526008602052604090205461232c90429063ffffffff61238d16565b600154600160a060020a0385166000908152600760205260409020549192506123869160649161236e9161237a906301e133809084908863ffffffff61378c16565b9063ffffffff6137b516565b9063ffffffff61378c16565b9392505050565b60008282111561239957fe5b50900390565b81810182811015610c9257fe5b6123b4613993565b600080868660165482101515612402576040805160e560020a62461bcd02815260206004820152601c6024820152600080516020613a0d833981519152604482015290519081900360640190fd5b6017548110612449576040805160e560020a62461bcd02815260206004820152601c6024820152600080516020613a6d833981519152604482015290519081900360640190fd5b3361245381611bf1565b151560011461249a576040805160e560020a62461bcd02815260206004820152601b6024820152600080516020613a4d833981519152604482015290519081900360640190fd5b60008a81526018602090815260408083208c8452825291829020825160e081018452815481526001820154600160a060020a03169281018390526002820154938101939093526003810154606084015260048101546080840152600581015460a08401526006015460c08301529096501561255f576040805160e560020a62461bcd02815260206004820152601d60248201527f506978656c206d757374206e6f7420626520696e697469616c697a6564000000604482015290519081900360640190fd5b6125698a8a6131b3565b945061257a338b8b8b60008c6133e4565b935061258633896130f8565b61259033866137ca565b604080518b8152602081018b90528082018a9052606081018990529051339160009187917fc7780c9b656c370fa4af95a11dc3b7881d4deb58428e6b02ae92644100b89cd6919081900360800190a450505050505050505050565b6000806125f7836114ba565b905080600160a060020a031684600160a060020a03161480612632575083600160a060020a031661262784610d4e565b600160a060020a0316145b8061264257506126428185611c1e565b949350505050565b81600160a060020a031661265d826114ba565b600160a060020a03161461267057600080fd5b6000818152600c6020526040902054600160a060020a031615611242576000908152600c602052604090208054600160a060020a031916905550565b60008060006126bb8585613819565b600084815260126020908152604080832054600160a060020a03891684526011909252909120549093506126f690600163ffffffff61238d16565b600160a060020a03861660009081526011602052604090208054919350908390811061271e57fe5b90600052602060002001549050806011600087600160a060020a0316600160a060020a031681526020019081526020016000208481548110151561275e57fe5b6000918252602080832090910192909255600160a060020a03871681526011909152604090208054906127959060001983016139cf565b50600093845260126020526040808520859055908452909220555050565b60006127bf83836138a2565b50600160a060020a039091166000908152601160209081526040808320805460018101825590845282842081018590559383526012909152902055565b600080612819606461236e6005548661378c90919063ffffffff16565b9150612835606461236e6006548661378c90919063ffffffff16565b6004805484019055600254604051919250600160a060020a03169082156108fc029083906000818181858888f1935050505015801561134d573d6000803e3d6000fd5b612880613993565b6000848461288c613993565b506000828152601860209081526040808320848452825291829020825160e081018452815481526001820154600160a060020a0316928101929092526002810154928201929092526003820154606082015260048201546080820152600582015460a0820181905260069092015460c0820152901561290a57600080fd5b878760165482101515612955576040805160e560020a62461bcd02815260206004820152601c6024820152600080516020613a0d833981519152604482015290519081900360640190fd5b601754811061299c576040805160e560020a62461bcd02815260206004820152601c6024820152600080516020613a6d833981519152604482015290519081900360640190fd5b60008a81526018602090815260408083208c8452825291829020825160e081018452815481526001820154600160a060020a03169281018390526002820154938101939093526003810154606084015260048101546080840152600581015460a08401526006015460c08301529097503314612a62576040805160e560020a62461bcd02815260206004820152601960248201527f53656e646572206d757374206f776e2074686520626c6f636b00000000000000604482015290519081900360640190fd5b612a6c33896130f8565b60008a81526018602090815260408083208c84529091528120818155600181018054600160a060020a031916905560028101829055600381018290556004810182905560058101829055600601819055612ace9033908c908c908c90806133e4565b60208089015160808a0151604080518f81529384018e90528381019190915251929850600160a060020a03169188917f3937af36e37e156c0f45c37b6a60e512cb2eb852e6521822e474de9db240b8b3919081900360600190a350505050505050505050565b6000612b3e613993565b600080888860165482101515612b8c576040805160e560020a62461bcd02815260206004820152601c6024820152600080516020613a0d833981519152604482015290519081900360640190fd5b6017548110612bd3576040805160e560020a62461bcd02815260206004820152601c6024820152600080516020613a6d833981519152604482015290519081900360640190fd5b33612bdd81611bf1565b1515600114612c24576040805160e560020a62461bcd02815260206004820152601b6024820152600080516020613a4d833981519152604482015290519081900360640190fd5b60008c81526018602090815260408083208e8452825291829020825160e081018452815481526001820154600160a060020a0316928101929092526002810154928201929092526003820154606082015260048201546080820152600582015460a0820181905260069092015460c0820152965015612ca257600080fd5b612cab8a613926565b6020870151909550600160a060020a03161515612d12576040805160e560020a62461bcd02815260206004820152601960248201527f506978656c206d75737420626520696e697469616c697a656400000000000000604482015290519081900360640190fd5b33600090815260096020526040902054851115612d2e57600080fd5b6080860151891015612d8a576040805160e560020a62461bcd02815260206004820152601f60248201527f4d75737420686176652073656e742073756666696369656e742066756e647300604482015290519081900360640190fd5b612d948c8c6131b3565b9350612da48660200151856126ac565b612dae33856127b3565b8333600160a060020a03168760200151600160a060020a0316600080516020613a2d83398151915260405160405180910390a4612deb338b6130f8565b612dff866020015187608001516000613060565b612e0e338d8d8d60008d6133e4565b508560200151600160a060020a03166108fc87608001519081150290604051600060405180830381858888f19350505050158015612e50573d6000803e3d6000fd5b5033600160a060020a03168660200151600160a060020a03168760000151600019167fc7780c9b656c370fa4af95a11dc3b7881d4deb58428e6b02ae92644100b89cd68f8f8b608001518e60405180858152602001848152602001838152602001826000191660001916815260200194505050505060405180910390a46080860151612ee3908a9063ffffffff61238d16565b9c9b505050505050505050505050565b600080612f0885600160a060020a0316613942565b1515612f175760019150613057565b6040517f150b7a020000000000000000000000000000000000000000000000000000000081523360048201818152600160a060020a03898116602485015260448401889052608060648501908152875160848601528751918a169463150b7a0294938c938b938b93909160a490910190602085019080838360005b83811015612faa578181015183820152602001612f92565b50505050905090810190601f168015612fd75780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015612ff957600080fd5b505af115801561300d573d6000803e3d6000fd5b505050506040513d602081101561302357600080fd5b5051600160e060020a031981167f150b7a020000000000000000000000000000000000000000000000000000000014925090505b50949350505050565b61306a83826110d3565b15156130ae576040805160e560020a62461bcd02815260206004820152601b6024820152600080516020613a4d833981519152604482015290519081900360640190fd5b600160a060020a0383166000908152600760205260409020546130d7908363ffffffff61238d16565b600160a060020a039093166000908152600760205260409020929092555050565b6131038260006110d3565b1515613147576040805160e560020a62461bcd02815260206004820152601b6024820152600080516020613a4d833981519152604482015290519081900360640190fd5b600160a060020a0382166000908152600960205260408120541161316a57600080fd5b600160a060020a038216600090815260076020526040902054613193908263ffffffff61239f16565b600160a060020a0390921660009081526007602052604090209190915550565b70010000000000000000000000000000000082026fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff82161792915050565b60006131fe613993565b613206613993565b600060186000878152602001908152602001600020600086815260200190815260200160002060e060405190810160405290816000820154600019166000191681526020016001820160009054906101000a9004600160a060020a0316600160a060020a0316600160a060020a0316815260200160028201548152602001600382015481526020016004820154815260200160058201546000191660001916815260200160068201546000191660001916815250509250601960008460a001516000191660001916815260200190815260200160002060e060405190810160405290816000820154600019166000191681526020016001820154600019166000191681526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a9004600160a060020a0316600160a060020a0316600160a060020a0316815260200160068201548152505091508160a0015190506019600083600001516000191660001916815260200190815260200160002060008082016000905560018201600090556002820160009055600382016000905560048201600090556005820160006101000a815490600160a060020a0302191690556006820160009055505080935050505092915050565b600080868660405160200180838152602001828152602001925050506040516020818303038152906040526040518082805190602001908083835b6020831061343e5780518252601f19909201916020918201910161341f565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020905060e0604051908101604052808260001916815260200189600160a060020a031681526020018881526020018781526020018681526020018560001916815260200184600019168152506018600089815260200190815260200160002060008881526020019081526020016000206000820151816000019060001916905560208201518160010160006101000a815481600160a060020a030219169083600160a060020a0316021790555060408201518160020155606082015181600301556080820151816004015560a0820151816005019060001916905560c08201518160060190600019169055905050809150509695505050505050565b600160a060020a038116151561357b57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a360008054600160a060020a031916600160a060020a0392909216919091179055565b60006135e0613993565b5060008381526018602090815260408083208584528252808320815160e081018352815481526001820154600160a060020a03168185015260028201548184015260038201546060808301919091526004830154608080840191909152600584015460a084015260069093015460c0830152835142818701528085018a9052808201899052845180820390920182529092019283905281519094939192918291908401908083835b602083106136a75780518252601f199092019160209182019101613688565b51815160209384036101000a60001901801990921691161790526040805192909401829003822060e0830185528083528851918301919091529281018a905260608101899052600060808201523360a08201529194509092505060c082019050613714426201518061239f565b905260008281526019602090815260409182902083518155908301516001820155908201516002820155606082015160038201556080820151600482015560a0820151600582018054600160a060020a031916600160a060020a0390921691909117905560c090910151600690910155949350505050565b600082151561379d57506000610c92565b508181028183828115156137ad57fe5b0414610c9257fe5b600081838115156137c257fe5b049392505050565b6137d4828261394a565b601380546000838152601460205260408120829055600182018355919091527f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a090015550565b81600160a060020a031661382c826114ba565b600160a060020a03161461383f57600080fd5b600160a060020a0382166000908152600d602052604090205461386990600163ffffffff61238d16565b600160a060020a039092166000908152600d6020908152604080832094909455918152600b909152208054600160a060020a0319169055565b6000818152600b6020526040902054600160a060020a0316156138c457600080fd5b6000818152600b602090815260408083208054600160a060020a031916600160a060020a0387169081179091558352600d90915290205461390690600161239f565b600160a060020a039092166000908152600d602052604090209190915550565b6000610c92606461236e6001548561378c90919063ffffffff16565b6000903b1190565b600160a060020a038216151561395f57600080fd5b61396982826127b3565b6040518190600160a060020a03841690600090600080516020613a2d833981519152908290a45050565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915290565b81548183558181111561138157600083815260209020611381918101908301610d4b91905b80821115613a0857600081556001016139f4565b509056005820636f6f7264696e617465206973206f7574206f662072616e676500000000ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef55736572206861732061206e656761746976652062616c616e636500000000005920636f6f7264696e617465206973206f7574206f662072616e676500000000a165627a7a72305820a96176ff4e5138ab43d61cbb44cc0c7379f7036c871d64505e164b6515e22d660029"}