{"Runs": "200", "SwarmSource": "bzzr://ed94e1deaef3d280cafc04c42d0491cd965a37e6bd517f97d78c50612c6a8db6", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"getCreditBondAddress\",\"outputs\":[{\"name\":\"bondAddress\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameAddress\",\"type\":\"address\"}],\"name\":\"setCreditGameAddress\",\"outputs\":[{\"name\":\"error\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalLockedSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_lockForBlocks\",\"type\":\"uint256\"}],\"name\":\"lockBalance\",\"outputs\":[{\"name\":\"error\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reciever\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintMigrationTokens\",\"outputs\":[{\"name\":\"error\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockdown\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_daoAddress\",\"type\":\"address\"}],\"name\":\"setCreditDaoAddress\",\"outputs\":[{\"name\":\"error\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creditDaoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"lockedBalanceOf\",\"outputs\":[{\"name\":\"avaliableBalance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getAccountData\",\"outputs\":[{\"name\":\"avaliableBalance\",\"type\":\"uint256\"},{\"name\":\"lockedBalance\",\"type\":\"uint256\"},{\"name\":\"bondMultiplier\",\"type\":\"uint256\"},{\"name\":\"lockedUntilBlock\",\"type\":\"uint256\"},{\"name\":\"lastBlockClaimed\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimBondReward\",\"outputs\":[{\"name\":\"error\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"avaliableBalance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_champion\",\"type\":\"address\"},{\"name\":\"_lockedTokenAmount\",\"type\":\"uint256\"},{\"name\":\"_lockTime\",\"type\":\"uint256\"}],\"name\":\"claimGameReward\",\"outputs\":[{\"name\":\"error\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dev\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creditGameAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bondAddress\",\"type\":\"address\"}],\"name\":\"setCreditBond\",\"outputs\":[{\"name\":\"error\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lockToken\",\"outputs\":[{\"name\":\"error\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mcAddress\",\"type\":\"address\"}],\"name\":\"setCreditMcAddress\",\"outputs\":[{\"name\":\"error\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintBonusTokensForGames\",\"outputs\":[{\"name\":\"error\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAvaliableSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creditMcAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":false,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_numberOfBlocks\",\"type\":\"uint256\"}],\"name\":\"LockCredits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"UnlockCredits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.9+commit.364da425", "ConstructorArguments": "", "SourceCode": "pragma solidity ^0.4.8;\r\n\r\ncontract ICreditBOND{\r\n    function getBondMultiplier(uint _creditAmount, uint _locktime) constant returns (uint bondMultiplier) {}\r\n    function getNewCoinsIssued(uint _lockedBalance, uint _blockDifference, uint _percentReward) constant returns(uint newCoinsIssued){}\r\n}\r\n\r\ncontract ITokenRecipient { \r\n    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); \r\n}\r\n\r\ncontract IERC20Token {\r\n\r\n    /// @return total amount of tokens\r\n    function totalSupply() constant returns (uint256 supply) {}\r\n\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {}\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _value) returns (bool success) {}\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\r\n\r\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of wei to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint256 _value) returns (bool success) {}\r\n\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}   \r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract CreditBIT is IERC20Token {\r\n\r\n    struct CreditBalance{\r\n        uint avaliableBalance;\r\n        uint lockedBalance;\r\n\r\n        uint bondMultiplier;\r\n        uint lockedUntilBlock;\r\n        uint lastBlockClaimed;\r\n    }\r\n\r\n\taddress public dev;\r\n\taddress public creditDaoAddress;\r\n    ICreditBOND creditBond;\r\n    address public creditGameAddress;\r\n    address public creditMcAddress;\r\n    bool public lockdown;\r\n\r\n    string public standard = 'Creditbit 1.0';\r\n    string public name = 'CreditBIT';\r\n    string public symbol = 'CRB';\r\n    uint8 public decimals = 8;\r\n\r\n    uint256 public totalSupply = 0;\r\n    uint public totalAvaliableSupply = 0;\r\n    uint public totalLockedSupply = 0; \r\n\r\n    mapping (address => CreditBalance) balances;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    //event Transfer(address indexed from, address indexed to, uint256 value);\r\n    //event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event LockCredits(address _owner, uint _amount, uint _numberOfBlocks);\r\n    event UnlockCredits(address _owner, uint _amount);\r\n    event Mint(address _owner, uint _amount);\r\n\r\n    function CreditBIT() {\r\n        dev = msg.sender;\r\n        lockdown = false;\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint avaliableBalance){\r\n        return balances[_owner].avaliableBalance;\r\n    }\r\n\r\n    function lockedBalanceOf(address _owner) constant returns (uint avaliableBalance){\r\n        return balances[_owner].lockedBalance;\r\n    }\r\n\r\n    function getAccountData(address _owner) constant returns (uint avaliableBalance, uint lockedBalance, uint bondMultiplier, uint lockedUntilBlock, uint lastBlockClaimed){\r\n        CreditBalance memory tempAccountData = balances[_owner];\r\n        return (\r\n            tempAccountData.avaliableBalance,\r\n            tempAccountData.lockedBalance,\r\n            tempAccountData.bondMultiplier,\r\n            tempAccountData.lockedUntilBlock,\r\n            tempAccountData.lastBlockClaimed\r\n        );\r\n    }\r\n\r\n    function lockBalance(uint _amount, uint _lockForBlocks) returns (uint error){\r\n        if (lockdown) throw;\r\n        uint realBlocksLocked;\r\n        if (block.number + _lockForBlocks < balances[msg.sender].lockedUntilBlock){\r\n            realBlocksLocked = balances[msg.sender].lockedUntilBlock;\r\n        }else{\r\n            realBlocksLocked = block.number + _lockForBlocks;\r\n        }\r\n        \r\n        uint realAmount;\r\n        if (balances[msg.sender].avaliableBalance < (_amount * 10**8)) {\r\n            realAmount = (balances[msg.sender].avaliableBalance / 10**8) * 10**8;\r\n        }else{\r\n            realAmount = (_amount * 10**8);\r\n        }\r\n\r\n        uint newBondMultiplier = creditBond.getBondMultiplier(realAmount, realBlocksLocked);\r\n        if (newBondMultiplier == 0) throw;\r\n\r\n        uint claimError = claimBondReward();\r\n\r\n        balances[msg.sender].avaliableBalance -= realAmount;\r\n        balances[msg.sender].lockedBalance += realAmount;\r\n        totalAvaliableSupply -= realAmount;\r\n        totalLockedSupply += realAmount;\r\n        balances[msg.sender].bondMultiplier = newBondMultiplier;\r\n        balances[msg.sender].lockedUntilBlock = realBlocksLocked;\r\n        balances[msg.sender].lastBlockClaimed = block.number;\r\n\r\n        return 0;\r\n    }\r\n\r\n    function mintMigrationTokens(address _reciever, uint _amount) returns (uint error){\r\n      \r\n        if (msg.sender != creditMcAddress) { return 1; }\r\n        \r\n        mint(_amount, _reciever);\r\n        return 0;\r\n    }\r\n\r\n    function claimBondReward() returns (uint error){\r\n        if (lockdown) throw;\r\n        if (balances[msg.sender].lockedBalance == 0) { return 1;}\r\n        \r\n        uint blockDifference = block.number - balances[msg.sender].lastBlockClaimed;\r\n        if (blockDifference < 10){ return 1;}\r\n        \r\n        uint newCreditsIssued = creditBond.getNewCoinsIssued(\r\n            balances[msg.sender].lockedBalance, \r\n            blockDifference, \r\n            balances[msg.sender].bondMultiplier);\r\n        if (newCreditsIssued == 0) { return 1; }\r\n        \r\n        if (balances[msg.sender].lockedUntilBlock < block.number ) {\r\n            balances[msg.sender].avaliableBalance += balances[msg.sender].lockedBalance;\r\n            totalAvaliableSupply += balances[msg.sender].lockedBalance;\r\n            totalLockedSupply -= balances[msg.sender].lockedBalance;\r\n            balances[msg.sender].bondMultiplier = 0;\r\n            balances[msg.sender].lockedUntilBlock = 0;\r\n            UnlockCredits(msg.sender, balances[msg.sender].lockedBalance);\r\n            balances[msg.sender].lockedBalance = 0;\r\n        }else{\r\n            balances[msg.sender].lastBlockClaimed = block.number;\r\n        }\r\n        \r\n        mint(newCreditsIssued, msg.sender);\r\n    }\r\n    \r\n    function claimGameReward(address _champion, uint _lockedTokenAmount, uint _lockTime) returns (uint error){\r\n        if (lockdown) throw;\r\n        if (msg.sender != creditGameAddress) { return 1; }\r\n        \r\n        uint newCreditsIssued = creditBond.getNewCoinsIssued(\r\n            _lockedTokenAmount, \r\n            _lockTime, \r\n            creditBond.getBondMultiplier(_lockedTokenAmount, _lockTime + block.number));\r\n        if (newCreditsIssued == 0) { return 1; }\r\n        mint(newCreditsIssued, _champion);\r\n        return 0;\r\n    }\r\n\r\n    function mintBonusTokensForGames(uint _amount) returns (uint error){\r\n        if (lockdown) throw;\r\n        if (msg.sender != creditDaoAddress) { return 1; }\r\n\r\n        mint(_amount, creditGameAddress);\r\n        return 0;\r\n    }\r\n\r\n    function mint(uint _newCreditsIssued, address _sender) internal {\r\n       \r\n        totalSupply += _newCreditsIssued;\r\n        totalAvaliableSupply += _newCreditsIssued;\r\n        balances[_sender].avaliableBalance += _newCreditsIssued;\r\n        Transfer(0x0, _sender, _newCreditsIssued);\r\n        Mint(_sender, _newCreditsIssued);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool success){\r\n        if (lockdown) throw;\r\n        if (balances[msg.sender].avaliableBalance < _value) throw;\r\n        if (balances[_to].avaliableBalance + _value < balances[_to].avaliableBalance) throw;\r\n        balances[msg.sender].avaliableBalance -= _value;\r\n        balances[_to].avaliableBalance += _value;\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        if (lockdown) throw;\r\n        allowance[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\r\n        if (lockdown) throw;\r\n        ITokenRecipient spender = ITokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }        \r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        if (lockdown) throw;\r\n        if (balances[_from].avaliableBalance < _value) throw;\r\n        if (balances[_to].avaliableBalance + _value < balances[_to].avaliableBalance) throw;\r\n        if (_value > allowance[_from][msg.sender]) throw;\r\n        balances[_from].avaliableBalance -= _value;\r\n        balances[_to].avaliableBalance += _value;\r\n        allowance[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    function setCreditBond(address _bondAddress) returns (uint error){\r\n        if (msg.sender != creditDaoAddress) {return 1;}\r\n        \r\n        creditBond = ICreditBOND(_bondAddress);\r\n        return 0;\r\n    }\r\n\r\n    function getCreditBondAddress() constant returns (address bondAddress){\r\n        return address(creditBond);\r\n    }\r\n    \r\n    function setCreditDaoAddress(address _daoAddress) returns (uint error){\r\n        if (msg.sender != dev) {return 1;}\r\n        \r\n        creditDaoAddress = _daoAddress;\r\n        return 0;\r\n    }\r\n    \r\n    function setCreditGameAddress(address _gameAddress) returns (uint error){\r\n        if (msg.sender != creditDaoAddress) {return 1;}\r\n        \r\n        creditGameAddress = _gameAddress;\r\n        return 0;\r\n    }\r\n    \r\n    function setCreditMcAddress(address _mcAddress) returns (uint error){\r\n        if (msg.sender != creditDaoAddress) {return 1;}\r\n        \r\n        creditMcAddress = _mcAddress;\r\n        return 0;\r\n    }\r\n\r\n    function lockToken() returns (uint error){\r\n        if (msg.sender != creditDaoAddress) {return 1;}\r\n\r\n        lockdown = !lockdown;\r\n        return 0;\r\n    }\r\n\r\n    function () {\r\n        throw;\r\n    }\r\n}", "OptimizationUsed": "0", "ContractName": "CreditBIT", "ByteCode": "0x60606040523615610189576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063029c19aa1461019e57806306fdde03146101f0578063095ea7b314610289578063106d2813146102e057806316a0ea3c1461032a57806318160ddd14610350578063191723ed1461037657806323b872dd146103b3578063313ce567146104295780633c0cfb3d146104555780633e8a0bc9146104a857806346f92818146104d257806356b093821461051c578063593557361461056e5780635a3b7e42146105b85780635d78650e1461065157806363586d6a146106b757806370a08231146106dd5780637bbbe9fd1461072757806391cca3db1461078357806395d89b41146107d55780639e4168121461086e578063a3d3a265146108c0578063a9059cbb1461090a578063bca7a9e214610961578063c501b87f14610987578063cae9ca51146109d1578063d740547e14610a6b578063dd62ed3e14610a9f578063df2fbae614610b08578063dfd5d3b014610b2e575b341561019157fe5b61019c5b610000565b565b005b34156101a657fe5b6101ae610b80565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156101f857fe5b610200610bab565b604051808060200182810382528381815181526020019150805190602001908083836000831461024f575b80518252602083111561024f5760208201915060208101905060208303925061022b565b505050905090810190601f16801561027b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561029157fe5b6102c6600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610c49565b604051808215151515815260200191505060405180910390f35b34156102e857fe5b610314600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610d56565b6040518082815260200191505060405180910390f35b341561033257fe5b61033a610e03565b6040518082815260200191505060405180910390f35b341561035857fe5b610360610e09565b6040518082815260200191505060405180910390f35b341561037e57fe5b61039d6004808035906020019091908035906020019091905050610e0f565b6040518082815260200191505060405180910390f35b34156103bb57fe5b61040f600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506111fb565b604051808215151515815260200191505060405180910390f35b341561043157fe5b61043961151d565b604051808260ff1660ff16815260200191505060405180910390f35b341561045d57fe5b610492600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611530565b6040518082815260200191505060405180910390f35b34156104b057fe5b6104b86115a7565b604051808215151515815260200191505060405180910390f35b34156104da57fe5b610506600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506115ba565b6040518082815260200191505060405180910390f35b341561052457fe5b61052c611667565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561057657fe5b6105a2600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061168d565b6040518082815260200191505060405180910390f35b34156105c057fe5b6105c86116da565b6040518080602001828103825283818151815260200191508051906020019080838360008314610617575b805182526020831115610617576020820191506020810190506020830392506105f3565b505050905090810190601f1680156106435780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561065957fe5b610685600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611778565b604051808681526020018581526020018481526020018381526020018281526020019550505050505060405180910390f35b34156106bf57fe5b6106c7611837565b6040518082815260200191505060405180910390f35b34156106e557fe5b610711600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611dbb565b6040518082815260200191505060405180910390f35b341561072f57fe5b61076d600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091908035906020019091905050611e08565b6040518082815260200191505060405180910390f35b341561078b57fe5b610793612024565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156107dd57fe5b6107e561204a565b6040518080602001828103825283818151815260200191508051906020019080838360008314610834575b80518252602083111561083457602082019150602081019050602083039250610810565b505050905090810190601f1680156108605780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561087657fe5b61087e6120e8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156108c857fe5b6108f4600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061210e565b6040518082815260200191505060405180910390f35b341561091257fe5b610947600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506121bb565b604051808215151515815260200191505060405180910390f35b341561096957fe5b6109716123c9565b6040518082815260200191505060405180910390f35b341561098f57fe5b6109bb600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061245d565b6040518082815260200191505060405180910390f35b34156109d957fe5b610a51600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190505061250a565b604051808215151515815260200191505060405180910390f35b3415610a7357fe5b610a8960048080359060200190919050506126aa565b6040518082815260200191505060405180910390f35b3415610aa757fe5b610af2600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061275c565b6040518082815260200191505060405180910390f35b3415610b1057fe5b610b18612781565b6040518082815260200191505060405180910390f35b3415610b3657fe5b610b3e612787565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b90565b60068054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c415780601f10610c1657610100808354040283529160200191610c41565b820191906000526020600020905b815481529060010190602001808311610c2457829003601f168201915b505050505081565b6000600460149054906101000a900460ff1615610c6557610000565b81600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a3600190505b92915050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610db85760019050610dfe565b81600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600090505b919050565b600b5481565b60095481565b60006000600060006000600460149054906101000a900460ff1615610e3357610000565b600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301548643011015610ec957600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301549350610ecf565b85430193505b6305f5e1008702600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001541015610f7e576305f5e1006305f5e100600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154811515610f7557fe5b04029250610f88565b6305f5e100870292505b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a47905cd84866000604051602001526040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050602060405180830381600087803b151561102657fe5b60325a03f1151561103357fe5b505050604051805190509150600082141561104d57610000565b611055611837565b905082600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000828254039250508190555082600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000828254019250508190555082600a6000828254039250508190555082600b6000828254019250508190555081600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018190555083600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003018190555043600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040181905550600094505b5050505092915050565b6000600460149054906101000a900460ff161561121757610000565b81600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154101561126657610000565b600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015482600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001540110156112f957610000565b600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111561138257610000565b81600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000828254039250508190555081600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000828254019250508190555081600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190505b9392505050565b600860009054906101000a900460ff1681565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561159257600190506115a1565b61159c82846127ad565b600090505b92915050565b600460149054906101000a900460ff1681565b6000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561161c5760019050611662565b81600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600090505b919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015490505b919050565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156117705780601f1061174557610100808354040283529160200191611770565b820191906000526020600020905b81548152906001019060200180831161175357829003601f168201915b505050505081565b6000600060006000600061178a6128dd565b600c60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060a0604051908101604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481525050905080600001518160200151826040015183606001518460800151955095509550955095505b5091939590929450565b600060006000600460149054906101000a900460ff161561185757610000565b6000600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015414156118ab5760019250611db6565b600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004015443039150600a8210156119045760019250611db6565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ea770a4c600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015484600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201546000604051602001526040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808481526020018381526020018281526020019350505050602060405180830381600087803b1515611a2e57fe5b60325a03f11515611a3b57fe5b5050506040518051905090506000811415611a595760019250611db6565b43600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301541015611d6357600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282540192505081905550600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154600a60008282540192505081905550600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154600b600082825403925050819055506000600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201819055506000600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301819055507f1b7095612c1333827f5c7699d2106e715bc4de177796130d89823c44c315dfd533600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a16000600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550611dab565b43600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401819055505b611db581336127ad565b5b505090565b6000600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015490505b919050565b60006000600460149054906101000a900460ff1615611e2657610000565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611e86576001915061201c565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ea770a4c8585600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a47905cd89438a016000604051602001526040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050602060405180830381600087803b1515611f6657fe5b60325a03f11515611f7357fe5b505050604051805190506000604051602001526040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808481526020018381526020018281526020019350505050602060405180830381600087803b1515611fe257fe5b60325a03f11515611fef57fe5b505050604051805190509050600081141561200d576001915061201c565b61201781866127ad565b600091505b509392505050565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60078054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156120e05780601f106120b5576101008083540402835291602001916120e0565b820191906000526020600020905b8154815290600101906020018083116120c357829003601f168201915b505050505081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561217057600190506121b6565b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600090505b919050565b6000600460149054906101000a900460ff16156121d757610000565b81600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154101561222657610000565b600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015482600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001540110156122b957610000565b81600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000828254039250508190555081600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190505b92915050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561242b576001905061245a565b600460149054906101000a900460ff1615600460146101000a81548160ff021916908315150217905550600090505b90565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156124bf5760019050612505565b81600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600090505b919050565b60006000600460149054906101000a900460ff161561252857610000565b8490506125358585610c49565b156126a1578073ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338630876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018060200182810382528381815181526020019150805190602001908083836000831461263e575b80518252602083111561263e5760208201915060208101905060208303925061261a565b505050905090810190601f16801561266a5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b151561268857fe5b60325a03f1151561269557fe5b505050600191506126a2565b5b509392505050565b6000600460149054906101000a900460ff16156126c657610000565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156127265760019050612757565b61275282600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166127ad565b600090505b919050565b600d602052816000526040600020602052806000526040600020600091509150505481565b600a5481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b8160096000828254019250508190555081600a6000828254019250508190555081600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600082825401925050819055508073ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a37f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968858183604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15b5050565b60a060405190810160405280600081526020016000815260200160008152602001600081526020016000815250905600a165627a7a72305820ed94e1deaef3d280cafc04c42d0491cd965a37e6bd517f97d78c50612c6a8db60029"}