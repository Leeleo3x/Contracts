{"Runs": "200", "SwarmSource": "bzzr://895b12902afb9411781486eacb96fea26bad3be21a1dc1a437571dc3d6772874", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"},{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"pullBack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"showMyTokenBalance\",\"outputs\":[{\"name\":\"tokenBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"},{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"Debug\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.20+commit.3155dd80", "ConstructorArguments": "000000000000000000000000d9acba6f45c7bed110cf7e86406ba2d295e9cc3a", "SourceCode": "/**\r\n * Investors relations: [email\u00a0protected]\r\n**/\r\n\r\npragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a start and end timestamps, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive.\r\n */\r\n \r\n \r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20Standard\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Interface {\r\n     function totalSupply() public constant returns (uint);\r\n     function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n     function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n     function transfer(address to, uint tokens) public returns (bool success);\r\n     function approve(address spender, uint tokens) public returns (bool success);\r\n     function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n     event Transfer(address indexed from, address indexed to, uint tokens);\r\n     event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ninterface OldXRPCToken {\r\n    function transfer(address receiver, uint amount) external;\r\n    function balanceOf(address _owner) external returns (uint256 balance);\r\n    function mint(address wallet, address buyer, uint256 tokenAmount) external;\r\n    function showMyTokenBalance(address addr) external;\r\n}\r\ncontract ARBITRAGEToken is ERC20Interface,Ownable {\r\n\r\n   using SafeMath for uint256;\r\n    uint256 public totalSupply;\r\n    mapping(address => uint256) tokenBalances;\r\n   \r\n   string public constant name = \"ARBITRAGE\";\r\n   string public constant symbol = \"ARB\";\r\n   uint256 public constant decimals = 18;\r\n\r\n   uint256 public constant INITIAL_SUPPLY = 10000000;\r\n    address ownerWallet;\r\n   // Owner of account approves the transfer of an amount to another account\r\n   mapping (address => mapping (address => uint256)) allowed;\r\n   event Debug(string message, address addr, uint256 number);\r\n\r\n    function ARBITRAGEToken(address wallet) public {\r\n        owner = msg.sender;\r\n        ownerWallet=wallet;\r\n        totalSupply = INITIAL_SUPPLY * 10 ** 18;\r\n        tokenBalances[wallet] = INITIAL_SUPPLY * 10 ** 18;   //Since we divided the token into 10^18 parts\r\n    }\r\n /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(tokenBalances[msg.sender]>=_value);\r\n    tokenBalances[msg.sender] = tokenBalances[msg.sender].sub(_value);\r\n    tokenBalances[_to] = tokenBalances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n  \r\n  \r\n     /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= tokenBalances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    tokenBalances[_from] = tokenBalances[_from].sub(_value);\r\n    tokenBalances[_to] = tokenBalances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n  \r\n     /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n     // ------------------------------------------------------------------------\r\n     // Total supply\r\n     // ------------------------------------------------------------------------\r\n     function totalSupply() public constant returns (uint) {\r\n         return totalSupply  - tokenBalances[address(0)];\r\n     }\r\n     \r\n    \r\n     \r\n     // ------------------------------------------------------------------------\r\n     // Returns the amount of tokens approved by the owner that can be\r\n     // transferred to the spender's account\r\n     // ------------------------------------------------------------------------\r\n     function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\r\n         return allowed[tokenOwner][spender];\r\n     }\r\n     \r\n     /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n     \r\n     // ------------------------------------------------------------------------\r\n     // Don't accept ETH\r\n     // ------------------------------------------------------------------------\r\n     function () public payable {\r\n         revert();\r\n     }\r\n \r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant public returns (uint256 balance) {\r\n    return tokenBalances[_owner];\r\n  }\r\n\r\n    function mint(address wallet, address buyer, uint256 tokenAmount) public onlyOwner {\r\n      require(tokenBalances[wallet] >= tokenAmount);               // checks if it has enough to sell\r\n      tokenBalances[buyer] = tokenBalances[buyer].add(tokenAmount);                  // adds the amount to buyer's balance\r\n      tokenBalances[wallet] = tokenBalances[wallet].sub(tokenAmount);                        // subtracts amount from seller's balance\r\n      Transfer(wallet, buyer, tokenAmount); \r\n      totalSupply=totalSupply.sub(tokenAmount);\r\n    }\r\n    function pullBack(address wallet, address buyer, uint256 tokenAmount) public onlyOwner {\r\n        require(tokenBalances[buyer]>=tokenAmount);\r\n        tokenBalances[buyer] = tokenBalances[buyer].sub(tokenAmount);\r\n        tokenBalances[wallet] = tokenBalances[wallet].add(tokenAmount);\r\n        Transfer(buyer, wallet, tokenAmount);\r\n        totalSupply=totalSupply.add(tokenAmount);\r\n     }\r\n    function showMyTokenBalance(address addr) public view returns (uint tokenBalance) {\r\n        tokenBalance = tokenBalances[addr];\r\n    }\r\n}", "OptimizationUsed": "1", "ContractName": "ARBITRAGEToken", "ByteCode": "0x6060604052600436106100f05763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100f5578063095ea7b31461017f57806318160ddd146101b557806323b872dd146101da5780632ff2e9dc14610202578063313ce56714610215578063661884631461022857806370a082311461024a57806377eefa5a146102695780638da5cb5b146102935780638fe476251461024a57806395d89b41146102c2578063a9059cbb146102d5578063c6c3bbe6146102f7578063d73dd6231461031f578063dd62ed3e14610341578063f2fde38b14610366575b600080fd5b341561010057600080fd5b610108610385565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561014457808201518382015260200161012c565b50505050905090810190601f1680156101715780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561018a57600080fd5b6101a1600160a060020a03600435166024356103bc565b604051901515815260200160405180910390f35b34156101c057600080fd5b6101c8610428565b60405190815260200160405180910390f35b34156101e557600080fd5b6101a1600160a060020a036004358116906024351660443561045a565b341561020d57600080fd5b6101c86105ca565b341561022057600080fd5b6101c86105d1565b341561023357600080fd5b6101a1600160a060020a03600435166024356105d6565b341561025557600080fd5b6101c8600160a060020a03600435166106d0565b341561027457600080fd5b610291600160a060020a03600435811690602435166044356106eb565b005b341561029e57600080fd5b6102a66107ea565b604051600160a060020a03909116815260200160405180910390f35b34156102cd57600080fd5b6101086107f9565b34156102e057600080fd5b6101a1600160a060020a0360043516602435610830565b341561030257600080fd5b610291600160a060020a0360043581169060243516604435610903565b341561032a57600080fd5b6101a1600160a060020a03600435166024356109f9565b341561034c57600080fd5b6101c8600160a060020a0360043581169060243516610a9d565b341561037157600080fd5b610291600160a060020a0360043516610ac8565b60408051908101604052600981527f4152424954524147450000000000000000000000000000000000000000000000602082015281565b600160a060020a03338116600081815260046020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b6000805260026020527fac33ff75c19e70fe83507db0d683fd3465c996598dc972688b7ace676c89077b546001540390565b6000600160a060020a038316151561047157600080fd5b600160a060020a03841660009081526002602052604090205482111561049657600080fd5b600160a060020a03808516600090815260046020908152604080832033909416835292905220548211156104c957600080fd5b600160a060020a0384166000908152600260205260409020546104f2908363ffffffff610b6316565b600160a060020a038086166000908152600260205260408082209390935590851681522054610527908363ffffffff610b7516565b600160a060020a0380851660009081526002602090815260408083209490945587831682526004815283822033909316825291909152205461056f908363ffffffff610b6316565b600160a060020a0380861660008181526004602090815260408083203386168452909152908190209390935590851691600080516020610b8c8339815191529085905190815260200160405180910390a35060019392505050565b6298968081565b601281565b600160a060020a0333811660009081526004602090815260408083209386168352929052908120548083111561063357600160a060020a03338116600090815260046020908152604080832093881683529290529081205561066a565b610643818463ffffffff610b6316565b600160a060020a033381166000908152600460209081526040808320938916835292905220555b600160a060020a0333811660008181526004602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b600160a060020a031660009081526002602052604090205490565b60005433600160a060020a0390811691161461070657600080fd5b600160a060020a0382166000908152600260205260409020548190101561072c57600080fd5b600160a060020a038216600090815260026020526040902054610755908263ffffffff610b6316565b600160a060020a03808416600090815260026020526040808220939093559085168152205461078a908263ffffffff610b7516565b600160a060020a0380851660008181526002602052604090819020939093559190841690600080516020610b8c8339815191529084905190815260200160405180910390a36001546107e2908263ffffffff610b7516565b600155505050565b600054600160a060020a031681565b60408051908101604052600381527f4152420000000000000000000000000000000000000000000000000000000000602082015281565b600160a060020a0333166000908152600260205260408120548290101561085657600080fd5b600160a060020a03331660009081526002602052604090205461087f908363ffffffff610b6316565b600160a060020a0333811660009081526002602052604080822093909355908516815220546108b4908363ffffffff610b7516565b600160a060020a038085166000818152600260205260409081902093909355913390911690600080516020610b8c8339815191529085905190815260200160405180910390a350600192915050565b60005433600160a060020a0390811691161461091e57600080fd5b600160a060020a0383166000908152600260205260409020548190101561094457600080fd5b600160a060020a03821660009081526002602052604090205461096d908263ffffffff610b7516565b600160a060020a0380841660009081526002602052604080822093909355908516815220546109a2908263ffffffff610b6316565b600160a060020a03808516600081815260026020526040908190209390935590841691600080516020610b8c8339815191529084905190815260200160405180910390a36001546107e2908263ffffffff610b6316565b600160a060020a033381166000908152600460209081526040808320938616835292905290812054610a31908363ffffffff610b7516565b600160a060020a0333811660008181526004602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205490565b60005433600160a060020a03908116911614610ae357600080fd5b600160a060020a0381161515610af857600080fd5b600054600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600082821115610b6f57fe5b50900390565b600082820183811015610b8457fe5b93925050505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820895b12902afb9411781486eacb96fea26bad3be21a1dc1a437571dc3d67728740029"}