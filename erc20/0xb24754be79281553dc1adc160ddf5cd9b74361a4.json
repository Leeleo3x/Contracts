{"Runs": "200", "SwarmSource": "bzzr://01b8c78745a19550519b6dcecd20dfeed03a051ddfddcab15d9d7b3e73527ef7", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"supply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"expiration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"decimalUnits\",\"type\":\"uint8\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":false,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.11+commit.68ef5810", "ConstructorArguments": "000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000900000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000065249414c544f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000358524c0000000000000000000000000000000000000000000000000000000000", "SourceCode": "pragma solidity ^0.4.11;\r\ncontract owned {\r\n    address public owner;\r\n\r\n    function owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        if (msg.sender != owner) throw;\r\n        _;\r\n    }\r\n\r\n}\r\n\r\ncontract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\r\n\r\ncontract ERC20 {\r\n    /* Public variables of the token */\r\n    string public standard = 'RIALTO 1.0';\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public supply;\r\n\r\n    /* This creates an array with all balances */\r\n    mapping (address => uint256) public balances;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    function ERC20(\r\n        uint256 initialSupply,\r\n        string tokenName,\r\n        uint8 decimalUnits,\r\n        string tokenSymbol\r\n        ) {\r\n        balances[msg.sender] = initialSupply;              // Give the creator all initial tokens\r\n        supply = initialSupply;                        // Update total supply\r\n        name = tokenName;                                   // Set the name for display purposes\r\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\r\n        decimals = decimalUnits;                            // Amount of decimals for display purposes\r\n    }\r\n\r\n\r\n    function totalSupply() constant returns (uint totalSupply);\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n\r\n\r\n    /* Send coins */\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n\r\n /* A contract attempts to get the coins */\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n\r\n\r\n    /* Get the amount of remaining tokens to spend */\r\n        function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n                return allowance[_owner][_spender];\r\n        }\r\n\r\n    /* Allow another contract to spend some tokens in your behalf */\r\n    function approve(address _spender, uint256 _value)\r\n        returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    \r\n    /* Approve and then communicate the approved contract in a single tx */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n        returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }   \r\n    }   \r\n    \r\n       /* This unnamed function is called whenever someone tries to send ether to it */\r\n    function () {\r\n        throw;     // Prevents accidental sending of ether\r\n    }   \r\n}   \r\ncontract Rialto is owned, ERC20 {\r\n\r\n    uint256 public lockPercentage = 15;\r\n\r\n    uint256 public expiration = block.timestamp + 180 days;\r\n\r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    function Rialto(\r\n        uint256 initialSupply, // 100000000000000000\r\n        string tokenName, //RIALTO\r\n        uint8 decimalUnits, //9\r\n        string tokenSymbol // XRL\r\n    ) ERC20 (initialSupply, tokenName, decimalUnits, tokenSymbol) {}\r\n\r\n        /* Get balance of specific address */\r\n        function balanceOf(address _owner) constant returns (uint256 balance) {\r\n                return balances[_owner];\r\n        }\r\n\r\n        /* Get total supply of issued coins */\r\n        function totalSupply() constant returns (uint256 totalSupply) {\r\n                return supply;\r\n        }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        if(!transfer(newOwner, balances[msg.sender])) throw;\r\n        owner = newOwner;\r\n    }\r\n\r\n    /* Send coins */\r\n    function transfer(address _to, uint256 _value) returns (bool success){\r\n\r\n\r\n        if (balances[msg.sender] < _value) throw;           // Check if the sender has enough\r\n\r\n        if (balances[_to] + _value < balances[_to]) throw; // Check for overflows\r\n\r\n        if (msg.sender == owner && block.timestamp < expiration && (balances[msg.sender]-_value) < lockPercentage * supply / 100 ) throw;  // Locked funds\r\n\r\n        balances[msg.sender] -= _value;                     // Subtract from the sender\r\n        balances[_to] += _value;                            // Add the same to the recipient\r\n        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\r\n        return true;\r\n    }\r\n\r\n\r\n    /* A contract attempts to get the coins */\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n\r\n\r\n        if (balances[_from] < _value) throw;                 // Check if the sender has enough\r\n        if (balances[_to] + _value < balances[_to]) throw;  // Check for overflows\r\n        if (_value > allowance[_from][msg.sender]) throw;   // Check allowance\r\n        if (_from == owner && block.timestamp < expiration && (balances[_from]-_value) < lockPercentage * supply / 100) throw; //Locked funds\r\n\r\n        balances[_from] -= _value;                          // Subtract from the sender\r\n        balances[_to] += _value;                            // Add the same to the recipient\r\n        allowance[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n  }", "OptimizationUsed": "1", "ContractName": "Rialto", "ByteCode": "0x606060405236156100ee5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663047fc9aa811461010457806306fdde0314610126578063095ea7b3146101b657806318160ddd146101e957806323b872dd1461020b57806327e235e314610244578063313ce56714610272578063356442b9146102985780634665096d146102ba5780635a3b7e42146102dc57806370a082311461036c5780638da5cb5b1461039a57806395d89b41146103c6578063a9059cbb14610456578063cae9ca5114610489578063dd62ed3e14610500578063f2fde38b14610534575b34156100f657fe5b6101025b60006000fd5b565b005b341561010c57fe5b610114610552565b60408051918252519081900360200190f35b341561012e57fe5b610136610558565b60408051602080825283518183015283519192839290830191850190808383821561017c575b80518252602083111561017c57601f19909201916020918201910161015c565b505050905090810190601f1680156101a85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101be57fe5b6101d5600160a060020a03600435166024356105e3565b604080519115158252519081900360200190f35b34156101f157fe5b61011461064e565b60408051918252519081900360200190f35b341561021357fe5b6101d5600160a060020a0360043581169060243516604435610655565b604080519115158252519081900360200190f35b341561024c57fe5b610114600160a060020a03600435166107c1565b60408051918252519081900360200190f35b341561027a57fe5b6102826107d3565b6040805160ff9092168252519081900360200190f35b34156102a057fe5b6101146107dc565b60408051918252519081900360200190f35b34156102c257fe5b6101146107e2565b60408051918252519081900360200190f35b34156102e457fe5b6101366107e8565b60408051602080825283518183015283519192839290830191850190808383821561017c575b80518252602083111561017c57601f19909201916020918201910161015c565b505050905090810190601f1680156101a85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561037457fe5b610114600160a060020a0360043516610875565b60408051918252519081900360200190f35b34156103a257fe5b6103aa610894565b60408051600160a060020a039092168252519081900360200190f35b34156103ce57fe5b6101366108a3565b60408051602080825283518183015283519192839290830191850190808383821561017c575b80518252602083111561017c57601f19909201916020918201910161015c565b505050905090810190601f1680156101a85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561045e57fe5b6101d5600160a060020a0360043516602435610931565b604080519115158252519081900360200190f35b341561049157fe5b604080516020600460443581810135601f81018490048402850184019095528484526101d5948235600160a060020a0316946024803595606494929391909201918190840183828082843750949650610a4f95505050505050565b604080519115158252519081900360200190f35b341561050857fe5b610114600160a060020a0360043581169060243516610b89565b60408051918252519081900360200190f35b341561053c57fe5b610102600160a060020a0360043516610bb6565b005b60055481565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156105db5780601f106105b0576101008083540402835291602001916105db565b820191906000526020600020905b8154815290600101906020018083116105be57829003601f168201915b505050505081565b600160a060020a03338116600081815260076020908152604080832094871680845294825280832086905580518681529051929493927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060015b92915050565b6005545b90565b600160a060020a0383166000908152600660205260408120548290101561067c5760006000fd5b600160a060020a03831660009081526006602052604090205482810110156106a45760006000fd5b600160a060020a03808516600090815260076020908152604080832033909416835292905220548211156106d85760006000fd5b600054600160a060020a0385811691161480156106f6575060095442105b801561072a5750600554600854606491025b600160a060020a03861660009081526006602052604090205491900490839003105b156107355760006000fd5b600160a060020a03808516600081815260066020908152604080832080548890039055878516808452818420805489019055848452600783528184203390961684529482529182902080548790039055815186815291517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35060015b9392505050565b60066020526000908152604090205481565b60045460ff1681565b60085481565b60095481565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105db5780601f106105b0576101008083540402835291602001916105db565b820191906000526020600020905b8154815290600101906020018083116105be57829003601f168201915b505050505081565b600160a060020a0381166000908152600660205260409020545b919050565b600054600160a060020a031681565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105db5780601f106105b0576101008083540402835291602001916105db565b820191906000526020600020905b8154815290600101906020018083116105be57829003601f168201915b505050505081565b600160a060020a033316600090815260066020526040812054829010156109585760006000fd5b600160a060020a03831660009081526006602052604090205482810110156109805760006000fd5b60005433600160a060020a03908116911614801561099f575060095442105b80156109d35750600554600854606491025b600160a060020a03331660009081526006602052604090205491900490839003105b156109de5760006000fd5b600160a060020a03338116600081815260066020908152604080832080548890039055938716808352918490208054870190558351868152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35060015b92915050565b600083610a5c81856105e3565b15610b805780600160a060020a0316638f4ffcb1338630876040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360008314610b20575b805182526020831115610b2057601f199092019160209182019101610b00565b505050905090810190601f168015610b4c5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1515610b6a57fe5b6102c65a03f11515610b7857fe5b505050600191505b5b509392505050565b600160a060020a038083166000908152600760209081526040808320938516835292905220545b92915050565b60005433600160a060020a03908116911614610bd25760006000fd5b600160a060020a033316600090815260066020526040902054610bf6908290610931565b1515610c025760006000fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b505600a165627a7a7230582001b8c78745a19550519b6dcecd20dfeed03a051ddfddcab15d9d7b3e73527ef70029"}