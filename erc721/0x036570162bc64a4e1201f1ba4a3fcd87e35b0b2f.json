{"Runs": "200", "SwarmSource": "bzzr://5e52f5bdf2322fd3157c6f4fcab0f9d2d3661f6e9552c41e535de62446ae9d91", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proxyOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"operator\",\"type\":\"address\"},{\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"int256\"},{\"name\":\"y\",\"type\":\"int256\"}],\"name\":\"ownerOfLand\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"setLatestToNow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"x\",\"type\":\"int256\"},{\"name\":\"y\",\"type\":\"int256\"},{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"assignNewParcel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"int256[]\"},{\"name\":\"y\",\"type\":\"int256[]\"}],\"name\":\"ownerOfLandMany\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"latestPing\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"x\",\"type\":\"int256[]\"},{\"name\":\"y\",\"type\":\"int256[]\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"updateManyLandData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"operator\",\"type\":\"address\"},{\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedDeploy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"assetId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"authorizeDeploy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"x\",\"type\":\"int256\"},{\"name\":\"y\",\"type\":\"int256\"},{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferLand\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"int256\"},{\"name\":\"y\",\"type\":\"int256\"}],\"name\":\"landData\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"x\",\"type\":\"int256[]\"},{\"name\":\"y\",\"type\":\"int256[]\"},{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferManyLand\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"tokensOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ping\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GET_METADATA\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"operator\",\"type\":\"address\"},{\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"isUpdateAuthorized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"tokenMetadata\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"int256\"},{\"name\":\"y\",\"type\":\"int256\"}],\"name\":\"encodeTokenId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"decodeTokenId\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"x\",\"type\":\"int256[]\"},{\"name\":\"y\",\"type\":\"int256[]\"},{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"assignMultipleParcels\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"x\",\"type\":\"int256[]\"},{\"name\":\"y\",\"type\":\"int256[]\"},{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"createEstateWithMetadata\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"landOf\",\"outputs\":[{\"name\":\"\",\"type\":\"int256[]\"},{\"name\":\"\",\"type\":\"int256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"setEstateRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"updateOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"operator\",\"type\":\"address\"},{\"name\":\"authorized\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"int256\"},{\"name\":\"y\",\"type\":\"int256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"assetId\",\"type\":\"uint256\"},{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"setUpdateOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"assetId\",\"type\":\"uint256\"},{\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"x\",\"type\":\"int256[]\"},{\"name\":\"y\",\"type\":\"int256[]\"},{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"createEstate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"x\",\"type\":\"int256\"},{\"name\":\"y\",\"type\":\"int256\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"updateLandData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"estateRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"assetHolder\",\"type\":\"address\"},{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"getApprovedAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"x\",\"type\":\"int256[]\"},{\"name\":\"y\",\"type\":\"int256[]\"},{\"name\":\"estateId\",\"type\":\"uint256\"}],\"name\":\"transferManyLandToEstate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"x\",\"type\":\"int256\"},{\"name\":\"y\",\"type\":\"int256\"},{\"name\":\"estateId\",\"type\":\"uint256\"}],\"name\":\"transferLandToEstate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"forbidDeploy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"EstateRegistrySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"assetId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"string\"}],\"name\":\"Update\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"assetId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"UpdateOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_deployer\",\"type\":\"address\"}],\"name\":\"DeployAuthorized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_deployer\",\"type\":\"address\"}],\"name\":\"DeployForbidden\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"assetId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"authorized\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.24+commit.e67f0147", "ConstructorArguments": "", "SourceCode": "pragma solidity ^0.4.24;\r\n\r\n// File: contracts/upgradable/ProxyStorage.sol\r\n\r\ncontract ProxyStorage {\r\n\r\n  /**\r\n   * Current contract to which we are proxing\r\n   */\r\n  address public currentContract;\r\n  address public proxyOwner;\r\n}\r\n\r\n// File: contracts/upgradable/OwnableStorage.sol\r\n\r\ncontract OwnableStorage {\r\n\r\n  address public owner;\r\n\r\n  constructor() internal {\r\n    owner = msg.sender;\r\n  }\r\n\r\n}\r\n\r\n// File: erc821/contracts/AssetRegistryStorage.sol\r\n\r\ncontract AssetRegistryStorage {\r\n\r\n  string internal _name;\r\n  string internal _symbol;\r\n  string internal _description;\r\n\r\n  /**\r\n   * Stores the total count of assets managed by this registry\r\n   */\r\n  uint256 internal _count;\r\n\r\n  /**\r\n   * Stores an array of assets owned by a given account\r\n   */\r\n  mapping(address => uint256[]) internal _assetsOf;\r\n\r\n  /**\r\n   * Stores the current holder of an asset\r\n   */\r\n  mapping(uint256 => address) internal _holderOf;\r\n\r\n  /**\r\n   * Stores the index of an asset in the `_assetsOf` array of its holder\r\n   */\r\n  mapping(uint256 => uint256) internal _indexOfAsset;\r\n\r\n  /**\r\n   * Stores the data associated with an asset\r\n   */\r\n  mapping(uint256 => string) internal _assetData;\r\n\r\n  /**\r\n   * For a given account, for a given operator, store whether that operator is\r\n   * allowed to transfer and modify assets on behalf of them.\r\n   */\r\n  mapping(address => mapping(address => bool)) internal _operators;\r\n\r\n  /**\r\n   * Approval array\r\n   */\r\n  mapping(uint256 => address) internal _approval;\r\n}\r\n\r\n// File: contracts/estate/IEstateRegistry.sol\r\n\r\ncontract IEstateRegistry {\r\n  function mint(address to, string metadata) external returns (uint256);\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner); // from ERC721\r\n\r\n  // Events\r\n\r\n  event CreateEstate(\r\n    address indexed _owner,\r\n    uint256 indexed _estateId,\r\n    string _data\r\n  );\r\n\r\n  event AddLand(\r\n    uint256 indexed _estateId,\r\n    uint256 indexed _landId\r\n  );\r\n\r\n  event RemoveLand(\r\n    uint256 indexed _estateId,\r\n    uint256 indexed _landId,\r\n    address indexed _destinatary\r\n  );\r\n\r\n  event Update(\r\n    uint256 indexed _assetId,\r\n    address indexed _holder,\r\n    address indexed _operator,\r\n    string _data\r\n  );\r\n\r\n  event UpdateOperator(\r\n    uint256 indexed _estateId,\r\n    address indexed _operator\r\n  );\r\n\r\n  event SetLANDRegistry(\r\n    address indexed _registry\r\n  );\r\n}\r\n\r\n// File: contracts/land/LANDStorage.sol\r\n\r\ncontract LANDStorage {\r\n  mapping (address => uint) public latestPing;\r\n\r\n  uint256 constant clearLow = 0xffffffffffffffffffffffffffffffff00000000000000000000000000000000;\r\n  uint256 constant clearHigh = 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff;\r\n  uint256 constant factor = 0x100000000000000000000000000000000;\r\n\r\n  mapping (address => bool) internal _deprecated_authorizedDeploy;\r\n\r\n  mapping (uint256 => address) public updateOperator;\r\n\r\n  IEstateRegistry public estateRegistry;\r\n\r\n  mapping (address => bool) public authorizedDeploy;\r\n}\r\n\r\n// File: contracts/Storage.sol\r\n\r\ncontract Storage is ProxyStorage, OwnableStorage, AssetRegistryStorage, LANDStorage {\r\n}\r\n\r\n// File: contracts/upgradable/Ownable.sol\r\n\r\ncontract Ownable is Storage {\r\n\r\n  event OwnerUpdate(address _prevOwner, address _newOwner);\r\n\r\n  modifier onlyOwner {\r\n    assert(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    require(_newOwner != owner, \"Cannot transfer to yourself\");\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: contracts/upgradable/IApplication.sol\r\n\r\ncontract IApplication {\r\n  function initialize(bytes data) public;\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: erc821/contracts/IERC721Base.sol\r\n\r\ninterface IERC721Base {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  // function exists(uint256 assetId) external view returns (bool);\r\n  function ownerOf(uint256 assetId) external view returns (address);\r\n\r\n  function balanceOf(address holder) external view returns (uint256);\r\n\r\n  function safeTransferFrom(address from, address to, uint256 assetId) external;\r\n  function safeTransferFrom(address from, address to, uint256 assetId, bytes userData) external;\r\n\r\n  function transferFrom(address from, address to, uint256 assetId) external;\r\n\r\n  function approve(address operator, uint256 assetId) external;\r\n  function setApprovalForAll(address operator, bool authorized) external;\r\n\r\n  function getApprovedAddress(uint256 assetId) external view returns (address);\r\n  function isApprovedForAll(address assetHolder, address operator) external view returns (bool);\r\n\r\n  function isAuthorized(address operator, uint256 assetId) external view returns (bool);\r\n\r\n  /**\r\n   * @dev Deprecated transfer event. Now we use the standard with three parameters\r\n   * It is only used in the ABI to get old transfer events. Do not remove\r\n   */\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 indexed assetId,\r\n    address operator,\r\n    bytes userData\r\n  );\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 indexed assetId\r\n  );\r\n  event ApprovalForAll(\r\n    address indexed operator,\r\n    address indexed holder,\r\n    bool authorized\r\n  );\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed operator,\r\n    uint256 indexed assetId\r\n  );\r\n}\r\n\r\n// File: erc821/contracts/IERC721Receiver.sol\r\n\r\ninterface IERC721Receiver {\r\n  function onERC721Received(\r\n    address _operator,\r\n    address _from,\r\n    uint256 _tokenId,\r\n    bytes   _userData\r\n  ) external returns (bytes4);\r\n}\r\n\r\n// File: erc821/contracts/ERC165.sol\r\n\r\ninterface ERC165 {\r\n  function supportsInterface(bytes4 interfaceID) external view returns (bool);\r\n}\r\n\r\n// File: erc821/contracts/ERC721Base.sol\r\n\r\ncontract ERC721Base is AssetRegistryStorage, IERC721Base, ERC165 {\r\n  using SafeMath for uint256;\r\n\r\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n  bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n  bytes4 private constant InterfaceId_ERC165 = 0x01ffc9a7;\r\n  /*\r\n   * 0x01ffc9a7 ===\r\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\r\n   */\r\n\r\n  bytes4 private constant Old_InterfaceId_ERC721 = 0x7c0633c6;\r\n  bytes4 private constant InterfaceId_ERC721 = 0x80ac58cd;\r\n   /*\r\n   * 0x80ac58cd ===\r\n   *   bytes4(keccak256('balanceOf(address)')) ^\r\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\r\n   *   bytes4(keccak256('approve(address,uint256)')) ^\r\n   *   bytes4(keccak256('getApproved(uint256)')) ^\r\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\r\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\r\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\r\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\r\n   */\r\n\r\n  //\r\n  // Global Getters\r\n  //\r\n\r\n  /**\r\n   * @dev Gets the total amount of assets stored by the contract\r\n   * @return uint256 representing the total amount of assets\r\n   */\r\n  function totalSupply() external view returns (uint256) {\r\n    return _totalSupply();\r\n  }\r\n  function _totalSupply() internal view returns (uint256) {\r\n    return _count;\r\n  }\r\n\r\n  //\r\n  // Asset-centric getter functions\r\n  //\r\n\r\n  /**\r\n   * @dev Queries what address owns an asset. This method does not throw.\r\n   * In order to check if the asset exists, use the `exists` function or check if the\r\n   * return value of this call is `0`.\r\n   * @return uint256 the assetId\r\n   */\r\n  function ownerOf(uint256 assetId) external view returns (address) {\r\n    return _ownerOf(assetId);\r\n  }\r\n  function _ownerOf(uint256 assetId) internal view returns (address) {\r\n    return _holderOf[assetId];\r\n  }\r\n\r\n  //\r\n  // Holder-centric getter functions\r\n  //\r\n  /**\r\n   * @dev Gets the balance of the specified address\r\n   * @param owner address to query the balance of\r\n   * @return uint256 representing the amount owned by the passed address\r\n   */\r\n  function balanceOf(address owner) external view returns (uint256) {\r\n    return _balanceOf(owner);\r\n  }\r\n  function _balanceOf(address owner) internal view returns (uint256) {\r\n    return _assetsOf[owner].length;\r\n  }\r\n\r\n  //\r\n  // Authorization getters\r\n  //\r\n\r\n  /**\r\n   * @dev Query whether an address has been authorized to move any assets on behalf of someone else\r\n   * @param operator the address that might be authorized\r\n   * @param assetHolder the address that provided the authorization\r\n   * @return bool true if the operator has been authorized to move any assets\r\n   */\r\n  function isApprovedForAll(address assetHolder, address operator)\r\n    external view returns (bool)\r\n  {\r\n    return _isApprovedForAll(assetHolder, operator);\r\n  }\r\n  function _isApprovedForAll(address assetHolder, address operator)\r\n    internal view returns (bool)\r\n  {\r\n    return _operators[assetHolder][operator];\r\n  }\r\n\r\n  /**\r\n   * @dev Query what address has been particularly authorized to move an asset\r\n   * @param assetId the asset to be queried for\r\n   * @return bool true if the asset has been approved by the holder\r\n   */\r\n  function getApproved(uint256 assetId) external view returns (address) {\r\n    return _getApprovedAddress(assetId);\r\n  }\r\n  function getApprovedAddress(uint256 assetId) external view returns (address) {\r\n    return _getApprovedAddress(assetId);\r\n  }\r\n  function _getApprovedAddress(uint256 assetId) internal view returns (address) {\r\n    return _approval[assetId];\r\n  }\r\n\r\n  /**\r\n   * @dev Query if an operator can move an asset.\r\n   * @param operator the address that might be authorized\r\n   * @param assetId the asset that has been `approved` for transfer\r\n   * @return bool true if the asset has been approved by the holder\r\n   */\r\n  function isAuthorized(address operator, uint256 assetId) external view returns (bool) {\r\n    return _isAuthorized(operator, assetId);\r\n  }\r\n  function _isAuthorized(address operator, uint256 assetId) internal view returns (bool)\r\n  {\r\n    require(operator != 0);\r\n    address owner = _ownerOf(assetId);\r\n    if (operator == owner) {\r\n      return true;\r\n    }\r\n    return _isApprovedForAll(owner, operator) || _getApprovedAddress(assetId) == operator;\r\n  }\r\n\r\n  //\r\n  // Authorization\r\n  //\r\n\r\n  /**\r\n   * @dev Authorize a third party operator to manage (send) msg.sender's asset\r\n   * @param operator address to be approved\r\n   * @param authorized bool set to true to authorize, false to withdraw authorization\r\n   */\r\n  function setApprovalForAll(address operator, bool authorized) external {\r\n    return _setApprovalForAll(operator, authorized);\r\n  }\r\n  function _setApprovalForAll(address operator, bool authorized) internal {\r\n    if (authorized) {\r\n      require(!_isApprovedForAll(msg.sender, operator));\r\n      _addAuthorization(operator, msg.sender);\r\n    } else {\r\n      require(_isApprovedForAll(msg.sender, operator));\r\n      _clearAuthorization(operator, msg.sender);\r\n    }\r\n    emit ApprovalForAll(msg.sender, operator, authorized);\r\n  }\r\n\r\n  /**\r\n   * @dev Authorize a third party operator to manage one particular asset\r\n   * @param operator address to be approved\r\n   * @param assetId asset to approve\r\n   */\r\n  function approve(address operator, uint256 assetId) external {\r\n    address holder = _ownerOf(assetId);\r\n    require(msg.sender == holder || _isApprovedForAll(msg.sender, holder));\r\n    require(operator != holder);\r\n\r\n    if (_getApprovedAddress(assetId) != operator) {\r\n      _approval[assetId] = operator;\r\n      emit Approval(holder, operator, assetId);\r\n    }\r\n  }\r\n\r\n  function _addAuthorization(address operator, address holder) private {\r\n    _operators[holder][operator] = true;\r\n  }\r\n\r\n  function _clearAuthorization(address operator, address holder) private {\r\n    _operators[holder][operator] = false;\r\n  }\r\n\r\n  //\r\n  // Internal Operations\r\n  //\r\n\r\n  function _addAssetTo(address to, uint256 assetId) internal {\r\n    _holderOf[assetId] = to;\r\n\r\n    uint256 length = _balanceOf(to);\r\n\r\n    _assetsOf[to].push(assetId);\r\n\r\n    _indexOfAsset[assetId] = length;\r\n\r\n    _count = _count.add(1);\r\n  }\r\n\r\n  function _removeAssetFrom(address from, uint256 assetId) internal {\r\n    uint256 assetIndex = _indexOfAsset[assetId];\r\n    uint256 lastAssetIndex = _balanceOf(from).sub(1);\r\n    uint256 lastAssetId = _assetsOf[from][lastAssetIndex];\r\n\r\n    _holderOf[assetId] = 0;\r\n\r\n    // Insert the last asset into the position previously occupied by the asset to be removed\r\n    _assetsOf[from][assetIndex] = lastAssetId;\r\n\r\n    // Resize the array\r\n    _assetsOf[from][lastAssetIndex] = 0;\r\n    _assetsOf[from].length--;\r\n\r\n    // Remove the array if no more assets are owned to prevent pollution\r\n    if (_assetsOf[from].length == 0) {\r\n      delete _assetsOf[from];\r\n    }\r\n\r\n    // Update the index of positions for the asset\r\n    _indexOfAsset[assetId] = 0;\r\n    _indexOfAsset[lastAssetId] = assetIndex;\r\n\r\n    _count = _count.sub(1);\r\n  }\r\n\r\n  function _clearApproval(address holder, uint256 assetId) internal {\r\n    if (_ownerOf(assetId) == holder && _approval[assetId] != 0) {\r\n      _approval[assetId] = 0;\r\n      emit Approval(holder, 0, assetId);\r\n    }\r\n  }\r\n\r\n  //\r\n  // Supply-altering functions\r\n  //\r\n\r\n  function _generate(uint256 assetId, address beneficiary) internal {\r\n    require(_holderOf[assetId] == 0);\r\n\r\n    _addAssetTo(beneficiary, assetId);\r\n\r\n    emit Transfer(0, beneficiary, assetId);\r\n  }\r\n\r\n  function _destroy(uint256 assetId) internal {\r\n    address holder = _holderOf[assetId];\r\n    require(holder != 0);\r\n\r\n    _removeAssetFrom(holder, assetId);\r\n\r\n    emit Transfer(holder, 0, assetId);\r\n  }\r\n\r\n  //\r\n  // Transaction related operations\r\n  //\r\n\r\n  modifier onlyHolder(uint256 assetId) {\r\n    require(_ownerOf(assetId) == msg.sender);\r\n    _;\r\n  }\r\n\r\n  modifier onlyAuthorized(uint256 assetId) {\r\n    require(_isAuthorized(msg.sender, assetId));\r\n    _;\r\n  }\r\n\r\n  modifier isCurrentOwner(address from, uint256 assetId) {\r\n    require(_ownerOf(assetId) == from);\r\n    _;\r\n  }\r\n\r\n  modifier isDestinataryDefined(address destinatary) {\r\n    require(destinatary != 0);\r\n    _;\r\n  }\r\n\r\n  modifier destinataryIsNotHolder(uint256 assetId, address to) {\r\n    require(_ownerOf(assetId) != to);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Alias of `safeTransferFrom(from, to, assetId, '')`\r\n   *\r\n   * @param from address that currently owns an asset\r\n   * @param to address to receive the ownership of the asset\r\n   * @param assetId uint256 ID of the asset to be transferred\r\n   */\r\n  function safeTransferFrom(address from, address to, uint256 assetId) external {\r\n    return _doTransferFrom(from, to, assetId, '', true);\r\n  }\r\n\r\n  /**\r\n   * @dev Securely transfers the ownership of a given asset from one address to\r\n   * another address, calling the method `onNFTReceived` on the target address if\r\n   * there's code associated with it\r\n   *\r\n   * @param from address that currently owns an asset\r\n   * @param to address to receive the ownership of the asset\r\n   * @param assetId uint256 ID of the asset to be transferred\r\n   * @param userData bytes arbitrary user information to attach to this transfer\r\n   */\r\n  function safeTransferFrom(address from, address to, uint256 assetId, bytes userData) external {\r\n    return _doTransferFrom(from, to, assetId, userData, true);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers the ownership of a given asset from one address to another address\r\n   * Warning! This function does not attempt to verify that the target address can send\r\n   * tokens.\r\n   *\r\n   * @param from address sending the asset\r\n   * @param to address to receive the ownership of the asset\r\n   * @param assetId uint256 ID of the asset to be transferred\r\n   */\r\n  function transferFrom(address from, address to, uint256 assetId) external {\r\n    return _doTransferFrom(from, to, assetId, '', false);\r\n  }\r\n\r\n  function _doTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 assetId,\r\n    bytes userData,\r\n    bool doCheck\r\n  )\r\n    onlyAuthorized(assetId)\r\n    internal\r\n  {\r\n    _moveToken(from, to, assetId, userData, doCheck);\r\n  }\r\n\r\n  function _moveToken(\r\n    address from,\r\n    address to,\r\n    uint256 assetId,\r\n    bytes userData,\r\n    bool doCheck\r\n  )\r\n    isDestinataryDefined(to)\r\n    destinataryIsNotHolder(assetId, to)\r\n    isCurrentOwner(from, assetId)\r\n    internal\r\n  {\r\n    address holder = _holderOf[assetId];\r\n    _removeAssetFrom(holder, assetId);\r\n    _clearApproval(holder, assetId);\r\n    _addAssetTo(to, assetId);\r\n\r\n    if (doCheck && _isContract(to)) {\r\n      // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))\r\n      require(\r\n        IERC721Receiver(to).onERC721Received(\r\n          msg.sender, holder, assetId, userData\r\n        ) == ERC721_RECEIVED\r\n      );\r\n    }\r\n\r\n    emit Transfer(holder, to, assetId);\r\n  }\r\n\r\n  /**\r\n   * Internal function that moves an asset from one holder to another\r\n   */\r\n\r\n  /**\r\n   * @dev Returns `true` if the contract implements `interfaceID` and `interfaceID` is not 0xffffffff, `false` otherwise\r\n   * @param  _interfaceID The interface identifier, as specified in ERC-165\r\n   */\r\n  function supportsInterface(bytes4 _interfaceID) external view returns (bool) {\r\n\r\n    if (_interfaceID == 0xffffffff) {\r\n      return false;\r\n    }\r\n    return _interfaceID == InterfaceId_ERC165 || _interfaceID == Old_InterfaceId_ERC721 || _interfaceID == InterfaceId_ERC721;\r\n  }\r\n\r\n  //\r\n  // Utilities\r\n  //\r\n\r\n  function _isContract(address addr) internal view returns (bool) {\r\n    uint size;\r\n    assembly { size := extcodesize(addr) }\r\n    return size > 0;\r\n  }\r\n}\r\n\r\n// File: erc821/contracts/IERC721Enumerable.sol\r\n\r\ncontract IERC721Enumerable {\r\n\r\n  /**\r\n   * @notice Enumerate active tokens\r\n   * @dev Throws if `index` >= `totalSupply()`, otherwise SHALL NOT throw.\r\n   * @param index A counter less than `totalSupply()`\r\n   * @return The identifier for the `index`th asset, (sort order not\r\n   *  specified)\r\n   */\r\n  // TODO (eordano): Not implemented\r\n  // function tokenByIndex(uint256 index) public view returns (uint256 _assetId);\r\n\r\n  /**\r\n   * @notice Count of owners which own at least one asset\r\n   *  Must not throw.\r\n   * @return A count of the number of owners which own asset\r\n   */\r\n  // TODO (eordano): Not implemented\r\n  // function countOfOwners() public view returns (uint256 _count);\r\n\r\n  /**\r\n   * @notice Enumerate owners\r\n   * @dev Throws if `index` >= `countOfOwners()`, otherwise must not throw.\r\n   * @param index A counter less than `countOfOwners()`\r\n   * @return The address of the `index`th owner (sort order not specified)\r\n   */\r\n  // TODO (eordano): Not implemented\r\n  // function ownerByIndex(uint256 index) public view returns (address owner);\r\n\r\n  /**\r\n   * @notice Get all tokens of a given address\r\n   * @dev This is not intended to be used on-chain\r\n   * @param owner address of the owner to query\r\n   * @return a list of all assetIds of a user\r\n   */\r\n  function tokensOf(address owner) external view returns (uint256[]);\r\n\r\n  /**\r\n   * @notice Enumerate tokens assigned to an owner\r\n   * @dev Throws if `index` >= `balanceOf(owner)` or if\r\n   *  `owner` is the zero address, representing invalid assets.\r\n   *  Otherwise this must not throw.\r\n   * @param owner An address where we are interested in assets owned by them\r\n   * @param index A counter less than `balanceOf(owner)`\r\n   * @return The identifier for the `index`th asset assigned to `owner`,\r\n   *   (sort order not specified)\r\n   */\r\n  function tokenOfOwnerByIndex(\r\n    address owner, uint256 index\r\n  ) external view returns (uint256 tokenId);\r\n}\r\n\r\n// File: erc821/contracts/ERC721Enumerable.sol\r\n\r\ncontract ERC721Enumerable is AssetRegistryStorage, IERC721Enumerable {\r\n\r\n  /**\r\n   * @notice Get all tokens of a given address\r\n   * @dev This is not intended to be used on-chain\r\n   * @param owner address of the owner to query\r\n   * @return a list of all assetIds of a user\r\n   */\r\n  function tokensOf(address owner) external view returns (uint256[]) {\r\n    return _assetsOf[owner];\r\n  }\r\n\r\n  /**\r\n   * @notice Enumerate tokens assigned to an owner\r\n   * @dev Throws if `index` >= `balanceOf(owner)` or if\r\n   *  `owner` is the zero address, representing invalid assets.\r\n   *  Otherwise this must not throw.\r\n   * @param owner An address where we are interested in assets owned by them\r\n   * @param index A counter less than `balanceOf(owner)`\r\n   * @return The identifier for the `index`th asset assigned to `owner`,\r\n   *   (sort order not specified)\r\n   */\r\n  function tokenOfOwnerByIndex(\r\n    address owner, uint256 index\r\n  )\r\n    external\r\n    view\r\n    returns (uint256 assetId)\r\n  {\r\n    require(index < _assetsOf[owner].length);\r\n    require(index < (1<<127));\r\n    return _assetsOf[owner][index];\r\n  }\r\n\r\n}\r\n\r\n// File: erc821/contracts/IERC721Metadata.sol\r\n\r\ncontract IERC721Metadata {\r\n\r\n  /**\r\n   * @notice A descriptive name for a collection of NFTs in this contract\r\n   */\r\n  function name() external view returns (string);\r\n\r\n  /**\r\n   * @notice An abbreviated name for NFTs in this contract\r\n   */\r\n  function symbol() external view returns (string);\r\n\r\n  /**\r\n   * @notice A description of what this DAR is used for\r\n   */\r\n  function description() external view returns (string);\r\n\r\n  /**\r\n   * Stores arbitrary info about a token\r\n   */\r\n  function tokenMetadata(uint256 assetId) external view returns (string);\r\n}\r\n\r\n// File: erc821/contracts/ERC721Metadata.sol\r\n\r\ncontract ERC721Metadata is AssetRegistryStorage, IERC721Metadata {\r\n  function name() external view returns (string) {\r\n    return _name;\r\n  }\r\n  function symbol() external view returns (string) {\r\n    return _symbol;\r\n  }\r\n  function description() external view returns (string) {\r\n    return _description;\r\n  }\r\n  function tokenMetadata(uint256 assetId) external view returns (string) {\r\n    return _assetData[assetId];\r\n  }\r\n  function _update(uint256 assetId, string data) internal {\r\n    _assetData[assetId] = data;\r\n  }\r\n}\r\n\r\n// File: erc821/contracts/FullAssetRegistry.sol\r\n\r\ncontract FullAssetRegistry is ERC721Base, ERC721Enumerable, ERC721Metadata {\r\n  constructor() public {\r\n  }\r\n\r\n  /**\r\n   * @dev Method to check if an asset identified by the given id exists under this DAR.\r\n   * @return uint256 the assetId\r\n   */\r\n  function exists(uint256 assetId) external view returns (bool) {\r\n    return _exists(assetId);\r\n  }\r\n  function _exists(uint256 assetId) internal view returns (bool) {\r\n    return _holderOf[assetId] != 0;\r\n  }\r\n\r\n  function decimals() external pure returns (uint256) {\r\n    return 0;\r\n  }\r\n}\r\n\r\n// File: contracts/land/ILANDRegistry.sol\r\n\r\ninterface ILANDRegistry {\r\n\r\n  // LAND can be assigned by the owner\r\n  function assignNewParcel(int x, int y, address beneficiary) external;\r\n  function assignMultipleParcels(int[] x, int[] y, address beneficiary) external;\r\n\r\n  // After one year, LAND can be claimed from an inactive public key\r\n  function ping() external;\r\n\r\n  // LAND-centric getters\r\n  function encodeTokenId(int x, int y) external pure returns (uint256);\r\n  function decodeTokenId(uint value) external pure returns (int, int);\r\n  function exists(int x, int y) external view returns (bool);\r\n  function ownerOfLand(int x, int y) external view returns (address);\r\n  function ownerOfLandMany(int[] x, int[] y) external view returns (address[]);\r\n  function landOf(address owner) external view returns (int[], int[]);\r\n  function landData(int x, int y) external view returns (string);\r\n\r\n  // Transfer LAND\r\n  function transferLand(int x, int y, address to) external;\r\n  function transferManyLand(int[] x, int[] y, address to) external;\r\n\r\n  // Update LAND\r\n  function updateLandData(int x, int y, string data) external;\r\n  function updateManyLandData(int[] x, int[] y, string data) external;\r\n\r\n  // Events\r\n\r\n  event Update(\r\n    uint256 indexed assetId,\r\n    address indexed holder,\r\n    address indexed operator,\r\n    string data\r\n  );\r\n\r\n  event UpdateOperator(\r\n    uint256 indexed assetId,\r\n    address indexed operator\r\n  );\r\n\r\n  event DeployAuthorized(\r\n    address indexed _caller,\r\n    address indexed _deployer\r\n  );\r\n\r\n  event DeployForbidden(\r\n    address indexed _caller,\r\n    address indexed _deployer\r\n  );\r\n}\r\n\r\n// File: contracts/metadata/IMetadataHolder.sol\r\n\r\ncontract IMetadataHolder is ERC165 {\r\n  function getMetadata(uint256 /* assetId */) external view returns (string);\r\n}\r\n\r\n// File: contracts/land/LANDRegistry.sol\r\n\r\n/* solium-disable function-order */\r\ncontract LANDRegistry is Storage, Ownable, FullAssetRegistry, ILANDRegistry {\r\n  bytes4 constant public GET_METADATA = bytes4(keccak256(\"getMetadata(uint256)\"));\r\n\r\n  function initialize(bytes) external {\r\n    _name = \"Decentraland LAND\";\r\n    _symbol = \"LAND\";\r\n    _description = \"Contract that stores the Decentraland LAND registry\";\r\n  }\r\n\r\n  modifier onlyProxyOwner() {\r\n    require(msg.sender == proxyOwner, \"This function can only be called by the proxy owner\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyDeployer() {\r\n    require(msg.sender == proxyOwner || authorizedDeploy[msg.sender], \"This function can only be called by an authorized deployer\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyOwnerOf(uint256 assetId) {\r\n    require(\r\n      msg.sender == _ownerOf(assetId),\r\n      \"This function can only be called by the owner of the asset\"\r\n    );\r\n    _;\r\n  }\r\n\r\n  modifier onlyUpdateAuthorized(uint256 tokenId) {\r\n    require(\r\n      msg.sender == _ownerOf(tokenId) || _isUpdateAuthorized(msg.sender, tokenId),\r\n      \"msg.sender is not authorized to update\"\r\n    );\r\n    _;\r\n  }\r\n\r\n  //\r\n  // Authorization\r\n  //\r\n\r\n  function isUpdateAuthorized(address operator, uint256 assetId) external view returns (bool) {\r\n    return _isUpdateAuthorized(operator, assetId);\r\n  }\r\n\r\n  function _isUpdateAuthorized(address operator, uint256 assetId) internal view returns (bool) {\r\n    return operator == _ownerOf(assetId) || updateOperator[assetId] == operator;\r\n  }\r\n\r\n  function authorizeDeploy(address beneficiary) external {\r\n    require(beneficiary != address(0), \"invalid address\");\r\n    require(authorizedDeploy[beneficiary] == false, \"address is already authorized\");\r\n\r\n    authorizedDeploy[beneficiary] = true;\r\n    emit DeployAuthorized(msg.sender, beneficiary);\r\n  }\r\n\r\n  function forbidDeploy(address beneficiary) external onlyProxyOwner {\r\n    require(beneficiary != address(0), \"invalid address\");\r\n    require(authorizedDeploy[beneficiary], \"address is already forbidden\");\r\n    \r\n    authorizedDeploy[beneficiary] = false;\r\n    emit DeployForbidden(msg.sender, beneficiary);\r\n  }\r\n\r\n  //\r\n  // LAND Create\r\n  //\r\n\r\n  function assignNewParcel(int x, int y, address beneficiary) external onlyDeployer {\r\n    _generate(_encodeTokenId(x, y), beneficiary);\r\n  }\r\n\r\n  function assignMultipleParcels(int[] x, int[] y, address beneficiary) external onlyDeployer {\r\n    for (uint i = 0; i < x.length; i++) {\r\n      _generate(_encodeTokenId(x[i], y[i]), beneficiary);\r\n    }\r\n  }\r\n\r\n  //\r\n  // Inactive keys after 1 year lose ownership\r\n  //\r\n\r\n  function ping() external {\r\n    // solium-disable-next-line security/no-block-members\r\n    latestPing[msg.sender] = block.timestamp;\r\n  }\r\n\r\n  function setLatestToNow(address user) external {\r\n    require(msg.sender == proxyOwner || _isApprovedForAll(msg.sender, user), \"Unauthorized user\");\r\n    // solium-disable-next-line security/no-block-members\r\n    latestPing[user] = block.timestamp;\r\n  }\r\n\r\n  //\r\n  // LAND Getters\r\n  //\r\n\r\n  function encodeTokenId(int x, int y) external pure returns (uint) {\r\n    return _encodeTokenId(x, y);\r\n  }\r\n\r\n  function _encodeTokenId(int x, int y) internal pure returns (uint result) {\r\n    require(\r\n      -1000000 < x && x < 1000000 && -1000000 < y && y < 1000000,\r\n      \"The coordinates should be inside bounds\"\r\n    );\r\n    return _unsafeEncodeTokenId(x, y);\r\n  }\r\n\r\n  function _unsafeEncodeTokenId(int x, int y) internal pure returns (uint) {\r\n    return ((uint(x) * factor) & clearLow) | (uint(y) & clearHigh);\r\n  }\r\n\r\n  function decodeTokenId(uint value) external pure returns (int, int) {\r\n    return _decodeTokenId(value);\r\n  }\r\n\r\n  function _unsafeDecodeTokenId(uint value) internal pure returns (int x, int y) {\r\n    x = expandNegative128BitCast((value & clearLow) >> 128);\r\n    y = expandNegative128BitCast(value & clearHigh);\r\n  }\r\n\r\n  function _decodeTokenId(uint value) internal pure returns (int x, int y) {\r\n    (x, y) = _unsafeDecodeTokenId(value);\r\n    require(\r\n      -1000000 < x && x < 1000000 && -1000000 < y && y < 1000000,\r\n      \"The coordinates should be inside bounds\"\r\n    );\r\n  }\r\n\r\n  function expandNegative128BitCast(uint value) internal pure returns (int) {\r\n    if (value & (1<<127) != 0) {\r\n      return int(value | clearLow);\r\n    }\r\n    return int(value);\r\n  }\r\n\r\n  function exists(int x, int y) external view returns (bool) {\r\n    return _exists(x, y);\r\n  }\r\n\r\n  function _exists(int x, int y) internal view returns (bool) {\r\n    return _exists(_encodeTokenId(x, y));\r\n  }\r\n\r\n  function ownerOfLand(int x, int y) external view returns (address) {\r\n    return _ownerOfLand(x, y);\r\n  }\r\n\r\n  function _ownerOfLand(int x, int y) internal view returns (address) {\r\n    return _ownerOf(_encodeTokenId(x, y));\r\n  }\r\n\r\n  function ownerOfLandMany(int[] x, int[] y) external view returns (address[]) {\r\n    require(x.length > 0, \"You should supply at least one coordinate\");\r\n    require(x.length == y.length, \"The coordinates should have the same length\");\r\n\r\n    address[] memory addrs = new address[](x.length);\r\n    for (uint i = 0; i < x.length; i++) {\r\n      addrs[i] = _ownerOfLand(x[i], y[i]);\r\n    }\r\n\r\n    return addrs;\r\n  }\r\n\r\n  function landOf(address owner) external view returns (int[], int[]) {\r\n    uint256 len = _assetsOf[owner].length;\r\n    int[] memory x = new int[](len);\r\n    int[] memory y = new int[](len);\r\n\r\n    int assetX;\r\n    int assetY;\r\n    for (uint i = 0; i < len; i++) {\r\n      (assetX, assetY) = _decodeTokenId(_assetsOf[owner][i]);\r\n      x[i] = assetX;\r\n      y[i] = assetY;\r\n    }\r\n\r\n    return (x, y);\r\n  }\r\n\r\n  function tokenMetadata(uint256 assetId) external view returns (string) {\r\n    return _tokenMetadata(assetId);\r\n  }\r\n\r\n  function _tokenMetadata(uint256 assetId) internal view returns (string) {\r\n    address _owner = _ownerOf(assetId);\r\n    if (_isContract(_owner) && _owner != address(estateRegistry)) {\r\n      if ((ERC165(_owner)).supportsInterface(GET_METADATA)) {\r\n        return IMetadataHolder(_owner).getMetadata(assetId);\r\n      }\r\n    }\r\n    return _assetData[assetId];\r\n  }\r\n\r\n  function landData(int x, int y) external view returns (string) {\r\n    return _tokenMetadata(_encodeTokenId(x, y));\r\n  }\r\n\r\n  //\r\n  // LAND Transfer\r\n  //\r\n\r\n  function transferFrom(address from, address to, uint256 assetId) external {\r\n    require(to != address(estateRegistry), \"EstateRegistry unsafe transfers are not allowed\");\r\n    return _doTransferFrom(\r\n      from,\r\n      to,\r\n      assetId,\r\n      \"\",\r\n      false\r\n    );\r\n  }\r\n\r\n  function transferLand(int x, int y, address to) external {\r\n    uint256 tokenId = _encodeTokenId(x, y);\r\n    _doTransferFrom(\r\n      _ownerOf(tokenId),\r\n      to,\r\n      tokenId,\r\n      \"\",\r\n      true\r\n    );\r\n  }\r\n\r\n  function transferManyLand(int[] x, int[] y, address to) external {\r\n    require(x.length > 0, \"You should supply at least one coordinate\");\r\n    require(x.length == y.length, \"The coordinates should have the same length\");\r\n\r\n    for (uint i = 0; i < x.length; i++) {\r\n      uint256 tokenId = _encodeTokenId(x[i], y[i]);\r\n      _doTransferFrom(\r\n        _ownerOf(tokenId),\r\n        to,\r\n        tokenId,\r\n        \"\",\r\n        true\r\n      );\r\n    }\r\n  }\r\n\r\n  function transferLandToEstate(int x, int y, uint256 estateId) external {\r\n    require(\r\n      estateRegistry.ownerOf(estateId) == msg.sender,\r\n      \"You must own the Estate you want to transfer to\"\r\n    );\r\n\r\n    uint256 tokenId = _encodeTokenId(x, y);\r\n    _doTransferFrom(\r\n      _ownerOf(tokenId),\r\n      address(estateRegistry),\r\n      tokenId,\r\n      toBytes(estateId),\r\n      true\r\n    );\r\n  }\r\n\r\n  function transferManyLandToEstate(int[] x, int[] y, uint256 estateId) external {\r\n    require(x.length > 0, \"You should supply at least one coordinate\");\r\n    require(x.length == y.length, \"The coordinates should have the same length\");\r\n    require(\r\n      estateRegistry.ownerOf(estateId) == msg.sender,\r\n      \"You must own the Estate you want to transfer to\"\r\n    );\r\n\r\n    for (uint i = 0; i < x.length; i++) {\r\n      uint256 tokenId = _encodeTokenId(x[i], y[i]);\r\n      _doTransferFrom(\r\n        _ownerOf(tokenId),\r\n        address(estateRegistry),\r\n        tokenId,\r\n        toBytes(estateId),\r\n        true\r\n      );\r\n    }\r\n  }\r\n\r\n  function setUpdateOperator(uint256 assetId, address operator) external onlyOwnerOf(assetId) {\r\n    updateOperator[assetId] = operator;\r\n    emit UpdateOperator(assetId, operator);\r\n  }\r\n\r\n  //\r\n  // Estate generation\r\n  //\r\n\r\n  event EstateRegistrySet(address indexed registry);\r\n\r\n  function setEstateRegistry(address registry) external onlyProxyOwner {\r\n    estateRegistry = IEstateRegistry(registry);\r\n    emit EstateRegistrySet(registry);\r\n  }\r\n\r\n  function createEstate(int[] x, int[] y, address beneficiary) external returns (uint256) {\r\n    // solium-disable-next-line arg-overflow\r\n    return _createEstate(x, y, beneficiary, \"\");\r\n  }\r\n\r\n  function createEstateWithMetadata(\r\n    int[] x,\r\n    int[] y,\r\n    address beneficiary,\r\n    string metadata\r\n  )\r\n    external\r\n    returns (uint256)\r\n  {\r\n    // solium-disable-next-line arg-overflow\r\n    return _createEstate(x, y, beneficiary, metadata);\r\n  }\r\n\r\n  function _createEstate(\r\n    int[] x,\r\n    int[] y,\r\n    address beneficiary,\r\n    string metadata\r\n  )\r\n    internal\r\n    returns (uint256)\r\n  {\r\n    require(x.length > 0, \"You should supply at least one coordinate\");\r\n    require(x.length == y.length, \"The coordinates should have the same length\");\r\n    require(address(estateRegistry) != 0, \"The Estate registry should be set\");\r\n\r\n    uint256 estateTokenId = estateRegistry.mint(beneficiary, metadata);\r\n    bytes memory estateTokenIdBytes = toBytes(estateTokenId);\r\n\r\n    for (uint i = 0; i < x.length; i++) {\r\n      uint256 tokenId = _encodeTokenId(x[i], y[i]);\r\n      _doTransferFrom(\r\n        _ownerOf(tokenId),\r\n        address(estateRegistry),\r\n        tokenId,\r\n        estateTokenIdBytes,\r\n        true\r\n      );\r\n    }\r\n\r\n    return estateTokenId;\r\n  }\r\n\r\n  function toBytes(uint256 x) internal pure returns (bytes b) {\r\n    b = new bytes(32);\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { mstore(add(b, 32), x) }\r\n  }\r\n\r\n  //\r\n  // LAND Update\r\n  //\r\n\r\n  function updateLandData(\r\n    int x,\r\n    int y,\r\n    string data\r\n  )\r\n    external\r\n    onlyUpdateAuthorized(_encodeTokenId(x, y))\r\n  {\r\n    return _updateLandData(x, y, data);\r\n  }\r\n\r\n  function _updateLandData(\r\n    int x,\r\n    int y,\r\n    string data\r\n  )\r\n    internal\r\n    onlyUpdateAuthorized(_encodeTokenId(x, y))\r\n  {\r\n    uint256 assetId = _encodeTokenId(x, y);\r\n    address owner = _holderOf[assetId];\r\n\r\n    _update(assetId, data);\r\n\r\n    emit Update(\r\n      assetId,\r\n      owner,\r\n      msg.sender,\r\n      data\r\n    );\r\n  }\r\n\r\n  function updateManyLandData(int[] x, int[] y, string data) external {\r\n    require(x.length > 0, \"You should supply at least one coordinate\");\r\n    require(x.length == y.length, \"The coordinates should have the same length\");\r\n    for (uint i = 0; i < x.length; i++) {\r\n      _updateLandData(x[i], y[i], data);\r\n    }\r\n  }\r\n\r\n  function _doTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 assetId,\r\n    bytes userData,\r\n    bool doCheck\r\n  )\r\n    internal\r\n  {\r\n    updateOperator[assetId] = address(0);\r\n\r\n    super._doTransferFrom(\r\n      from,\r\n      to,\r\n      assetId,\r\n      userData,\r\n      doCheck\r\n    );\r\n  }\r\n\r\n  function _isContract(address addr) internal view returns (bool) {\r\n    uint size;\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(addr) }\r\n    return size > 0;\r\n  }\r\n}", "OptimizationUsed": "0", "ContractName": "LANDRegistry", "ByteCode": "0x608060405260043610610293576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806301ffc9a714610298578063025313a2146102fc57806306fdde0314610353578063081812fc146103e3578063095ea7b3146104505780631080f2511461049d578063133cbe3a1461051457806318160ddd146105575780631cc69ac1146105825780631d4b11e4146105d95780631e375901146106815780631e4c7736146106d857806323b872dd146107435780632972b0f0146107b057806329ffab3b146108155780632f745c5914610870578063313ce567146108d1578063341f13f2146108fc57806335e64aaa1461093f57806342842e0e14610996578063439fab9114610a035780634c4bf93614610a3e5780634dad900314610aee5780634f558e7914610b615780635a3f267214610ba65780635c36b18614610c3e5780636352211e14610c5557806365181ad314610cc257806365937ab914610d2b5780636914db6014610d905780636fb7e58814610e3657806370a0823114610e81578063721d7d8e14610ed85780637284e41614610f2f5780637efd911214610fbf5780638668a41614611007578063881eeaa51461107a578063885363eb146111195780638da5cb5b146111f95780638de74aa11461125057806395d89b41146112935780639d40b85014611323578063a22cb46514611390578063a8d88127146113df578063b0b02c601461142e578063b88d4fde1461147b578063ca8a2c0814611500578063d4dd159414611587578063e387d31a146115d6578063e985e9c51461162d578063eca4742a146116a8578063f2fde38b14611715578063f5f83a6114611758578063f9cbec43146117b5578063fd7a1b00146117f6575b600080fd5b3480156102a457600080fd5b506102e260048036038101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050611839565b604051808215151515815260200191505060405180910390f35b34801561030857600080fd5b506103116119d0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561035f57600080fd5b506103686119f6565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103a857808201518184015260208101905061038d565b50505050905090810190601f1680156103d55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156103ef57600080fd5b5061040e60048036038101908080359060200190929190505050611a98565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561045c57600080fd5b5061049b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611aaa565b005b3480156104a957600080fd5b506104d26004803603810190808035906020019092919080359060200190929190505050611c2d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561052057600080fd5b50610555600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611c41565b005b34801561056357600080fd5b5061056c611d5e565b6040518082815260200191505060405180910390f35b34801561058e57600080fd5b506105d76004803603810190808035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611d6d565b005b3480156105e557600080fd5b5061062a600480360381019080803590602001908201803590602001919091929391929390803590602001908201803590602001919091929391929390505050611ec4565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561066d578082015181840152602081019050610652565b505050509050019250505060405180910390f35b34801561068d57600080fd5b506106c2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506120e7565b6040518082815260200191505060405180910390f35b3480156106e457600080fd5b506107416004803603810190808035906020019082018035906020019190919293919293908035906020019082018035906020019190919293919293908035906020019082018035906020019190919293919293905050506120ff565b005b34801561074f57600080fd5b506107ae600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506122cf565b005b3480156107bc57600080fd5b506107fb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506123de565b604051808215151515815260200191505060405180910390f35b34801561082157600080fd5b50610856600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506123f2565b604051808215151515815260200191505060405180910390f35b34801561087c57600080fd5b506108bb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612412565b6040518082815260200191505060405180910390f35b3480156108dd57600080fd5b506108e66124e1565b6040518082815260200191505060405180910390f35b34801561090857600080fd5b5061093d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506124e9565b005b34801561094b57600080fd5b506109946004803603810190808035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061270b565b005b3480156109a257600080fd5b50610a01600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612745565b005b348015610a0f57600080fd5b50610a3c600480360381019080803590602001908201803590602001919091929391929390505050612768565b005b348015610a4a57600080fd5b50610a736004803603810190808035906020019092919080359060200190929190505050612877565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610ab3578082015181840152602081019050610a98565b50505050905090810190601f168015610ae05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610afa57600080fd5b50610b5f600480360381019080803590602001908201803590602001919091929391929390803590602001908201803590602001919091929391929390803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612893565b005b348015610b6d57600080fd5b50610b8c60048036038101908080359060200190929190505050612a5a565b604051808215151515815260200191505060405180910390f35b348015610bb257600080fd5b50610be7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612a6c565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610c2a578082015181840152602081019050610c0f565b505050509050019250505060405180910390f35b348015610c4a57600080fd5b50610c53612b03565b005b348015610c6157600080fd5b50610c8060048036038101908080359060200190929190505050612b49565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610cce57600080fd5b50610cd7612b5b565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b348015610d3757600080fd5b50610d76600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612b94565b604051808215151515815260200191505060405180910390f35b348015610d9c57600080fd5b50610dbb60048036038101908080359060200190929190505050612ba8565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610dfb578082015181840152602081019050610de0565b50505050905090810190601f168015610e285780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610e4257600080fd5b50610e6b6004803603810190808035906020019092919080359060200190929190505050612bba565b6040518082815260200191505060405180910390f35b348015610e8d57600080fd5b50610ec2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612bce565b6040518082815260200191505060405180910390f35b348015610ee457600080fd5b50610eed612be0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610f3b57600080fd5b50610f44612c05565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610f84578082015181840152602081019050610f69565b50505050905090810190601f168015610fb15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610fcb57600080fd5b50610fea60048036038101908080359060200190929190505050612ca7565b604051808381526020018281526020019250505060405180910390f35b34801561101357600080fd5b50611078600480360381019080803590602001908201803590602001919091929391929390803590602001908201803590602001919091929391929390803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612cbc565b005b34801561108657600080fd5b50611103600480360381019080803590602001908201803590602001919091929391929390803590602001908201803590602001919091929391929390803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001919091929391929390505050612e5d565b6040518082815260200191505060405180910390f35b34801561112557600080fd5b5061115a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612f08565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156111a1578082015181840152602081019050611186565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156111e35780820151818401526020810190506111c8565b5050505090500194505050505060405180910390f35b34801561120557600080fd5b5061120e61308a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561125c57600080fd5b50611291600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506130b0565b005b34801561129f57600080fd5b506112a8613222565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156112e85780820151818401526020810190506112cd565b50505050905090810190601f1680156113155780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561132f57600080fd5b5061134e600480360381019080803590602001909291905050506132c4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561139c57600080fd5b506113dd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035151590602001909291905050506132f7565b005b3480156113eb57600080fd5b506114146004803603810190808035906020019092919080359060200190929190505050613305565b604051808215151515815260200191505060405180910390f35b34801561143a57600080fd5b5061147960048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613319565b005b34801561148757600080fd5b506114fe600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001919091929391929390505050613486565b005b34801561150c57600080fd5b50611571600480360381019080803590602001908201803590602001919091929391929390803590602001908201803590602001919091929391929390803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506134cd565b6040518082815260200191505060405180910390f35b34801561159357600080fd5b506115d46004803603810190808035906020019092919080359060200190929190803590602001908201803590602001919091929391929390505050613554565b005b3480156115e257600080fd5b506115eb613684565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561163957600080fd5b5061168e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506136aa565b604051808215151515815260200191505060405180910390f35b3480156116b457600080fd5b506116d3600480360381019080803590602001909291905050506136be565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561172157600080fd5b50611756600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506136d0565b005b34801561176457600080fd5b506117b360048036038101908080359060200190820180359060200191909192939192939080359060200190820180359060200191909192939192939080359060200190929190505050613833565b005b3480156117c157600080fd5b506117f4600480360381019080803590602001909291908035906020019092919080359060200190929190505050613ba8565b005b34801561180257600080fd5b50611837600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613d90565b005b600063ffffffff7c010000000000000000000000000000000000000000000000000000000002827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141561188e57600090506119cb565b6301ffc9a77c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061195d5750637c0633c67c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806119c857506380ac58cd7c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b90505b919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606060038054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611a8e5780601f10611a6357610100808354040283529160200191611a8e565b820191906000526020600020905b815481529060010190602001808311611a7157829003601f168201915b5050505050905090565b6000611aa382614096565b9050919050565b6000611ab5826140d3565b90508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611af75750611af63382614110565b5b1515611b0257600080fd5b8073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515611b3d57600080fd5b8273ffffffffffffffffffffffffffffffffffffffff16611b5d83614096565b73ffffffffffffffffffffffffffffffffffffffff16141515611c285782600c600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505050565b6000611c3983836141a4565b905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611ca35750611ca23382614110565b5b1515611d17576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f556e617574686f72697a6564207573657200000000000000000000000000000081525060200191505060405180910390fd5b42600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b6000611d686141c0565b905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611e125750601160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b1515611eac576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603a8152602001807f546869732066756e6374696f6e2063616e206f6e6c792062652063616c6c656481526020017f20627920616e20617574686f72697a6564206465706c6f79657200000000000081525060400191505060405180910390fd5b611ebf611eb984846141ca565b826142e2565b505050565b60608060008087879050111515611f69576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001807f596f752073686f756c6420737570706c79206174206c65617374206f6e65206381526020017f6f6f7264696e617465000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b848490508787905014151561200c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b8152602001807f54686520636f6f7264696e617465732073686f756c642068617665207468652081526020017f73616d65206c656e67746800000000000000000000000000000000000000000081525060400191505060405180910390fd5b8686905060405190808252806020026020018201604052801561203e5781602001602082028038833980820191505090505b509150600090505b868690508110156120da57612083878783818110151561206257fe5b90506020020135868684818110151561207757fe5b905060200201356141a4565b828281518110151561209157fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080600101915050612046565b8192505050949350505050565b600d6020528060005260406000206000915090505481565b600080878790501115156121a1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001807f596f752073686f756c6420737570706c79206174206c65617374206f6e65206381526020017f6f6f7264696e617465000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8484905087879050141515612244576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b8152602001807f54686520636f6f7264696e617465732073686f756c642068617665207468652081526020017f73616d65206c656e67746800000000000000000000000000000000000000000081525060400191505060405180910390fd5b600090505b868690508110156122c6576122b9878783818110151561226557fe5b90506020020135868684818110151561227a57fe5b9050602002013585858080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505061438e565b8080600101915050612249565b50505050505050565b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156123bb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f8152602001807f457374617465526567697374727920756e73616665207472616e73666572732081526020017f617265206e6f7420616c6c6f776564000000000000000000000000000000000081525060400191505060405180910390fd5b6123d98383836020604051908101604052806000815250600061459c565b505050565b60006123ea8383614603565b905092915050565b60116020528060005260406000206000915054906101000a900460ff1681565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490508210151561246457600080fd5b6f800000000000000000000000000000008210151561248257600080fd5b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811015156124ce57fe5b9060005260206000200154905092915050565b600080905090565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561258e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f696e76616c69642061646472657373000000000000000000000000000000000081525060200191505060405180910390fd5b60001515601160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515612656576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f6164647265737320697320616c726561647920617574686f72697a656400000081525060200191505060405180910390fd5b6001601160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f9e237638dcd1b2be1fc623ab6a47409b34dc8a62196448dd2d6b9045b2c3315760405160405180910390a350565b600061271784846141ca565b905061273f612725826140d3565b83836020604051908101604052806000815250600161459c565b50505050565b6127638383836020604051908101604052806000815250600161459c565b505050565b6040805190810160405280601181526020017f446563656e7472616c616e64204c414e44000000000000000000000000000000815250600390805190602001906127b3929190615d15565b506040805190810160405280600481526020017f4c414e4400000000000000000000000000000000000000000000000000000000815250600490805190602001906127ff929190615d15565b50606060405190810160405280603381526020017f436f6e747261637420746861742073746f7265732074686520446563656e747281526020017f616c616e64204c414e442072656769737472790000000000000000000000000081525060059080519060200190612872929190615d15565b505050565b606061288b61288684846141ca565b6146c6565b905092915050565b600080600087879050111515612937576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001807f596f752073686f756c6420737570706c79206174206c65617374206f6e65206381526020017f6f6f7264696e617465000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b84849050878790501415156129da576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b8152602001807f54686520636f6f7264696e617465732073686f756c642068617665207468652081526020017f73616d65206c656e67746800000000000000000000000000000000000000000081525060400191505060405180910390fd5b600091505b86869050821015612a5157612a1c87878481811015156129fb57fe5b905060200201358686858181101515612a1057fe5b905060200201356141ca565b9050612a44612a2a826140d3565b84836020604051908101604052806000815250600161459c565b81806001019250506129df565b50505050505050565b6000612a6582614a1c565b9050919050565b6060600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015612af757602002820191906000526020600020905b815481526020019060010190808311612ae3575b50505050509050919050565b42600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6000612b54826140d3565b9050919050565b60405180807f6765744d657461646174612875696e74323536290000000000000000000000008152506014019050604051809103902081565b6000612ba08383614a72565b905092915050565b6060612bb3826146c6565b9050919050565b6000612bc683836141ca565b905092915050565b6000612bd982614b1c565b9050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606060058054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612c9d5780601f10612c7257610100808354040283529160200191612c9d565b820191906000526020600020905b815481529060010190602001808311612c8057829003601f168201915b5050505050905090565b600080612cb383614b68565b91509150915091565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480612d635750601160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b1515612dfd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603a8152602001807f546869732066756e6374696f6e2063616e206f6e6c792062652063616c6c656481526020017f20627920616e20617574686f72697a6564206465706c6f79657200000000000081525060400191505060405180910390fd5b600090505b85859050811015612e5557612e48612e428787848181101515612e2157fe5b905060200201358686858181101515612e3657fe5b905060200201356141ca565b836142e2565b8080600101915050612e02565b505050505050565b6000612efb8888808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050508787808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050508686868080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050614c85565b9050979650505050505050565b60608060006060806000806000600760008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050955085604051908082528060200260200182016040528015612f895781602001602082028038833980820191505090505b50945085604051908082528060200260200182016040528015612fbb5781602001602082028038833980820191505090505b509350600090505b858110156130795761302a600760008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110151561301a57fe5b9060005260206000200154614b68565b809350819450505082858281518110151561304157fe5b906020019060200201818152505081848281518110151561305e57fe5b90602001906020020181815250508080600101915050612fc3565b848497509750505050505050915091565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561319b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260338152602001807f546869732066756e6374696f6e2063616e206f6e6c792062652063616c6c656481526020017f206279207468652070726f7879206f776e65720000000000000000000000000081525060400191505060405180910390fd5b80601060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f5b3ad80e09ce4c88735037542891c02fdc63b85e96a579d9260a403153c2775560405160405180910390a250565b606060048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156132ba5780601f1061328f576101008083540402835291602001916132ba565b820191906000526020600020905b81548152906001019060200180831161329d57829003601f168201915b5050505050905090565b600f6020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61330182826150b0565b5050565b60006133118383615168565b905092915050565b81613323816140d3565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156133eb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603a8152602001807f546869732066756e6374696f6e2063616e206f6e6c792062652063616c6c656481526020017f20627920746865206f776e6572206f662074686520617373657400000000000081525060400191505060405180910390fd5b81600f600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff16837f9d9dd80a56a16f715df6eb40b771e24ff8cbea6eed9de28473ce0f28fe5602a960405160405180910390a3505050565b6134c685858585858080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050600161459c565b5050505050565b6000613549868680806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050858580806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050846020604051908101604052806000815250614c85565b905095945050505050565b61355e84846141ca565b613567816140d3565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806135a657506135a53382614a72565b5b1515613640576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f6d73672e73656e646572206973206e6f7420617574686f72697a656420746f2081526020017f757064617465000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b61367d858585858080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505061438e565b5050505050565b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006136b68383614110565b905092915050565b60006136c982614096565b9050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561372957fe5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156137ef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f43616e6e6f74207472616e7366657220746f20796f757273656c66000000000081525060200191505060405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806000878790501115156138d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001807f596f752073686f756c6420737570706c79206174206c65617374206f6e65206381526020017f6f6f7264696e617465000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b848490508787905014151561397a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b8152602001807f54686520636f6f7264696e617465732073686f756c642068617665207468652081526020017f73616d65206c656e67746800000000000000000000000000000000000000000081525060400191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b158015613a2257600080fd5b505af1158015613a36573d6000803e3d6000fd5b505050506040513d6020811015613a4c57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16141515613b0e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f8152602001807f596f75206d757374206f776e207468652045737461746520796f752077616e7481526020017f20746f207472616e7366657220746f000000000000000000000000000000000081525060400191505060405180910390fd5b600091505b86869050821015613b9f57613b508787848181101515613b2f57fe5b905060200201358686858181101515613b4457fe5b905060200201356141ca565b9050613b92613b5e826140d3565b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683613b8b87615184565b600161459c565b8180600101925050613b13565b50505050505050565b60003373ffffffffffffffffffffffffffffffffffffffff16601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b158015613c5257600080fd5b505af1158015613c66573d6000803e3d6000fd5b505050506040513d6020811015613c7c57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16141515613d3e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f8152602001807f596f75206d757374206f776e207468652045737461746520796f752077616e7481526020017f20746f207472616e7366657220746f000000000000000000000000000000000081525060400191505060405180910390fd5b613d4884846141ca565b9050613d8a613d56826140d3565b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683613d8386615184565b600161459c565b50505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515613e7b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260338152602001807f546869732066756e6374696f6e2063616e206f6e6c792062652063616c6c656481526020017f206279207468652070726f7879206f776e65720000000000000000000000000081525060400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515613f20576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f696e76616c69642061646472657373000000000000000000000000000000000081525060200191505060405180910390fd5b601160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515613fe1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f6164647265737320697320616c726561647920666f7262696464656e0000000081525060200191505060405180910390fd5b6000601160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f7883da318e7694f396f400092b07b701a4eccb02aee0d28266adc659cca044da60405160405180910390a350565b6000600c600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006008600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60006141b86141b384846141ca565b6140d3565b905092915050565b6000600654905090565b6000827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0bdc01280156141fd5750620f424083125b80156142285750817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0bdc0125b80156142365750620f424082125b15156142d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001807f54686520636f6f7264696e617465732073686f756c6420626520696e7369646581526020017f20626f756e64730000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6142da83836151c8565b905092915050565b60006008600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561433a57600080fd5b614344818361521c565b818173ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b60008061439b85856141ca565b6143a4816140d3565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806143e357506143e23382614a72565b5b151561447d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f6d73672e73656e646572206973206e6f7420617574686f72697a656420746f2081526020017f757064617465000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b61448786866141ca565b92506008600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691506144c9838561531d565b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f47c705b9219229ad762fca605f08fb024a3415d0ae78af5d319820c72e510414876040518080602001828103825283818151815260200191508051906020019080838360005b8381101561455a57808201518184015260208101905061453f565b50505050905090810190601f1680156145875780820380516001836020036101000a031916815260200191505b509250505060405180910390a4505050505050565b6000600f600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506145fc8585858585615349565b5050505050565b60008060008473ffffffffffffffffffffffffffffffffffffffff161415151561462c57600080fd5b614635836140d3565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561467457600191506146bf565b61467e8185614110565b806146bc57508373ffffffffffffffffffffffffffffffffffffffff166146a484614096565b73ffffffffffffffffffffffffffffffffffffffff16145b91505b5092915050565b606060006146d3836140d3565b90506146de81615374565b80156147385750601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b15614967578073ffffffffffffffffffffffffffffffffffffffff166301ffc9a760405180807f6765744d657461646174612875696e7432353629000000000000000000000000815250601401905060405180910390206040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001915050602060405180830381600087803b15801561481f57600080fd5b505af1158015614833573d6000803e3d6000fd5b505050506040513d602081101561484957600080fd5b810190808051906020019092919050505015614966578073ffffffffffffffffffffffffffffffffffffffff1663a574cea4846040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b1580156148ce57600080fd5b505af11580156148e2573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561490c57600080fd5b81019080805164010000000081111561492457600080fd5b8281019050602081018481111561493a57600080fd5b815185600182028301116401000000008211171561495757600080fd5b50509291905050509150614a16565b5b600a60008481526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015614a0e5780601f106149e357610100808354040283529160200191614a0e565b820191906000526020600020905b8154815290600101906020018083116149f157829003601f168201915b505050505091505b50919050565b6000806008600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b6000614a7d826140d3565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480614b1457508273ffffffffffffffffffffffffffffffffffffffff16600f600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b905092915050565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b600080614b7483615387565b8092508193505050817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0bdc0128015614bad5750620f424082125b8015614bd85750807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0bdc0125b8015614be65750620f424081125b1515614c80576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001807f54686520636f6f7264696e617465732073686f756c6420626520696e7369646581526020017f20626f756e64730000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b915091565b600080606060008060008951111515614d2c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001807f596f752073686f756c6420737570706c79206174206c65617374206f6e65206381526020017f6f6f7264696e617465000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b87518951141515614dcb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b8152602001807f54686520636f6f7264696e617465732073686f756c642068617665207468652081526020017f73616d65206c656e67746800000000000000000000000000000000000000000081525060400191505060405180910390fd5b6000601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515614ea2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f546865204573746174652072656769737472792073686f756c6420626520736581526020017f740000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0def52188886040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015614f7f578082015181840152602081019050614f64565b50505050905090810190601f168015614fac5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015614fcc57600080fd5b505af1158015614fe0573d6000803e3d6000fd5b505050506040513d6020811015614ff657600080fd5b8101908080519060200190929190505050935061501284615184565b9250600091505b88518210156150a15761505a898381518110151561503357fe5b90602001906020020151898481518110151561504b57fe5b906020019060200201516141ca565b9050615094615068826140d3565b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168386600161459c565b8180600101925050615019565b83945050505050949350505050565b80156150db576150c03383614110565b1515156150cc57600080fd5b6150d682336153e1565b6150fb565b6150e53383614110565b15156150f057600080fd5b6150fa823361547a565b5b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051808215151515815260200191505060405180910390a35050565b600061517c61517784846141ca565b614a1c565b905092915050565b606060206040519080825280601f01601f1916602001820160405280156151ba5781602001602082028038833980820191505090505b509050816020820152919050565b60006fffffffffffffffffffffffffffffffff82167fffffffffffffffffffffffffffffffff0000000000000000000000000000000070010000000000000000000000000000000085021617905092915050565b6000826008600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061527983614b1c565b9050600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020829080600181540180825580915050906001820390600052602060002001600090919290919091505550806009600084815260200190815260200160002081905550615312600160065461551390919063ffffffff16565b600681905550505050565b80600a60008481526020019081526020016000209080519060200190615344929190615d15565b505050565b826153543382614603565b151561535f57600080fd5b61536c868686868661552f565b505050505050565b600080823b905060008111915050919050565b6000806153bd60807fffffffffffffffffffffffffffffffff0000000000000000000000000000000085169060020a90046158a2565b91506153da6fffffffffffffffffffffffffffffffff84166158a2565b9050915091565b6001600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6000600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6000818301905082811015151561552657fe5b80905092915050565b60008460008173ffffffffffffffffffffffffffffffffffffffff161415151561555857600080fd5b84868073ffffffffffffffffffffffffffffffffffffffff1661557a836140d3565b73ffffffffffffffffffffffffffffffffffffffff161415151561559d57600080fd5b88878173ffffffffffffffffffffffffffffffffffffffff166155bf826140d3565b73ffffffffffffffffffffffffffffffffffffffff161415156155e157600080fd5b600860008a815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169550615621868a6158f2565b61562b868a615bcc565b6156358a8a61521c565b86801561564757506156468a615374565b5b1561583a5763150b7a027c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168a73ffffffffffffffffffffffffffffffffffffffff1663150b7a0233898d8d6040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015615784578082015181840152602081019050615769565b50505050905090810190601f1680156157b15780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b1580156157d357600080fd5b505af11580156157e7573d6000803e3d6000fd5b505050506040513d60208110156157fd57600080fd5b81019080805190602001909291905050507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614151561583957600080fd5b5b888a73ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050505050505050505050565b6000806f8000000000000000000000000000000083161415156158e9577fffffffffffffffffffffffffffffffff00000000000000000000000000000000821790506158ed565b8190505b919050565b600080600060096000858152602001908152602001600020549250615929600161591b87614b1c565b615cfc90919063ffffffff16565b9150600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110151561597757fe5b9060005260206000200154905060006008600086815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002084815481101515615a2457fe5b90600052602060002001819055506000600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083815481101515615a8057fe5b9060005260206000200181905550600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480919060019003615ae09190615d95565b506000600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490501415615b7857600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000615b779190615dc1565b5b60006009600086815260200190815260200160002081905550826009600083815260200190815260200160002081905550615bbf6001600654615cfc90919063ffffffff16565b6006819055505050505050565b8173ffffffffffffffffffffffffffffffffffffffff16615bec826140d3565b73ffffffffffffffffffffffffffffffffffffffff16148015615c5957506000600c600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b15615cf8576000600c600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060008373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b5050565b6000828211151515615d0a57fe5b818303905092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10615d5657805160ff1916838001178555615d84565b82800160010185558215615d84579182015b82811115615d83578251825591602001919060010190615d68565b5b509050615d919190615de2565b5090565b815481835581811115615dbc57818360005260206000209182019101615dbb9190615de2565b5b505050565b5080546000825590600052602060002090810190615ddf9190615de2565b50565b615e0491905b80821115615e00576000816000905550600101615de8565b5090565b905600a165627a7a723058205e52f5bdf2322fd3157c6f4fcab0f9d2d3661f6e9552c41e535de62446ae9d910029"}