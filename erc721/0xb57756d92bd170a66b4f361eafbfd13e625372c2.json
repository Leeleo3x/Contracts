{"Runs": "200", "SwarmSource": "bzzr://2ec2ce27f979d12cd420746f06090e197f7f1bf0a9064b8ee39911ea717e54dd", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_uri\",\"type\":\"string\"},{\"name\":\"_proof\",\"type\":\"string\"},{\"name\":\"_config\",\"type\":\"bytes32[]\"},{\"name\":\"_data\",\"type\":\"bytes32[]\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_approved\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_authorized\",\"type\":\"bool\"}],\"name\":\"setAuthorizedAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"revoke\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"isAuthorizedAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes32[]\"}],\"name\":\"setTokenData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"conventionId\",\"outputs\":[{\"name\":\"_conventionId\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenProof\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenDataValue\",\"outputs\":[{\"name\":\"value\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenExpirationTime\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isPaused\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_data\",\"type\":\"bytes32[]\"}],\"name\":\"TokenDataChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_isPaused\",\"type\":\"bool\"}],\"name\":\"IsPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_authorized\",\"type\":\"bool\"}],\"name\":\"AuthorizedAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.24+commit.e67f0147", "ConstructorArguments": "", "SourceCode": "pragma solidity ^0.4.24;\r\n\r\n// File: @0xcert/ethereum-erc721/contracts/tokens/ERC721Enumerable.sol\r\n\r\n/**\r\n * @dev Optional enumeration extension for ERC-721 non-fungible token standard.\r\n * See https://goo.gl/pc9yoS.\r\n */\r\ninterface ERC721Enumerable {\r\n\r\n  /**\r\n   * @dev Returns a count of valid NFTs tracked by this contract, where each one of them has an\r\n   * assigned and queryable owner not equal to the zero address.\r\n   */\r\n  function totalSupply()\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the token identifier for the `_index`th NFT. Sort order is not specified.\r\n   * @param _index A counter less than `totalSupply()`.\r\n   */\r\n  function tokenByIndex(\r\n    uint256 _index\r\n  )\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the token identifier for the `_index`th NFT assigned to `_owner`. Sort order is\r\n   * not specified. It throws if `_index` >= `balanceOf(_owner)` or if `_owner` is the zero address,\r\n   * representing invalid NFTs.\r\n   * @param _owner An address where we are interested in NFTs owned by them.\r\n   * @param _index A counter less than `balanceOf(_owner)`.\r\n   */\r\n  function tokenOfOwnerByIndex(\r\n    address _owner,\r\n    uint256 _index\r\n  )\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n}\r\n\r\n// File: @0xcert/ethereum-erc721/contracts/tokens/ERC721.sol\r\n\r\n/**\r\n * @dev ERC-721 non-fungible token standard. See https://goo.gl/pc9yoS.\r\n */\r\ninterface ERC721 {\r\n\r\n  /**\r\n   * @dev Emits when ownership of any NFT changes by any mechanism. This event emits when NFTs are\r\n   * created (`from` == 0) and destroyed (`to` == 0). Exception: during contract creation, any\r\n   * number of NFTs may be created and assigned without emitting Transfer. At the time of any\r\n   * transfer, the approved address for that NFT (if any) is reset to none.\r\n   */\r\n  event Transfer(\r\n    address indexed _from,\r\n    address indexed _to,\r\n    uint256 indexed _tokenId\r\n  );\r\n\r\n  /**\r\n   * @dev This emits when the approved address for an NFT is changed or reaffirmed. The zero\r\n   * address indicates there is no approved address. When a Transfer event emits, this also\r\n   * indicates that the approved address for that NFT (if any) is reset to none.\r\n   */\r\n  event Approval(\r\n    address indexed _owner,\r\n    address indexed _approved,\r\n    uint256 indexed _tokenId\r\n  );\r\n\r\n  /**\r\n   * @dev This emits when an operator is enabled or disabled for an owner. The operator can manage\r\n   * all NFTs of the owner.\r\n   */\r\n  event ApprovalForAll(\r\n    address indexed _owner,\r\n    address indexed _operator,\r\n    bool _approved\r\n  );\r\n\r\n  /**\r\n   * @dev Returns the number of NFTs owned by `_owner`. NFTs assigned to the zero address are\r\n   * considered invalid, and this function throws for queries about the zero address.\r\n   * @param _owner Address for whom to query the balance.\r\n   */\r\n  function balanceOf(\r\n    address _owner\r\n  )\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the address of the owner of the NFT. NFTs assigned to zero address are considered\r\n   * invalid, and queries about them do throw.\r\n   * @param _tokenId The identifier for an NFT.\r\n   */\r\n  function ownerOf(\r\n    uint256 _tokenId\r\n  )\r\n    external\r\n    view\r\n    returns (address);\r\n\r\n  /**\r\n   * @dev Transfers the ownership of an NFT from one address to another address.\r\n   * @notice Throws unless `msg.sender` is the current owner, an authorized operator, or the\r\n   * approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is\r\n   * the zero address. Throws if `_tokenId` is not a valid NFT. When transfer is complete, this\r\n   * function checks if `_to` is a smart contract (code size > 0). If so, it calls `onERC721Received`\r\n   * on `_to` and throws if the return value is not `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`.\r\n   * @param _from The current owner of the NFT.\r\n   * @param _to The new owner.\r\n   * @param _tokenId The NFT to transfer.\r\n   * @param _data Additional data with no specified format, sent in call to `_to`.\r\n   */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    external;\r\n\r\n  /**\r\n   * @dev Transfers the ownership of an NFT from one address to another address.\r\n   * @notice This works identically to the other function with an extra data parameter, except this\r\n   * function just sets data to \"\"\r\n   * @param _from The current owner of the NFT.\r\n   * @param _to The new owner.\r\n   * @param _tokenId The NFT to transfer.\r\n   */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    external;\r\n\r\n  /**\r\n   * @dev Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\r\n   * address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero\r\n   * address. Throws if `_tokenId` is not a valid NFT.\r\n   * @notice The caller is responsible to confirm that `_to` is capable of receiving NFTs or else\r\n   * they mayb be permanently lost.\r\n   * @param _from The current owner of the NFT.\r\n   * @param _to The new owner.\r\n   * @param _tokenId The NFT to transfer.\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    external;\r\n\r\n  /**\r\n   * @dev Set or reaffirm the approved address for an NFT.\r\n   * @notice The zero address indicates there is no approved address. Throws unless `msg.sender` is\r\n   * the current NFT owner, or an authorized operator of the current owner.\r\n   * @param _approved The new approved NFT controller.\r\n   * @param _tokenId The NFT to approve.\r\n   */\r\n  function approve(\r\n    address _approved,\r\n    uint256 _tokenId\r\n  )\r\n    external;\r\n\r\n  /**\r\n   * @dev Enables or disables approval for a third party (\"operator\") to manage all of\r\n   * `msg.sender`'s assets. It also emits the ApprovalForAll event.\r\n   * @notice The contract MUST allow multiple operators per owner.\r\n   * @param _operator Address to add to the set of authorized operators.\r\n   * @param _approved True if the operators is approved, false to revoke approval.\r\n   */\r\n  function setApprovalForAll(\r\n    address _operator,\r\n    bool _approved\r\n  )\r\n    external;\r\n\r\n  /**\r\n   * @dev Get the approved address for a single NFT.\r\n   * @notice Throws if `_tokenId` is not a valid NFT.\r\n   * @param _tokenId The NFT to find the approved address for.\r\n   */\r\n  function getApproved(\r\n    uint256 _tokenId\r\n  )\r\n    external\r\n    view\r\n    returns (address);\r\n\r\n  /**\r\n   * @dev Returns true if `_operator` is an approved operator for `_owner`, false otherwise.\r\n   * @param _owner The address that owns the NFTs.\r\n   * @param _operator The address that acts on behalf of the owner.\r\n   */\r\n  function isApprovedForAll(\r\n    address _owner,\r\n    address _operator\r\n  )\r\n    external\r\n    view\r\n    returns (bool);\r\n\r\n}\r\n\r\n// File: @0xcert/ethereum-erc721/contracts/tokens/ERC721TokenReceiver.sol\r\n\r\n/**\r\n * @dev ERC-721 interface for accepting safe transfers. See https://goo.gl/pc9yoS.\r\n */\r\ninterface ERC721TokenReceiver {\r\n\r\n  /**\r\n   * @dev Handle the receipt of a NFT. The ERC721 smart contract calls this function on the\r\n   * recipient after a `transfer`. This function MAY throw to revert and reject the transfer. Return\r\n   * of other than the magic value MUST result in the transaction being reverted.\r\n   * Returns `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))` unless throwing.\r\n   * @notice The contract address is always the message sender. A wallet/broker/auction application\r\n   * MUST implement the wallet interface if it will accept safe transfers.\r\n   * @param _operator The address which called `safeTransferFrom` function.\r\n   * @param _from The sending address.\r\n   * @param _tokenId The NFT identifier which is being transferred.\r\n   * @param _data Additional data with no specified format.\r\n   */\r\n  function onERC721Received(\r\n    address _operator,\r\n    address _from,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    external\r\n    returns(bytes4);\r\n    \r\n}\r\n\r\n// File: @0xcert/ethereum-utils/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @dev Math operations with safety checks that throw on error. This contract is based\r\n * on the source code at https://goo.gl/iyQsmU.\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n   * @dev Multiplies two numbers, throws on overflow.\r\n   * @param _a Factor number.\r\n   * @param _b Factor number.\r\n   */\r\n  function mul(\r\n    uint256 _a,\r\n    uint256 _b\r\n  )\r\n    internal\r\n    pure\r\n    returns (uint256)\r\n  {\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Integer division of two numbers, truncating the quotient.\r\n   * @param _a Dividend number.\r\n   * @param _b Divisor number.\r\n   */\r\n  function div(\r\n    uint256 _a,\r\n    uint256 _b\r\n  )\r\n    internal\r\n    pure\r\n    returns (uint256)\r\n  {\r\n    uint256 c = _a / _b;\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n   * @param _a Minuend number.\r\n   * @param _b Subtrahend number.\r\n   */\r\n  function sub(\r\n    uint256 _a,\r\n    uint256 _b\r\n  )\r\n    internal\r\n    pure\r\n    returns (uint256)\r\n  {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n   * @dev Adds two numbers, throws on overflow.\r\n   * @param _a Number.\r\n   * @param _b Number.\r\n   */\r\n  function add(\r\n    uint256 _a,\r\n    uint256 _b\r\n  )\r\n    internal\r\n    pure\r\n    returns (uint256)\r\n  {\r\n    uint256 c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n\r\n}\r\n\r\n// File: @0xcert/ethereum-utils/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @dev The contract has an owner address, and provides basic authorization control whitch\r\n * simplifies the implementation of user permissions. This contract is based on the source code\r\n * at https://goo.gl/n2ZGVt.\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  /**\r\n   * @dev An event which is triggered when the owner is changed.\r\n   * @param previousOwner The address of the previous owner.\r\n   * @param newOwner The address of the new owner.\r\n   */\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev The constructor sets the original `owner` of the contract to the sender account.\r\n   */\r\n  constructor()\r\n    public\r\n  {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(\r\n    address _newOwner\r\n  )\r\n    onlyOwner\r\n    public\r\n  {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: @0xcert/ethereum-utils/contracts/utils/AddressUtils.sol\r\n\r\n/**\r\n * @dev Utility library of inline functions on addresses.\r\n */\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * @dev Returns whether the target address is a contract.\r\n   * @param _addr Address to check.\r\n   */\r\n  function isContract(\r\n    address _addr\r\n  )\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    uint256 size;\r\n\r\n    /**\r\n     * XXX Currently there is no better way to check if there is a contract in an address than to\r\n     * check the size of the code at that address.\r\n     * See https://ethereum.stackexchange.com/a/14016/36603 for more details about how this works.\r\n     * TODO: Check this again before the Serenity release, because all addresses will be\r\n     * contracts then.\r\n     */\r\n    assembly { size := extcodesize(_addr) } // solium-disable-line security/no-inline-assembly\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\n// File: @0xcert/ethereum-utils/contracts/utils/ERC165.sol\r\n\r\n/**\r\n * @dev A standard for detecting smart contract interfaces. See https://goo.gl/cxQCse.\r\n */\r\ninterface ERC165 {\r\n\r\n  /**\r\n   * @dev Checks if the smart contract includes a specific interface.\r\n   * @notice This function uses less than 30,000 gas.\r\n   * @param _interfaceID The interface identifier, as specified in ERC-165.\r\n   */\r\n  function supportsInterface(\r\n    bytes4 _interfaceID\r\n  )\r\n    external\r\n    view\r\n    returns (bool);\r\n\r\n}\r\n\r\n// File: @0xcert/ethereum-utils/contracts/utils/SupportsInterface.sol\r\n\r\n/**\r\n * @dev Implementation of standard for detect smart contract interfaces.\r\n */\r\ncontract SupportsInterface is\r\n  ERC165\r\n{\r\n\r\n  /**\r\n   * @dev Mapping of supported intefraces.\r\n   * @notice You must not set element 0xffffffff to true.\r\n   */\r\n  mapping(bytes4 => bool) internal supportedInterfaces;\r\n\r\n  /**\r\n   * @dev Contract constructor.\r\n   */\r\n  constructor()\r\n    public\r\n  {\r\n    supportedInterfaces[0x01ffc9a7] = true; // ERC165\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check which interfaces are suported by this contract.\r\n   * @param _interfaceID Id of the interface.\r\n   */\r\n  function supportsInterface(\r\n    bytes4 _interfaceID\r\n  )\r\n    external\r\n    view\r\n    returns (bool)\r\n  {\r\n    return supportedInterfaces[_interfaceID];\r\n  }\r\n\r\n}\r\n\r\n// File: @0xcert/ethereum-erc721/contracts/tokens/NFToken.sol\r\n\r\n/**\r\n * @dev Implementation of ERC-721 non-fungible token standard.\r\n */\r\ncontract NFToken is\r\n  Ownable,\r\n  ERC721,\r\n  SupportsInterface\r\n{\r\n  using SafeMath for uint256;\r\n  using AddressUtils for address;\r\n\r\n  /**\r\n   * @dev A mapping from NFT ID to the address that owns it.\r\n   */\r\n  mapping (uint256 => address) internal idToOwner;\r\n\r\n  /**\r\n   * @dev Mapping from NFT ID to approved address.\r\n   */\r\n  mapping (uint256 => address) internal idToApprovals;\r\n\r\n   /**\r\n   * @dev Mapping from owner address to count of his tokens.\r\n   */\r\n  mapping (address => uint256) internal ownerToNFTokenCount;\r\n\r\n  /**\r\n   * @dev Mapping from owner address to mapping of operator addresses.\r\n   */\r\n  mapping (address => mapping (address => bool)) internal ownerToOperators;\r\n\r\n  /**\r\n   * @dev Magic value of a smart contract that can recieve NFT.\r\n   * Equal to: bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\")).\r\n   */\r\n  bytes4 constant MAGIC_ON_ERC721_RECEIVED = 0x150b7a02;\r\n\r\n  /**\r\n   * @dev Emits when ownership of any NFT changes by any mechanism. This event emits when NFTs are\r\n   * created (`from` == 0) and destroyed (`to` == 0). Exception: during contract creation, any\r\n   * number of NFTs may be created and assigned without emitting Transfer. At the time of any\r\n   * transfer, the approved address for that NFT (if any) is reset to none.\r\n   * @param _from Sender of NFT (if address is zero address it indicates token creation).\r\n   * @param _to Receiver of NFT (if address is zero address it indicates token destruction).\r\n   * @param _tokenId The NFT that got transfered.\r\n   */\r\n  event Transfer(\r\n    address indexed _from,\r\n    address indexed _to,\r\n    uint256 indexed _tokenId\r\n  );\r\n\r\n  /**\r\n   * @dev This emits when the approved address for an NFT is changed or reaffirmed. The zero\r\n   * address indicates there is no approved address. When a Transfer event emits, this also\r\n   * indicates that the approved address for that NFT (if any) is reset to none.\r\n   * @param _owner Owner of NFT.\r\n   * @param _approved Address that we are approving.\r\n   * @param _tokenId NFT which we are approving.\r\n   */\r\n  event Approval(\r\n    address indexed _owner,\r\n    address indexed _approved,\r\n    uint256 indexed _tokenId\r\n  );\r\n\r\n  /**\r\n   * @dev This emits when an operator is enabled or disabled for an owner. The operator can manage\r\n   * all NFTs of the owner.\r\n   * @param _owner Owner of NFT.\r\n   * @param _operator Address to which we are setting operator rights.\r\n   * @param _approved Status of operator rights(true if operator rights are given and false if\r\n   * revoked).\r\n   */\r\n  event ApprovalForAll(\r\n    address indexed _owner,\r\n    address indexed _operator,\r\n    bool _approved\r\n  );\r\n\r\n  /**\r\n   * @dev Guarantees that the msg.sender is an owner or operator of the given NFT.\r\n   * @param _tokenId ID of the NFT to validate.\r\n   */\r\n  modifier canOperate(\r\n    uint256 _tokenId\r\n  ) {\r\n    address tokenOwner = idToOwner[_tokenId];\r\n    require(tokenOwner == msg.sender || ownerToOperators[tokenOwner][msg.sender]);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Guarantees that the msg.sender is allowed to transfer NFT.\r\n   * @param _tokenId ID of the NFT to transfer.\r\n   */\r\n  modifier canTransfer(\r\n    uint256 _tokenId\r\n  ) {\r\n    address tokenOwner = idToOwner[_tokenId];\r\n    require(\r\n      tokenOwner == msg.sender\r\n      || getApproved(_tokenId) == msg.sender\r\n      || ownerToOperators[tokenOwner][msg.sender]\r\n    );\r\n\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Guarantees that _tokenId is a valid Token.\r\n   * @param _tokenId ID of the NFT to validate.\r\n   */\r\n  modifier validNFToken(\r\n    uint256 _tokenId\r\n  ) {\r\n    require(idToOwner[_tokenId] != address(0));\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Contract constructor.\r\n   */\r\n  constructor()\r\n    public\r\n  {\r\n    supportedInterfaces[0x80ac58cd] = true; // ERC721\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the number of NFTs owned by `_owner`. NFTs assigned to the zero address are\r\n   * considered invalid, and this function throws for queries about the zero address.\r\n   * @param _owner Address for whom to query the balance.\r\n   */\r\n  function balanceOf(\r\n    address _owner\r\n  )\r\n    external\r\n    view\r\n    returns (uint256)\r\n  {\r\n    require(_owner != address(0));\r\n    return ownerToNFTokenCount[_owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address of the owner of the NFT. NFTs assigned to zero address are considered\r\n   * invalid, and queries about them do throw.\r\n   * @param _tokenId The identifier for an NFT.\r\n   */\r\n  function ownerOf(\r\n    uint256 _tokenId\r\n  )\r\n    external\r\n    view\r\n    returns (address _owner)\r\n  {\r\n    _owner = idToOwner[_tokenId];\r\n    require(_owner != address(0));\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers the ownership of an NFT from one address to another address.\r\n   * @notice Throws unless `msg.sender` is the current owner, an authorized operator, or the\r\n   * approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is\r\n   * the zero address. Throws if `_tokenId` is not a valid NFT. When transfer is complete, this\r\n   * function checks if `_to` is a smart contract (code size > 0). If so, it calls `onERC721Received`\r\n   * on `_to` and throws if the return value is not `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`.\r\n   * @param _from The current owner of the NFT.\r\n   * @param _to The new owner.\r\n   * @param _tokenId The NFT to transfer.\r\n   * @param _data Additional data with no specified format, sent in call to `_to`.\r\n   */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    external\r\n  {\r\n    _safeTransferFrom(_from, _to, _tokenId, _data);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers the ownership of an NFT from one address to another address.\r\n   * @notice This works identically to the other function with an extra data parameter, except this\r\n   * function just sets data to \"\"\r\n   * @param _from The current owner of the NFT.\r\n   * @param _to The new owner.\r\n   * @param _tokenId The NFT to transfer.\r\n   */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    external\r\n  {\r\n    _safeTransferFrom(_from, _to, _tokenId, \"\");\r\n  }\r\n\r\n  /**\r\n   * @dev Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\r\n   * address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero\r\n   * address. Throws if `_tokenId` is not a valid NFT.\r\n   * @notice The caller is responsible to confirm that `_to` is capable of receiving NFTs or else\r\n   * they maybe be permanently lost.\r\n   * @param _from The current owner of the NFT.\r\n   * @param _to The new owner.\r\n   * @param _tokenId The NFT to transfer.\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    external\r\n    canTransfer(_tokenId)\r\n    validNFToken(_tokenId)\r\n  {\r\n    address tokenOwner = idToOwner[_tokenId];\r\n    require(tokenOwner == _from);\r\n    require(_to != address(0));\r\n\r\n    _transfer(_to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Set or reaffirm the approved address for an NFT.\r\n   * @notice The zero address indicates there is no approved address. Throws unless `msg.sender` is\r\n   * the current NFT owner, or an authorized operator of the current owner.\r\n   * @param _approved Address to be approved for the given NFT ID.\r\n   * @param _tokenId ID of the token to be approved.\r\n   */\r\n  function approve(\r\n    address _approved,\r\n    uint256 _tokenId\r\n  )\r\n    external\r\n    canOperate(_tokenId)\r\n    validNFToken(_tokenId)\r\n  {\r\n    address tokenOwner = idToOwner[_tokenId];\r\n    require(_approved != tokenOwner);\r\n\r\n    idToApprovals[_tokenId] = _approved;\r\n    emit Approval(tokenOwner, _approved, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Enables or disables approval for a third party (\"operator\") to manage all of\r\n   * `msg.sender`'s assets. It also emits the ApprovalForAll event.\r\n   * @notice This works even if sender doesn't own any tokens at the time.\r\n   * @param _operator Address to add to the set of authorized operators.\r\n   * @param _approved True if the operators is approved, false to revoke approval.\r\n   */\r\n  function setApprovalForAll(\r\n    address _operator,\r\n    bool _approved\r\n  )\r\n    external\r\n  {\r\n    require(_operator != address(0));\r\n    ownerToOperators[msg.sender][_operator] = _approved;\r\n    emit ApprovalForAll(msg.sender, _operator, _approved);\r\n  }\r\n\r\n  /**\r\n   * @dev Get the approved address for a single NFT.\r\n   * @notice Throws if `_tokenId` is not a valid NFT.\r\n   * @param _tokenId ID of the NFT to query the approval of.\r\n   */\r\n  function getApproved(\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n    view\r\n    validNFToken(_tokenId)\r\n    returns (address)\r\n  {\r\n    return idToApprovals[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Checks if `_operator` is an approved operator for `_owner`.\r\n   * @param _owner The address that owns the NFTs.\r\n   * @param _operator The address that acts on behalf of the owner.\r\n   */\r\n  function isApprovedForAll(\r\n    address _owner,\r\n    address _operator\r\n  )\r\n    external\r\n    view\r\n    returns (bool)\r\n  {\r\n    require(_owner != address(0));\r\n    require(_operator != address(0));\r\n    return ownerToOperators[_owner][_operator];\r\n  }\r\n\r\n  /**\r\n   * @dev Actually perform the safeTransferFrom.\r\n   * @param _from The current owner of the NFT.\r\n   * @param _to The new owner.\r\n   * @param _tokenId The NFT to transfer.\r\n   * @param _data Additional data with no specified format, sent in call to `_to`.\r\n   */\r\n  function _safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    internal\r\n    canTransfer(_tokenId)\r\n    validNFToken(_tokenId)\r\n  {\r\n    address tokenOwner = idToOwner[_tokenId];\r\n    require(tokenOwner == _from);\r\n    require(_to != address(0));\r\n\r\n    _transfer(_to, _tokenId);\r\n\r\n    if (_to.isContract()) {\r\n      bytes4 retval = ERC721TokenReceiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data);\r\n      require(retval == MAGIC_ON_ERC721_RECEIVED);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Actually preforms the transfer.\r\n   * @notice Does NO checks.\r\n   * @param _to Address of a new owner.\r\n   * @param _tokenId The NFT that is being transferred.\r\n   */\r\n  function _transfer(\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    private\r\n  {\r\n    address from = idToOwner[_tokenId];\r\n\r\n    clearApproval(from, _tokenId);\r\n    removeNFToken(from, _tokenId);\r\n    addNFToken(_to, _tokenId);\r\n\r\n    emit Transfer(from, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Mints a new NFT.\r\n   * @notice This is a private function which should be called from user-implemented external\r\n   * mint function. Its purpose is to show and properly initialize data structures when using this\r\n   * implementation.\r\n   * @param _to The address that will own the minted NFT.\r\n   * @param _tokenId of the NFT to be minted by the msg.sender.\r\n   */\r\n  function _mint(\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    internal\r\n  {\r\n    require(_to != address(0));\r\n    require(_tokenId != 0);\r\n    require(idToOwner[_tokenId] == address(0));\r\n\r\n    addNFToken(_to, _tokenId);\r\n\r\n    emit Transfer(address(0), _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Burns a NFT.\r\n   * @notice This is a private function which should be called from user-implemented external\r\n   * burn function. Its purpose is to show and properly initialize data structures when using this\r\n   * implementation.\r\n   * @param _owner Address of the NFT owner.\r\n   * @param _tokenId ID of the NFT to be burned.\r\n   */\r\n  function _burn(\r\n    address _owner,\r\n    uint256 _tokenId\r\n  )\r\n    validNFToken(_tokenId)\r\n    internal\r\n  {\r\n    clearApproval(_owner, _tokenId);\r\n    removeNFToken(_owner, _tokenId);\r\n    emit Transfer(_owner, address(0), _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Clears the current approval of a given NFT ID.\r\n   * @param _tokenId ID of the NFT to be transferred.\r\n   */\r\n  function clearApproval(\r\n    address _owner,\r\n    uint256 _tokenId\r\n  )\r\n    internal\r\n  {\r\n    delete idToApprovals[_tokenId];\r\n    emit Approval(_owner, 0, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Removes a NFT from owner.\r\n   * @notice Use and override this function with caution. Wrong usage can have serious consequences.\r\n   * @param _from Address from wich we want to remove the NFT.\r\n   * @param _tokenId Which NFT we want to remove.\r\n   */\r\n  function removeNFToken(\r\n    address _from,\r\n    uint256 _tokenId\r\n  )\r\n   internal\r\n  {\r\n    require(idToOwner[_tokenId] == _from);\r\n    assert(ownerToNFTokenCount[_from] > 0);\r\n    ownerToNFTokenCount[_from] = ownerToNFTokenCount[_from].sub(1);\r\n    delete idToOwner[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Assignes a new NFT to owner.\r\n   * @notice Use and override this function with caution. Wrong usage can have serious consequences.\r\n   * @param _to Address to wich we want to add the NFT.\r\n   * @param _tokenId Which NFT we want to add.\r\n   */\r\n  function addNFToken(\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    internal\r\n  {\r\n    require(idToOwner[_tokenId] == address(0));\r\n\r\n    idToOwner[_tokenId] = _to;\r\n    ownerToNFTokenCount[_to] = ownerToNFTokenCount[_to].add(1);\r\n  }\r\n\r\n}\r\n\r\n// File: @0xcert/ethereum-erc721/contracts/tokens/NFTokenEnumerable.sol\r\n\r\n/**\r\n * @dev Optional enumeration implementation for ERC-721 non-fungible token standard.\r\n */\r\ncontract NFTokenEnumerable is\r\n  NFToken,\r\n  ERC721Enumerable\r\n{\r\n\r\n  /**\r\n   * @dev Array of all NFT IDs.\r\n   */\r\n  uint256[] internal tokens;\r\n\r\n  /**\r\n   * @dev Mapping from owner address to a list of owned NFT IDs.\r\n   */\r\n  mapping(uint256 => uint256) internal idToIndex;\r\n\r\n  /**\r\n   * @dev Mapping from owner to list of owned NFT IDs.\r\n   */\r\n  mapping(address => uint256[]) internal ownerToIds;\r\n\r\n  /**\r\n   * @dev Mapping from NFT ID to its index in the owner tokens list.\r\n   */\r\n  mapping(uint256 => uint256) internal idToOwnerIndex;\r\n\r\n  /**\r\n   * @dev Contract constructor.\r\n   */\r\n  constructor()\r\n    public\r\n  {\r\n    supportedInterfaces[0x780e9d63] = true; // ERC721Enumerable\r\n  }\r\n\r\n  /**\r\n   * @dev Mints a new NFT.\r\n   * @notice This is a private function which should be called from user-implemented external\r\n   * mint function. Its purpose is to show and properly initialize data structures when using this\r\n   * implementation.\r\n   * @param _to The address that will own the minted NFT.\r\n   * @param _tokenId of the NFT to be minted by the msg.sender.\r\n   */\r\n  function _mint(\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    internal\r\n  {\r\n    super._mint(_to, _tokenId);\r\n    tokens.push(_tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Burns a NFT.\r\n   * @notice This is a private function which should be called from user-implemented external\r\n   * burn function. Its purpose is to show and properly initialize data structures when using this\r\n   * implementation.\r\n   * @param _owner Address of the NFT owner.\r\n   * @param _tokenId ID of the NFT to be burned.\r\n   */\r\n  function _burn(\r\n    address _owner,\r\n    uint256 _tokenId\r\n  )\r\n    internal\r\n  {\r\n    assert(tokens.length > 0);\r\n    super._burn(_owner, _tokenId);\r\n\r\n    uint256 tokenIndex = idToIndex[_tokenId];\r\n    uint256 lastTokenIndex = tokens.length.sub(1);\r\n    uint256 lastToken = tokens[lastTokenIndex];\r\n\r\n    tokens[tokenIndex] = lastToken;\r\n    tokens[lastTokenIndex] = 0;\r\n\r\n    tokens.length--;\r\n    idToIndex[_tokenId] = 0;\r\n    idToIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n  /**\r\n   * @dev Removes a NFT from an address.\r\n   * @notice Use and override this function with caution. Wrong usage can have serious consequences.\r\n   * @param _from Address from wich we want to remove the NFT.\r\n   * @param _tokenId Which NFT we want to remove.\r\n   */\r\n  function removeNFToken(\r\n    address _from,\r\n    uint256 _tokenId\r\n  )\r\n   internal\r\n  {\r\n    super.removeNFToken(_from, _tokenId);\r\n    assert(ownerToIds[_from].length > 0);\r\n\r\n    uint256 tokenToRemoveIndex = idToOwnerIndex[_tokenId];\r\n    uint256 lastTokenIndex = ownerToIds[_from].length.sub(1);\r\n    uint256 lastToken = ownerToIds[_from][lastTokenIndex];\r\n\r\n    ownerToIds[_from][tokenToRemoveIndex] = lastToken;\r\n\r\n    ownerToIds[_from].length--;\r\n    idToOwnerIndex[_tokenId] = 0;\r\n    idToOwnerIndex[lastToken] = tokenToRemoveIndex;\r\n  }\r\n\r\n  /**\r\n   * @dev Assignes a new NFT to an address.\r\n   * @notice Use and override this function with caution. Wrong usage can have serious consequences.\r\n   * @param _to Address to wich we want to add the NFT.\r\n   * @param _tokenId Which NFT we want to add.\r\n   */\r\n  function addNFToken(\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    internal\r\n  {\r\n    super.addNFToken(_to, _tokenId);\r\n\r\n    uint256 length = ownerToIds[_to].length;\r\n    ownerToIds[_to].push(_tokenId);\r\n    idToOwnerIndex[_tokenId] = length;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the count of all existing NFTokens.\r\n   */\r\n  function totalSupply()\r\n    external\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return tokens.length;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns NFT ID by its index.\r\n   * @param _index A counter less than `totalSupply()`.\r\n   */\r\n  function tokenByIndex(\r\n    uint256 _index\r\n  )\r\n    external\r\n    view\r\n    returns (uint256)\r\n  {\r\n    require(_index < tokens.length);\r\n    return tokens[_index];\r\n  }\r\n\r\n  /**\r\n   * @dev returns the n-th NFT ID from a list of owner's tokens.\r\n   * @param _owner Token owner's address.\r\n   * @param _index Index number representing n-th token in owner's list of tokens.\r\n   */\r\n  function tokenOfOwnerByIndex(\r\n    address _owner,\r\n    uint256 _index\r\n  )\r\n    external\r\n    view\r\n    returns (uint256)\r\n  {\r\n    require(_index < ownerToIds[_owner].length);\r\n    return ownerToIds[_owner][_index];\r\n  }\r\n\r\n}\r\n\r\n// File: @0xcert/ethereum-erc721/contracts/tokens/ERC721Metadata.sol\r\n\r\n/**\r\n * @dev Optional metadata extension for ERC-721 non-fungible token standard.\r\n * See https://goo.gl/pc9yoS.\r\n */\r\ninterface ERC721Metadata {\r\n\r\n  /**\r\n   * @dev Returns a descriptive name for a collection of NFTs in this contract.\r\n   */\r\n  function name()\r\n    external\r\n    view\r\n    returns (string _name);\r\n\r\n  /**\r\n   * @dev Returns a abbreviated name for a collection of NFTs in this contract.\r\n   */\r\n  function symbol()\r\n    external\r\n    view\r\n    returns (string _symbol);\r\n\r\n  /**\r\n   * @dev Returns a distinct Uniform Resource Identifier (URI) for a given asset. It Throws if\r\n   * `_tokenId` is not a valid NFT. URIs are defined in RFC3986. The URI may point to a JSON file\r\n   * that conforms to the \"ERC721 Metadata JSON Schema\".\r\n   */\r\n  function tokenURI(uint256 _tokenId)\r\n    external\r\n    view\r\n    returns (string);\r\n\r\n}\r\n\r\n// File: @0xcert/ethereum-erc721/contracts/tokens/NFTokenMetadata.sol\r\n\r\n/**\r\n * @dev Optional metadata implementation for ERC-721 non-fungible token standard.\r\n */\r\ncontract NFTokenMetadata is\r\n  NFToken,\r\n  ERC721Metadata\r\n{\r\n\r\n  /**\r\n   * @dev A descriptive name for a collection of NFTs.\r\n   */\r\n  string internal nftName;\r\n\r\n  /**\r\n   * @dev An abbreviated name for NFTokens.\r\n   */\r\n  string internal nftSymbol;\r\n\r\n  /**\r\n   * @dev Mapping from NFT ID to metadata uri.\r\n   */\r\n  mapping (uint256 => string) internal idToUri;\r\n\r\n  /**\r\n   * @dev Contract constructor.\r\n   * @notice When implementing this contract don't forget to set nftName and nftSymbol.\r\n   */\r\n  constructor()\r\n    public\r\n  {\r\n    supportedInterfaces[0x5b5e139f] = true; // ERC721Metadata\r\n  }\r\n\r\n  /**\r\n   * @dev Burns a NFT.\r\n   * @notice This is a internal function which should be called from user-implemented external\r\n   * burn function. Its purpose is to show and properly initialize data structures when using this\r\n   * implementation.\r\n   * @param _owner Address of the NFT owner.\r\n   * @param _tokenId ID of the NFT to be burned.\r\n   */\r\n  function _burn(\r\n    address _owner,\r\n    uint256 _tokenId\r\n  )\r\n    internal\r\n  {\r\n    super._burn(_owner, _tokenId);\r\n\r\n    if (bytes(idToUri[_tokenId]).length != 0) {\r\n      delete idToUri[_tokenId];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Set a distinct URI (RFC 3986) for a given NFT ID.\r\n   * @notice this is a internal function which should be called from user-implemented external\r\n   * function. Its purpose is to show and properly initialize data structures when using this\r\n   * implementation.\r\n   * @param _tokenId Id for which we want uri.\r\n   * @param _uri String representing RFC 3986 URI.\r\n   */\r\n  function _setTokenUri(\r\n    uint256 _tokenId,\r\n    string _uri\r\n  )\r\n    validNFToken(_tokenId)\r\n    internal\r\n  {\r\n    idToUri[_tokenId] = _uri;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns a descriptive name for a collection of NFTokens.\r\n   */\r\n  function name()\r\n    external\r\n    view\r\n    returns (string _name)\r\n  {\r\n    _name = nftName;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns an abbreviated name for NFTokens.\r\n   */\r\n  function symbol()\r\n    external\r\n    view\r\n    returns (string _symbol)\r\n  {\r\n    _symbol = nftSymbol;\r\n  }\r\n\r\n  /**\r\n   * @dev A distinct URI (RFC 3986) for a given NFT.\r\n   * @param _tokenId Id for which we want uri.\r\n   */\r\n  function tokenURI(\r\n    uint256 _tokenId\r\n  )\r\n    validNFToken(_tokenId)\r\n    external\r\n    view\r\n    returns (string)\r\n  {\r\n    return idToUri[_tokenId];\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/tokens/Xcert.sol\r\n\r\n/**\r\n * @dev Xcert implementation.\r\n */\r\ncontract Xcert is NFTokenEnumerable, NFTokenMetadata {\r\n  using SafeMath for uint256;\r\n  using AddressUtils for address;\r\n\r\n  /**\r\n   * @dev Unique ID which determines each Xcert smart contract type by its JSON convention.\r\n   * @notice Calculated as bytes4(keccak256(jsonSchema)).\r\n   */\r\n  bytes4 internal nftConventionId;\r\n\r\n  /**\r\n   * @dev Maps NFT ID to proof.\r\n   */\r\n  mapping (uint256 => string) internal idToProof;\r\n\r\n  /**\r\n   * @dev Maps NFT ID to protocol config.\r\n   */\r\n  mapping (uint256 => bytes32[]) internal config;\r\n\r\n  /**\r\n   * @dev Maps NFT ID to convention data.\r\n   */\r\n  mapping (uint256 => bytes32[]) internal data;\r\n\r\n  /**\r\n   * @dev Maps address to authorization of contract.\r\n   */\r\n  mapping (address => bool) internal addressToAuthorized;\r\n\r\n  /**\r\n   * @dev Emits when an address is authorized to some contract control or the authorization is revoked.\r\n   * The _target has some contract controle like minting new NFTs.\r\n   * @param _target Address to set authorized state.\r\n   * @param _authorized True if the _target is authorised, false to revoke authorization.\r\n   */\r\n  event AuthorizedAddress(\r\n    address indexed _target,\r\n    bool _authorized\r\n  );\r\n\r\n  /**\r\n   * @dev Guarantees that msg.sender is allowed to mint a new NFT.\r\n   */\r\n  modifier isAuthorized() {\r\n    require(msg.sender == owner || addressToAuthorized[msg.sender]);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Contract constructor.\r\n   * @notice When implementing this contract don't forget to set nftConventionId, nftName and\r\n   * nftSymbol.\r\n   */\r\n  constructor()\r\n    public\r\n  {\r\n    supportedInterfaces[0x6be14f75] = true; // Xcert\r\n  }\r\n\r\n  /**\r\n   * @dev Mints a new NFT.\r\n   * @param _to The address that will own the minted NFT.\r\n   * @param _id The NFT to be minted by the msg.sender.\r\n   * @param _uri An URI pointing to NFT metadata.\r\n   * @param _proof Cryptographic asset imprint.\r\n   * @param _config Array of protocol config values where 0 index represents token expiration\r\n   * timestamp, other indexes are not yet definied but are ready for future xcert upgrades.\r\n   * @param _data Array of convention data values.\r\n   */\r\n  function mint(\r\n    address _to,\r\n    uint256 _id,\r\n    string _uri,\r\n    string _proof,\r\n    bytes32[] _config,\r\n    bytes32[] _data\r\n  )\r\n    external\r\n    isAuthorized()\r\n  {\r\n    require(_config.length > 0);\r\n    require(bytes(_proof).length > 0);\r\n    super._mint(_to, _id);\r\n    super._setTokenUri(_id, _uri);\r\n    idToProof[_id] = _proof;\r\n    config[_id] = _config;\r\n    data[_id] = _data;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns a bytes4 of keccak256 of json schema representing 0xcert protocol convention.\r\n   */\r\n  function conventionId()\r\n    external\r\n    view\r\n    returns (bytes4 _conventionId)\r\n  {\r\n    _conventionId = nftConventionId;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns proof for NFT.\r\n   * @param _tokenId Id of the NFT.\r\n   */\r\n  function tokenProof(\r\n    uint256 _tokenId\r\n  )\r\n    validNFToken(_tokenId)\r\n    external\r\n    view\r\n    returns(string)\r\n  {\r\n    return idToProof[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Returns convention data value for a given index field.\r\n   * @param _tokenId Id of the NFT we want to get value for key.\r\n   * @param _index for which we want to get value.\r\n   */\r\n  function tokenDataValue(\r\n    uint256 _tokenId,\r\n    uint256 _index\r\n  )\r\n    validNFToken(_tokenId)\r\n    public\r\n    view\r\n    returns(bytes32 value)\r\n  {\r\n    require(_index < data[_tokenId].length);\r\n    value = data[_tokenId][_index];\r\n  }\r\n\r\n  /**\r\n   * @dev Returns expiration date from 0 index of token config values.\r\n   * @param _tokenId Id of the NFT we want to get expiration time of.\r\n   */\r\n  function tokenExpirationTime(\r\n    uint256 _tokenId\r\n  )\r\n    validNFToken(_tokenId)\r\n    external\r\n    view\r\n    returns(bytes32)\r\n  {\r\n    return config[_tokenId][0];\r\n  }\r\n\r\n  /**\r\n   * @dev Sets authorised address for minting.\r\n   * @param _target Address to set authorized state.\r\n   * @param _authorized True if the _target is authorised, false to revoke authorization.\r\n   */\r\n  function setAuthorizedAddress(\r\n    address _target,\r\n    bool _authorized\r\n  )\r\n    onlyOwner\r\n    external\r\n  {\r\n    require(_target != address(0));\r\n    addressToAuthorized[_target] = _authorized;\r\n    emit AuthorizedAddress(_target, _authorized);\r\n  }\r\n\r\n  /**\r\n   * @dev Sets mint authorised address.\r\n   * @param _target Address for which we want to check if it is authorized.\r\n   * @return Is authorized or not.\r\n   */\r\n  function isAuthorizedAddress(\r\n    address _target\r\n  )\r\n    external\r\n    view\r\n    returns (bool)\r\n  {\r\n    require(_target != address(0));\r\n    return addressToAuthorized[_target];\r\n  }\r\n}\r\n\r\n// File: contracts/tokens/MutableXcert.sol\r\n\r\n/**\r\n * @dev Xcert implementation where token data can be changed by authorized address.\r\n */\r\ncontract MutableXcert is Xcert {\r\n\r\n  /**\r\n   * @dev Emits when an Token data is changed.\r\n   * @param _id NFT that data got changed.\r\n   * @param _data New data.\r\n   */\r\n  event TokenDataChange(\r\n    uint256 indexed _id,\r\n    bytes32[] _data\r\n  );\r\n\r\n  /**\r\n   * @dev Contract constructor.\r\n   * @notice When implementing this contract don't forget to set nftConventionId, nftName and\r\n   * nftSymbol.\r\n   */\r\n  constructor()\r\n    public\r\n  {\r\n    supportedInterfaces[0x59118221] = true; // MutableXcert\r\n  }\r\n\r\n  /**\r\n   * @dev Modifies convention data by setting a new value for a given index field.\r\n   * @param _tokenId Id of the NFT we want to set key value data.\r\n   * @param _data New token data.\r\n   */\r\n  function setTokenData(\r\n    uint256 _tokenId,\r\n    bytes32[] _data\r\n  )\r\n    validNFToken(_tokenId)\r\n    isAuthorized()\r\n    external\r\n  {\r\n    data[_tokenId] = _data;\r\n    emit TokenDataChange(_tokenId, _data);\r\n  }\r\n}\r\n\r\n// File: contracts/tokens/PausableXcert.sol\r\n\r\n/**\r\n * @dev Xcert implementation where tokens transfer can be paused/unpaused.\r\n */\r\ncontract PausableXcert is Xcert {\r\n\r\n  /**\r\n   * @dev This emits when ability of beeing able to transfer NFTs changes (paused/unpaused).\r\n   */\r\n  event IsPaused(bool _isPaused);\r\n\r\n  /**\r\n   * @dev Are NFT paused or not.\r\n   */\r\n  bool public isPaused;\r\n\r\n  /**\r\n   * @dev Contract constructor.\r\n   * @notice When implementing this contract don't forget to set nftConventionId, nftName,\r\n   * nftSymbol and isPaused.\r\n   */\r\n  constructor()\r\n    public\r\n  {\r\n    supportedInterfaces[0xbedb86fb] = true; // PausableXcert\r\n  }\r\n\r\n  /**\r\n   * @dev Guarantees that the msg.sender is allowed to transfer NFT.\r\n   * @param _tokenId ID of the NFT to transfer.\r\n   */\r\n  modifier canTransfer(\r\n    uint256 _tokenId\r\n  )\r\n  {\r\n    address owner = idToOwner[_tokenId];\r\n    require(!isPaused && (\r\n      owner == msg.sender\r\n      || getApproved(_tokenId) == msg.sender\r\n      || ownerToOperators[owner][msg.sender])\r\n    );\r\n\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Sets if NFTs are paused or not.\r\n   * @param _isPaused Pause status.\r\n   */\r\n  function setPause(\r\n    bool _isPaused\r\n  )\r\n    external\r\n    onlyOwner\r\n  {\r\n    require(isPaused != _isPaused);\r\n    isPaused = _isPaused;\r\n    emit IsPaused(_isPaused);\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/tokens/RevokableXcert.sol\r\n\r\n/**\r\n * @dev Xcert implementation where tokens can be destroyed by the issuer.\r\n */\r\ncontract RevokableXcert is Xcert {\r\n\r\n  /**\r\n   * @dev Contract constructor.\r\n   * @notice When implementing this contract don't forget to set nftConventionId, nftName and\r\n   * nftSymbol.\r\n   */\r\n  constructor()\r\n    public\r\n  {\r\n    supportedInterfaces[0x20c5429b] = true; // RevokableXcert\r\n  }\r\n\r\n  /**\r\n   * @dev Revokes a specified NFT.\r\n   * @param _tokenId Id of the NFT we want to revoke.\r\n   */\r\n  function revoke(\r\n    uint256 _tokenId\r\n  )\r\n    validNFToken(_tokenId)\r\n    onlyOwner\r\n    external\r\n  {\r\n    address tokenOwner = idToOwner[_tokenId];\r\n    super._burn(tokenOwner, _tokenId);\r\n    delete data[_tokenId];\r\n    delete config[_tokenId];\r\n    delete idToProof[_tokenId];\r\n  }\r\n}\r\n\r\n// File: contracts/mocks/KycToken.sol\r\n\r\ncontract KycToken is\r\n  PausableXcert,\r\n  RevokableXcert,\r\n  MutableXcert\r\n{\r\n\r\n  constructor()\r\n    public\r\n  {\r\n    nftName = \"0xcert KYC\";\r\n    nftSymbol = \"KYC\";\r\n    nftConventionId = 0xfc3ee448;\r\n    isPaused = true;\r\n  }\r\n\r\n}", "OptimizationUsed": "1", "ContractName": "KycToken", "ByteCode": "0x6080604052600436106101735763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041662ea81c0811461017857806301ffc9a7146101cf57806306fdde0314610205578063081812fc1461028f578063095ea7b3146102c35780631351cf51146102e757806318160ddd1461030d57806320c5429b1461033457806323b872dd1461034c5780632f745c591461037657806342842e0e1461039a5780634a85280e146103c45780634f6ccce7146103e557806359118221146103fd5780635f54fa98146104215780636352211e1461045357806370a082311461046b5780637c8ff8ac1461048c5780638da5cb5b146104a457806395d89b41146104b9578063a22cb465146104ce578063acec460f146104f4578063b187bd261461050f578063b88d4fde14610524578063bde86dd11461055d578063bedb86fb14610575578063c87b56dd1461058f578063e985e9c5146105a7578063f2fde38b146105ce575b600080fd5b34801561018457600080fd5b506101cd60048035600160a060020a031690602480359160443580830192908201359160643580830192908201359160843580830192908201359160a4359182019101356105ef565b005b3480156101db57600080fd5b506101f1600160e060020a0319600435166106da565b604080519115158252519081900360200190f35b34801561021157600080fd5b5061021a6106fd565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561025457818101518382015260200161023c565b50505050905090810190601f1680156102815780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561029b57600080fd5b506102a7600435610793565b60408051600160a060020a039092168252519081900360200190f35b3480156102cf57600080fd5b506101cd600160a060020a03600435166024356107d5565b3480156102f357600080fd5b506101cd600160a060020a036004351660243515156108e6565b34801561031957600080fd5b50610322610972565b60408051918252519081900360200190f35b34801561034057600080fd5b506101cd600435610979565b34801561035857600080fd5b506101cd600160a060020a0360043581169060243516604435610a23565b34801561038257600080fd5b50610322600160a060020a0360043516602435610b22565b3480156103a657600080fd5b506101cd600160a060020a0360043581169060243516604435610b7d565b3480156103d057600080fd5b506101f1600160a060020a0360043516610b99565b3480156103f157600080fd5b50610322600435610bcf565b34801561040957600080fd5b506101cd600480359060248035908101910135610c00565b34801561042d57600080fd5b50610436610ccc565b60408051600160e060020a03199092168252519081900360200190f35b34801561045f57600080fd5b506102a7600435610cf1565b34801561047757600080fd5b50610322600160a060020a0360043516610d15565b34801561049857600080fd5b5061021a600435610d48565b3480156104b057600080fd5b506102a7610e10565b3480156104c557600080fd5b5061021a610e1f565b3480156104da57600080fd5b506101cd600160a060020a03600435166024351515610e80565b34801561050057600080fd5b50610322600435602435610f03565b34801561051b57600080fd5b506101f1610f70565b34801561053057600080fd5b506101cd600160a060020a0360048035821691602480359091169160443591606435908101910135610f79565b34801561056957600080fd5b50610322600435610fbc565b34801561058157600080fd5b506101cd600435151561100f565b34801561059b57600080fd5b5061021a600435611083565b3480156105b357600080fd5b506101f1600160a060020a0360043581169060243516611113565b3480156105da57600080fd5b506101cd600160a060020a036004351661116e565b600054600160a060020a031633148061061757503360009081526011602052604090205460ff165b151561062257600080fd5b6000831161062f57600080fd5b6000851161063c57600080fd5b6106468a8a611202565b6106808989898080601f01602080910402602001604051908101604052809392919081815260200183838082843750611242945050505050565b6000898152600e60205260409020610699908787611ac7565b506000898152600f602052604090206106b3908585611b45565b5060008981526010602052604090206106cd908383611b45565b5050505050505050505050565b600160e060020a0319811660009081526001602052604090205460ff165b919050565b600a8054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156107895780601f1061075e57610100808354040283529160200191610789565b820191906000526020600020905b81548152906001019060200180831161076c57829003601f168201915b5050505050905090565b6000818152600260205260408120548290600160a060020a031615156107b857600080fd5b5050600090815260036020526040902054600160a060020a031690565b6000818152600260205260408120548290600160a060020a0316338114806108205750600160a060020a038116600090815260056020908152604080832033845290915290205460ff165b151561082b57600080fd5b6000848152600260205260409020548490600160a060020a0316151561085057600080fd5b600085815260026020526040902054600160a060020a039081169450861684141561087a57600080fd5b600085815260036020526040808220805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038a811691821790925591518893918816917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050505050565b600054600160a060020a031633146108fd57600080fd5b600160a060020a038216151561091257600080fd5b600160a060020a038216600081815260116020908152604091829020805460ff1916851515908117909155825190815291517f9947ea94054b1344203190ef8b59684fb00675104126f16896617c2630a2771a9281900390910190a25050565b6006545b90565b6000818152600260205260408120548290600160a060020a0316151561099e57600080fd5b600054600160a060020a031633146109b557600080fd5b600083815260026020526040902054600160a060020a031691506109d9828461128c565b60008381526010602052604081206109f091611b82565b6000838152600f60205260408120610a0791611b82565b6000838152600e60205260408120610a1e91611ba3565b505050565b6000818152600260205260408120546012548391600160a060020a03169060ff16158015610aa15750600160a060020a038116331480610a73575033610a6883610793565b600160a060020a0316145b80610aa15750600160a060020a038116600090815260056020908152604080832033845290915290205460ff165b1515610aac57600080fd5b6000848152600260205260409020548490600160a060020a03161515610ad157600080fd5b600085815260026020526040902054600160a060020a03908116945087168414610afa57600080fd5b600160a060020a0386161515610b0f57600080fd5b610b1986866112d8565b50505050505050565b600160a060020a0382166000908152600860205260408120548210610b4657600080fd5b600160a060020a0383166000908152600860205260409020805483908110610b6a57fe5b9060005260206000200154905092915050565b610a1e8383836020604051908101604052806000815250611354565b6000600160a060020a0382161515610bb057600080fd5b50600160a060020a031660009081526011602052604090205460ff1690565b6006546000908210610be057600080fd5b6006805483908110610bee57fe5b90600052602060002001549050919050565b6000838152600260205260409020548390600160a060020a03161515610c2557600080fd5b600054600160a060020a0316331480610c4d57503360009081526011602052604090205460ff165b1515610c5857600080fd5b6000848152601060205260409020610c71908484611b45565b50837f5b79b007b3d1922ba2ad22a94efca28a60de5713df39285a095603300653097984846040518080602001828103825284848281815260200192506020028082843760405192018290039550909350505050a250505050565b600d547c01000000000000000000000000000000000000000000000000000000000290565b600081815260026020526040902054600160a060020a03168015156106f857600080fd5b6000600160a060020a0382161515610d2c57600080fd5b50600160a060020a031660009081526004602052604090205490565b6000818152600260205260409020546060908290600160a060020a03161515610d7057600080fd5b6000838152600e602090815260409182902080548351601f600260001961010060018616150201909316929092049182018490048402810184019094528084529091830182828015610e035780601f10610dd857610100808354040283529160200191610e03565b820191906000526020600020905b815481529060010190602001808311610de657829003601f168201915b5050505050915050919050565b600054600160a060020a031681565b600b8054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156107895780601f1061075e57610100808354040283529160200191610789565b600160a060020a0382161515610e9557600080fd5b336000818152600560209081526040808320600160a060020a03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b6000828152600260205260408120548390600160a060020a03161515610f2857600080fd5b6000848152601060205260409020548310610f4257600080fd5b6000848152601060205260409020805484908110610f5c57fe5b906000526020600020015491505092915050565b60125460ff1681565b610fb585858585858080601f01602080910402602001604051908101604052809392919081815260200183838082843750611354945050505050565b5050505050565b6000818152600260205260408120548290600160a060020a03161515610fe157600080fd5b6000838152600f6020526040812080549091908110610ffc57fe5b9060005260206000200154915050919050565b600054600160a060020a0316331461102657600080fd5b60125460ff161515811515141561103c57600080fd5b6012805482151560ff19909116811790915560408051918252517fff4a5dbbab6b1963d10f5edd139f33a7987ecb3c4f65969be77ddba28d9465949181900360200190a150565b6000818152600260205260409020546060908290600160a060020a031615156110ab57600080fd5b6000838152600c602090815260409182902080548351601f600260001961010060018616150201909316929092049182018490048402810184019094528084529091830182828015610e035780601f10610dd857610100808354040283529160200191610e03565b6000600160a060020a038316151561112a57600080fd5b600160a060020a038216151561113f57600080fd5b50600160a060020a03918216600090815260056020908152604080832093909416825291909152205460ff1690565b600054600160a060020a0316331461118557600080fd5b600160a060020a038116151561119a57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b61120c82826115b6565b600680546001810182556000919091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f015550565b6000828152600260205260409020548290600160a060020a0316151561126757600080fd5b6000838152600c60209081526040909120835161128692850190611be7565b50505050565b611296828261163f565b6000818152600c602052604090205460026000196101006001841615020190911604156112d4576000818152600c602052604081206112d491611ba3565b5050565b600081815260026020526040902054600160a060020a03166112fa8183611708565b611304818361176a565b61130e8383611891565b8183600160a060020a031682600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b60008281526002602052604081205460125482918591600160a060020a039091169060ff161580156113d65750600160a060020a0381163314806113a857503361139d83610793565b600160a060020a0316145b806113d65750600160a060020a038116600090815260056020908152604080832033845290915290205460ff165b15156113e157600080fd5b6000868152600260205260409020548690600160a060020a0316151561140657600080fd5b600087815260026020526040902054600160a060020a0390811695508916851461142f57600080fd5b600160a060020a038816151561144457600080fd5b61144e88886112d8565b61146088600160a060020a03166118da565b156115ab576040517f150b7a020000000000000000000000000000000000000000000000000000000081523360048201818152600160a060020a038c81166024850152604484018b90526080606485019081528a5160848601528a51918d169463150b7a0294938f938e938e93909160a490910190602085019080838360005b838110156114f85781810151838201526020016114e0565b50505050905090810190601f1680156115255780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561154757600080fd5b505af115801561155b573d6000803e3d6000fd5b505050506040513d602081101561157157600080fd5b50519350600160e060020a031984167f150b7a0200000000000000000000000000000000000000000000000000000000146115ab57600080fd5b505050505050505050565b600160a060020a03821615156115cb57600080fd5b8015156115d757600080fd5b600081815260026020526040902054600160a060020a0316156115f957600080fd5b6116038282611891565b6040518190600160a060020a038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60065460009081908190811061165157fe5b61165b85856118e2565b60008481526007602052604090205460065490935061168190600163ffffffff61195816565b915060068281548110151561169257fe5b90600052602060002001549050806006848154811015156116af57fe5b600091825260208220019190915560068054849081106116cb57fe5b60009182526020909120015560068054906116ea906000198301611c55565b50600093845260076020526040808520859055908452909220555050565b600081815260036020526040808220805473ffffffffffffffffffffffffffffffffffffffff1916905551829190600160a060020a038516907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925908390a45050565b6000806000611779858561196a565b600160a060020a0385166000908152600860205260408120541161179957fe5b600084815260096020908152604080832054600160a060020a03891684526008909252909120549093506117d490600163ffffffff61195816565b600160a060020a0386166000908152600860205260409020805491935090839081106117fc57fe5b90600052602060002001549050806008600087600160a060020a0316600160a060020a031681526020019081526020016000208481548110151561183c57fe5b6000918252602080832090910192909255600160a060020a0387168152600890915260409020805490611873906000198301611c55565b50600093845260096020526040808520859055908452909220555050565b600061189d8383611a20565b50600160a060020a039091166000908152600860209081526040808320805460018101825590845282842081018590559383526009909152902055565b6000903b1190565b6000818152600260205260409020548190600160a060020a0316151561190757600080fd5b6119118383611708565b61191b838361176a565b6040518290600090600160a060020a038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a4505050565b60008282111561196457fe5b50900390565b600081815260026020526040902054600160a060020a0383811691161461199057600080fd5b600160a060020a038216600090815260046020526040812054116119b057fe5b600160a060020a0382166000908152600460205260409020546119da90600163ffffffff61195816565b600160a060020a03909216600090815260046020908152604080832094909455918152600290915220805473ffffffffffffffffffffffffffffffffffffffff19169055565b600081815260026020526040902054600160a060020a031615611a4257600080fd5b6000818152600260209081526040808320805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03871690811790915583526004909152902054611a91906001611ab1565b600160a060020a0390921660009081526004602052604090209190915550565b600082820183811015611ac057fe5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611b085782800160ff19823516178555611b35565b82800160010185558215611b35579182015b82811115611b35578235825591602001919060010190611b1a565b50611b41929150611c75565b5090565b828054828255906000526020600020908101928215611b35579160200282015b82811115611b355782358255602090920191600190910190611b65565b5080546000825590600052602060002090810190611ba09190611c75565b50565b50805460018160011615610100020316600290046000825580601f10611bc95750611ba0565b601f016020900490600052602060002090810190611ba09190611c75565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611c2857805160ff1916838001178555611b35565b82800160010185558215611b35579182015b82811115611b35578251825591602001919060010190611c3a565b815481835581811115610a1e57600083815260209020610a1e9181019083015b61097691905b80821115611b415760008155600101611c7b5600a165627a7a723058202ec2ce27f979d12cd420746f06090e197f7f1bf0a9064b8ee39911ea717e54dd0029"}