{"Runs": "200", "SwarmSource": "bzzr://3bac0f675bcdf51c3197b6eda1a5774c29cb9df158ccff4398ebc9bf256d9990", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_parentContract\",\"type\":\"address\"},{\"name\":\"_parentTokenId\",\"type\":\"uint256\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"childTokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_approved\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newWalletAddress\",\"type\":\"address\"}],\"name\":\"transferCryptoRomeWalletOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"name\":\"_landType\",\"type\":\"uint256\"},{\"name\":\"_landImprovements\",\"type\":\"uint256\"}],\"name\":\"createLand\",\"outputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllForSaleStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cryptoRomeWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"rootOwnerOf\",\"outputs\":[{\"name\":\"rootOwner\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setPrimaryOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fromContract\",\"type\":\"address\"},{\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferFromParent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"otherOperators\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_v2Address\",\"type\":\"address\"}],\"name\":\"setNewAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_landType\",\"type\":\"uint256\"},{\"name\":\"_childLand1\",\"type\":\"uint256\"},{\"name\":\"_childLand2\",\"type\":\"uint256\"},{\"name\":\"_childLand3\",\"type\":\"uint256\"}],\"name\":\"composeNewLand\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"purchaseLand\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_parentContract\",\"type\":\"address\"},{\"name\":\"_parentTokenId\",\"type\":\"uint256\"}],\"name\":\"totalChildTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenOwnerOf\",\"outputs\":[{\"name\":\"tokenOwner\",\"type\":\"bytes32\"},{\"name\":\"parentTokenId\",\"type\":\"uint256\"},{\"name\":\"isParent\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"decomposeLand\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerPrimary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_askingPrice\",\"type\":\"uint256\"}],\"name\":\"sellLand\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_landType\",\"type\":\"uint256\"}],\"name\":\"getLandTypeCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getLandImprovementData\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fromContract\",\"type\":\"address\"},{\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"name\":\"_toContract\",\"type\":\"address\"},{\"name\":\"_toTokenId\",\"type\":\"uint256\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferAsChild\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_parentLandId\",\"type\":\"uint256\"},{\"name\":\"_childLand1\",\"type\":\"uint256\"},{\"name\":\"_childLand2\",\"type\":\"uint256\"},{\"name\":\"_childLand3\",\"type\":\"uint256\"}],\"name\":\"composeLand\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerSecondary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newWalletAddress\",\"type\":\"address\"}],\"name\":\"transferOwnerWalletOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isCryptoRomeLandComposableNFT\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setSecondaryOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"improvementContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOperator\",\"type\":\"address\"},{\"name\":\"_state\",\"type\":\"uint8\"}],\"name\":\"setOtherOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_improvementContract\",\"type\":\"address\"}],\"name\":\"setImprovementContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_newLandImprovementData\",\"type\":\"uint256\"}],\"name\":\"updateLandImprovementData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelLandSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getLand\",\"outputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"parentTokenId\",\"type\":\"uint256\"},{\"name\":\"landType\",\"type\":\"uint256\"},{\"name\":\"landImprovements\",\"type\":\"uint256\"},{\"name\":\"askingPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_toContract\",\"type\":\"address\"},{\"name\":\"_toTokenId\",\"type\":\"uint256\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferToParent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"ContractUpgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_toContract\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_toTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"TransferToParent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_fromContract\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"TransferFromParent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.24+commit.e67f0147", "ConstructorArguments": "", "SourceCode": "pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @summary: CryptoRome Land ERC-998 Bottom-Up Composable NFT Contract (and additional helper contracts)\r\n * @author: GigLabs, LLC\r\n */\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = _a * _b;\r\n    require(c / _a == _b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    require(_b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    require(_b <= _a);\r\n    uint256 c = _a - _b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    uint256 c = _a + _b;\r\n    require(c >= _a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic interface\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n *  Note: the ERC-165 identifier for this interface is 0x80ac58cd.\r\n */\r\ninterface ERC721 /* is ERC165 */ {\r\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\r\n    event Approval(address indexed _tokenOwner, address indexed _approved, uint256 indexed _tokenId);\r\n    event ApprovalForAll(address indexed _tokenOwner, address indexed _operator, bool _approved);\r\n\r\n    function balanceOf(address _tokenOwner) external view returns (uint256 _balance);\r\n    function ownerOf(uint256 _tokenId) external view returns (address _tokenOwner);\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) external;\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\r\n    function approve(address _to, uint256 _tokenId) external;\r\n    function setApprovalForAll(address _operator, bool _approved) external;\r\n    function getApproved(uint256 _tokenId) external view returns (address _operator);\r\n    function isApprovedForAll(address _tokenOwner, address _operator) external view returns (bool);\r\n}\r\n \r\n \r\n/**\r\n * @notice Query if a contract implements an interface\r\n * @dev Interface identification is specified in ERC-165. This function\r\n * uses less than 30,000 gas.\r\n */\r\ninterface ERC165 {\r\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\r\n}\r\n\r\ninterface ERC721TokenReceiver {\r\n    /** \r\n     * @notice Handle the receipt of an NFT\r\n     * @dev The ERC721 smart contract calls this function on the recipient\r\n     * after a `transfer`. This function MAY throw to revert and reject the\r\n     * transfer. Return of other than the magic value MUST result in the\r\n     * transaction being reverted.\r\n     * Note: the contract address is always the message sender.\r\n     * @param _operator The address which called `safeTransferFrom` function\r\n     * @param _from The address which previously owned the token\r\n     * @param _tokenId The NFT identifier which is being transferred\r\n     * @param _data Additional data with no specified format\r\n     * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n     * unless throwing\r\n     */\r\n    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes _data) external returns(bytes4);\r\n}\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n * Note: the ERC-165 identifier for this interface is 0x5b5e139f.\r\n */\r\ninterface ERC721Metadata /* is ERC721 */ {\r\n    function name() external view returns (string _name);\r\n    function symbol() external view returns (string _symbol);\r\n    function tokenURI(uint256 _tokenId) external view returns (string);\r\n}\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n * Note: the ERC-165 identifier for this interface is 0x780e9d63.\r\n */\r\ninterface ERC721Enumerable /* is ERC721 */ {\r\n    function totalSupply() external view returns (uint256);\r\n    function tokenByIndex(uint256 _index) external view returns (uint256);\r\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256);\r\n}\r\n\r\n/**\r\n * @title ERC998ERC721 Bottom-Up Composable Non-Fungible Token\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-998.md\r\n * Note: the ERC-165 identifier for this interface is 0xa1b23002\r\n */\r\ninterface ERC998ERC721BottomUp {\r\n    event TransferToParent(address indexed _toContract, uint256 indexed _toTokenId, uint256 _tokenId);\r\n    event TransferFromParent(address indexed _fromContract, uint256 indexed _fromTokenId, uint256 _tokenId);\r\n\r\n\r\n    function rootOwnerOf(uint256 _tokenId) public view returns (bytes32 rootOwner);\r\n\r\n    /**\r\n    * The tokenOwnerOf function gets the owner of the _tokenId which can be a user address or another ERC721 token.\r\n    * The tokenOwner address return value can be either a user address or an ERC721 contract address.\r\n    * If the tokenOwner address is a user address then parentTokenId will be 0 and should not be used or considered.\r\n    * If tokenOwner address is a user address then isParent is false, otherwise isChild is true, which means that\r\n    * tokenOwner is an ERC721 contract address and _tokenId is a child of tokenOwner and parentTokenId.\r\n    */\r\n    function tokenOwnerOf(uint256 _tokenId) external view returns (bytes32 tokenOwner, uint256 parentTokenId, bool isParent);\r\n\r\n    // Transfers _tokenId as a child to _toContract and _toTokenId\r\n    function transferToParent(address _from, address _toContract, uint256 _toTokenId, uint256 _tokenId, bytes _data) public;\r\n    // Transfers _tokenId from a parent ERC721 token to a user address.\r\n    function transferFromParent(address _fromContract, uint256 _fromTokenId, address _to, uint256 _tokenId, bytes _data) public;\r\n    // Transfers _tokenId from a parent ERC721 token to a parent ERC721 token.\r\n    function transferAsChild(address _fromContract, uint256 _fromTokenId, address _toContract, uint256 _toTokenId, uint256 _tokenId, bytes _data) external;\r\n\r\n}\r\n\r\n/**\r\n * @title ERC998ERC721 Bottom-Up Composable, optional enumerable extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-998.md\r\n * Note: The ERC-165 identifier for this interface is 0x8318b539\r\n */\r\ninterface ERC998ERC721BottomUpEnumerable {\r\n    function totalChildTokens(address _parentContract, uint256 _parentTokenId) external view returns (uint256);\r\n    function childTokenByIndex(address _parentContract, uint256 _parentTokenId, uint256 _index) external view returns (uint256);\r\n}\r\n\r\ncontract ERC998ERC721BottomUpToken is ERC721, ERC721Metadata, ERC721Enumerable, ERC165, ERC998ERC721BottomUp, ERC998ERC721BottomUpEnumerable {\r\n    using SafeMath for uint256;\r\n\r\n    struct TokenOwner {\r\n        address tokenOwner;\r\n        uint256 parentTokenId;\r\n    }\r\n\r\n    // return this.rootOwnerOf.selector ^ this.rootOwnerOfChild.selector ^\r\n    //   this.tokenOwnerOf.selector ^ this.ownerOfChild.selector;\r\n    bytes32 constant ERC998_MAGIC_VALUE = 0xcd740db5;\r\n\r\n    // total number of tokens\r\n    uint256 internal tokenCount;\r\n\r\n    // tokenId => token owner\r\n    mapping(uint256 => TokenOwner) internal tokenIdToTokenOwner;\r\n\r\n    // Mapping from owner to list of owned token IDs\r\n    mapping(address => uint256[]) internal ownedTokens;\r\n\r\n    // Mapping from token ID to index of the owner tokens list\r\n    mapping(uint256 => uint256) internal ownedTokensIndex;\r\n\r\n    // root token owner address => (tokenId => approved address)\r\n    mapping(address => mapping(uint256 => address)) internal rootOwnerAndTokenIdToApprovedAddress;\r\n\r\n    // parent address => (parent tokenId => array of child tokenIds)\r\n    mapping(address => mapping(uint256 => uint256[])) internal parentToChildTokenIds;\r\n\r\n    // tokenId => position in childTokens array\r\n    mapping(uint256 => uint256) internal tokenIdToChildTokenIdsIndex;\r\n\r\n    // token owner => (operator address => bool)\r\n    mapping(address => mapping(address => bool)) internal tokenOwnerToOperators;\r\n\r\n    // Token name\r\n    string internal name_;\r\n\r\n    // Token symbol\r\n    string internal symbol_;\r\n\r\n    // Token URI\r\n    string internal tokenURIBase;\r\n\r\n    mapping(bytes4 => bool) internal supportedInterfaces;\r\n\r\n    //from zepellin ERC721Receiver.sol\r\n    //old version\r\n    bytes4 constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n    function isContract(address _addr) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {size := extcodesize(_addr)}\r\n        return size > 0;\r\n    }\r\n\r\n    constructor () public {\r\n        //ERC165\r\n        supportedInterfaces[0x01ffc9a7] = true;\r\n        //ERC721\r\n        supportedInterfaces[0x80ac58cd] = true;\r\n        //ERC721Metadata\r\n        supportedInterfaces[0x5b5e139f] = true;\r\n        //ERC721Enumerable\r\n        supportedInterfaces[0x780e9d63] = true;\r\n        //ERC998ERC721BottomUp\r\n        supportedInterfaces[0xa1b23002] = true;\r\n        //ERC998ERC721BottomUpEnumerable\r\n        supportedInterfaces[0x8318b539] = true;\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////////\r\n    //\r\n    // ERC165Impl\r\n    //\r\n    /////////////////////////////////////////////////////////////////////////////\r\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool) {\r\n        return supportedInterfaces[_interfaceID];\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////////\r\n    //\r\n    // ERC721 implementation & ERC998 Authentication\r\n    //\r\n    /////////////////////////////////////////////////////////////////////////////\r\n    function balanceOf(address _tokenOwner) public view returns (uint256) {\r\n        require(_tokenOwner != address(0));\r\n        return ownedTokens[_tokenOwner].length;\r\n    }\r\n\r\n    // returns the immediate owner of the token\r\n    function ownerOf(uint256 _tokenId) public view returns (address) {\r\n        address tokenOwner = tokenIdToTokenOwner[_tokenId].tokenOwner;\r\n        require(tokenOwner != address(0));\r\n        return tokenOwner;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external {\r\n        require(_to != address(this));\r\n        _transferFromOwnerCheck(_from, _to, _tokenId);\r\n        _transferFrom(_from, _to, _tokenId);\r\n    }\r\n\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external {\r\n        _transferFromOwnerCheck(_from, _to, _tokenId);\r\n        _transferFrom(_from, _to, _tokenId);\r\n        require(_checkAndCallSafeTransfer(_from, _to, _tokenId, \"\"));\r\n\r\n    }\r\n\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) external {\r\n        _transferFromOwnerCheck(_from, _to, _tokenId);\r\n        _transferFrom(_from, _to, _tokenId);\r\n        require(_checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\r\n    }\r\n\r\n    function _checkAndCallSafeTransfer(address _from, address _to, uint256 _tokenId, bytes _data) internal view returns (bool) {\r\n        if (!isContract(_to)) {\r\n            return true;\r\n        }\r\n        bytes4 retval = ERC721TokenReceiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data);\r\n        return (retval == ERC721_RECEIVED);\r\n    }\r\n\r\n    function _transferFromOwnerCheck(address _from, address _to, uint256 _tokenId) internal {\r\n        require(_from != address(0));\r\n        require(_to != address(0));\r\n        require(tokenIdToTokenOwner[_tokenId].tokenOwner == _from);\r\n        require(tokenIdToTokenOwner[_tokenId].parentTokenId == 0);\r\n\r\n        // check child approved\r\n        address approvedAddress = rootOwnerAndTokenIdToApprovedAddress[_from][_tokenId];\r\n        if(msg.sender != _from) {\r\n            bytes32 tokenOwner;\r\n            bool callSuccess;\r\n            // 0xeadb80b8 == ownerOfChild(address,uint256)\r\n            bytes memory calldata = abi.encodeWithSelector(0xed81cdda, address(this), _tokenId);\r\n            assembly {\r\n                callSuccess := staticcall(gas, _from, add(calldata, 0x20), mload(calldata), calldata, 0x20)\r\n                if callSuccess {\r\n                    tokenOwner := mload(calldata)\r\n                }\r\n            }\r\n            if(callSuccess == true) {\r\n                require(tokenOwner >> 224 != ERC998_MAGIC_VALUE);\r\n            }\r\n            require(tokenOwnerToOperators[_from][msg.sender] || approvedAddress == msg.sender);\r\n        }\r\n\r\n        // clear approval\r\n        if (approvedAddress != address(0)) {\r\n            delete rootOwnerAndTokenIdToApprovedAddress[_from][_tokenId];\r\n            emit Approval(_from, address(0), _tokenId);\r\n        }\r\n    }\r\n\r\n    function _transferFrom(address _from, address _to, uint256 _tokenId) internal {\r\n        // first remove the token from the owner list of owned tokens\r\n        uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\r\n        uint256 lastTokenId = ownedTokens[_from][lastTokenIndex];\r\n        if (lastTokenId != _tokenId) {\r\n            // replace the _tokenId in the list of ownedTokens with the\r\n            // last token id in the list. Make sure ownedTokensIndex gets updated\r\n            // with the new position of the last token id as well.\r\n            uint256 tokenIndex = ownedTokensIndex[_tokenId];\r\n            ownedTokens[_from][tokenIndex] = lastTokenId;\r\n            ownedTokensIndex[lastTokenId] = tokenIndex;\r\n        }\r\n\r\n        // resize ownedTokens array (automatically deletes the last array entry)\r\n        ownedTokens[_from].length--;\r\n\r\n        // transfer token\r\n        tokenIdToTokenOwner[_tokenId].tokenOwner = _to;\r\n        \r\n        // add token to the new owner's list of owned tokens\r\n        ownedTokensIndex[_tokenId] = ownedTokens[_to].length;\r\n        ownedTokens[_to].push(_tokenId);\r\n\r\n        emit Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    function approve(address _approved, uint256 _tokenId) external {\r\n        address tokenOwner = tokenIdToTokenOwner[_tokenId].tokenOwner;\r\n        require(tokenOwner != address(0));\r\n        address rootOwner = address(rootOwnerOf(_tokenId));\r\n        require(rootOwner == msg.sender || tokenOwnerToOperators[rootOwner][msg.sender]);\r\n\r\n        rootOwnerAndTokenIdToApprovedAddress[rootOwner][_tokenId] = _approved;\r\n        emit Approval(rootOwner, _approved, _tokenId);\r\n    }\r\n\r\n    function getApproved(uint256 _tokenId) public view returns (address)  {\r\n        address rootOwner = address(rootOwnerOf(_tokenId));\r\n        return rootOwnerAndTokenIdToApprovedAddress[rootOwner][_tokenId];\r\n    }\r\n\r\n    function setApprovalForAll(address _operator, bool _approved) external {\r\n        require(_operator != address(0));\r\n        tokenOwnerToOperators[msg.sender][_operator] = _approved;\r\n        emit ApprovalForAll(msg.sender, _operator, _approved);\r\n    }\r\n\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool)  {\r\n        require(_owner != address(0));\r\n        require(_operator != address(0));\r\n        return tokenOwnerToOperators[_owner][_operator];\r\n    }\r\n\r\n    function _tokenOwnerOf(uint256 _tokenId) internal view returns (address tokenOwner, uint256 parentTokenId, bool isParent) {\r\n        tokenOwner = tokenIdToTokenOwner[_tokenId].tokenOwner;\r\n        require(tokenOwner != address(0));\r\n        parentTokenId = tokenIdToTokenOwner[_tokenId].parentTokenId;\r\n        if (parentTokenId > 0) {\r\n            isParent = true;\r\n            parentTokenId--;\r\n        }\r\n        else {\r\n            isParent = false;\r\n        }\r\n        return (tokenOwner, parentTokenId, isParent);\r\n    }\r\n\r\n    \r\n    function tokenOwnerOf(uint256 _tokenId) external view returns (bytes32 tokenOwner, uint256 parentTokenId, bool isParent) {\r\n        address tokenOwnerAddress = tokenIdToTokenOwner[_tokenId].tokenOwner;\r\n        require(tokenOwnerAddress != address(0));\r\n        parentTokenId = tokenIdToTokenOwner[_tokenId].parentTokenId;\r\n        if (parentTokenId > 0) {\r\n            isParent = true;\r\n            parentTokenId--;\r\n        }\r\n        else {\r\n            isParent = false;\r\n        }\r\n        return (ERC998_MAGIC_VALUE << 224 | bytes32(tokenOwnerAddress), parentTokenId, isParent);\r\n    }\r\n\r\n    // Use Cases handled:\r\n    // Case 1: Token owner is this contract and no parent tokenId.\r\n    // Case 2: Token owner is this contract and token\r\n    // Case 3: Token owner is top-down composable\r\n    // Case 4: Token owner is an unknown contract\r\n    // Case 5: Token owner is a user\r\n    // Case 6: Token owner is a bottom-up composable\r\n    // Case 7: Token owner is ERC721 token owned by top-down token\r\n    // Case 8: Token owner is ERC721 token owned by unknown contract\r\n    // Case 9: Token owner is ERC721 token owned by user\r\n    function rootOwnerOf(uint256 _tokenId) public view returns (bytes32 rootOwner) {\r\n        address rootOwnerAddress = tokenIdToTokenOwner[_tokenId].tokenOwner;\r\n        require(rootOwnerAddress != address(0));\r\n        uint256 parentTokenId = tokenIdToTokenOwner[_tokenId].parentTokenId;\r\n        bool isParent = parentTokenId > 0;\r\n        if (isParent) {\r\n            parentTokenId--;\r\n        }\r\n\r\n        if((rootOwnerAddress == address(this))) {\r\n            do {\r\n                if(isParent == false) {\r\n                    // Case 1: Token owner is this contract and no token.\r\n                    // This case should not happen.\r\n                    return ERC998_MAGIC_VALUE << 224 | bytes32(rootOwnerAddress);\r\n                }\r\n                else {\r\n                    // Case 2: Token owner is this contract and token\r\n                    (rootOwnerAddress, parentTokenId, isParent) = _tokenOwnerOf(parentTokenId);\r\n                }\r\n            } while(rootOwnerAddress == address(this));\r\n            _tokenId = parentTokenId;\r\n        }\r\n\r\n        bytes memory calldata;\r\n        bool callSuccess;\r\n\r\n        if (isParent == false) {\r\n\r\n            // success if this token is owned by a top-down token\r\n            // 0xed81cdda == rootOwnerOfChild(address, uint256)\r\n            calldata = abi.encodeWithSelector(0xed81cdda, address(this), _tokenId);\r\n            assembly {\r\n                callSuccess := staticcall(gas, rootOwnerAddress, add(calldata, 0x20), mload(calldata), calldata, 0x20)\r\n                if callSuccess {\r\n                    rootOwner := mload(calldata)\r\n                }\r\n            }\r\n            if(callSuccess == true && rootOwner >> 224 == ERC998_MAGIC_VALUE) {\r\n                // Case 3: Token owner is top-down composable\r\n                return rootOwner;\r\n            }\r\n            else {\r\n                // Case 4: Token owner is an unknown contract\r\n                // Or\r\n                // Case 5: Token owner is a user\r\n                return ERC998_MAGIC_VALUE << 224 | bytes32(rootOwnerAddress);\r\n            }\r\n        }\r\n        else {\r\n\r\n            // 0x43a61a8e == rootOwnerOf(uint256)\r\n            calldata = abi.encodeWithSelector(0x43a61a8e, parentTokenId);\r\n            assembly {\r\n                callSuccess := staticcall(gas, rootOwnerAddress, add(calldata, 0x20), mload(calldata), calldata, 0x20)\r\n                if callSuccess {\r\n                    rootOwner := mload(calldata)\r\n                }\r\n            }\r\n            if (callSuccess == true && rootOwner >> 224 == ERC998_MAGIC_VALUE) {\r\n                // Case 6: Token owner is a bottom-up composable\r\n                // Or\r\n                // Case 2: Token owner is top-down composable\r\n                return rootOwner;\r\n            }\r\n            else {\r\n                // token owner is ERC721\r\n                address childContract = rootOwnerAddress;\r\n                //0x6352211e == \"ownerOf(uint256)\"\r\n                calldata = abi.encodeWithSelector(0x6352211e, parentTokenId);\r\n                assembly {\r\n                    callSuccess := staticcall(gas, rootOwnerAddress, add(calldata, 0x20), mload(calldata), calldata, 0x20)\r\n                    if callSuccess {\r\n                        rootOwnerAddress := mload(calldata)\r\n                    }\r\n                }\r\n                require(callSuccess);\r\n\r\n                // 0xed81cdda == rootOwnerOfChild(address,uint256)\r\n                calldata = abi.encodeWithSelector(0xed81cdda, childContract, parentTokenId);\r\n                assembly {\r\n                    callSuccess := staticcall(gas, rootOwnerAddress, add(calldata, 0x20), mload(calldata), calldata, 0x20)\r\n                    if callSuccess {\r\n                        rootOwner := mload(calldata)\r\n                    }\r\n                }\r\n                if(callSuccess == true && rootOwner >> 224 == ERC998_MAGIC_VALUE) {\r\n                    // Case 7: Token owner is ERC721 token owned by top-down token\r\n                    return rootOwner;\r\n                }\r\n                else {\r\n                    // Case 8: Token owner is ERC721 token owned by unknown contract\r\n                    // Or\r\n                    // Case 9: Token owner is ERC721 token owned by user\r\n                    return ERC998_MAGIC_VALUE << 224 | bytes32(rootOwnerAddress);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // List of all Land Tokens assigned to an address.\r\n    function tokensOfOwner(address _owner) external view returns(uint256[] ownerTokens) {\r\n        return ownedTokens[_owner];\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////////\r\n    //\r\n    // ERC721MetadataImpl\r\n    //\r\n    /////////////////////////////////////////////////////////////////////////////\r\n\r\n    function tokenURI(uint256 _tokenId) external view returns (string) {\r\n        require (exists(_tokenId));\r\n        return _appendUintToString(tokenURIBase, _tokenId);\r\n    }\r\n\r\n    function name() external view returns (string) {\r\n        return name_;\r\n    }\r\n\r\n    function symbol() external view returns (string) {\r\n        return symbol_;\r\n    }\r\n\r\n    function _appendUintToString(string inStr, uint v) private pure returns (string str) {\r\n        uint maxlength = 100;\r\n        bytes memory reversed = new bytes(maxlength);\r\n        uint i = 0;\r\n        while (v != 0) {\r\n            uint remainder = v % 10;\r\n            v = v / 10;\r\n            reversed[i++] = byte(48 + remainder);\r\n        }\r\n        bytes memory inStrb = bytes(inStr);\r\n        bytes memory s = new bytes(inStrb.length + i);\r\n        uint j;\r\n        for (j = 0; j < inStrb.length; j++) {\r\n            s[j] = inStrb[j];\r\n        }\r\n        for (j = 0; j < i; j++) {\r\n            s[j + inStrb.length] = reversed[i - 1 - j];\r\n        }\r\n        str = string(s);\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////////\r\n    //\r\n    // ERC721EnumerableImpl\r\n    //\r\n    /////////////////////////////////////////////////////////////////////////////\r\n\r\n    function exists(uint256 _tokenId) public view returns (bool) {\r\n        return _tokenId < tokenCount;\r\n    }\r\n \r\n    function totalSupply() external view returns (uint256) {\r\n        return tokenCount;\r\n    }\r\n\r\n    function tokenOfOwnerByIndex(address _tokenOwner, uint256 _index) external view returns (uint256 tokenId) {\r\n        require(_index < ownedTokens[_tokenOwner].length);\r\n        return ownedTokens[_tokenOwner][_index];\r\n    }\r\n\r\n    function tokenByIndex(uint256 _index) external view returns (uint256 tokenId) {\r\n        require(_index < tokenCount);\r\n        return _index;\r\n    }\r\n\r\n    function _mint(address _to, uint256 _tokenId) internal {\r\n        require (_to != address(0));\r\n        require (tokenIdToTokenOwner[_tokenId].tokenOwner == address(0));\r\n        tokenIdToTokenOwner[_tokenId].tokenOwner = _to;\r\n        ownedTokensIndex[_tokenId] = ownedTokens[_to].length;\r\n        ownedTokens[_to].push(_tokenId);\r\n        tokenCount++;\r\n\r\n        emit Transfer(address(0), _to, _tokenId);\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////////\r\n    //\r\n    // ERC998 Bottom-Up implementation (extenstion of ERC-721)\r\n    //\r\n    /////////////////////////////////////////////////////////////////////////////\r\n\r\n    function _removeChild(address _fromContract, uint256 _fromTokenId, uint256 _tokenId) internal {\r\n        uint256 lastChildTokenIndex = parentToChildTokenIds[_fromContract][_fromTokenId].length - 1;\r\n        uint256 lastChildTokenId = parentToChildTokenIds[_fromContract][_fromTokenId][lastChildTokenIndex];\r\n\r\n        if (_tokenId != lastChildTokenId) {\r\n            uint256 currentChildTokenIndex = tokenIdToChildTokenIdsIndex[_tokenId];\r\n            parentToChildTokenIds[_fromContract][_fromTokenId][currentChildTokenIndex] = lastChildTokenId;\r\n            tokenIdToChildTokenIdsIndex[lastChildTokenId] = currentChildTokenIndex;\r\n        }\r\n        parentToChildTokenIds[_fromContract][_fromTokenId].length--;\r\n    }\r\n\r\n    function _transferChild(address _from, address _toContract, uint256 _toTokenId, uint256 _tokenId) internal {\r\n        tokenIdToTokenOwner[_tokenId].parentTokenId = _toTokenId.add(1);\r\n        uint256 index = parentToChildTokenIds[_toContract][_toTokenId].length;\r\n        parentToChildTokenIds[_toContract][_toTokenId].push(_tokenId);\r\n        tokenIdToChildTokenIdsIndex[_tokenId] = index;\r\n\r\n        _transferFrom(_from, _toContract, _tokenId);\r\n        \r\n        require(ERC721(_toContract).ownerOf(_toTokenId) != address(0));\r\n        emit TransferToParent(_toContract, _toTokenId, _tokenId);\r\n    }\r\n\r\n    function _removeFromToken(address _fromContract, uint256 _fromTokenId, address _to, uint256 _tokenId) internal {\r\n        require(_fromContract != address(0));\r\n        require(_to != address(0));\r\n        require(tokenIdToTokenOwner[_tokenId].tokenOwner == _fromContract);\r\n        uint256 parentTokenId = tokenIdToTokenOwner[_tokenId].parentTokenId;\r\n        require(parentTokenId != 0);\r\n        require(parentTokenId - 1 == _fromTokenId);\r\n\r\n        // authenticate\r\n        address rootOwner = address(rootOwnerOf(_tokenId));\r\n        address approvedAddress = rootOwnerAndTokenIdToApprovedAddress[rootOwner][_tokenId];\r\n        require(rootOwner == msg.sender || tokenOwnerToOperators[rootOwner][msg.sender] || approvedAddress == msg.sender);\r\n\r\n        // clear approval\r\n        if (approvedAddress != address(0)) {\r\n            delete rootOwnerAndTokenIdToApprovedAddress[rootOwner][_tokenId];\r\n            emit Approval(rootOwner, address(0), _tokenId);\r\n        }\r\n\r\n        tokenIdToTokenOwner[_tokenId].parentTokenId = 0;\r\n\r\n        _removeChild(_fromContract, _fromTokenId, _tokenId);\r\n        emit TransferFromParent(_fromContract, _fromTokenId, _tokenId);\r\n    }\r\n\r\n    function transferFromParent(address _fromContract, uint256 _fromTokenId, address _to, uint256 _tokenId, bytes _data) public {\r\n        _removeFromToken(_fromContract, _fromTokenId, _to, _tokenId);\r\n        delete tokenIdToChildTokenIdsIndex[_tokenId];\r\n        _transferFrom(_fromContract, _to, _tokenId);\r\n        require(_checkAndCallSafeTransfer(_fromContract, _to, _tokenId, _data));\r\n    }\r\n\r\n    function transferToParent(address _from, address _toContract, uint256 _toTokenId, uint256 _tokenId, bytes _data) public {\r\n        _transferFromOwnerCheck(_from, _toContract, _tokenId);\r\n        _transferChild(_from, _toContract, _toTokenId, _tokenId);\r\n    }\r\n\r\n    function transferAsChild(address _fromContract, uint256 _fromTokenId, address _toContract, uint256 _toTokenId, uint256 _tokenId, bytes _data) external {\r\n        _removeFromToken(_fromContract, _fromTokenId, _toContract, _tokenId);\r\n        _transferChild(_fromContract, _toContract, _toTokenId, _tokenId);\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////////\r\n    //\r\n    // ERC998 Bottom-Up Enumerable Implementation\r\n    //\r\n    /////////////////////////////////////////////////////////////////////////////\r\n\r\n    function totalChildTokens(address _parentContract, uint256 _parentTokenId) public view returns (uint256) {\r\n        return parentToChildTokenIds[_parentContract][_parentTokenId].length;\r\n    }\r\n\r\n    function childTokenByIndex(address _parentContract, uint256 _parentTokenId, uint256 _index) public view returns (uint256) {\r\n        require(parentToChildTokenIds[_parentContract][_parentTokenId].length > _index);\r\n        return parentToChildTokenIds[_parentContract][_parentTokenId][_index];\r\n    }\r\n}\r\n\r\n\r\ncontract CryptoRomeControl {\r\n\r\n    // Emited when contract is upgraded or ownership changed\r\n    event ContractUpgrade(address newContract);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    // Has control of (most) contract elements\r\n    address public ownerPrimary;\r\n    address public ownerSecondary;\r\n\r\n    // Address of owner wallet to transfer funds\r\n    address public ownerWallet;\r\n    address public cryptoRomeWallet;\r\n\r\n    // Contracts that need access for gameplay\r\n    // (state = 1 means access is active, state = 0 means disabled)\r\n    mapping(address => uint8) public otherOperators;\r\n\r\n    // Improvement contract is the only authorized address that can modify \r\n    // existing land data (ex. when player purchases a land improvement). No one else can\r\n    // modify land - even owners of this contract\r\n    address public improvementContract;\r\n\r\n    // Tracks if contract is paused or not. If paused, most actions are blocked\r\n    bool public paused = false;\r\n\r\n    constructor() public {\r\n        ownerPrimary = msg.sender;\r\n        ownerSecondary = msg.sender;\r\n        ownerWallet = msg.sender;\r\n        cryptoRomeWallet = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require (msg.sender == ownerPrimary || msg.sender == ownerSecondary);\r\n        _;\r\n    }\r\n\r\n    modifier anyOperator() {\r\n        require (\r\n            msg.sender == ownerPrimary ||\r\n            msg.sender == ownerSecondary ||\r\n            otherOperators[msg.sender] == 1\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyOtherOperators() {\r\n        require (otherOperators[msg.sender] == 1);\r\n        _;\r\n    }\r\n\r\n    modifier onlyImprovementContract() {\r\n        require (msg.sender == improvementContract);\r\n        _;\r\n    }\r\n\r\n    function setPrimaryOwner(address _newOwner) external onlyOwner {\r\n        require (_newOwner != address(0));\r\n        emit OwnershipTransferred(ownerPrimary, _newOwner);\r\n        ownerPrimary = _newOwner;\r\n    }\r\n\r\n    function setSecondaryOwner(address _newOwner) external onlyOwner {\r\n        require (_newOwner != address(0));\r\n        emit OwnershipTransferred(ownerSecondary, _newOwner);\r\n        ownerSecondary = _newOwner;\r\n    }\r\n\r\n    function setOtherOperator(address _newOperator, uint8 _state) external onlyOwner {\r\n        require (_newOperator != address(0));\r\n        otherOperators[_newOperator] = _state;\r\n    }\r\n\r\n    function setImprovementContract(address _improvementContract) external onlyOwner {\r\n        require (_improvementContract != address(0));\r\n        emit OwnershipTransferred(improvementContract, _improvementContract);\r\n        improvementContract = _improvementContract;\r\n    }\r\n\r\n    function transferOwnerWalletOwnership(address newWalletAddress) onlyOwner external {\r\n        require(newWalletAddress != address(0));\r\n        ownerWallet = newWalletAddress;\r\n    }\r\n\r\n    function transferCryptoRomeWalletOwnership(address newWalletAddress) onlyOwner external {\r\n        require(newWalletAddress != address(0));\r\n        cryptoRomeWallet = newWalletAddress;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    function pause() public onlyOwner whenNotPaused {\r\n        paused = true;\r\n    }\r\n\r\n    function unpause() public onlyOwner whenPaused {\r\n        paused = false;\r\n    }\r\n\r\n    function withdrawBalance() public onlyOwner {\r\n        ownerWallet.transfer(address(this).balance);\r\n    }\r\n}\r\n\r\ncontract CryptoRomeLandComposableNFT is ERC998ERC721BottomUpToken, CryptoRomeControl {\r\n    using SafeMath for uint256;\r\n\r\n    // Set in case the contract needs to be updated\r\n    address public newContractAddress;\r\n\r\n    struct LandInfo {\r\n        uint256 landType;  // 0-4  unit, plot, village, town, city (unit unused)\r\n        uint256 landImprovements; \r\n        uint256 askingPrice;\r\n    }\r\n\r\n    mapping(uint256 => LandInfo) internal tokenIdToLand;\r\n\r\n    // for sale state of all tokens. tokens map to bits. 0 = not for sale; 1 = for sale\r\n    // 256 token states per index of this array\r\n    uint256[] internal allLandForSaleState;\r\n\r\n    // landType => land count\r\n    mapping(uint256 => uint256) internal landTypeToCount;\r\n\r\n    // total number of villages in existence is 50000 (no more can be created)\r\n    uint256 constant internal MAX_VILLAGES = 50000;\r\n\r\n    constructor () public {\r\n        paused = true;\r\n        name_ = \"CryptoRome-Land-NFT\";\r\n        symbol_ = \"CRLAND\";\r\n    }\r\n\r\n    function isCryptoRomeLandComposableNFT() external pure returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    function getLandTypeCount(uint256 _landType) public view returns (uint256) {\r\n        return landTypeToCount[_landType];\r\n    }\r\n\r\n    function setTokenURI(string _tokenURI) external anyOperator {\r\n        tokenURIBase = _tokenURI;\r\n    }\r\n\r\n    function setNewAddress(address _v2Address) external onlyOwner {\r\n        require (_v2Address != address(0));\r\n        newContractAddress = _v2Address;\r\n        emit ContractUpgrade(_v2Address);\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////////\r\n    // Get Land\r\n    //   Token Owner: Address of the token owner\r\n    //   Parent Token Id: If parentTokenId is > 0, then this land\r\n    //      token is owned by another token (i.e. it is attached bottom-up).\r\n    //      parentTokenId is the id of the owner token, and tokenOwner\r\n    //      address (the first parameter) is the ERC721 contract address of the  \r\n    //      parent token. If parentTokenId == 0, then this land token is owned\r\n    //      by a user address.\r\n    //   Land Types: village=1, town=2, city=3\r\n    //   Land Improvements: improvements and upgrades\r\n    //      to each land NFT are coded into a single uint256 value\r\n    //   Asking Price (in wei): 0 if land is not for sale\r\n    /////////////////////////////////////////////////////////////////////////////\r\n    function getLand(uint256 _tokenId) external view\r\n        returns (\r\n            address tokenOwner,\r\n            uint256 parentTokenId,\r\n            uint256 landType,\r\n            uint256 landImprovements,\r\n            uint256 askingPrice\r\n        ) {\r\n        TokenOwner storage owner = tokenIdToTokenOwner[_tokenId];\r\n        LandInfo storage land = tokenIdToLand[_tokenId];\r\n\r\n        parentTokenId = owner.parentTokenId;\r\n        if (parentTokenId > 0) {\r\n            parentTokenId--;\r\n        }\r\n        tokenOwner = owner.tokenOwner;\r\n        parentTokenId = owner.parentTokenId;\r\n        landType = land.landType;\r\n        landImprovements = land.landImprovements;\r\n        askingPrice = land.askingPrice;\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////////\r\n    // Create Land NFT\r\n    //   Land Types: village=1, town=2, city=3\r\n    //   Land Improvements: improvements and upgrades\r\n    //      to each land NFT are the coded into a uint256 value\r\n    /////////////////////////////////////////////////////////////////////////////\r\n    function _createLand (address _tokenOwner, uint256 _landType, uint256 _landImprovements) internal returns (uint256 tokenId) {\r\n        require(_tokenOwner != address(0));\r\n        require(landTypeToCount[1] < MAX_VILLAGES);\r\n        tokenId = tokenCount;\r\n\r\n        LandInfo memory land = LandInfo({\r\n            landType: _landType,  // 1-3  village, town, city\r\n            landImprovements: _landImprovements,\r\n            askingPrice: 0\r\n        });\r\n        \r\n        // map new tokenId to the newly created land      \r\n        tokenIdToLand[tokenId] = land;\r\n        landTypeToCount[_landType]++;\r\n\r\n        if (tokenId % 256 == 0) {\r\n            // create new land sale state entry in storage\r\n            allLandForSaleState.push(0);\r\n        }\r\n\r\n        _mint(_tokenOwner, tokenId);\r\n\r\n        return tokenId;\r\n    }\r\n    \r\n    function createLand (address _tokenOwner, uint256 _landType, uint256 _landImprovements) external anyOperator whenNotPaused returns (uint256 tokenId) {\r\n        return _createLand (_tokenOwner, _landType, _landImprovements);\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////\r\n    // Land Improvement Data\r\n    //   This uint256 land \"dna\" value describes all improvements and upgrades \r\n    //   to a piece of land. After land token distribution, only the Improvement\r\n    //   Contract can ever update or modify the land improvement data of a piece\r\n    //   of land (contract owner cannot modify land).\r\n    //\r\n    // For villages, improvementData is a uint256 value containing village\r\n    // improvement data with the following slot bit mapping\r\n    //     0-31:     slot 1 improvement info\r\n    //     32-63:    slot 2 improvement info\r\n    //     64-95:    slot 3 improvement info\r\n    //     96-127:   slot 4 improvement info\r\n    //     128-159:  slot 5 improvement info\r\n    //     160-191:  slot 6 improvement info\r\n    //     192-255:  reserved for additional land information\r\n    //\r\n    // Each 32 bit slot in the above structure has the following bit mapping\r\n    //     0-7:      improvement type (index to global list of possible types)\r\n    //     8-14:     upgrade type 1 - level 0-99  (0 for no upgrade present)\r\n    //     15-21:    upgrade type 2 - level 0-99  (0 for no upgrade present)\r\n    //     22:       upgrade type 3 - 1 if upgrade present, 0 if not (no leveling)\r\n    ////////////////////////////////////////////////////////////////////////////////\r\n    function getLandImprovementData(uint256 _tokenId) external view returns (uint256) {\r\n        return tokenIdToLand[_tokenId].landImprovements;\r\n    }\r\n\r\n    function updateLandImprovementData(uint256 _tokenId, uint256 _newLandImprovementData) external whenNotPaused onlyImprovementContract {\r\n        require(_tokenId <= tokenCount);\r\n        tokenIdToLand[_tokenId].landImprovements = _newLandImprovementData;\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////////\r\n    // Land Compose/Decompose functions\r\n    //   Towns are composed of 3 Villages\r\n    //   Cities are composed of 3 Towns\r\n    /////////////////////////////////////////////////////////////////////////////\r\n\r\n    // Attach three child land tokens onto a parent land token (ex. 3 villages onto a town).\r\n    // This function is called when the parent does not exist yet, so create parent land token first\r\n    // Ownership of the child lands transfers from the existing owner (sender) to the parent land token\r\n    function composeNewLand(uint256 _landType, uint256 _childLand1, uint256 _childLand2, uint256 _childLand3) external whenNotPaused returns(uint256) {\r\n        uint256 parentTokenId = _createLand(msg.sender, _landType, 0);\r\n        return composeLand(parentTokenId, _childLand1, _childLand2, _childLand3);\r\n    }\r\n\r\n    // Attach three child land tokens onto a parent land token (ex. 3 villages into a town).\r\n    // All three children and an existing parent need to be passed into this function.\r\n    // Ownership of the child lands transfers from the existing owner (sender) to the parent land token\r\n    function composeLand(uint256 _parentLandId, uint256 _childLand1, uint256 _childLand2, uint256 _childLand3) public whenNotPaused returns(uint256) {\r\n        require (tokenIdToLand[_parentLandId].landType == 2 || tokenIdToLand[_parentLandId].landType == 3);\r\n        uint256 validChildLandType = tokenIdToLand[_parentLandId].landType.sub(1);\r\n        require(tokenIdToLand[_childLand1].landType == validChildLandType &&\r\n                tokenIdToLand[_childLand2].landType == validChildLandType &&\r\n                tokenIdToLand[_childLand3].landType == validChildLandType);\r\n\r\n        // transfer ownership of child land tokens to parent land token\r\n        transferToParent(tokenIdToTokenOwner[_childLand1].tokenOwner, address(this), _parentLandId, _childLand1, \"\");\r\n        transferToParent(tokenIdToTokenOwner[_childLand2].tokenOwner, address(this), _parentLandId, _childLand2, \"\");\r\n        transferToParent(tokenIdToTokenOwner[_childLand3].tokenOwner, address(this), _parentLandId, _childLand3, \"\");\r\n\r\n        // if this contract is owner of the parent land token, transfer ownership to msg.sender\r\n        if (tokenIdToTokenOwner[_parentLandId].tokenOwner == address(this)) {\r\n            _transferFrom(address(this), msg.sender, _parentLandId);\r\n        }\r\n\r\n        return _parentLandId;\r\n    }\r\n\r\n    // Decompose a parent land back to it's attached child land token components (ex. a town into 3 villages).\r\n    // The existing owner of the parent land becomes the owner of the three child tokens\r\n    // This contract takes over ownership of the parent land token (for later reuse)\r\n    // Loop to remove and transfer all land tokens in case other land tokens are attached.\r\n    function decomposeLand(uint256 _tokenId) external whenNotPaused {\r\n        uint256 numChildren = totalChildTokens(address(this), _tokenId);\r\n        require (numChildren > 0);\r\n\r\n        // it is lower gas cost to remove children starting from the end of the array\r\n        for (uint256 numChild = numChildren; numChild > 0; numChild--) {\r\n            uint256 childTokenId = childTokenByIndex(address(this), _tokenId, numChild-1);\r\n\r\n            // transfer ownership of underlying lands to msg.sender\r\n            transferFromParent(address(this), _tokenId, msg.sender, childTokenId, \"\");\r\n        }\r\n\r\n        // transfer ownership of parent land back to this contract owner for reuse\r\n        _transferFrom(msg.sender, address(this), _tokenId);\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////////\r\n    // Sale functions\r\n    /////////////////////////////////////////////////////////////////////////////\r\n    function _updateSaleData(uint256 _tokenId, uint256 _askingPrice) internal {\r\n        tokenIdToLand[_tokenId].askingPrice = _askingPrice;\r\n        if (_askingPrice > 0) {\r\n            // Item is for sale - set bit\r\n            allLandForSaleState[_tokenId.div(256)] = allLandForSaleState[_tokenId.div(256)] | (1 << (_tokenId % 256));\r\n        } else {\r\n            // Item is no longer for sale - clear bit\r\n            allLandForSaleState[_tokenId.div(256)] = allLandForSaleState[_tokenId.div(256)] & ~(1 << (_tokenId % 256));\r\n        }\r\n    }\r\n\r\n    function sellLand(uint256 _tokenId, uint256 _askingPrice) public whenNotPaused {\r\n        require(tokenIdToTokenOwner[_tokenId].tokenOwner == msg.sender);\r\n        require(tokenIdToTokenOwner[_tokenId].parentTokenId == 0);\r\n        require(_askingPrice > 0);\r\n        // Put the land token on the market\r\n        _updateSaleData(_tokenId, _askingPrice);\r\n    }\r\n\r\n    function cancelLandSale(uint256 _tokenId) public whenNotPaused {\r\n        require(tokenIdToTokenOwner[_tokenId].tokenOwner == msg.sender);\r\n        // Take the land token off the market\r\n        _updateSaleData(_tokenId, 0);\r\n    }\r\n\r\n    function purchaseLand(uint256 _tokenId) public whenNotPaused payable {\r\n        uint256 price = tokenIdToLand[_tokenId].askingPrice;\r\n        require(price <= msg.value);\r\n\r\n        // Take the land token off the market\r\n        _updateSaleData(_tokenId, 0);\r\n\r\n        // Marketplace fee\r\n        uint256 marketFee = computeFee(price);\r\n        uint256 sellerProceeds = msg.value.sub(marketFee);\r\n        cryptoRomeWallet.transfer(marketFee);\r\n\r\n        // Return excess payment to sender\r\n        uint256 excessPayment = msg.value.sub(price);\r\n        msg.sender.transfer(excessPayment);\r\n\r\n        // Transfer proceeds to seller. Sale was removed above before this transfer()\r\n        // to guard against reentrancy attacks\r\n        tokenIdToTokenOwner[_tokenId].tokenOwner.transfer(sellerProceeds);\r\n        // Transfer token to buyer\r\n        _transferFrom(tokenIdToTokenOwner[_tokenId].tokenOwner, msg.sender, _tokenId);\r\n    }\r\n\r\n    function getAllForSaleStatus() external view returns(uint256[]) {\r\n        // return uint256[] bitmap values up to max tokenId (for ease of querying from UI for marketplace)\r\n        //   index 0 of the uint256 holds first 256 land token status; index 1 is next 256 land tokens, etc\r\n        //   value of 1 = For Sale; 0 = Not for Sale\r\n        return allLandForSaleState;\r\n    }\r\n\r\n    function computeFee(uint256 amount) internal pure returns(uint256) {\r\n        // 3% marketplace fee, most of which will be distributed to the Caesar and Senators of CryptoRome\r\n        return amount.mul(3).div(100);\r\n    }\r\n}\r\n\r\ncontract CryptoRomeLandDistribution is CryptoRomeControl {\r\n    using SafeMath for uint256;\r\n\r\n    // Set in case the contract needs to be updated\r\n    address public newContractAddress;\r\n\r\n    CryptoRomeLandComposableNFT public cryptoRomeLandNFTContract;\r\n    ImprovementGeneration public improvementGenContract;\r\n    uint256 public villageInventoryPrice;\r\n    uint256 public numImprovementsPerVillage;\r\n\r\n    uint256 constant public LOWEST_VILLAGE_INVENTORY_PRICE = 100000000000000000; // 0.1 ETH\r\n\r\n    constructor (address _cryptoRomeLandNFTContractAddress, address _improvementGenContractAddress) public {\r\n        require (_cryptoRomeLandNFTContractAddress != address(0));\r\n        require (_improvementGenContractAddress != address(0));\r\n\r\n        paused = true;\r\n\r\n        cryptoRomeLandNFTContract = CryptoRomeLandComposableNFT(_cryptoRomeLandNFTContractAddress);\r\n        improvementGenContract = ImprovementGeneration(_improvementGenContractAddress);\r\n\r\n        villageInventoryPrice = LOWEST_VILLAGE_INVENTORY_PRICE;\r\n        numImprovementsPerVillage = 3;\r\n    }\r\n\r\n    function setNewAddress(address _v2Address) external onlyOwner {\r\n        require (_v2Address != address(0));\r\n        newContractAddress = _v2Address;\r\n        emit ContractUpgrade(_v2Address);\r\n    }\r\n\r\n    function setCryptoRomeLandNFTContract(address _cryptoRomeLandNFTContract) external onlyOwner {\r\n        require (_cryptoRomeLandNFTContract != address(0));\r\n        cryptoRomeLandNFTContract = CryptoRomeLandComposableNFT(_cryptoRomeLandNFTContract);\r\n    }\r\n\r\n    function setImprovementGenContract(address _improvementGenContractAddress) external onlyOwner {\r\n        require (_improvementGenContractAddress != address(0));\r\n        improvementGenContract = ImprovementGeneration(_improvementGenContractAddress);\r\n    }\r\n\r\n    function setVillageInventoryPrice(uint256 _price) external onlyOwner {\r\n        require(_price >= LOWEST_VILLAGE_INVENTORY_PRICE);\r\n        villageInventoryPrice = _price;\r\n    }\r\n\r\n    function setNumImprovementsPerVillage(uint256 _numImprovements) external onlyOwner {\r\n        require(_numImprovements <= 6);\r\n        numImprovementsPerVillage = _numImprovements;\r\n    }\r\n\r\n    function purchaseFromVillageInventory(uint256 _num) external whenNotPaused payable {\r\n        uint256 price = villageInventoryPrice.mul(_num);\r\n        require (msg.value >= price);\r\n        require (_num > 0 && _num <= 50);\r\n\r\n        // Marketplace fee\r\n        uint256 marketFee = computeFee(price);\r\n        cryptoRomeWallet.transfer(marketFee);\r\n\r\n        // Return excess payment to sender\r\n        uint256 excessPayment = msg.value.sub(price);\r\n        msg.sender.transfer(excessPayment);\r\n\r\n        for (uint256 i = 0; i < _num; i++) {\r\n            // create a new village w/ random improvements and transfer the NFT to caller\r\n            _createVillageWithImprovementsFromInv(msg.sender);\r\n        }\r\n    }\r\n\r\n    function computeFee(uint256 amount) internal pure returns(uint256) {\r\n        // 3% marketplace fee, most of which will be distributed to the Caesar and Senators of CryptoRome\r\n        return amount.mul(3).div(100);\r\n    }\r\n\r\n    function batchIssueLand(address _toAddress, uint256[] _landType) external onlyOwner {\r\n        require (_toAddress != address(0));\r\n        require (_landType.length > 0);\r\n\r\n        for (uint256 i = 0; i < _landType.length; i++) {\r\n            issueLand(_toAddress, _landType[i]);\r\n        }\r\n    }\r\n\r\n    function batchIssueVillages(address _toAddress, uint256 _num) external onlyOwner {\r\n        require (_toAddress != address(0));\r\n        require (_num > 0);\r\n\r\n        for (uint256 i = 0; i < _num; i++) {\r\n            _createVillageWithImprovements(_toAddress);\r\n        }\r\n    }\r\n\r\n    function issueLand(address _toAddress, uint256 _landType) public onlyOwner returns (uint256) {\r\n        require (_toAddress != address(0));\r\n\r\n        return _createLandWithImprovements(_toAddress, _landType);\r\n    }\r\n\r\n    function batchCreateLand(uint256[] _landType) external onlyOwner {\r\n        require (_landType.length > 0);\r\n\r\n        for (uint256 i = 0; i < _landType.length; i++) {\r\n            // land created is owned by this contract for staging purposes\r\n            // (must later use transferTo or batchTransferTo)\r\n            _createLandWithImprovements(address(this), _landType[i]);\r\n        }\r\n    }\r\n\r\n    function batchCreateVillages(uint256 _num) external onlyOwner {\r\n        require (_num > 0);\r\n\r\n        for (uint256 i = 0; i < _num; i++) {\r\n            // land created is owned by this contract for staging purposes\r\n            // (must later use transferTo or batchTransferTo)\r\n            _createVillageWithImprovements(address(this));\r\n        }\r\n    }\r\n\r\n    function createLand(uint256 _landType) external onlyOwner {\r\n        // land created is owned by this contract for staging purposes\r\n        // (must later use transferTo or batchTransferTo)\r\n        _createLandWithImprovements(address(this), _landType);\r\n    }\r\n\r\n    function batchTransferTo(uint256[] _tokenIds, address _to) external onlyOwner {\r\n        require (_tokenIds.length > 0);\r\n        require (_to != address(0));\r\n\r\n        for (uint256 i = 0; i < _tokenIds.length; ++i) {\r\n            // transfers staged land out of this contract to the owners\r\n            cryptoRomeLandNFTContract.transferFrom(address(this), _to, _tokenIds[i]);\r\n        }\r\n    }\r\n\r\n    function transferTo(uint256 _tokenId, address _to) external onlyOwner {\r\n        require (_to != address(0));\r\n\r\n        // transfers staged land out of this contract to the owners\r\n        cryptoRomeLandNFTContract.transferFrom(address(this), _to, _tokenId);\r\n    }\r\n\r\n    function issueVillageWithImprovementsForPromo(address _toAddress, uint256 numImprovements) external onlyOwner returns (uint256) {\r\n        uint256 landImprovements = improvementGenContract.genInitialResourcesForVillage(numImprovements, false);\r\n        return cryptoRomeLandNFTContract.createLand(_toAddress, 1, landImprovements);\r\n    }\r\n\r\n    function _createVillageWithImprovementsFromInv(address _toAddress) internal returns (uint256) {\r\n        uint256 landImprovements = improvementGenContract.genInitialResourcesForVillage(numImprovementsPerVillage, true);\r\n        return cryptoRomeLandNFTContract.createLand(_toAddress, 1, landImprovements);\r\n    }\r\n\r\n    function _createVillageWithImprovements(address _toAddress) internal returns (uint256) {\r\n        uint256 landImprovements = improvementGenContract.genInitialResourcesForVillage(3, false);\r\n        return cryptoRomeLandNFTContract.createLand(_toAddress, 1, landImprovements);\r\n    }\r\n\r\n    function _createLandWithImprovements(address _toAddress, uint256 _landType) internal returns (uint256) {\r\n        require (_landType > 0 && _landType < 4);\r\n\r\n        if (_landType == 1) {\r\n            return _createVillageWithImprovements(_toAddress);\r\n        } else if (_landType == 2) {\r\n            uint256 village1TokenId = _createLandWithImprovements(address(this), 1);\r\n            uint256 village2TokenId = _createLandWithImprovements(address(this), 1);\r\n            uint256 village3TokenId = _createLandWithImprovements(address(this), 1);\r\n            uint256 townTokenId = cryptoRomeLandNFTContract.createLand(_toAddress, 2, 0);\r\n            cryptoRomeLandNFTContract.composeLand(townTokenId, village1TokenId, village2TokenId, village3TokenId);\r\n            return townTokenId;\r\n        } else if (_landType == 3) {\r\n            uint256 town1TokenId = _createLandWithImprovements(address(this), 2);\r\n            uint256 town2TokenId = _createLandWithImprovements(address(this), 2);\r\n            uint256 town3TokenId = _createLandWithImprovements(address(this), 2);\r\n            uint256 cityTokenId = cryptoRomeLandNFTContract.createLand(_toAddress, 3, 0);\r\n            cryptoRomeLandNFTContract.composeLand(cityTokenId, town1TokenId, town2TokenId, town3TokenId);\r\n            return cityTokenId;\r\n        }\r\n    }\r\n}\r\n\r\ninterface RandomNumGeneration {\r\n    function getRandomNumber(uint256 seed) external returns (uint256);\r\n}\r\n\r\ncontract ImprovementGeneration is CryptoRomeControl {\r\n    using SafeMath for uint256;\r\n    \r\n    // Set in case the contract needs to be updated\r\n    address public newContractAddress;\r\n\r\n    RandomNumGeneration public randomNumberSource; \r\n    uint256 public rarityValueMax;\r\n    uint256 public latestPseudoRandomNumber;\r\n    uint8 public numResourceImprovements;\r\n\r\n    mapping(uint8 => uint256) private improvementIndexToRarityValue;\r\n\r\n    constructor () public {\r\n        // Starting Improvements\r\n        // improvement => rarity value (lower number = higher rarity) \r\n        improvementIndexToRarityValue[1] = 256;  // Wheat\r\n        improvementIndexToRarityValue[2] = 256;  // Wood\r\n        improvementIndexToRarityValue[3] = 128;  // Grapes\r\n        improvementIndexToRarityValue[4] = 128;  // Stone\r\n        improvementIndexToRarityValue[5] = 64;   // Clay\r\n        improvementIndexToRarityValue[6] = 64;   // Fish\r\n        improvementIndexToRarityValue[7] = 32;   // Horse\r\n        improvementIndexToRarityValue[8] = 16;   // Iron\r\n        improvementIndexToRarityValue[9] = 8;    // Marble\r\n        // etc --> More can be added in the future\r\n\r\n        // max resource improvement types is 63\r\n        numResourceImprovements = 9;\r\n        rarityValueMax = 952;\r\n    }\r\n\r\n    function setNewAddress(address _v2Address) external onlyOwner {\r\n        require (_v2Address != address(0));\r\n        newContractAddress = _v2Address;\r\n        emit ContractUpgrade(_v2Address);\r\n    }\r\n\r\n    function setRandomNumGenerationContract(address _randomNumberGenAddress) external onlyOwner {\r\n        require (_randomNumberGenAddress != address(0));\r\n        randomNumberSource = RandomNumGeneration(_randomNumberGenAddress);\r\n    }\r\n\r\n    function genInitialResourcesForVillage(uint256 numImprovements, bool useRandomInput) external anyOperator returns(uint256) {\r\n        require(numImprovements <= 6);\r\n        uint256 landImprovements;\r\n\r\n        // each improvement takes up one village slot (max 6 slots)\r\n        for (uint256 i = 0; i < numImprovements; i++) {\r\n            uint8 newImprovement = generateImprovement(useRandomInput);\r\n            // each slot is a 32 bit section in the 256 bit landImprovement value\r\n            landImprovements |= uint256(newImprovement) << (32*i);\r\n        }\r\n        \r\n        return landImprovements;\r\n    }\r\n\r\n    function generateImprovement(bool useRandomSource) public anyOperator returns (uint8 newImprovement) {     \r\n        // seed does not need to be anything super fancy for initial improvement generation for villages...\r\n        // players will not be performing that operation, so this should be random enough\r\n        uint256 seed = latestPseudoRandomNumber.add(now);\r\n        if (useRandomSource) {\r\n            // for cases where players are generating land (i.e. after initial distribution of villages), there\r\n            // will need to be a better source of randomness\r\n            seed = randomNumberSource.getRandomNumber(seed);\r\n        }\r\n        \r\n        latestPseudoRandomNumber = addmod(uint256(blockhash(block.number-1)), seed, rarityValueMax);\r\n        \r\n        // do lookup for the improvement\r\n        newImprovement = lookupImprovementTypeByRarity(latestPseudoRandomNumber);\r\n    }\r\n\r\n    function lookupImprovementTypeByRarity(uint256 rarityNum) public view returns (uint8 improvementType) {\r\n        uint256 rarityIndexValue;\r\n        for (uint8 i = 1; i <= numResourceImprovements; i++) {\r\n            rarityIndexValue += improvementIndexToRarityValue[i];\r\n            if (rarityNum < rarityIndexValue) {\r\n                return i;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function addNewResourceImprovementType(uint256 rarityValue) external onlyOwner {\r\n        require(rarityValue > 0);\r\n        require(numResourceImprovements < 63);\r\n\r\n        numResourceImprovements++;\r\n        rarityValueMax += rarityValue;\r\n        improvementIndexToRarityValue[numResourceImprovements] = rarityValue;\r\n    }\r\n\r\n    function updateImprovementRarityValue(uint256 rarityValue, uint8 improvementIndex) external onlyOwner {\r\n        require(rarityValue > 0);\r\n        require(improvementIndex <= numResourceImprovements);\r\n\r\n        rarityValueMax -= improvementIndexToRarityValue[improvementIndex];\r\n        rarityValueMax += rarityValue;\r\n        improvementIndexToRarityValue[improvementIndex] = rarityValue;\r\n    }\r\n}", "OptimizationUsed": "1", "ContractName": "CryptoRomeLandComposableNFT", "ByteCode": "0x60806040526004361061028f5763ffffffff60e060020a60003504166301ffc9a78114610294578063051847d5146102df57806306fdde0314610318578063081812fc146103a2578063095ea7b3146103d65780630b1ad18d146103fc57806318160ddd1461041d5780631e1e3c5b14610432578063216a55431461045957806323b872dd146104be5780632f745c59146104e857806337efa3971461050c5780633f4ba83a1461052157806342842e0e1461053657806343a61a8e1461056057806343bad081146105785780634f558e79146105995780634f6ccce7146105b15780635c975abb146105c95780635e3e2687146105de5780635fd8c710146106575780636352211e1461066c5780636af04a57146106845780636eccc6a31461069957806370a08231146106d057806371587988146106f15780637fcdcb9a146107125780638009d5d7146107335780638456cb591461073e5780638462151c146107535780638600f2ec1461077457806389885a591461079857806390b62297146107d05780639335dcb7146107e857806395910d46146107fd57806395d89b4114610812578063a22cb46514610827578063ae9409031461084d578063b5f4968c14610868578063b88d4fde14610880578063bd2f37ba146108b9578063c0a899f2146108d1578063c87b56dd14610911578063cfef941b14610929578063d00155001461094a578063d16d9f411461095f578063d1ce65ab14610980578063d52e7f9314610995578063d621c878146109b6578063d8bbe8cf146109cb578063dbd1a08e146109f2578063e0df5b6f14610a13578063e11304f914610a33578063e87596c014610a4e578063e985e9c514610a66578063f02dd53f14610a8d578063f50acfa014610ada575b600080fd5b3480156102a057600080fd5b506102cb7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1960043516610b51565b604080519115158252519081900360200190f35b3480156102eb57600080fd5b50610306600160a060020a0360043516602435604435610b85565b60408051918252519081900360200190f35b34801561032457600080fd5b5061032d610bf7565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561036757818101518382015260200161034f565b50505050905090810190601f1680156103945780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156103ae57600080fd5b506103ba600435610c8e565b60408051600160a060020a039092168252519081900360200190f35b3480156103e257600080fd5b506103fa600160a060020a0360043516602435610cca565b005b34801561040857600080fd5b506103fa600160a060020a0360043516610da6565b34801561042957600080fd5b50610306610e0b565b34801561043e57600080fd5b50610306600160a060020a0360043516602435604435610e11565b34801561046557600080fd5b5061046e610e89565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156104aa578181015183820152602001610492565b505050509050019250505060405180910390f35b3480156104ca57600080fd5b506103fa600160a060020a0360043581169060243516604435610ee0565b3480156104f457600080fd5b50610306600160a060020a0360043516602435610f11565b34801561051857600080fd5b506103ba610f6c565b34801561052d57600080fd5b506103fa610f7b565b34801561054257600080fd5b506103fa600160a060020a0360043581169060243516604435610fe1565b34801561056c57600080fd5b5061030660043561101e565b34801561058457600080fd5b506103fa600160a060020a0360043516611360565b3480156105a557600080fd5b506102cb6004356113ff565b3480156105bd57600080fd5b50610306600435611406565b3480156105d557600080fd5b506102cb611419565b3480156105ea57600080fd5b50604080516020601f6084356004818101359283018490048402850184019095528184526103fa94600160a060020a0381358116956024803596604435909316956064359536959460a4949391909101919081908401838280828437509497506114299650505050505050565b34801561066357600080fd5b506103fa61146d565b34801561067857600080fd5b506103ba6004356114d8565b34801561069057600080fd5b506103ba611502565b3480156106a557600080fd5b506106ba600160a060020a0360043516611511565b6040805160ff9092168252519081900360200190f35b3480156106dc57600080fd5b50610306600160a060020a0360043516611526565b3480156106fd57600080fd5b506103fa600160a060020a0360043516611559565b34801561071e57600080fd5b506103066004356024356044356064356115f0565b6103fa600435611632565b34801561074a57600080fd5b506103fa61177e565b34801561075f57600080fd5b5061046e600160a060020a03600435166117e9565b34801561078057600080fd5b50610306600160a060020a0360043516602435611855565b3480156107a457600080fd5b506107b060043561187d565b604080519384526020840192909252151582820152519081900360600190f35b3480156107dc57600080fd5b506103fa600435611908565b3480156107f457600080fd5b506103ba611996565b34801561080957600080fd5b506103ba6119a5565b34801561081e57600080fd5b5061032d6119b4565b34801561083357600080fd5b506103fa600160a060020a03600435166024351515611a15565b34801561085957600080fd5b506103fa600435602435611a98565b34801561087457600080fd5b50610306600435611b0a565b34801561088c57600080fd5b506103fa600160a060020a0360048035821691602480359091169160443591606435908101910135611b1c565b3480156108c557600080fd5b50610306600435611b6e565b3480156108dd57600080fd5b506103fa60048035600160a060020a039081169160248035926044351691606435916084359160a435918201910135611b83565b34801561091d57600080fd5b5061032d600435611ba4565b34801561093557600080fd5b50610306600435602435604435606435611c52565b34801561095657600080fd5b506103ba611deb565b34801561096b57600080fd5b506103fa600160a060020a0360043516611dfa565b34801561098c57600080fd5b506102cb611e5f565b3480156109a157600080fd5b506103fa600160a060020a0360043516611e64565b3480156109c257600080fd5b506103ba611f03565b3480156109d757600080fd5b506103fa600160a060020a036004351660ff60243516611f12565b3480156109fe57600080fd5b506103fa600160a060020a0360043516611f82565b348015610a1f57600080fd5b506103fa6004803560248101910135612021565b348015610a3f57600080fd5b506103fa600435602435612078565b348015610a5a57600080fd5b506103fa6004356120ca565b348015610a7257600080fd5b506102cb600160a060020a036004358116906024351661210f565b348015610a9957600080fd5b50610aa560043561216a565b60408051600160a060020a03909616865260208601949094528484019290925260608401526080830152519081900360a00190f35b348015610ae657600080fd5b50604080516020601f6084356004818101359283018490048402850184019095528184526103fa94600160a060020a0381358116956024803590921695604435956064359536959460a494939101919081908401838280828437509497506121ce9650505050505050565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166000908152600b602052604090205460ff1690565b600160a060020a03831660009081526005602090815260408083208584529091528120548210610bb457600080fd5b600160a060020a03841660009081526005602090815260408083208684529091529020805483908110610be357fe5b906000526020600020015490509392505050565b60088054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610c835780601f10610c5857610100808354040283529160200191610c83565b820191906000526020600020905b815481529060010190602001808311610c6657829003601f168201915b505050505090505b90565b600080610c9a8361101e565b600160a060020a038082166000908152600460209081526040808320888452909152902054169250905050919050565b600081815260016020526040812054600160a060020a031690811515610cef57600080fd5b610cf88361101e565b9050600160a060020a038116331480610d345750600160a060020a038116600090815260076020908152604080832033845290915290205460ff165b1515610d3f57600080fd5b600160a060020a0381811660008181526004602090815260408083208884529091528082208054600160a060020a031916948916948517905551869392917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a450505050565b600c54600160a060020a0316331480610dc95750600d54600160a060020a031633145b1515610dd457600080fd5b600160a060020a0381161515610de957600080fd5b600f8054600160a060020a031916600160a060020a0392909216919091179055565b60005490565b600c54600090600160a060020a0316331480610e375750600d54600160a060020a031633145b80610e5457503360009081526010602052604090205460ff166001145b1515610e5f57600080fd5b60115460a060020a900460ff1615610e7657600080fd5b610e818484846121e5565b949350505050565b60606014805480602002602001604051908101604052809291908181526020018280548015610c8357602002820191906000526020600020905b815481526020019060010190808311610ec3575050505050905090565b600160a060020a038216301415610ef657600080fd5b610f018383836122e6565b610f0c8383836124d0565b505050565b600160a060020a0382166000908152600260205260408120548210610f3557600080fd5b600160a060020a0383166000908152600260205260409020805483908110610f5957fe5b9060005260206000200154905092915050565b600f54600160a060020a031681565b600c54600160a060020a0316331480610f9e5750600d54600160a060020a031633145b1515610fa957600080fd5b60115460a060020a900460ff161515610fc157600080fd5b6011805474ff000000000000000000000000000000000000000019169055565b610fec8383836122e6565b610ff78383836124d0565b611013838383602060405190810160405280600081525061264c565b1515610f0c57600080fd5b600081815260016020526040812054600160a060020a031681806060818085151561104857600080fd5b600088815260016020819052604082200154955085119350831561106e57600019909401935b600160a060020a0386163014156110e4575b8315156110ba577fcd740db500000000000000000000000000000000000000000000000000000000600160a060020a038716179650611355565b6110c3856127c0565b91975095509350600160a060020a0386163014156110e057611080565b8497505b8315156111b4576040805130602482015260448082018b905282518083039091018152606490910190915260208181018051600160e060020a03167fed81cdda00000000000000000000000000000000000000000000000000000000178152825192955090918591895afa9150811561115c57825196505b6001821515148015611177575060e060020a870463cd740db5145b1561118157611355565b7fcd740db500000000000000000000000000000000000000000000000000000000600160a060020a038716179650611355565b60408051602480820188905282518083039091018152604490910190915260208181018051600160e060020a03167f43a61a8e00000000000000000000000000000000000000000000000000000000178152825192955090918591895afa9150811561121f57825196505b600182151514801561123a575060e060020a870463cd740db5145b1561124457611355565b5060408051602480820187905282518083039091018152604490910190915260208181018051600160e060020a03167f6352211e00000000000000000000000000000000000000000000000000000000178152825192945087928591845afa915081156112b057825195505b8115156112bc57600080fd5b60408051600160a060020a0383166024820152604480820188905282518083039091018152606490910190915260208181018051600160e060020a03167fed81cdda00000000000000000000000000000000000000000000000000000000178152825192955090918591895afa9150811561115c57825196506001821515148015611177575060e060020a870463cd740db51415611181575b505050505050919050565b600c54600160a060020a03163314806113835750600d54600160a060020a031633145b151561138e57600080fd5b600160a060020a03811615156113a357600080fd5b600c54604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600c8054600160a060020a031916600160a060020a0392909216919091179055565b6000541190565b60008054821061141557600080fd5b5090565b60115460a060020a900460ff1681565b61143585858585612818565b60008281526006602052604081205561144f8584846124d0565b61145b8584848461264c565b151561146657600080fd5b5050505050565b600c54600160a060020a03163314806114905750600d54600160a060020a031633145b151561149b57600080fd5b600e54604051600160a060020a0390911690303180156108fc02916000818181858888f193505050501580156114d5573d6000803e3d6000fd5b50565b600081815260016020526040812054600160a060020a03168015156114fc57600080fd5b92915050565b601254600160a060020a031681565b60106020526000908152604090205460ff1681565b6000600160a060020a038216151561153d57600080fd5b50600160a060020a031660009081526002602052604090205490565b600c54600160a060020a031633148061157c5750600d54600160a060020a031633145b151561158757600080fd5b600160a060020a038116151561159c57600080fd5b60128054600160a060020a038316600160a060020a0319909116811790915560408051918252517f450db8da6efbe9c22f2347f7c2021231df1fc58d3ae9a2fa75d39fa4461993059181900360200190a150565b601154600090819060a060020a900460ff161561160c57600080fd5b611618338760006121e5565b905061162681868686611c52565b91505b50949350505050565b60115460009081908190819060a060020a900460ff161561165257600080fd5b60008581526013602052604090206002015493503484111561167357600080fd5b61167e8560006129f1565b61168784612ad0565b9250611699348463ffffffff612af416565b600f54604051919350600160a060020a03169084156108fc029085906000818181858888f193505050501580156116d4573d6000803e3d6000fd5b506116e5348563ffffffff612af416565b604051909150339082156108fc029083906000818181858888f19350505050158015611715573d6000803e3d6000fd5b50600085815260016020526040808220549051600160a060020a039091169184156108fc02918591818181858888f1935050505015801561175a573d6000803e3d6000fd5b5060008581526001602052604090205461146690600160a060020a031633876124d0565b600c54600160a060020a03163314806117a15750600d54600160a060020a031633145b15156117ac57600080fd5b60115460a060020a900460ff16156117c357600080fd5b6011805474ff0000000000000000000000000000000000000000191660a060020a179055565b600160a060020a03811660009081526002602090815260409182902080548351818402810184019094528084526060939283018282801561184957602002820191906000526020600020905b815481526020019060010190808311611835575b50505050509050919050565b600160a060020a03919091166000908152600560209081526040808320938352929052205490565b60008181526001602052604081205481908190600160a060020a03168015156118a557600080fd5b60008581526001602081905260408220015493508311156118d05760001990920191600191506118d5565b600091505b600160a060020a03167fcd740db50000000000000000000000000000000000000000000000000000000017949193509150565b6011546000908190819060a060020a900460ff161561192657600080fd5b6119303085611855565b92506000831161193f57600080fd5b8291505b60008211156119855761195a308560018503610b85565b9050611979308533846020604051908101604052806000815250611429565b60001990910190611943565b6119903330866124d0565b50505050565b600e54600160a060020a031681565b600c54600160a060020a031681565b60098054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610c835780601f10610c5857610100808354040283529160200191610c83565b600160a060020a0382161515611a2a57600080fd5b336000818152600760209081526040808320600160a060020a03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b60115460a060020a900460ff1615611aaf57600080fd5b600082815260016020526040902054600160a060020a03163314611ad257600080fd5b6000828152600160208190526040909120015415611aef57600080fd5b60008111611afc57600080fd5b611b0682826129f1565b5050565b60009081526015602052604090205490565b611b278585856122e6565b611b328585856124d0565b61145b85858585858080601f0160208091040260200160405190810160405280939291908181526020018383808284375061264c945050505050565b60009081526013602052604090206001015490565b611b8f87878786612818565b611b9b87868686612b12565b50505050505050565b6060611baf826113ff565b1515611bba57600080fd5b600a8054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526114fc9390929091830182828015611c475780601f10611c1c57610100808354040283529160200191611c47565b820191906000526020600020905b815481529060010190602001808311611c2a57829003601f168201915b505050505083612c5d565b601154600090819060a060020a900460ff1615611c6e57600080fd5b60008681526013602052604090205460021480611c9957506000868152601360205260409020546003145b1515611ca457600080fd5b600086815260136020526040902054611cc490600163ffffffff612af416565b60008681526013602052604090205490915081148015611cf1575060008481526013602052604090205481145b8015611d0a575060008381526013602052604090205481145b1515611d1557600080fd5b6000858152600160209081526040808320548151928301909152918152611d4b91600160a060020a0316903090899089906121ce565b6000848152600160209081526040808320548151928301909152918152611d8191600160a060020a0316903090899088906121ce565b6000838152600160209081526040808320548151928301909152918152611db791600160a060020a0316903090899087906121ce565b600086815260016020526040902054600160a060020a0316301415611de157611de13033886124d0565b5093949350505050565b600d54600160a060020a031681565b600c54600160a060020a0316331480611e1d5750600d54600160a060020a031633145b1515611e2857600080fd5b600160a060020a0381161515611e3d57600080fd5b600e8054600160a060020a031916600160a060020a0392909216919091179055565b600190565b600c54600160a060020a0316331480611e875750600d54600160a060020a031633145b1515611e9257600080fd5b600160a060020a0381161515611ea757600080fd5b600d54604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600d8054600160a060020a031916600160a060020a0392909216919091179055565b601154600160a060020a031681565b600c54600160a060020a0316331480611f355750600d54600160a060020a031633145b1515611f4057600080fd5b600160a060020a0382161515611f5557600080fd5b600160a060020a03919091166000908152601060205260409020805460ff191660ff909216919091179055565b600c54600160a060020a0316331480611fa55750600d54600160a060020a031633145b1515611fb057600080fd5b600160a060020a0381161515611fc557600080fd5b601154604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360118054600160a060020a031916600160a060020a0392909216919091179055565b600c54600160a060020a03163314806120445750600d54600160a060020a031633145b8061206157503360009081526010602052604090205460ff166001145b151561206c57600080fd5b610f0c600a8383613045565b60115460a060020a900460ff161561208f57600080fd5b601154600160a060020a031633146120a657600080fd5b6000548211156120b557600080fd5b60009182526013602052604090912060010155565b60115460a060020a900460ff16156120e157600080fd5b600081815260016020526040902054600160a060020a0316331461210457600080fd5b6114d58160006129f1565b6000600160a060020a038316151561212657600080fd5b600160a060020a038216151561213b57600080fd5b50600160a060020a03918216600090815260076020908152604080832093909416825291909152205460ff1690565b6000818152600160208181526040808420601390925283209181015491839182918291908286111561219e57600019909501945b8154600192830154825493830154600290930154600160a060020a039092169a9099509297509095509350915050565b6121d98585846122e6565b61146685858585612b12565b60006121ef6130bf565b600160a060020a038516151561220457600080fd5b600160005260156020527f27739e4bb5e6f8b5e4b57a047dca8767cc9b982a011081e086cbb0dfa9de818d5461c3501161223d57600080fd5b5050600080546040805160608101825285815260208082018681528284018681528587526013835284872084518155915160018084019190915590516002909201919091558786526015909152919093208054909101905590610100820615156122d4576014805460018101825560009182527fce6d7b5282bd9a3661ae061feed1dbda4e52ab073b1f9285be6e155d9c38d4ec01555b6122de8583612e2c565b509392505050565b600080806060600160a060020a038716151561230157600080fd5b600160a060020a038616151561231657600080fd5b600085815260016020526040902054600160a060020a0388811691161461233c57600080fd5b600085815260016020819052604090912001541561235957600080fd5b600160a060020a0380881660008181526004602090815260408083208a84529091529020549091169450331461245d575060408051306024820152604480820187905282518083039091018152606490910190915260208181018051600160e060020a03167fed81cdda00000000000000000000000000000000000000000000000000000000178152825183918a5afa915081156123f657805192505b600182151514156124185760e060020a830463cd740db5141561241857600080fd5b600160a060020a038716600090815260076020908152604080832033845290915290205460ff16806124525750600160a060020a03841633145b151561245d57600080fd5b600160a060020a03841615611b9b57600160a060020a03871660008181526004602090815260408083208984529091528082208054600160a060020a0319169055518792907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925908390a450505050505050565b600160a060020a038316600090815260026020526040812054819081906124fe90600163ffffffff612af416565b600160a060020a03871660009081526002602052604090208054919450908490811061252657fe5b9060005260206000200154915083821415156125935750600083815260036020908152604080832054600160a060020a0389168452600290925290912080548391908390811061257257fe5b60009182526020808320909101929092558381526003909152604090208190555b600160a060020a03861660009081526002602052604090208054906125bc9060001983016130e1565b5060008481526001602081815260408084208054600160a060020a031916600160a060020a038b8116918217909255808652600280855283872080548c895260038752858920819055918652958101865594865292852090930188905551879391928a16917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050505050565b60008061265885612ef2565b15156126675760019150611629565b6040517f150b7a020000000000000000000000000000000000000000000000000000000081523360048201818152600160a060020a03898116602485015260448401889052608060648501908152875160848601528751918a169463150b7a0294938c938b938b93909160a490910190602085019080838360005b838110156126fa5781810151838201526020016126e2565b50505050905090810190601f1680156127275780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561274957600080fd5b505af115801561275d573d6000803e3d6000fd5b505050506040513d602081101561277357600080fd5b50517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167f150b7a0200000000000000000000000000000000000000000000000000000000149695505050505050565b600081815260016020526040812054600160a060020a031690808215156127e657600080fd5b600084815260016020819052604082200154925082111561280d5750600019016001612811565b5060005b9193909250565b60008080600160a060020a038716151561283157600080fd5b600160a060020a038516151561284657600080fd5b600084815260016020526040902054600160a060020a0388811691161461286c57600080fd5b60008481526001602081905260409091200154925082151561288d57600080fd5b6000198301861461289d57600080fd5b6128a68461101e565b600160a060020a0380821660008181526004602090815260408083208a8452909152902054929450911691503314806129025750600160a060020a038216600090815260076020908152604080832033845290915290205460ff165b806129155750600160a060020a03811633145b151561292057600080fd5b600160a060020a0381161561298b57600160a060020a03821660008181526004602090815260408083208884529091528082208054600160a060020a0319169055518692907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925908390a45b6000848152600160208190526040822001556129a8878786612efa565b6040805185815290518791600160a060020a038a16917f3c619d5b30fb8431c0c0094f4485f1859d63f222f36cc2104cc13e56c2b993d39181900360200190a350505050505050565b6000828152601360205260408120600201829055811115612a6e57610100820660020a6014612a288461010063ffffffff612fdb16565b81548110612a3257fe5b600091825260209091200154176014612a538461010063ffffffff612fdb16565b81548110612a5d57fe5b600091825260209091200155611b06565b610100820660020a196014612a8b8461010063ffffffff612fdb16565b81548110612a9557fe5b600091825260209091200154166014612ab68461010063ffffffff612fdb16565b81548110612ac057fe5b6000918252602090912001555050565b60006114fc6064612ae884600363ffffffff612ffe16565b9063ffffffff612fdb16565b60008083831115612b0457600080fd5b5050808203805b5092915050565b6000612b2583600163ffffffff61303316565b6000838152600160208181526040808420830194909455600160a060020a03881683526005815283832087845281528383208054928301815583528083208201869055858352600690529190208190559050612b828585846124d0565b6000600160a060020a031684600160a060020a0316636352211e856040518263ffffffff1660e060020a02815260040180828152602001915050602060405180830381600087803b158015612bd657600080fd5b505af1158015612bea573d6000803e3d6000fd5b505050506040513d6020811015612c0057600080fd5b5051600160a060020a03161415612c1657600080fd5b6040805183815290518491600160a060020a038716917fda19c10bf4b88776cd85f9091592a44edff2d94035ec670ebd9e8356f56f887d9181900360200190a35050505050565b60408051606480825260a0820190925260609190829060009081908390819083908760208201610c8080388339019050509550600094505b8815612cf8578551600a808b049a6001880197919006955060f860020a6030870102918891908110612cc357fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350612c95565b899250848351016040519080825280601f01601f191660200182016040528015612d2c578160200160208202803883390190505b509150600090505b8251811015612da4578281815181101515612d4b57fe5b90602001015160f860020a900460f860020a028282815181101515612d6c57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600101612d34565b5060005b84811015612e1f5785816001870303815181101515612dc357fe5b90602001015160f860020a900460f860020a028284518301815181101515612de757fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600101612da8565b5098975050505050505050565b600160a060020a0382161515612e4157600080fd5b600081815260016020526040902054600160a060020a031615612e6357600080fd5b60008181526001602081815260408084208054600160a060020a031916600160a060020a0388169081179091558085526002808452828620805488885260038652848820819055918552818601815586529285209092018590558354909201835590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000903b1190565b600160a060020a03831660009081526005602090815260408083208584529091528120805460001981019291829184908110612f3257fe5b906000526020600020015491508184141515612fa75750600083815260066020908152604080832054600160a060020a038916845260058352818420888552909252909120805483919083908110612f8657fe5b60009182526020808320909101929092558381526006909152604090208190555b600160a060020a03861660009081526005602090815260408083208884529091529020805490611b9b9060001983016130e1565b600080808311612fea57600080fd5b8284811515612ff557fe5b04949350505050565b6000808315156130115760009150612b0b565b5082820282848281151561302157fe5b041461302c57600080fd5b9392505050565b60008282018381101561302c57600080fd5b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106130865782800160ff198235161785556130b3565b828001600101855582156130b3579182015b828111156130b3578235825591602001919060010190613098565b50611415929150613101565b6060604051908101604052806000815260200160008152602001600081525090565b815481835581811115610f0c57600083815260209020610f0c9181019083015b610c8b91905b8082111561141557600081556001016131075600a165627a7a723058203bac0f675bcdf51c3197b6eda1a5774c29cb9df158ccff4398ebc9bf256d99900029"}