{"Runs": "500", "SwarmSource": "bzzr://fd4946d41e03e55dae238761483afe427be0f05431fb8b1e3f431e2359db0046", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_talkId\",\"type\":\"uint256\"}],\"name\":\"checkinSpeaker\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fromBid\",\"type\":\"uint256\"},{\"name\":\"_toBid\",\"type\":\"uint256\"}],\"name\":\"distributeOverbids\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_talkId\",\"type\":\"uint256\"}],\"name\":\"selfDeclineTalk\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAuctionStartBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_talkId\",\"type\":\"uint256\"},{\"name\":\"_descSpeaker\",\"type\":\"string\"},{\"name\":\"_deskTalk\",\"type\":\"string\"},{\"name\":\"_proof\",\"type\":\"string\"}],\"name\":\"updateTalkDescription\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMinimalPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTicketsFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEventStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_messageID\",\"type\":\"uint256\"}],\"name\":\"getCommunityBuilderMessage\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"checkinMember\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWorkshopsGrid\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_talkId\",\"type\":\"uint256\"},{\"name\":\"_message\",\"type\":\"string\"},{\"name\":\"_link1\",\"type\":\"string\"},{\"name\":\"_link2\",\"type\":\"string\"}],\"name\":\"sendCommunityBuilderMessage\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCommunityBuildersBoardSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getTalkById\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSpeakersShares\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"distributeRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEventEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEndPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDistributionTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAuctionEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAvailableSpeaksersSlots\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getTicket\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_speakerName\",\"type\":\"string\"},{\"name\":\"_descSpeaker\",\"type\":\"string\"},{\"name\":\"_deskTalk\",\"type\":\"string\"},{\"name\":\"_duration\",\"type\":\"uint256\"},{\"name\":\"_proof\",\"type\":\"string\"}],\"name\":\"applyForTalk\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSpeakersSlots\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_grid\",\"type\":\"string\"}],\"name\":\"setTalksGrid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTicketsAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTalksGrid\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAuctionStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAmountReturnedOverbids\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPlace\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMinimalSpeakerDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOrganizersShares\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_grid\",\"type\":\"string\"}],\"name\":\"setWorkshopsGrid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_talkId\",\"type\":\"uint256\"}],\"name\":\"acceptTalk\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTicket\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_talkId\",\"type\":\"uint256\"}],\"name\":\"declineTalk\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_member\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TicketBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_member\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TalkApplication\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.25+commit.59dbf8f1", "ConstructorArguments": "", "SourceCode": "pragma solidity 0.4.25;\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() internal {\r\n    _owner = msg.sender;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  /**\r\n   * @return the address of the owner.\r\n   */\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @return true if `msg.sender` is the owner of the contract.\r\n   */\r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/introspection/IERC165.sol\r\n\r\n/**\r\n * @title IERC165\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n */\r\ninterface IERC165 {\r\n\r\n  /**\r\n   * @notice Query if a contract implements an interface\r\n   * @param interfaceId The interface identifier, as specified in ERC-165\r\n   * @dev Interface identification is specified in ERC-165. This function\r\n   * uses less than 30,000 gas.\r\n   */\r\n  function supportsInterface(bytes4 interfaceId)\r\n    external\r\n    view\r\n    returns (bool);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/IERC721.sol\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic interface\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract IERC721 is IERC165 {\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 indexed tokenId\r\n  );\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed approved,\r\n    uint256 indexed tokenId\r\n  );\r\n  event ApprovalForAll(\r\n    address indexed owner,\r\n    address indexed operator,\r\n    bool approved\r\n  );\r\n\r\n  function balanceOf(address owner) public view returns (uint256 balance);\r\n  function ownerOf(uint256 tokenId) public view returns (address owner);\r\n\r\n  function approve(address to, uint256 tokenId) public;\r\n  function getApproved(uint256 tokenId)\r\n    public view returns (address operator);\r\n\r\n  function setApprovalForAll(address operator, bool _approved) public;\r\n  function isApprovedForAll(address owner, address operator)\r\n    public view returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 tokenId) public;\r\n  function safeTransferFrom(address from, address to, uint256 tokenId)\r\n    public;\r\n\r\n  function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId,\r\n    bytes data\r\n  )\r\n    public;\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/IERC721Receiver.sol\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ncontract IERC721Receiver {\r\n  /**\r\n   * @notice Handle the receipt of an NFT\r\n   * @dev The ERC721 smart contract calls this function on the recipient\r\n   * after a `safeTransfer`. This function MUST return the function selector,\r\n   * otherwise the caller will revert the transaction. The selector to be\r\n   * returned can be obtained as `this.onERC721Received.selector`. This\r\n   * function MAY throw to revert and reject the transfer.\r\n   * Note: the ERC721 contract address is always the message sender.\r\n   * @param operator The address which called `safeTransferFrom` function\r\n   * @param from The address which previously owned the token\r\n   * @param tokenId The NFT identifier which is being transferred\r\n   * @param data Additional data with no specified format\r\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n   */\r\n  function onERC721Received(\r\n    address operator,\r\n    address from,\r\n    uint256 tokenId,\r\n    bytes data\r\n  )\r\n    public\r\n    returns(bytes4);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/utils/Address.sol\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary Address {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   * as the code is not actually created until after the constructor finishes.\r\n   * @param account address of the account to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address account) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(account) }\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/introspection/ERC165.sol\r\n\r\n/**\r\n * @title ERC165\r\n * @author Matt Condon (@shrugs)\r\n * @dev Implements ERC165 using a lookup table.\r\n */\r\ncontract ERC165 is IERC165 {\r\n\r\n  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\r\n  /**\r\n   * 0x01ffc9a7 ===\r\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\r\n   */\r\n\r\n  /**\r\n   * @dev a mapping of interface id to whether or not it's supported\r\n   */\r\n  mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n  /**\r\n   * @dev A contract implementing SupportsInterfaceWithLookup\r\n   * implement ERC165 itself\r\n   */\r\n  constructor()\r\n    internal\r\n  {\r\n    _registerInterface(_InterfaceId_ERC165);\r\n  }\r\n\r\n  /**\r\n   * @dev implement supportsInterface(bytes4) using a lookup table\r\n   */\r\n  function supportsInterface(bytes4 interfaceId)\r\n    external\r\n    view\r\n    returns (bool)\r\n  {\r\n    return _supportedInterfaces[interfaceId];\r\n  }\r\n\r\n  /**\r\n   * @dev internal method for registering an interface\r\n   */\r\n  function _registerInterface(bytes4 interfaceId)\r\n    internal\r\n  {\r\n    require(interfaceId != 0xffffffff);\r\n    _supportedInterfaces[interfaceId] = true;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/ERC721.sol\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic implementation\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721 is ERC165, IERC721 {\r\n\r\n  using SafeMath for uint256;\r\n  using Address for address;\r\n\r\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n  // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\r\n  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\r\n\r\n  // Mapping from token ID to owner\r\n  mapping (uint256 => address) private _tokenOwner;\r\n\r\n  // Mapping from token ID to approved address\r\n  mapping (uint256 => address) private _tokenApprovals;\r\n\r\n  // Mapping from owner to number of owned token\r\n  mapping (address => uint256) private _ownedTokensCount;\r\n\r\n  // Mapping from owner to operator approvals\r\n  mapping (address => mapping (address => bool)) private _operatorApprovals;\r\n\r\n  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\r\n  /*\r\n   * 0x80ac58cd ===\r\n   *   bytes4(keccak256('balanceOf(address)')) ^\r\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\r\n   *   bytes4(keccak256('approve(address,uint256)')) ^\r\n   *   bytes4(keccak256('getApproved(uint256)')) ^\r\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\r\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\r\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\r\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\r\n   */\r\n\r\n  constructor()\r\n    public\r\n  {\r\n    // register the supported interfaces to conform to ERC721 via ERC165\r\n    _registerInterface(_InterfaceId_ERC721);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the balance of the specified address\r\n   * @param owner address to query the balance of\r\n   * @return uint256 representing the amount owned by the passed address\r\n   */\r\n  function balanceOf(address owner) public view returns (uint256) {\r\n    require(owner != address(0));\r\n    return _ownedTokensCount[owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the owner of the specified token ID\r\n   * @param tokenId uint256 ID of the token to query the owner of\r\n   * @return owner address currently marked as the owner of the given token ID\r\n   */\r\n  function ownerOf(uint256 tokenId) public view returns (address) {\r\n    address owner = _tokenOwner[tokenId];\r\n    require(owner != address(0));\r\n    return owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Approves another address to transfer the given token ID\r\n   * The zero address indicates there is no approved address.\r\n   * There can only be one approved address per token at a given time.\r\n   * Can only be called by the token owner or an approved operator.\r\n   * @param to address to be approved for the given token ID\r\n   * @param tokenId uint256 ID of the token to be approved\r\n   */\r\n  function approve(address to, uint256 tokenId) public {\r\n    address owner = ownerOf(tokenId);\r\n    require(to != owner);\r\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n    _tokenApprovals[tokenId] = to;\r\n    emit Approval(owner, to, tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the approved address for a token ID, or zero if no address set\r\n   * Reverts if the token ID does not exist.\r\n   * @param tokenId uint256 ID of the token to query the approval of\r\n   * @return address currently approved for the given token ID\r\n   */\r\n  function getApproved(uint256 tokenId) public view returns (address) {\r\n    require(_exists(tokenId));\r\n    return _tokenApprovals[tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Sets or unsets the approval of a given operator\r\n   * An operator is allowed to transfer all tokens of the sender on their behalf\r\n   * @param to operator address to set the approval\r\n   * @param approved representing the status of the approval to be set\r\n   */\r\n  function setApprovalForAll(address to, bool approved) public {\r\n    require(to != msg.sender);\r\n    _operatorApprovals[msg.sender][to] = approved;\r\n    emit ApprovalForAll(msg.sender, to, approved);\r\n  }\r\n\r\n  /**\r\n   * @dev Tells whether an operator is approved by a given owner\r\n   * @param owner owner address which you want to query the approval of\r\n   * @param operator operator address which you want to query the approval of\r\n   * @return bool whether the given operator is approved by the given owner\r\n   */\r\n  function isApprovedForAll(\r\n    address owner,\r\n    address operator\r\n  )\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return _operatorApprovals[owner][operator];\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers the ownership of a given token ID to another address\r\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param from current owner of the token\r\n   * @param to address to receive the ownership of the given token ID\r\n   * @param tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  )\r\n    public\r\n  {\r\n    require(_isApprovedOrOwner(msg.sender, tokenId));\r\n    require(to != address(0));\r\n\r\n    _clearApproval(from, tokenId);\r\n    _removeTokenFrom(from, tokenId);\r\n    _addTokenTo(to, tokenId);\r\n\r\n    emit Transfer(from, to, tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * If the target address is a contract, it must implement `onERC721Received`,\r\n   * which is called upon a safe transfer, and return the magic value\r\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n   * the transfer is reverted.\r\n   *\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param from current owner of the token\r\n   * @param to address to receive the ownership of the given token ID\r\n   * @param tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  )\r\n    public\r\n  {\r\n    // solium-disable-next-line arg-overflow\r\n    safeTransferFrom(from, to, tokenId, \"\");\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * If the target address is a contract, it must implement `onERC721Received`,\r\n   * which is called upon a safe transfer, and return the magic value\r\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n   * the transfer is reverted.\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param from current owner of the token\r\n   * @param to address to receive the ownership of the given token ID\r\n   * @param tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes data to send along with a safe transfer check\r\n   */\r\n  function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n  {\r\n    transferFrom(from, to, tokenId);\r\n    // solium-disable-next-line arg-overflow\r\n    require(_checkOnERC721Received(from, to, tokenId, _data));\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the specified token exists\r\n   * @param tokenId uint256 ID of the token to query the existence of\r\n   * @return whether the token exists\r\n   */\r\n  function _exists(uint256 tokenId) internal view returns (bool) {\r\n    address owner = _tokenOwner[tokenId];\r\n    return owner != address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the given spender can transfer a given token ID\r\n   * @param spender address of the spender to query\r\n   * @param tokenId uint256 ID of the token to be transferred\r\n   * @return bool whether the msg.sender is approved for the given token ID,\r\n   *  is an operator of the owner, or is the owner of the token\r\n   */\r\n  function _isApprovedOrOwner(\r\n    address spender,\r\n    uint256 tokenId\r\n  )\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    address owner = ownerOf(tokenId);\r\n    // Disable solium check because of\r\n    // https://github.com/duaraghav8/Solium/issues/175\r\n    // solium-disable-next-line operator-whitespace\r\n    return (\r\n      spender == owner ||\r\n      getApproved(tokenId) == spender ||\r\n      isApprovedForAll(owner, spender)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * Reverts if the given token ID already exists\r\n   * @param to The address that will own the minted token\r\n   * @param tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address to, uint256 tokenId) internal {\r\n    require(to != address(0));\r\n    _addTokenTo(to, tokenId);\r\n    emit Transfer(address(0), to, tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * Reverts if the token does not exist\r\n   * @param tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address owner, uint256 tokenId) internal {\r\n    _clearApproval(owner, tokenId);\r\n    _removeTokenFrom(owner, tokenId);\r\n    emit Transfer(owner, address(0), tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * Note that this function is left internal to make ERC721Enumerable possible, but is not\r\n   * intended to be called by custom derived contracts: in particular, it emits no Transfer event.\r\n   * @param to address representing the new owner of the given token ID\r\n   * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function _addTokenTo(address to, uint256 tokenId) internal {\r\n    require(_tokenOwner[tokenId] == address(0));\r\n    _tokenOwner[tokenId] = to;\r\n    _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * Note that this function is left internal to make ERC721Enumerable possible, but is not\r\n   * intended to be called by custom derived contracts: in particular, it emits no Transfer event,\r\n   * and doesn't clear approvals.\r\n   * @param from address representing the previous owner of the given token ID\r\n   * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function _removeTokenFrom(address from, uint256 tokenId) internal {\r\n    require(ownerOf(tokenId) == from);\r\n    _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\r\n    _tokenOwner[tokenId] = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to invoke `onERC721Received` on a target address\r\n   * The call is not executed if the target address is not a contract\r\n   * @param from address representing the previous owner of the given token ID\r\n   * @param to target address that will receive the tokens\r\n   * @param tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes optional data to send along with the call\r\n   * @return whether the call correctly returned the expected magic value\r\n   */\r\n  function _checkOnERC721Received(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId,\r\n    bytes _data\r\n  )\r\n    internal\r\n    returns (bool)\r\n  {\r\n    if (!to.isContract()) {\r\n      return true;\r\n    }\r\n    bytes4 retval = IERC721Receiver(to).onERC721Received(\r\n      msg.sender, from, tokenId, _data);\r\n    return (retval == _ERC721_RECEIVED);\r\n  }\r\n\r\n  /**\r\n   * @dev Private function to clear current approval of a given token ID\r\n   * Reverts if the given address is not indeed the owner of the token\r\n   * @param owner owner of the token\r\n   * @param tokenId uint256 ID of the token to be transferred\r\n   */\r\n  function _clearApproval(address owner, uint256 tokenId) private {\r\n    require(ownerOf(tokenId) == owner);\r\n    if (_tokenApprovals[tokenId] != address(0)) {\r\n      _tokenApprovals[tokenId] = address(0);\r\n    }\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/IERC721Enumerable.sol\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract IERC721Enumerable is IERC721 {\r\n  function totalSupply() public view returns (uint256);\r\n  function tokenOfOwnerByIndex(\r\n    address owner,\r\n    uint256 index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256 tokenId);\r\n\r\n  function tokenByIndex(uint256 index) public view returns (uint256);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/ERC721Enumerable.sol\r\n\r\ncontract ERC721Enumerable is ERC165, ERC721, IERC721Enumerable {\r\n  // Mapping from owner to list of owned token IDs\r\n  mapping(address => uint256[]) private _ownedTokens;\r\n\r\n  // Mapping from token ID to index of the owner tokens list\r\n  mapping(uint256 => uint256) private _ownedTokensIndex;\r\n\r\n  // Array with all token ids, used for enumeration\r\n  uint256[] private _allTokens;\r\n\r\n  // Mapping from token id to position in the allTokens array\r\n  mapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n  bytes4 private constant _InterfaceId_ERC721Enumerable = 0x780e9d63;\r\n  /**\r\n   * 0x780e9d63 ===\r\n   *   bytes4(keccak256('totalSupply()')) ^\r\n   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\r\n   *   bytes4(keccak256('tokenByIndex(uint256)'))\r\n   */\r\n\r\n  /**\r\n   * @dev Constructor function\r\n   */\r\n  constructor() public {\r\n    // register the supported interface to conform to ERC721 via ERC165\r\n    _registerInterface(_InterfaceId_ERC721Enumerable);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\r\n   * @param owner address owning the tokens list to be accessed\r\n   * @param index uint256 representing the index to be accessed of the requested tokens list\r\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\r\n   */\r\n  function tokenOfOwnerByIndex(\r\n    address owner,\r\n    uint256 index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    require(index < balanceOf(owner));\r\n    return _ownedTokens[owner][index];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the total amount of tokens stored by the contract\r\n   * @return uint256 representing the total amount of tokens\r\n   */\r\n  function totalSupply() public view returns (uint256) {\r\n    return _allTokens.length;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of all the tokens in this contract\r\n   * Reverts if the index is greater or equal to the total number of tokens\r\n   * @param index uint256 representing the index to be accessed of the tokens list\r\n   * @return uint256 token ID at the given index of the tokens list\r\n   */\r\n  function tokenByIndex(uint256 index) public view returns (uint256) {\r\n    require(index < totalSupply());\r\n    return _allTokens[index];\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * This function is internal due to language limitations, see the note in ERC721.sol.\r\n   * It is not intended to be called by custom derived contracts: in particular, it emits no Transfer event.\r\n   * @param to address representing the new owner of the given token ID\r\n   * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function _addTokenTo(address to, uint256 tokenId) internal {\r\n    super._addTokenTo(to, tokenId);\r\n    uint256 length = _ownedTokens[to].length;\r\n    _ownedTokens[to].push(tokenId);\r\n    _ownedTokensIndex[tokenId] = length;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * This function is internal due to language limitations, see the note in ERC721.sol.\r\n   * It is not intended to be called by custom derived contracts: in particular, it emits no Transfer event,\r\n   * and doesn't clear approvals.\r\n   * @param from address representing the previous owner of the given token ID\r\n   * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function _removeTokenFrom(address from, uint256 tokenId) internal {\r\n    super._removeTokenFrom(from, tokenId);\r\n\r\n    // To prevent a gap in the array, we store the last token in the index of the token to delete, and\r\n    // then delete the last slot.\r\n    uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n    uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\r\n    uint256 lastToken = _ownedTokens[from][lastTokenIndex];\r\n\r\n    _ownedTokens[from][tokenIndex] = lastToken;\r\n    // This also deletes the contents at the last position of the array\r\n    _ownedTokens[from].length--;\r\n\r\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\r\n    // be zero. Then we can make sure that we will remove tokenId from the ownedTokens list since we are first swapping\r\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\r\n\r\n    _ownedTokensIndex[tokenId] = 0;\r\n    _ownedTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * Reverts if the given token ID already exists\r\n   * @param to address the beneficiary that will own the minted token\r\n   * @param tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address to, uint256 tokenId) internal {\r\n    super._mint(to, tokenId);\r\n\r\n    _allTokensIndex[tokenId] = _allTokens.length;\r\n    _allTokens.push(tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * Reverts if the token does not exist\r\n   * @param owner owner of the token to burn\r\n   * @param tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address owner, uint256 tokenId) internal {\r\n    super._burn(owner, tokenId);\r\n\r\n    // Reorg all tokens array\r\n    uint256 tokenIndex = _allTokensIndex[tokenId];\r\n    uint256 lastTokenIndex = _allTokens.length.sub(1);\r\n    uint256 lastToken = _allTokens[lastTokenIndex];\r\n\r\n    _allTokens[tokenIndex] = lastToken;\r\n    _allTokens[lastTokenIndex] = 0;\r\n\r\n    _allTokens.length--;\r\n    _allTokensIndex[tokenId] = 0;\r\n    _allTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/IERC721Metadata.sol\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract IERC721Metadata is IERC721 {\r\n  function name() external view returns (string);\r\n  function symbol() external view returns (string);\r\n  function tokenURI(uint256 tokenId) external view returns (string);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/ERC721Metadata.sol\r\n\r\ncontract ERC721Metadata is ERC165, ERC721, IERC721Metadata {\r\n  // Token name\r\n  string private _name;\r\n\r\n  // Token symbol\r\n  string private _symbol;\r\n\r\n  // Optional mapping for token URIs\r\n  mapping(uint256 => string) private _tokenURIs;\r\n\r\n  bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\r\n  /**\r\n   * 0x5b5e139f ===\r\n   *   bytes4(keccak256('name()')) ^\r\n   *   bytes4(keccak256('symbol()')) ^\r\n   *   bytes4(keccak256('tokenURI(uint256)'))\r\n   */\r\n\r\n  /**\r\n   * @dev Constructor function\r\n   */\r\n  constructor(string name, string symbol) public {\r\n    _name = name;\r\n    _symbol = symbol;\r\n\r\n    // register the supported interfaces to conform to ERC721 via ERC165\r\n    _registerInterface(InterfaceId_ERC721Metadata);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token name\r\n   * @return string representing the token name\r\n   */\r\n  function name() external view returns (string) {\r\n    return _name;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token symbol\r\n   * @return string representing the token symbol\r\n   */\r\n  function symbol() external view returns (string) {\r\n    return _symbol;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns an URI for a given token ID\r\n   * Throws if the token ID does not exist. May return an empty string.\r\n   * @param tokenId uint256 ID of the token to query\r\n   */\r\n  function tokenURI(uint256 tokenId) external view returns (string) {\r\n    require(_exists(tokenId));\r\n    return _tokenURIs[tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to set the token URI for a given token\r\n   * Reverts if the token ID does not exist\r\n   * @param tokenId uint256 ID of the token to set its URI\r\n   * @param uri string URI to assign\r\n   */\r\n  function _setTokenURI(uint256 tokenId, string uri) internal {\r\n    require(_exists(tokenId));\r\n    _tokenURIs[tokenId] = uri;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * Reverts if the token does not exist\r\n   * @param owner owner of the token to burn\r\n   * @param tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address owner, uint256 tokenId) internal {\r\n    super._burn(owner, tokenId);\r\n\r\n    // Clear metadata (if any)\r\n    if (bytes(_tokenURIs[tokenId]).length != 0) {\r\n      delete _tokenURIs[tokenId];\r\n    }\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/ERC721Full.sol\r\n\r\n/**\r\n * @title Full ERC721 Token\r\n * This implementation includes all the required and some optional functionality of the ERC721 standard\r\n * Moreover, it includes approve all functionality using operator terminology\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Full is ERC721, ERC721Enumerable, ERC721Metadata {\r\n  constructor(string name, string symbol) ERC721Metadata(name, symbol)\r\n    public\r\n  {\r\n  }\r\n}\r\n\r\n// File: contracts/Cybercon.sol\r\n\r\ncontract Cybercon is Ownable, ERC721Full {\r\n    \r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    \r\n    enum ApplicationStatus {Applied, Accepted, Declined}\r\n    \r\n    struct Talk {\r\n        string  speakerName;\r\n        string  descSpeaker;\r\n        string  deskTalk;\r\n        uint256 duration;\r\n        uint256 deposit;\r\n        address speakerAddress;\r\n        uint256 appliedAt;\r\n        bool    checkedIn;\r\n        ApplicationStatus status;\r\n        string  proof;\r\n    }\r\n    \r\n    struct Ticket {\r\n        uint256 value;\r\n        address bidderAddress;\r\n        bool    checkedIn;\r\n        bool    overbidReturned;\r\n    }\r\n    \r\n    struct CommunityBuilderMessage {\r\n        string  message;\r\n        string  link1;\r\n        string  link2;\r\n        uint256 donation;\r\n    }\r\n    \r\n    uint256 private auctionStartBlock;\r\n    uint256 private auctionStartTime;\r\n    uint256 constant private TALKS_APPLICATION_END = 1544562000;\r\n    uint256 constant private CHECKIN_START = 1544767200;\r\n    uint256 constant private CHECKIN_END = 1544788800;\r\n    uint256 constant private DISTRIBUTION_START = 1544792400;\r\n    uint256 private auctionEnd = CHECKIN_START;\r\n    // ------------\r\n    uint256 constant private INITIAL_PRICE = 3000 finney;\r\n    uint256 constant private MINIMAL_PRICE = 500 finney;\r\n    uint256 constant private BID_BLOCK_DECREASE = 30 szabo;\r\n    uint256 private endPrice = MINIMAL_PRICE;\r\n    // ------------\r\n    uint256 private ticketsAmount = 146;\r\n    uint256 constant private SPEAKERS_SLOTS = 24;\r\n    uint256 private acceptedSpeakersSlots = 0;\r\n    uint256 constant private SPEAKERS_START_SHARES = 80;\r\n    uint256 constant private SPEAKERS_END_SHARES = 20;\r\n    // ------------\r\n    uint256 private ticketsFunds = 0;\r\n    uint256 constant private MINIMAL_SPEAKER_DEPOSIT = 1000 finney;\r\n    // ------------\r\n    string constant private CYBERCON_PLACE = \"Korpus 8, Minsk, Belarus\";\r\n    \r\n    mapping(address => bool) private membersBidded;\r\n    uint256 private amountReturnedBids = 0;\r\n    bool private overbidsDistributed = false;\r\n    \r\n    Talk[] private speakersTalks;\r\n    Ticket[] private membersTickets;\r\n    CommunityBuilderMessage[] private communityBuildersBoard;\r\n    \r\n    string private talksGrid = \"\";\r\n    string private workshopsGrid = \"\";\r\n    \r\n    event TicketBid(\r\n        uint256 _id,\r\n        address _member,\r\n        uint256 _value\r\n    );\r\n    \r\n    event TalkApplication(\r\n        string  _name,\r\n        address _member,\r\n        uint256 _value\r\n    );\r\n    \r\n    constructor() ERC721Full(\"cyberc0n\", \"CYBERC0N\")\r\n        public\r\n    {\r\n        auctionStartBlock = block.number;\r\n        auctionStartTime = block.timestamp;\r\n    }\r\n    \r\n    function() external {}\r\n    \r\n    modifier beforeApplicationStop() {\r\n        require(block.timestamp < TALKS_APPLICATION_END);\r\n        _;\r\n    }\r\n    \r\n    modifier beforeEventStart() {\r\n        require(block.timestamp < CHECKIN_START);\r\n        _;\r\n    }\r\n    \r\n    modifier duringEvent() {\r\n        require(block.timestamp >= CHECKIN_START && block.timestamp <= CHECKIN_END);\r\n        _;\r\n    }\r\n    \r\n    modifier afterDistributionStart() {\r\n        require(block.timestamp > DISTRIBUTION_START);\r\n        _;\r\n    }\r\n\r\n    function buyTicket()\r\n        external\r\n        beforeEventStart\r\n        payable\r\n    {\r\n        require(msg.value >= getCurrentPrice());\r\n        require(membersBidded[msg.sender] == false);\r\n        require(ticketsAmount > 0);\r\n        \r\n        uint256 bidId = totalSupply();\r\n        membersTickets.push(Ticket(msg.value, msg.sender, false, false));\r\n        super._mint(msg.sender, bidId);\r\n        membersBidded[msg.sender] = true;\r\n        ticketsFunds = ticketsFunds.add(msg.value);\r\n        ticketsAmount = ticketsAmount.sub(1);\r\n        \r\n        if (ticketsAmount == 0) {\r\n            auctionEnd = block.timestamp;\r\n            endPrice = msg.value;\r\n        }\r\n        \r\n        emit TicketBid(bidId, msg.sender, msg.value);\r\n    }\r\n    \r\n    function applyForTalk(\r\n        string  _speakerName,\r\n        string  _descSpeaker,\r\n        string  _deskTalk,\r\n        uint256 _duration,\r\n        string  _proof\r\n    )\r\n        external\r\n        beforeApplicationStop\r\n        payable\r\n    {\r\n        require(_duration >= 900 && _duration <= 3600);\r\n        require(msg.value >= MINIMAL_SPEAKER_DEPOSIT);\r\n        require(speakersTalks.length < 36);\r\n        \r\n        Talk memory t = (Talk(\r\n        {\r\n            speakerName: _speakerName,\r\n            descSpeaker: _descSpeaker,\r\n            deskTalk:    _deskTalk,\r\n            duration:    _duration,\r\n            deposit:     msg.value,\r\n            speakerAddress: msg.sender,\r\n            appliedAt:   block.timestamp,\r\n            checkedIn:   false,\r\n            status:      ApplicationStatus.Applied,\r\n            proof:       _proof\r\n        }));\r\n        speakersTalks.push(t);\r\n        \r\n        emit TalkApplication(_speakerName, msg.sender, msg.value);\r\n    }\r\n\r\n    function sendCommunityBuilderMessage(\r\n        uint256 _talkId,\r\n        string _message,\r\n        string _link1,\r\n        string _link2\r\n    )\r\n        external\r\n        beforeEventStart\r\n        payable\r\n    {\r\n        require(speakersTalks[_talkId].speakerAddress == msg.sender);\r\n        require(speakersTalks[_talkId].status == ApplicationStatus.Accepted);\r\n        require(msg.value > 0);\r\n        \r\n        CommunityBuilderMessage memory m = (CommunityBuilderMessage(\r\n        {\r\n            message: _message,\r\n            link1:   _link1,\r\n            link2:   _link2,\r\n            donation: msg.value\r\n        }));\r\n        communityBuildersBoard.push(m);\r\n    }\r\n    \r\n    function updateTalkDescription(\r\n        uint256 _talkId,\r\n        string  _descSpeaker,\r\n        string  _deskTalk,\r\n        string  _proof\r\n    )\r\n        external\r\n        beforeApplicationStop\r\n    {\r\n        require(msg.sender == speakersTalks[_talkId].speakerAddress);\r\n        speakersTalks[_talkId].descSpeaker = _descSpeaker;\r\n        speakersTalks[_talkId].deskTalk = _deskTalk;\r\n        speakersTalks[_talkId].proof = _proof;\r\n    }\r\n    \r\n    function acceptTalk(uint256 _talkId)\r\n        external\r\n        onlyOwner\r\n        beforeEventStart\r\n    {\r\n        require(acceptedSpeakersSlots < SPEAKERS_SLOTS); \r\n        require(speakersTalks[_talkId].status == ApplicationStatus.Applied);\r\n        acceptedSpeakersSlots = acceptedSpeakersSlots.add(1);\r\n        speakersTalks[_talkId].status = ApplicationStatus.Accepted;\r\n    }\r\n    \r\n    function declineTalk(uint256 _talkId)\r\n        external\r\n        onlyOwner\r\n        beforeEventStart\r\n    {\r\n        speakersTalks[_talkId].status = ApplicationStatus.Declined;\r\n        address speakerAddress = speakersTalks[_talkId].speakerAddress;\r\n        if (speakerAddress.isContract() == false) {\r\n            address(speakerAddress).transfer(speakersTalks[_talkId].deposit);\r\n        }\r\n    }\r\n    \r\n    function selfDeclineTalk(uint256 _talkId)\r\n        external\r\n    {\r\n        require(block.timestamp >= TALKS_APPLICATION_END && block.timestamp < CHECKIN_START);\r\n        address speakerAddress = speakersTalks[_talkId].speakerAddress;\r\n        require(msg.sender == speakerAddress);\r\n        require(speakersTalks[_talkId].status == ApplicationStatus.Applied);\r\n        speakersTalks[_talkId].status = ApplicationStatus.Declined;\r\n        if (speakerAddress.isContract() == false) {\r\n            address(speakerAddress).transfer(speakersTalks[_talkId].deposit);\r\n        }\r\n    }\r\n    \r\n    function checkinMember(uint256 _id)\r\n        external\r\n        duringEvent\r\n    {\r\n        require(membersTickets[_id].bidderAddress == msg.sender);\r\n        membersTickets[_id].checkedIn = true;\r\n    }\r\n    \r\n    function checkinSpeaker(uint256 _talkId)\r\n        external\r\n        onlyOwner\r\n        duringEvent\r\n    {\r\n        require(speakersTalks[_talkId].checkedIn == false);\r\n        require(speakersTalks[_talkId].status == ApplicationStatus.Accepted);\r\n        \r\n        uint256 bidId = totalSupply();\r\n        super._mint(msg.sender, bidId);\r\n        speakersTalks[_talkId].checkedIn = true;\r\n    }\r\n    \r\n    function distributeOverbids(uint256 _fromBid, uint256 _toBid)\r\n        external\r\n        onlyOwner\r\n        afterDistributionStart\r\n    {   \r\n        require(_fromBid <= _toBid);\r\n        uint256 checkedInSpeakers = 0;\r\n        for (uint256 y = 0; y < speakersTalks.length; y++){\r\n            if (speakersTalks[y].checkedIn) checkedInSpeakers++;\r\n        }\r\n        uint256 ticketsForMembersSupply = totalSupply().sub(checkedInSpeakers);\r\n        require(_fromBid < ticketsForMembersSupply && _toBid < ticketsForMembersSupply);\r\n        for (uint256 i = _fromBid; i <= _toBid; i++) {\r\n            require(membersTickets[i].overbidReturned == false);\r\n            address bidderAddress = membersTickets[i].bidderAddress;\r\n            uint256 overbid = (membersTickets[i].value).sub(endPrice);\r\n            if(bidderAddress.isContract() == false) {\r\n                address(bidderAddress).transfer(overbid);\r\n            }\r\n            membersTickets[i].overbidReturned = true;\r\n            amountReturnedBids++;\r\n        }\r\n        if (amountReturnedBids == ticketsForMembersSupply) {\r\n            overbidsDistributed = true;\r\n        }\r\n    }\r\n    \r\n    function distributeRewards()\r\n        external\r\n        onlyOwner\r\n        afterDistributionStart\r\n    {\r\n        require(overbidsDistributed == true);\r\n        if (acceptedSpeakersSlots > 0) {\r\n            uint256 checkedInSpeakers = 0;\r\n            for (uint256 i = 0; i < speakersTalks.length; i++){\r\n                if (speakersTalks[i].checkedIn) checkedInSpeakers++;\r\n            }\r\n            uint256 valueForTicketsForReward = endPrice.mul(membersTickets.length);\r\n            uint256 valueFromTicketsForSpeakers = valueForTicketsForReward.mul(getSpeakersShares()).div(100);\r\n            \r\n            uint256 valuePerSpeakerFromTickets = valueFromTicketsForSpeakers.div(checkedInSpeakers);\r\n            for (uint256 y = 0; y < speakersTalks.length; y++) {\r\n                address speakerAddress = speakersTalks[y].speakerAddress;\r\n                if (speakersTalks[y].checkedIn == true && speakerAddress.isContract() == false) {\r\n                    speakerAddress.transfer(valuePerSpeakerFromTickets.add(speakersTalks[y].deposit));\r\n                }\r\n            }\r\n        }\r\n        address(owner()).transfer(address(this).balance);\r\n    }\r\n    \r\n    function setTalksGrid(string _grid)\r\n        external\r\n        onlyOwner\r\n    {\r\n        talksGrid = _grid;\r\n    }\r\n    \r\n    function setWorkshopsGrid(string _grid)\r\n        external\r\n        onlyOwner\r\n    {\r\n        workshopsGrid = _grid;\r\n    }\r\n    \r\n    function getTalkById(uint256 _id)\r\n        external\r\n        view\r\n        returns(\r\n            string,\r\n            string,\r\n            string,\r\n            uint256,\r\n            uint256,\r\n            address,\r\n            uint256,\r\n            bool,\r\n            ApplicationStatus,\r\n            string \r\n        )\r\n    {\r\n        require(_id < uint256(speakersTalks.length));\r\n        Talk memory m = speakersTalks[_id];\r\n        return(\r\n            m.speakerName,\r\n            m.descSpeaker,\r\n            m.deskTalk,\r\n            m.duration,\r\n            m.deposit,\r\n            m.speakerAddress,\r\n            m.appliedAt,\r\n            m.checkedIn,\r\n            m.status,\r\n            m.proof\r\n        );\r\n    }\r\n    \r\n    function getTicket(uint256 _id)\r\n        external\r\n        view\r\n        returns(\r\n            uint256,\r\n            address,\r\n            bool,\r\n            bool\r\n        )\r\n    {\r\n        return(\r\n            membersTickets[_id].value,\r\n            membersTickets[_id].bidderAddress,\r\n            membersTickets[_id].checkedIn,\r\n            membersTickets[_id].overbidReturned\r\n        );\r\n    }\r\n    \r\n    function getAuctionStartBlock()\r\n        external\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return auctionStartBlock;\r\n    }\r\n    \r\n    function getAuctionStartTime()\r\n        external\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return auctionStartTime;\r\n    }\r\n    \r\n    function getAuctionEndTime()\r\n        external\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return auctionEnd;\r\n    }\r\n    \r\n    function getEventStartTime()\r\n        external\r\n        pure\r\n        returns(uint256)\r\n    {\r\n        return CHECKIN_START;\r\n    }\r\n    \r\n    function getEventEndTime()\r\n        external\r\n        pure\r\n        returns(uint256)\r\n    {\r\n        return CHECKIN_END;\r\n    }\r\n    \r\n    function getDistributionTime()\r\n        external\r\n        pure\r\n        returns(uint256)\r\n    {\r\n        return DISTRIBUTION_START;\r\n    }\r\n    \r\n    function getCurrentPrice()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        uint256 blocksPassed = block.number - auctionStartBlock;\r\n        uint256 currentDiscount = blocksPassed.mul(BID_BLOCK_DECREASE);\r\n        \r\n        if (currentDiscount < (INITIAL_PRICE - MINIMAL_PRICE)) {\r\n            return INITIAL_PRICE.sub(currentDiscount);\r\n        } else { \r\n            return MINIMAL_PRICE; \r\n        }\r\n    }\r\n    \r\n    function getEndPrice()\r\n        external\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return endPrice;\r\n    }\r\n    \r\n    function getMinimalPrice()\r\n        external\r\n        pure\r\n        returns(uint256)\r\n    {\r\n        return MINIMAL_PRICE;\r\n    }\r\n    \r\n    function getMinimalSpeakerDeposit()\r\n        external\r\n        pure\r\n        returns(uint256)\r\n    {\r\n        return MINIMAL_SPEAKER_DEPOSIT;\r\n    }\r\n    \r\n    function getTicketsAmount()\r\n        external\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return ticketsAmount;\r\n    }\r\n    \r\n    function getSpeakersSlots()\r\n        external\r\n        pure\r\n        returns(uint256)\r\n    {\r\n        return SPEAKERS_SLOTS;\r\n    }\r\n    \r\n    function getAvailableSpeaksersSlots()\r\n        external\r\n        view\r\n        returns(uint256)\r\n    { \r\n        return SPEAKERS_SLOTS.sub(acceptedSpeakersSlots); \r\n    }\r\n    \r\n    function getOrganizersShares()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        uint256 time = auctionEnd;\r\n        if (ticketsAmount > 0 && block.timestamp < CHECKIN_START) {\r\n            time = block.timestamp;\r\n        }\r\n        uint256 mul = time.sub(auctionStartTime).mul(100).div(CHECKIN_START.sub(auctionStartTime));\r\n        uint256 shares = SPEAKERS_START_SHARES.sub(SPEAKERS_END_SHARES).mul(mul).div(100);\r\n        \r\n        return SPEAKERS_END_SHARES.add(shares);\r\n    }\r\n    \r\n    function getSpeakersShares()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return uint256(100).sub(getOrganizersShares());\r\n    }\r\n    \r\n    function getTicketsFunds()\r\n        external\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return ticketsFunds;\r\n    }\r\n    \r\n    function getPlace()\r\n        external\r\n        pure\r\n        returns(string)\r\n    { \r\n        return CYBERCON_PLACE;\r\n    }\r\n    \r\n    function getTalksGrid()\r\n        external\r\n        view\r\n        returns(string)\r\n    {\r\n        return talksGrid;\r\n    }\r\n    \r\n    function getWorkshopsGrid()\r\n        external\r\n        view\r\n        returns(string)\r\n    {\r\n        return workshopsGrid;\r\n    }\r\n    \r\n    function getCommunityBuilderMessage(uint256 _messageID)\r\n        external\r\n        view\r\n        returns(\r\n            string,\r\n            string,\r\n            string,\r\n            uint256\r\n        )\r\n    {\r\n        return(\r\n            communityBuildersBoard[_messageID].message,\r\n            communityBuildersBoard[_messageID].link1,\r\n            communityBuildersBoard[_messageID].link2,\r\n            communityBuildersBoard[_messageID].donation\r\n        );\r\n    }\r\n    \r\n    function getCommunityBuildersBoardSize()\r\n        external\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return communityBuildersBoard.length;\r\n    }\r\n    \r\n    function getAmountReturnedOverbids()\r\n        external\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return amountReturnedBids;\r\n    }\r\n}", "OptimizationUsed": "1", "ContractName": "Cybercon", "ByteCode": "0x6080604052600436106102a85763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301ffc9a781146102b757806306fdde0314610302578063081812fc1461038c578063095ea7b3146103c057806318160ddd146103e65780631db3e2c11461040d57806320d224561461042557806323b872dd1461044057806327209f5f1461046a57806327f15d58146104825780632ebe1d86146104975780632f745c59146104d35780633faf04d8146104f757806342842e0e1461050c57806345439a9414610536578063473a37831461054b5780634e439b92146105605780634f6ccce7146106c357806350dc8bdb146106db5780635529fa06146106f3578063552e759f1461070857806359b9c8a8146107375780635a17bd481461074c5780636352211e1461095f57806368df3edd146109775780636f4a2cd01461098c57806370750fd1146109a157806370a08231146109b6578063715018a6146109d75780637346b9b1146109ec5780637456f2b914610a01578063787c0a6c14610a165780637a16a74b14610a2b5780637dc379fa14610a4057806383064cb814610a885780638da5cb5b14610ac35780638f32d59b14610ad857806395d89b4114610aed5780639d2e14fd14610b025780639f00570014610b17578063a22cb46514610b37578063a4c4186414610b5d578063af0414c914610b72578063b043100014610b87578063b88d4fde14610b9c578063ba626c7314610c0b578063c87b56dd14610c20578063cb85b02d14610c38578063d0d10d0114610c4d578063e7dc117c14610c62578063e7ec2e6014610c77578063e985e9c514610c97578063eb91d37e14610cbe578063ed53bd4414610cd3578063edca914c14610ceb578063f2fde38b14610cf3578063fe8c1e1d14610d14575b3480156102b457600080fd5b50005b3480156102c357600080fd5b506102ee7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1960043516610d2c565b604080519115158252519081900360200190f35b34801561030e57600080fd5b50610317610d60565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610351578181015183820152602001610339565b50505050905090810190601f16801561037e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561039857600080fd5b506103a4600435610df7565b60408051600160a060020a039092168252519081900360200190f35b3480156103cc57600080fd5b506103e4600160a060020a0360043516602435610e29565b005b3480156103f257600080fd5b506103fb610edf565b60408051918252519081900360200190f35b34801561041957600080fd5b506103e4600435610ee5565b34801561043157600080fd5b506103e4600435602435610fdb565b34801561044c57600080fd5b506103e4600160a060020a0360043581169060243516604435611234565b34801561047657600080fd5b506103e46004356112c2565b34801561048e57600080fd5b506103fb611419565b3480156104a357600080fd5b506103e460048035906024803580820192908101359160443580820192908101359160643590810191013561141f565b3480156104df57600080fd5b506103fb600160a060020a03600435166024356114f4565b34801561050357600080fd5b506103fb611541565b34801561051857600080fd5b506103e4600160a060020a036004358116906024351660443561154d565b34801561054257600080fd5b506103fb611569565b34801561055757600080fd5b506103fb61156f565b34801561056c57600080fd5b50610578600435611577565b60405180806020018060200180602001858152602001848103845288818151815260200191508051906020019080838360005b838110156105c35781810151838201526020016105ab565b50505050905090810190601f1680156105f05780820380516001836020036101000a031916815260200191505b50848103835287518152875160209182019189019080838360005b8381101561062357818101518382015260200161060b565b50505050905090810190601f1680156106505780820380516001836020036101000a031916815260200191505b50848103825286518152865160209182019188019080838360005b8381101561068357818101518382015260200161066b565b50505050905090810190601f1680156106b05780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390f35b3480156106cf57600080fd5b506103fb6004356117ba565b3480156106e757600080fd5b506103e46004356117ef565b3480156106ff57600080fd5b50610317611886565b6103e46004803590602480358082019290810135916044358082019290810135916064359081019101356118e7565b34801561074357600080fd5b506103fb611ad8565b34801561075857600080fd5b50610764600435611ade565b604051808060200180602001806020018b81526020018a815260200189600160a060020a0316600160a060020a03168152602001888152602001871515151581526020018660028111156107b457fe5b60ff1681526020018060200185810385528f818151815260200191508051906020019080838360005b838110156107f55781810151838201526020016107dd565b50505050905090810190601f1680156108225780820380516001836020036101000a031916815260200191505b5085810384528e818151815260200191508051906020019080838360005b83811015610858578181015183820152602001610840565b50505050905090810190601f1680156108855780820380516001836020036101000a031916815260200191505b5085810383528d5181528d516020918201918f019080838360005b838110156108b85781810151838201526020016108a0565b50505050905090810190601f1680156108e55780820380516001836020036101000a031916815260200191505b50858103825286518152865160209182019188019080838360005b83811015610918578181015183820152602001610900565b50505050905090810190601f1680156109455780820380516001836020036101000a031916815260200191505b509e50505050505050505050505050505060405180910390f35b34801561096b57600080fd5b506103a4600435611e53565b34801561098357600080fd5b506103fb611e7d565b34801561099857600080fd5b506103e4611e9d565b3480156109ad57600080fd5b506103fb6120cb565b3480156109c257600080fd5b506103fb600160a060020a03600435166120d3565b3480156109e357600080fd5b506103e4612106565b3480156109f857600080fd5b506103fb612170565b348015610a0d57600080fd5b506103fb612176565b348015610a2257600080fd5b506103fb61217e565b348015610a3757600080fd5b506103fb612184565b348015610a4c57600080fd5b50610a5860043561219c565b60408051948552600160a060020a0390931660208501529015158383015215156060830152519081900360800190f35b6103e460246004803582810192908201359181358083019290820135916044358083019290820135916064359160843590810191013561225c565b348015610acf57600080fd5b506103a4612575565b348015610ae457600080fd5b506102ee612584565b348015610af957600080fd5b50610317612595565b348015610b0e57600080fd5b506103fb6125f6565b348015610b2357600080fd5b506103e460048035602481019101356125fb565b348015610b4357600080fd5b506103e4600160a060020a0360043516602435151561261a565b348015610b6957600080fd5b506103fb61269e565b348015610b7e57600080fd5b506103176126a4565b348015610b9357600080fd5b506103fb612705565b348015610ba857600080fd5b50604080516020601f6064356004818101359283018490048402850184019095528184526103e494600160a060020a03813581169560248035909216956044359536956084940191819084018382808284375094975061270b9650505050505050565b348015610c1757600080fd5b506103fb612733565b348015610c2c57600080fd5b50610317600435612739565b348015610c4457600080fd5b506103176127ee565b348015610c5957600080fd5b506103fb612825565b348015610c6e57600080fd5b506103fb612831565b348015610c8357600080fd5b506103e460048035602481019101356128d4565b348015610ca357600080fd5b506102ee600160a060020a03600435811690602435166128f3565b348015610cca57600080fd5b506103fb612921565b348015610cdf57600080fd5b506103e4600435612982565b6103e4612a52565b348015610cff57600080fd5b506103e4600160a060020a0360043516612c79565b348015610d2057600080fd5b506103e4600435612c98565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191660009081526001602052604090205460ff1690565b600a8054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610dec5780601f10610dc157610100808354040283529160200191610dec565b820191906000526020600020905b815481529060010190602001808311610dcf57829003601f168201915b505050505090505b90565b6000610e0282612d32565b1515610e0d57600080fd5b50600090815260036020526040902054600160a060020a031690565b6000610e3482611e53565b9050600160a060020a038381169082161415610e4f57600080fd5b33600160a060020a0382161480610e6b5750610e6b81336128f3565b1515610e7657600080fd5b600082815260036020526040808220805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b60085490565b6000610eef612584565b1515610efa57600080fd5b635c1346e04210158015610f125750635c139b404211155b1515610f1d57600080fd5b6017805483908110610f2b57fe5b600091825260209091206007600990920201015460ff1615610f4c57600080fd5b60016017805484908110610f5c57fe5b906000526020600020906009020160070160019054906101000a900460ff166002811115610f8657fe5b14610f9057600080fd5b610f98610edf565b9050610fa43382612d4f565b6001601783815481101515610fb557fe5b60009182526020909120600990910201600701805460ff19169115159190911790555050565b600080600080600080610fec612584565b1515610ff757600080fd5b635c13a950421161100757600080fd5b8688111561101457600080fd5b60009550600094505b60175485101561106357601780548690811061103557fe5b600091825260209091206007600990920201015460ff1615611058576001909501945b60019094019361101d565b61107b8661106f610edf565b9063ffffffff612d9e16565b9350838810801561108b57508387105b151561109657600080fd5b8792505b8683116112125760188054849081106110af57fe5b60009182526020909120600290910201600101547501000000000000000000000000000000000000000000900460ff16156110e957600080fd5b60188054849081106110f757fe5b600091825260209091206001600290920201015460105460188054600160a060020a03909316945061114a928690811061112d57fe5b60009182526020909120600290910201549063ffffffff612d9e16565b905061115e82600160a060020a0316612dbc565b151561119c57604051600160a060020a0383169082156108fc029083906000818181858888f1935050505015801561119a573d6000803e3d6000fd5b505b60016018848154811015156111ad57fe5b6000918252602090912060016002909202018101805492151575010000000000000000000000000000000000000000000275ff00000000000000000000000000000000000000000019909316929092179091556015805482019055929092019161109a565b83601554141561122a576016805460ff191660011790555b5050505050505050565b61123e3382612dc4565b151561124957600080fd5b600160a060020a038216151561125e57600080fd5b6112688382612e23565b6112728382612e92565b61127c8282612f99565b8082600160a060020a031684600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6000635c10255042101580156112db5750635c1346e042105b15156112e657600080fd5b60178054839081106112f457fe5b6000918252602090912060056009909202010154600160a060020a0316905033811461131f57600080fd5b6000601780548490811061132f57fe5b906000526020600020906009020160070160019054906101000a900460ff16600281111561135957fe5b1461136357600080fd5b600260178381548110151561137457fe5b60009182526020909120600760099092020101805461ff00191661010083600281111561139d57fe5b02179055506113b481600160a060020a0316612dbc565b15156114155780600160a060020a03166108fc6017848154811015156113d657fe5b9060005260206000209060090201600401549081150290604051600060405180830381858888f19350505050158015611413573d6000803e3d6000fd5b505b5050565b600d5490565b635c102550421061142f57600080fd5b601780548890811061143d57fe5b6000918252602090912060099091020160050154600160a060020a0316331461146557600080fd5b858560178981548110151561147657fe5b906000526020600020906009020160010191906114949291906133cd565b5083836017898154811015156114a657fe5b906000526020600020906009020160020191906114c49291906133cd565b5081816017898154811015156114d657fe5b9060005260206000209060090201600801919061122a9291906133cd565b60006114ff836120d3565b821061150a57600080fd5b600160a060020a038316600090815260066020526040902080548390811061152e57fe5b9060005260206000200154905092915050565b6706f05b59d3b2000090565b611413838383602060405190810160405280600081525061270b565b60135490565b635c1346e090565b6060806060600060198581548110151561158d57fe5b90600052602060002090600402016000016019868154811015156115ad57fe5b90600052602060002090600402016001016019878154811015156115cd57fe5b90600052602060002090600402016002016019888154811015156115ed57fe5b600091825260209182902060036004909202010154845460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815291928691908301828280156116885780601f1061165d57610100808354040283529160200191611688565b820191906000526020600020905b81548152906001019060200180831161166b57829003601f168201915b5050865460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152959950889450925084019050828280156117165780601f106116eb57610100808354040283529160200191611716565b820191906000526020600020905b8154815290600101906020018083116116f957829003601f168201915b5050855460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152959850879450925084019050828280156117a45780601f10611779576101008083540402835291602001916117a4565b820191906000526020600020905b81548152906001019060200180831161178757829003601f168201915b5050505050915093509350935093509193509193565b60006117c4610edf565b82106117cf57600080fd5b60088054839081106117dd57fe5b90600052602060002001549050919050565b635c1346e042101580156118075750635c139b404211155b151561181257600080fd5b601880543391908390811061182357fe5b6000918252602090912060016002909202010154600160a060020a03161461184a57600080fd5b600160188281548110151561185b57fe5b906000526020600020906002020160010160146101000a81548160ff02191690831515021790555050565b601b8054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610dec5780601f10610dc157610100808354040283529160200191610dec565b6118ef61344b565b635c1346e042106118ff57600080fd5b601780543391908a90811061191057fe5b6000918252602090912060056009909202010154600160a060020a03161461193757600080fd5b6001601780548a90811061194757fe5b906000526020600020906009020160070160019054906101000a900460ff16600281111561197157fe5b1461197b57600080fd5b6000341161198857600080fd5b6040805160a06020601f8a0181900402820181019092526080810188815290918291908a908a9081908501838280828437820191505050505050815260200186868080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050815260200184848080601f016020809104026020016040519081016040528093929190818152602001838380828437505050928452505034602092830152506019805460018101808355600092909252835180519495509193859360049092027f944998273e477b495144fb8794c914197f3ccb46be2900f4698fd0ef743c96950192611a8b928492910190613474565b506020828101518051611aa49260018501920190613474565b5060408201518051611ac0916002840191602090910190613474565b50606082015181600301555050505050505050505050565b60195490565b60608060606000806000806000806060611af66134e2565b6017548c10611b0457600080fd5b601780548d908110611b1257fe5b600091825260209182902060408051600993909302909101805460026001821615610100026000190190911604601f81018590049094028301610160908101909252610140830184815292939092849290918491840182828015611bb75780601f10611b8c57610100808354040283529160200191611bb7565b820191906000526020600020905b815481529060010190602001808311611b9a57829003601f168201915b50505050508152602001600182018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611c595780601f10611c2e57610100808354040283529160200191611c59565b820191906000526020600020905b815481529060010190602001808311611c3c57829003601f168201915b5050509183525050600282810180546040805160206001841615610100026000190190931694909404601f81018390048302850183019091528084529381019390830182828015611ceb5780601f10611cc057610100808354040283529160200191611ceb565b820191906000526020600020905b815481529060010190602001808311611cce57829003601f168201915b505050918352505060038201546020820152600482015460408201526005820154600160a060020a0316606082015260068201546080820152600782015460ff808216151560a084015260c090920191610100909104166002811115611d4d57fe5b6002811115611d5857fe5b815260088201805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152938201939291830182828015611de65780601f10611dbb57610100808354040283529160200191611de6565b820191906000526020600020905b815481529060010190602001808311611dc957829003601f168201915b5050505050815250509050806000015181602001518260400151836060015184608001518560a001518660c001518760e001518861010001518961012001518999508898508797508090509a509a509a509a509a509a509a509a509a509a50509193959799509193959799565b600081815260026020526040812054600160a060020a0316801515611e7757600080fd5b92915050565b6000611e98611e8a612831565b60649063ffffffff612d9e16565b905090565b6000806000806000806000611eb0612584565b1515611ebb57600080fd5b635c13a9504211611ecb57600080fd5b60165460ff161515600114611edf57600080fd5b6000601254111561208b5760009650600095505b601754861015611f39576017805487908110611f0b57fe5b600091825260209091206007600990920201015460ff1615611f2e576001909601955b600190950194611ef3565b601854601054611f4e9163ffffffff612fe216565b9450611f796064611f6d611f60611e7d565b889063ffffffff612fe216565b9063ffffffff61301716565b9350611f8b848863ffffffff61301716565b9250600091505b60175482101561208b576017805483908110611faa57fe5b600091825260209091206005600990920201015460178054600160a060020a0390921692509083908110611fda57fe5b600091825260209091206007600990920201015460ff1615156001148015612011575061200f81600160a060020a0316612dbc565b155b156120805780600160a060020a03166108fc61205660178581548110151561203557fe5b9060005260206000209060090201600401548661303a90919063ffffffff16565b6040518115909202916000818181858888f1935050505015801561207e573d6000803e3d6000fd5b505b600190910190611f92565b612093612575565b604051600160a060020a039190911690303180156108fc02916000818181858888f1935050505015801561122a573d6000803e3d6000fd5b635c139b4090565b6000600160a060020a03821615156120ea57600080fd5b50600160a060020a031660009081526004602052604090205490565b61210e612584565b151561211957600080fd5b60008054604051600160a060020a03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b60105490565b635c13a95090565b600f5490565b6000611e986012546018612d9e90919063ffffffff16565b6000806000806018858154811015156121b157fe5b9060005260206000209060020201600001546018868154811015156121d257fe5b600091825260209091206001600290920201015460188054600160a060020a03909216918890811061220057fe5b906000526020600020906002020160010160149054906101000a900460ff1660188881548110151561222e57fe5b906000526020600020906002020160010160159054906101000a900460ff1693509350935093509193509193565b6122646134e2565b635c102550421061227457600080fd5b61038484101580156122885750610e108411155b151561229357600080fd5b670de0b6b3a76400003410156122a857600080fd5b6017546024116122b757600080fd5b604080516101606020601f8d01819004028201810190925261014081018b815290918291908d908d9081908501838280828437820191505050505050815260200189898080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050815260200187878080601f01602080910402602001604051908101604052809392919081815260200183838082843750505092845250505060208101869052346040820152336060820152426080820152600060a0820181905260c090910190815260200184848080601f016020809104026020016040519081016040528093929190818152602001838380828437505050929093525050601780546001810180835560009290925283518051949550919385935060099091027fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c15019161241791839160200190613474565b5060208281015180516124309260018501920190613474565b506040820151805161244c916002840191602090910190613474565b50606082015160038201556080820151600482015560a082015160058201805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0390921691909117905560c0820151600682015560e082015160078201805460ff19169115159190911780825561010080850151929161ff001916908360028111156124d257fe5b021790555061012082015180516124f3916008840191602090910190613474565b505050507fcb8a709a44ebb5c0e053c64ee49df2ac0faf7fc238c534a09f0dc32f415c65318a8a3334604051808060200184600160a060020a0316600160a060020a031681526020018381526020018281038252868682818152602001925080828437604051920182900397509095505050505050a150505050505050505050565b600054600160a060020a031690565b600054600160a060020a0316331490565b600b8054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610dec5780601f10610dc157610100808354040283529160200191610dec565b601890565b612603612584565b151561260e57600080fd5b611413601a83836133cd565b600160a060020a03821633141561263057600080fd5b336000818152600560209081526040808320600160a060020a03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b60115490565b601a8054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610dec5780601f10610dc157610100808354040283529160200191610dec565b600e5490565b612716848484611234565b6127228484848461304c565b151561272d57600080fd5b50505050565b60155490565b606061274482612d32565b151561274f57600080fd5b6000828152600c602090815260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845290918301828280156127e25780601f106127b7576101008083540402835291602001916127e2565b820191906000526020600020905b8154815290600101906020018083116127c557829003601f168201915b50505050509050919050565b60408051808201909152601881527f4b6f7270757320382c204d696e736b2c2042656c617275730000000000000000602082015290565b670de0b6b3a764000090565b600080600080600f54925060006011541180156128515750635c1346e042105b1561285a574292505b61289c612876600e54635c1346e0612d9e90919063ffffffff16565b611f6d6064612890600e5488612d9e90919063ffffffff16565b9063ffffffff612fe216565b91506128b96064611f6d846128906050601463ffffffff612d9e16565b90506128cc60148263ffffffff61303a16565b935050505090565b6128dc612584565b15156128e757600080fd5b611413601b83836133cd565b600160a060020a03918216600090815260056020908152604080832093909416825291909152205460ff1690565b600d5460009043038161294082651b48eb57e00063ffffffff612fe216565b90506722b1c8c1227a00008110156129715761296a6729a2241af62c00008263ffffffff612d9e16565b925061297d565b6706f05b59d3b2000092505b505090565b61298a612584565b151561299557600080fd5b635c1346e042106129a557600080fd5b6012546018116129b457600080fd5b600060178054839081106129c457fe5b906000526020600020906009020160070160019054906101000a900460ff1660028111156129ee57fe5b146129f857600080fd5b601254612a0c90600163ffffffff61303a16565b601255601780546001919083908110612a2157fe5b60009182526020909120600760099092020101805461ff001916610100836002811115612a4a57fe5b021790555050565b6000635c1346e04210612a6457600080fd5b612a6c612921565b341015612a7857600080fd5b3360009081526014602052604090205460ff1615612a9557600080fd5b601154600010612aa457600080fd5b612aac610edf565b60408051608081018252348152336020820181815260009383018481526060840185815260188054600181018255965293517fb13d2d76d1f4b7be834882e410b3e3a8afaf69f83600ae24db354391d2378d2e60029096029586015590517fb13d2d76d1f4b7be834882e410b3e3a8afaf69f83600ae24db354391d2378d2f90940180549151935173ffffffffffffffffffffffffffffffffffffffff19909216600160a060020a039095169490941774ff0000000000000000000000000000000000000000191674010000000000000000000000000000000000000000931515939093029290921775ff000000000000000000000000000000000000000000191675010000000000000000000000000000000000000000009215159290920291909117909155909150612be09082612d4f565b336000908152601460205260409020805460ff19166001179055601354612c0d903463ffffffff61303a16565b601355601154612c2490600163ffffffff612d9e16565b60118190551515612c385742600f55346010555b60408051828152336020820152348183015290517fd1e1ba01293470f197c2a92905466235d773a3becc4c6976364f5692bc773a279181900360600190a150565b612c81612584565b1515612c8c57600080fd5b612c95816131ce565b50565b6000612ca2612584565b1515612cad57600080fd5b635c1346e04210612cbd57600080fd5b6002601783815481101515612cce57fe5b60009182526020909120600760099092020101805461ff001916610100836002811115612cf757fe5b02179055506017805483908110612d0a57fe5b6000918252602090912060056009909202010154600160a060020a031690506113b481612dbc565b600090815260026020526040902054600160a060020a0316151590565b612d59828261324b565b600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee3015550565b60008083831115612dae57600080fd5b5050808203805b5092915050565b6000903b1190565b600080612dd083611e53565b905080600160a060020a031684600160a060020a03161480612e0b575083600160a060020a0316612e0084610df7565b600160a060020a0316145b80612e1b5750612e1b81856128f3565b949350505050565b81600160a060020a0316612e3682611e53565b600160a060020a031614612e4957600080fd5b600081815260036020526040902054600160a060020a031615611415576000908152600360205260409020805473ffffffffffffffffffffffffffffffffffffffff1916905550565b6000806000612ea185856132a6565b600084815260076020908152604080832054600160a060020a0389168452600690925290912054909350612edc90600163ffffffff612d9e16565b600160a060020a038616600090815260066020526040902080549193509083908110612f0457fe5b90600052602060002001549050806006600087600160a060020a0316600160a060020a0316815260200190815260200160002084815481101515612f4457fe5b6000918252602080832090910192909255600160a060020a0387168152600690915260409020805490612f7b90600019830161354c565b50600093845260076020526040808520859055908452909220555050565b6000612fa5838361333c565b50600160a060020a039091166000908152600660209081526040808320805460018101825590845282842081018590559383526007909152902055565b600080831515612ff55760009150612db5565b5082820282848281151561300557fe5b041461301057600080fd5b9392505050565b60008080831161302657600080fd5b828481151561303157fe5b04949350505050565b60008282018381101561301057600080fd5b60008061306185600160a060020a0316612dbc565b151561307057600191506131c5565b6040517f150b7a020000000000000000000000000000000000000000000000000000000081523360048201818152600160a060020a03898116602485015260448401889052608060648501908152875160848601528751918a169463150b7a0294938c938b938b93909160a490910190602085019080838360005b838110156131035781810151838201526020016130eb565b50505050905090810190601f1680156131305780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561315257600080fd5b505af1158015613166573d6000803e3d6000fd5b505050506040513d602081101561317c57600080fd5b50517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1981167f150b7a020000000000000000000000000000000000000000000000000000000014925090505b50949350505050565b600160a060020a03811615156131e357600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a038216151561326057600080fd5b61326a8282612f99565b6040518190600160a060020a038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b81600160a060020a03166132b982611e53565b600160a060020a0316146132cc57600080fd5b600160a060020a0382166000908152600460205260409020546132f690600163ffffffff612d9e16565b600160a060020a03909216600090815260046020908152604080832094909455918152600290915220805473ffffffffffffffffffffffffffffffffffffffff19169055565b600081815260026020526040902054600160a060020a03161561335e57600080fd5b6000818152600260209081526040808320805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038716908117909155835260049091529020546133ad90600161303a565b600160a060020a0390921660009081526004602052604090209190915550565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061340e5782800160ff1982351617855561343b565b8280016001018555821561343b579182015b8281111561343b578235825591602001919060010190613420565b5061344792915061356c565b5090565b608060405190810160405280606081526020016060815260200160608152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106134b557805160ff191683800117855561343b565b8280016001018555821561343b579182015b8281111561343b5782518255916020019190600101906134c7565b6101406040519081016040528060608152602001606081526020016060815260200160008152602001600081526020016000600160a060020a03168152602001600081526020016000151581526020016000600281111561353f57fe5b8152602001606081525090565b815481835581811115611413576000838152602090206114139181019083015b610df491905b8082111561344757600081556001016135725600a165627a7a72305820fd4946d41e03e55dae238761483afe427be0f05431fb8b1e3f431e2359db00460029"}