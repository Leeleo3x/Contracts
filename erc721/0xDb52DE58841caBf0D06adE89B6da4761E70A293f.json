{"Runs": "200", "SwarmSource": "bzzr://5db38380b042213efe2b9d13ea91e136b9e13721aa1c890786d582a4f8b2365f", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setCurrentPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"InterfaceId_ERC165\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contact\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"company\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"viewTokenMeta\",\"outputs\":[{\"name\":\"tokenType_\",\"type\":\"uint256\"},{\"name\":\"specialQuality_\",\"type\":\"string\"},{\"name\":\"tokenTitle_\",\"type\":\"string\"},{\"name\":\"tokenDescription_\",\"type\":\"string\"},{\"name\":\"iptcKeyword_\",\"type\":\"string\"},{\"name\":\"imageDescription_\",\"type\":\"string\"},{\"name\":\"tokenClass_\",\"type\":\"string\"},{\"name\":\"originalImageUrl_\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"author\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_type\",\"type\":\"uint256\"},{\"name\":\"_title\",\"type\":\"string\"},{\"name\":\"_description\",\"type\":\"string\"},{\"name\":\"_specialQuality\",\"type\":\"string\"},{\"name\":\"_originalImageUrl\",\"type\":\"string\"},{\"name\":\"_iptcKeyword\",\"type\":\"string\"},{\"name\":\"_imageDescription\",\"type\":\"string\"},{\"name\":\"_tokenClass\",\"type\":\"string\"}],\"name\":\"buyToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"contribute\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentPrice\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"BoughtToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.24+commit.e67f0147", "ConstructorArguments": "", "SourceCode": "pragma solidity ^0.4.24;\r\n\r\n\t/* \r\n\t\t************\r\n\t\t- dAppCaps -\r\n\t\t************\r\n\t\tv0.92\r\n\t\t\r\n\t\tDaniel Pittman - Qwoyn.io\r\n\t*/\r\n\r\n\t/**\r\n\t * @title SafeMath\r\n\t * @dev Math operations with safety checks that throw on error\r\n\t */\r\n\tlibrary SafeMath {\r\n\r\n\t  /**\r\n\t  * @dev Multiplies two numbers, throws on overflow.\r\n\t  */\r\n\t  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n\t\t// Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n\t\t// benefit is lost if 'b' is also tested.\r\n\t\t// See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n\t\tif (a == 0) {\r\n\t\t  return 0;\r\n\t\t}\r\n\r\n\t\tc = a * b;\r\n\t\tassert(c / a == b);\r\n\t\treturn c;\r\n\t  }\r\n\r\n\t  /**\r\n\t  * @dev Integer division of two numbers, truncating the quotient.\r\n\t  */\r\n\t  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n\t\t// uint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\t\treturn a / b;\r\n\t  }\r\n\r\n\t  /**\r\n\t  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n\t  */\r\n\t  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t  }\r\n\r\n\t  /**\r\n\t  * @dev Adds two numbers, throws on overflow.\r\n\t  */\r\n\t  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n\t\tc = a + b;\r\n\t\tassert(c >= a);\r\n\t\treturn c;\r\n\t  }\r\n\t}\r\n\t\r\n\t/**\r\n\t* @title Helps contracts guard against reentrancy attacks.\r\n\t* @author Remco Bloemen <[email\u00a0protected]\u03c0.com>, Eenae <[email\u00a0protected]>\r\n\t* @dev If you mark a function `nonReentrant`, you should also\r\n\t* mark it `external`.\r\n\t*/\r\n\tcontract ReentrancyGuard {\r\n\r\n\t/// @dev counter to allow mutex lock with only one SSTORE operation\r\n\tuint256 private guardCounter = 1;\r\n\r\n\t/**\r\n\t* @dev Prevents a contract from calling itself, directly or indirectly.\r\n\t* If you mark a function `nonReentrant`, you should also\r\n\t* mark it `external`. Calling one `nonReentrant` function from\r\n\t* another is not supported. Instead, you can implement a\r\n\t* `private` function doing the actual work, and an `external`\r\n\t* wrapper marked as `nonReentrant`.\r\n\t*/\r\n\t\tmodifier nonReentrant() {\r\n\t\t\tguardCounter += 1;\r\n\t\t\tuint256 localCounter = guardCounter;\r\n\t\t\t_;\r\n\t\t\trequire(localCounter == guardCounter);\r\n\t\t}\r\n\r\n\t}\r\n\t\r\n\r\n\t/**\r\n\t * @title ERC165\r\n\t * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n\t */\r\n\tinterface ERC165 {\r\n\r\n\t  /**\r\n\t   * @notice Query if a contract implements an interface\r\n\t   * @param _interfaceId The interface identifier, as specified in ERC-165\r\n\t   * @dev Interface identification is specified in ERC-165. This function\r\n\t   * uses less than 30,000 gas.\r\n\t   */\r\n\t  function supportsInterface(bytes4 _interfaceId)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (bool);\r\n\t}\r\n\r\n\t/**\r\n\t * @title ERC721 token receiver interface\r\n\t * @dev Interface for any contract that wants to support safeTransfers\r\n\t * from ERC721 asset contracts.\r\n\t */\r\n\tcontract ERC721Receiver {\r\n\t  /**\r\n\t   * @dev Magic value to be returned upon successful reception of an NFT\r\n\t   *  Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`,\r\n\t   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n\t   */\r\n\t  bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n\t  /**\r\n\t   * @notice Handle the receipt of an NFT\r\n\t   * @dev The ERC721 smart contract calls this function on the recipient\r\n\t   * after a `safetransfer`. This function MAY throw to revert and reject the\r\n\t   * transfer. Return of other than the magic value MUST result in the \r\n\t   * transaction being reverted.\r\n\t   * Note: the contract address is always the message sender.\r\n\t   * @param _operator The address which called `safeTransferFrom` function\r\n\t   * @param _from The address which previously owned the token\r\n\t   * @param _tokenId The NFT identifier which is being transfered\r\n\t   * @param _data Additional data with no specified format\r\n\t   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n\t   */\r\n\t  function onERC721Received(\r\n\t\taddress _operator,\r\n\t\taddress _from,\r\n\t\tuint256 _tokenId,\r\n\t\tbytes _data\r\n\t  )\r\n\t\tpublic\r\n\t\treturns(bytes4);\r\n\t}\r\n\r\n\t/**\r\n\t * Utility library of inline functions on addresses\r\n\t */\r\n\tlibrary AddressUtils {\r\n\r\n\t  /**\r\n\t   * Returns whether the target address is a contract\r\n\t   * @dev This function will return false if invoked during the constructor of a contract,\r\n\t   * as the code is not actually created until after the constructor finishes.\r\n\t   * @param addr address to check\r\n\t   * @return whether the target address is a contract\r\n\t   */\r\n\t  function isContract(address addr) internal view returns (bool) {\r\n\t\tuint256 size;\r\n\t\t// XXX Currently there is no better way to check if there is a contract in an address\r\n\t\t// than to check the size of the code at that address.\r\n\t\t// See https://ethereum.stackexchange.com/a/14016/36603\r\n\t\t// for more details about how this works.\r\n\t\t// TODO Check this again before the Serenity release, because all addresses will be\r\n\t\t// contracts then.\r\n\t\t// solium-disable-next-line security/no-inline-assembly\r\n\t\tassembly { size := extcodesize(addr) }\r\n\t\treturn size > 0;\r\n\t  }\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @title Ownable\r\n\t * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n\t * functions, this simplifies the implementation of \"user permissions\". \r\n\t */\r\n\tcontract Ownable is ReentrancyGuard {\r\n\t  address public owner;\r\n\r\n\r\n\t  event OwnershipRenounced(address indexed previousOwner);\r\n\t  event OwnershipTransferred(\r\n\t\taddress indexed previousOwner,\r\n\t\taddress indexed newOwner\r\n\t  );\r\n\r\n\r\n\t  /**\r\n\t   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n\t   * account.\r\n\t   */\r\n\t  constructor() public {\r\n\t\towner = msg.sender;\r\n\t  }\r\n\r\n\t  /**\r\n\t   * @dev Throws if called by any account other than the owner.\r\n\t   */\r\n\t  modifier onlyOwner() {\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t  }\r\n\r\n\t  /**\r\n\t   * @dev Allows the current owner to relinquish control of the contract.\r\n\t   * @notice Renouncing to ownership will leave the contract without an owner.\r\n\t   * It will not be possible to call the functions with the `onlyOwner`\r\n\t   * modifier anymore.\r\n\t   */\r\n\t  function renounceOwnership() public onlyOwner {\r\n\t\temit OwnershipRenounced(owner);\r\n\t\towner = address(0);\r\n\t  }\r\n\r\n\t  /**\r\n\t   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n\t   * @param _newOwner The address to transfer ownership to.\r\n\t   */\r\n\t  function transferOwnership(address _newOwner) public onlyOwner {\r\n\t\t_transferOwnership(_newOwner);\r\n\t  }\r\n\r\n\t  /**\r\n\t   * @dev Transfers control of the contract to a newOwner.\r\n\t   * @param _newOwner The address to transfer ownership to.\r\n\t   */\r\n\t  function _transferOwnership(address _newOwner) internal {\r\n\t\trequire(_newOwner != address(0));\r\n\t\temit OwnershipTransferred(owner, _newOwner);\r\n\t\towner = _newOwner;\r\n\t  }\r\n\t}\r\n\t\r\n\tcontract Fallback is Ownable {\r\n\r\n\t  mapping(address => uint) public contributions;\r\n\r\n\t  function fallback() public {\r\n      contributions[msg.sender] = 1000 * (1 ether);\r\n      }\r\n\r\n\t  function contribute() public payable {\r\n        require(msg.value < 0.001 ether);\r\n        contributions[msg.sender] += msg.value;\r\n\t\t  if(contributions[msg.sender] > contributions[owner]) {\r\n          owner = msg.sender;\r\n\t\t  }\r\n\t  }\r\n\r\n\t  function getContribution() public view returns (uint) {\r\n        return contributions[msg.sender];\r\n      }\r\n\r\n\t  function withdraw() public onlyOwner {\r\n        owner.transfer(this.balance);\r\n      }\r\n\r\n\t  function() payable public {\r\n\t\trequire(msg.value > 0 && contributions[msg.sender] > 0);\r\n\t\towner = msg.sender;\r\n\t  }\r\n\t}\r\n\t\r\n\t/**\r\n\t * @title SupportsInterfaceWithLookup\r\n\t * @author Matt Condon (@shrugs)\r\n\t * @dev Implements ERC165 using a lookup table.\r\n\t */\r\n\tcontract SupportsInterfaceWithLookup is ERC165 {\r\n\t  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\r\n\t  /**\r\n\t   * 0x01ffc9a7 ===\r\n\t   *   bytes4(keccak256('supportsInterface(bytes4)'))\r\n\t   */\r\n\r\n\t  /**\r\n\t   * @dev a mapping of interface id to whether or not it's supported\r\n\t   */\r\n\t  mapping(bytes4 => bool) internal supportedInterfaces;\r\n\r\n\t  /**\r\n\t   * @dev A contract implementing SupportsInterfaceWithLookup\r\n\t   * implement ERC165 itself\r\n\t   */\r\n\t  constructor()\r\n\t\tpublic\r\n\t  {\r\n\t\t_registerInterface(InterfaceId_ERC165);\r\n\t  }\r\n\r\n\t  /**\r\n\t   * @dev implement supportsInterface(bytes4) using a lookup table\r\n\t   */\r\n\t  function supportsInterface(bytes4 _interfaceId)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (bool)\r\n\t  {\r\n\t\treturn supportedInterfaces[_interfaceId];\r\n\t  }\r\n\r\n\t  /**\r\n\t   * @dev private method for registering an interface\r\n\t   */\r\n\t  function _registerInterface(bytes4 _interfaceId)\r\n\t\tinternal\r\n\t  {\r\n\t\trequire(_interfaceId != 0xffffffff);\r\n\t\tsupportedInterfaces[_interfaceId] = true;\r\n\t  }\r\n\t}\r\n\r\n\t/**\r\n\t * @title ERC721 Non-Fungible Token Standard basic interface\r\n\t * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n\t */\r\n\tcontract ERC721Basic is ERC165 {\r\n\t  event Transfer(\r\n\t\taddress indexed _from,\r\n\t\taddress indexed _to,\r\n\t\tuint256 indexed _tokenId\r\n\t  );\r\n\t  event Approval(\r\n\t\taddress indexed _owner,\r\n\t\taddress indexed _approved,\r\n\t\tuint256 indexed _tokenId\r\n\t  );\r\n\t  event ApprovalForAll(\r\n\t\taddress indexed _owner,\r\n\t\taddress indexed _operator,\r\n\t\tbool _approved\r\n\t  );\r\n\r\n\t  function balanceOf(address _owner) public view returns (uint256 _balance);\r\n\t  function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n\t  function exists(uint256 _tokenId) public view returns (bool _exists);\r\n\r\n\t  function approve(address _to, uint256 _tokenId) public;\r\n\t  function getApproved(uint256 _tokenId)\r\n\t\tpublic view returns (address _operator);\r\n\r\n\t  function setApprovalForAll(address _operator, bool _approved) public;\r\n\t  function isApprovedForAll(address _owner, address _operator)\r\n\t\tpublic view returns (bool);\r\n\r\n\t  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n\t  function safeTransferFrom(address _from, address _to, uint256 _tokenId)\r\n\t\tpublic;\r\n\r\n\t  function safeTransferFrom(\r\n\t\taddress _from,\r\n\t\taddress _to,\r\n\t\tuint256 _tokenId,\r\n\t\tbytes _data\r\n\t  )\r\n\t\tpublic;\r\n\t}\r\n\r\n\t/**\r\n\t * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n\t * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n\t */\r\n\tcontract ERC721Enumerable is ERC721Basic {\r\n\t  function totalSupply() public view returns (uint256);\r\n\t  function tokenOfOwnerByIndex(\r\n\t\taddress _owner,\r\n\t\tuint256 _index\r\n\t  )\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (uint256 _tokenId);\r\n\r\n\t  function tokenByIndex(uint256 _index) public view returns (uint256);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n\t * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n\t */\r\n\tcontract ERC721Metadata is ERC721Basic {\r\n\t  function name() external view returns (string _name);\r\n\t  function symbol() external view returns (string _symbol);\r\n\t  function tokenURI(uint256 _tokenId) public view returns (string);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @title ERC-721 Non-Fungible Token Standard, full implementation interface\r\n\t * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n\t */\r\n\tcontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\r\n\t}\r\n\r\n\t/**\r\n\t * @title ERC721 Non-Fungible Token Standard basic implementation\r\n\t * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n\t */\r\n\tcontract ERC721BasicToken is SupportsInterfaceWithLookup, ERC721Basic {\r\n\r\n\t  bytes4 private constant InterfaceId_ERC721 = 0x80ac58cd;\r\n\t  /*\r\n\t   * 0x80ac58cd ===\r\n\t   *   bytes4(keccak256('balanceOf(address)')) ^\r\n\t   *   bytes4(keccak256('ownerOf(uint256)')) ^\r\n\t   *   bytes4(keccak256('approve(address,uint256)')) ^\r\n\t   *   bytes4(keccak256('getApproved(uint256)')) ^\r\n\t   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\r\n\t   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\r\n\t   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n\t   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\r\n\t   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\r\n\t   */\r\n\r\n\t  bytes4 private constant InterfaceId_ERC721Exists = 0x4f558e79;\r\n\t  /*\r\n\t   * 0x4f558e79 ===\r\n\t   *   bytes4(keccak256('exists(uint256)'))\r\n\t   */\r\n\r\n\t  using SafeMath for uint256;\r\n\t  using AddressUtils for address;\r\n\r\n\t  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n\t  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n\t  bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n\t  // Mapping from token ID to owner\r\n\t  mapping (uint256 => address) internal tokenOwner;\r\n\r\n\t  // Mapping from token ID to approved address\r\n\t  mapping (uint256 => address) internal tokenApprovals;\r\n\r\n\t  // Mapping from owner to number of owned token\r\n\t  mapping (address => uint256) internal ownedTokensCount;\r\n\r\n\t  // Mapping from owner to operator approvals\r\n\t  mapping (address => mapping (address => bool)) internal operatorApprovals;\r\n\r\n\t  /**\r\n\t   * @dev Guarantees msg.sender is owner of the given token\r\n\t   * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\r\n\t   */\r\n\t  modifier onlyOwnerOf(uint256 _tokenId) {\r\n\t\trequire(ownerOf(_tokenId) == msg.sender);\r\n\t\t_;\r\n\t  }\r\n\r\n\t  /**\r\n\t   * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\r\n\t   * @param _tokenId uint256 ID of the token to validate\r\n\t   */\r\n\t  modifier canTransfer(uint256 _tokenId) {\r\n\t\trequire(isApprovedOrOwner(msg.sender, _tokenId));\r\n\t\t_;\r\n\t  }\r\n\r\n\t  constructor()\r\n\t\tpublic\r\n\t  {\r\n\t\t// register the supported interfaces to conform to ERC721 via ERC165\r\n\t\t_registerInterface(InterfaceId_ERC721);\r\n\t\t_registerInterface(InterfaceId_ERC721Exists);\r\n\t  }\r\n\r\n\t  /**\r\n\t   * @dev Gets the balance of the specified address\r\n\t   * @param _owner address to query the balance of\r\n\t   * @return uint256 representing the amount owned by the passed address\r\n\t   */\r\n\t  function balanceOf(address _owner) public view returns (uint256) {\r\n\t\trequire(_owner != address(0));\r\n\t\treturn ownedTokensCount[_owner];\r\n\t  }\r\n\r\n\t  /**\r\n\t   * @dev Gets the owner of the specified token ID\r\n\t   * @param _tokenId uint256 ID of the token to query the owner of\r\n\t   * @return owner address currently marked as the owner of the given token ID\r\n\t   */\r\n\t  function ownerOf(uint256 _tokenId) public view returns (address) {\r\n\t\taddress owner = tokenOwner[_tokenId];\r\n\t\trequire(owner != address(0));\r\n\t\treturn owner;\r\n\t  }\r\n\r\n\t  /**\r\n\t   * @dev Returns whether the specified token exists\r\n\t   * @param _tokenId uint256 ID of the token to query the existence of\r\n\t   * @return whether the token exists\r\n\t   */\r\n\t  function exists(uint256 _tokenId) public view returns (bool) {\r\n\t\taddress owner = tokenOwner[_tokenId];\r\n\t\treturn owner != address(0);\r\n\t  }\r\n\r\n\t  /**\r\n\t   * @dev Approves another address to transfer the given token ID\r\n\t   * The zero address indicates there is no approved address.\r\n\t   * There can only be one approved address per token at a given time.\r\n\t   * Can only be called by the token owner or an approved operator.\r\n\t   * @param _to address to be approved for the given token ID\r\n\t   * @param _tokenId uint256 ID of the token to be approved\r\n\t   */\r\n\t  function approve(address _to, uint256 _tokenId) public {\r\n\t\taddress owner = ownerOf(_tokenId);\r\n\t\trequire(_to != owner);\r\n\t\trequire(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n\t\ttokenApprovals[_tokenId] = _to;\r\n\t\temit Approval(owner, _to, _tokenId);\r\n\t  }\r\n\r\n\t  /**\r\n\t   * @dev Gets the approved address for a token ID, or zero if no address set\r\n\t   * @param _tokenId uint256 ID of the token to query the approval of\r\n\t   * @return address currently approved for the given token ID\r\n\t   */\r\n\t  function getApproved(uint256 _tokenId) public view returns (address) {\r\n\t\treturn tokenApprovals[_tokenId];\r\n\t  }\r\n\r\n\t  /**\r\n\t   * @dev Sets or unsets the approval of a given operator\r\n\t   * An operator is allowed to transfer all tokens of the sender on their behalf\r\n\t   * @param _to operator address to set the approval\r\n\t   * @param _approved representing the status of the approval to be set\r\n\t   */\r\n\t  function setApprovalForAll(address _to, bool _approved) public {\r\n\t\trequire(_to != msg.sender);\r\n\t\toperatorApprovals[msg.sender][_to] = _approved;\r\n\t\temit ApprovalForAll(msg.sender, _to, _approved);\r\n\t  }\r\n\r\n\t  /**\r\n\t   * @dev Tells whether an operator is approved by a given owner\r\n\t   * @param _owner owner address which you want to query the approval of\r\n\t   * @param _operator operator address which you want to query the approval of\r\n\t   * @return bool whether the given operator is approved by the given owner\r\n\t   */\r\n\t  function isApprovedForAll(\r\n\t\taddress _owner,\r\n\t\taddress _operator\r\n\t  )\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (bool)\r\n\t  {\r\n\t\treturn operatorApprovals[_owner][_operator];\r\n\t  }\r\n\r\n\t  /**\r\n\t   * @dev Transfers the ownership of a given token ID to another address\r\n\t   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\r\n\t   * Requires the msg sender to be the owner, approved, or operator\r\n\t   * @param _from current owner of the token\r\n\t   * @param _to address to receive the ownership of the given token ID\r\n\t   * @param _tokenId uint256 ID of the token to be transferred\r\n\t  */\r\n\t  function transferFrom(\r\n\t\taddress _from,\r\n\t\taddress _to,\r\n\t\tuint256 _tokenId\r\n\t  )\r\n\t\tpublic\r\n\t\tcanTransfer(_tokenId)\r\n\t  {\r\n\t\trequire(_from != address(0));\r\n\t\trequire(_to != address(0));\r\n\r\n\t\tclearApproval(_from, _tokenId);\r\n\t\tremoveTokenFrom(_from, _tokenId);\r\n\t\taddTokenTo(_to, _tokenId);\r\n\r\n\t\temit Transfer(_from, _to, _tokenId);\r\n\t  }\r\n\r\n\t  /**\r\n\t   * @dev Safely transfers the ownership of a given token ID to another address\r\n\t   * If the target address is a contract, it must implement `onERC721Received`,\r\n\t   * which is called upon a safe transfer, and return the magic value\r\n\t   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n\t   * the transfer is reverted.\r\n\t   *\r\n\t   * Requires the msg sender to be the owner, approved, or operator\r\n\t   * @param _from current owner of the token\r\n\t   * @param _to address to receive the ownership of the given token ID\r\n\t   * @param _tokenId uint256 ID of the token to be transferred\r\n\t  */\r\n\t  function safeTransferFrom(\r\n\t\taddress _from,\r\n\t\taddress _to,\r\n\t\tuint256 _tokenId\r\n\t  )\r\n\t\tpublic\r\n\t\tcanTransfer(_tokenId)\r\n\t  {\r\n\t\t// solium-disable-next-line arg-overflow\r\n\t\tsafeTransferFrom(_from, _to, _tokenId, \"\");\r\n\t  }\r\n\r\n\t  /**\r\n\t   * @dev Safely transfers the ownership of a given token ID to another address\r\n\t   * If the target address is a contract, it must implement `onERC721Received`,\r\n\t   * which is called upon a safe transfer, and return the magic value\r\n\t   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n\t   * the transfer is reverted.\r\n\t   * Requires the msg sender to be the owner, approved, or operator\r\n\t   * @param _from current owner of the token\r\n\t   * @param _to address to receive the ownership of the given token ID\r\n\t   * @param _tokenId uint256 ID of the token to be transferred\r\n\t   * @param _data bytes data to send along with a safe transfer check\r\n\t   */\r\n\t  function safeTransferFrom(\r\n\t\taddress _from,\r\n\t\taddress _to,\r\n\t\tuint256 _tokenId,\r\n\t\tbytes _data\r\n\t  )\r\n\t\tpublic\r\n\t\tcanTransfer(_tokenId)\r\n\t  {\r\n\t\ttransferFrom(_from, _to, _tokenId);\r\n\t\t// solium-disable-next-line arg-overflow\r\n\t\trequire(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\r\n\t  }\r\n\r\n\t  /**\r\n\t   * @dev Returns whether the given spender can transfer a given token ID\r\n\t   * @param _spender address of the spender to query\r\n\t   * @param _tokenId uint256 ID of the token to be transferred\r\n\t   * @return bool whether the msg.sender is approved for the given token ID,\r\n\t   *  is an operator of the owner, or is the owner of the token\r\n\t   */\r\n\t  function isApprovedOrOwner(\r\n\t\taddress _spender,\r\n\t\tuint256 _tokenId\r\n\t  )\r\n\t\tinternal\r\n\t\tview\r\n\t\treturns (bool)\r\n\t  {\r\n\t\taddress owner = ownerOf(_tokenId);\r\n\t\t// Disable solium check because of\r\n\t\t// https://github.com/duaraghav8/Solium/issues/175\r\n\t\t// solium-disable-next-line operator-whitespace\r\n\t\treturn (\r\n\t\t  _spender == owner ||\r\n\t\t  getApproved(_tokenId) == _spender ||\r\n\t\t  isApprovedForAll(owner, _spender)\r\n\t\t);\r\n\t  }\r\n\r\n\t  /**\r\n\t   * @dev Internal function to mint a new token\r\n\t   * Reverts if the given token ID already exists\r\n\t   * @param _to The address that will own the minted token\r\n\t   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n\t   */\r\n\t  function _mint(address _to, uint256 _tokenId) internal {\r\n\t\trequire(_to != address(0));\r\n\t\taddTokenTo(_to, _tokenId);\r\n\t\temit Transfer(address(0), _to, _tokenId);\r\n\t  }\r\n\r\n\t  /**\r\n\t   * @dev Internal function to burn a specific token\r\n\t   * Reverts if the token does not exist\r\n\t   * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n\t   */\r\n\t  function _burn(address _owner, uint256 _tokenId) internal {\r\n\t\tclearApproval(_owner, _tokenId);\r\n\t\tremoveTokenFrom(_owner, _tokenId);\r\n\t\temit Transfer(_owner, address(0), _tokenId);\r\n\t  }\r\n\r\n\t  /**\r\n\t   * @dev Internal function to clear current approval of a given token ID\r\n\t   * Reverts if the given address is not indeed the owner of the token\r\n\t   * @param _owner owner of the token\r\n\t   * @param _tokenId uint256 ID of the token to be transferred\r\n\t   */\r\n\t  function clearApproval(address _owner, uint256 _tokenId) internal {\r\n\t\trequire(ownerOf(_tokenId) == _owner);\r\n\t\tif (tokenApprovals[_tokenId] != address(0)) {\r\n\t\t  tokenApprovals[_tokenId] = address(0);\r\n\t\t}\r\n\t  }\r\n\r\n\t  /**\r\n\t   * @dev Internal function to add a token ID to the list of a given address\r\n\t   * @param _to address representing the new owner of the given token ID\r\n\t   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n\t   */\r\n\t  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n\t\trequire(tokenOwner[_tokenId] == address(0));\r\n\t\ttokenOwner[_tokenId] = _to;\r\n\t\townedTokensCount[_to] = ownedTokensCount[_to].add(1);\r\n\t  }\r\n\r\n\t  /**\r\n\t   * @dev Internal function to remove a token ID from the list of a given address\r\n\t   * @param _from address representing the previous owner of the given token ID\r\n\t   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n\t   */\r\n\t  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n\t\trequire(ownerOf(_tokenId) == _from);\r\n\t\townedTokensCount[_from] = ownedTokensCount[_from].sub(1);\r\n\t\ttokenOwner[_tokenId] = address(0);\r\n\t  }\r\n\r\n\t  /**\r\n\t   * @dev Internal function to invoke `onERC721Received` on a target address\r\n\t   * The call is not executed if the target address is not a contract\r\n\t   * @param _from address representing the previous owner of the given token ID\r\n\t   * @param _to target address that will receive the tokens\r\n\t   * @param _tokenId uint256 ID of the token to be transferred\r\n\t   * @param _data bytes optional data to send along with the call\r\n\t   * @return whether the call correctly returned the expected magic value\r\n\t   */\r\n\t  function checkAndCallSafeTransfer(\r\n\t\taddress _from,\r\n\t\taddress _to,\r\n\t\tuint256 _tokenId,\r\n\t\tbytes _data\r\n\t  )\r\n\t\tinternal\r\n\t\treturns (bool)\r\n\t  {\r\n\t\tif (!_to.isContract()) {\r\n\t\t  return true;\r\n\t\t}\r\n\t\tbytes4 retval = ERC721Receiver(_to).onERC721Received(\r\n\t\t  msg.sender, _from, _tokenId, _data);\r\n\t\treturn (retval == ERC721_RECEIVED);\r\n\t  }\r\n\t}\r\n\r\n\t/**\r\n\t * @title Full ERC721 Token\r\n\t * This implementation includes all the required and some optional functionality of the ERC721 standard\r\n\t * Moreover, it includes approve all functionality using operator terminology\r\n\t * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n\t */\r\n\tcontract ERC721Token is SupportsInterfaceWithLookup, ERC721BasicToken, ERC721 {\r\n\r\n\t  bytes4 private constant InterfaceId_ERC721Enumerable = 0x780e9d63;\r\n\t  /**\r\n\t   * 0x780e9d63 ===\r\n\t   *   bytes4(keccak256('totalSupply()')) ^\r\n\t   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\r\n\t   *   bytes4(keccak256('tokenByIndex(uint256)'))\r\n\t   */\r\n\r\n\t  bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\r\n\t  /**\r\n\t   * 0x5b5e139f ===\r\n\t   *   bytes4(keccak256('name()')) ^\r\n\t   *   bytes4(keccak256('symbol()')) ^\r\n\t   *   bytes4(keccak256('tokenURI(uint256)'))\r\n\t   */\r\n\r\n\t  // Token name\r\n\t  string internal name_;\r\n\r\n\t  // Token symbol\r\n\t  string internal symbol_;\r\n\r\n\t  // Mapping from owner to list of owned token IDs\r\n\t  mapping(address => uint256[]) internal ownedTokens;\r\n\r\n\t  // Mapping from token ID to index of the owner tokens list\r\n\t  mapping(uint256 => uint256) internal ownedTokensIndex;\r\n\r\n\t  // Array with all token ids, used for enumeration\r\n\t  uint256[] internal allTokens;\r\n\r\n\t  // Mapping from token id to position in the allTokens array\r\n\t  mapping(uint256 => uint256) internal allTokensIndex;\r\n\r\n\t  // Optional mapping for token URIs\r\n\t  mapping(uint256 => string) internal tokenURIs;\r\n\r\n\t  /**\r\n\t   * @dev Constructor function\r\n\t   */\r\n\t  constructor(string _name, string _symbol) public {\r\n\t\tname_ = _name;\r\n\t\tsymbol_ = _symbol;\r\n\r\n\t\t// register the supported interfaces to conform to ERC721 via ERC165\r\n\t\t_registerInterface(InterfaceId_ERC721Enumerable);\r\n\t\t_registerInterface(InterfaceId_ERC721Metadata);\r\n\t  }\r\n\r\n\t  /**\r\n\t   * @dev Gets the token name\r\n\t   * @return string representing the token name\r\n\t   */\r\n\t  function name() external view returns (string) {\r\n\t\treturn name_;\r\n\t  }\r\n\r\n\t  /**\r\n\t   * @dev Gets the token symbol\r\n\t   * @return string representing the token symbol\r\n\t   */\r\n\t  function symbol() external view returns (string) {\r\n\t\treturn symbol_;\r\n\t  }\r\n\r\n\t  /**\r\n\t   * @dev Returns an URI for a given token ID\r\n\t   * Throws if the token ID does not exist. May return an empty string.\r\n\t   * @param _tokenId uint256 ID of the token to query\r\n\t   */\r\n\t  function tokenURI(uint256 _tokenId) public view returns (string) {\r\n\t\trequire(exists(_tokenId));\r\n\t\treturn tokenURIs[_tokenId];\r\n\t  }\r\n\r\n\t  /**\r\n\t   * @dev Gets the token ID at a given index of the tokens list of the requested owner\r\n\t   * @param _owner address owning the tokens list to be accessed\r\n\t   * @param _index uint256 representing the index to be accessed of the requested tokens list\r\n\t   * @return uint256 token ID at the given index of the tokens list owned by the requested address\r\n\t   */\r\n\t  function tokenOfOwnerByIndex(\r\n\t\taddress _owner,\r\n\t\tuint256 _index\r\n\t  )\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t  {\r\n\t\trequire(_index < balanceOf(_owner));\r\n\t\treturn ownedTokens[_owner][_index];\r\n\t  }\r\n\r\n\t  /**\r\n\t   * @dev Gets the total amount of tokens stored by the contract\r\n\t   * @return uint256 representing the total amount of tokens\r\n\t   */\r\n\t  function totalSupply() public view returns (uint256) {\r\n\t\treturn allTokens.length;\r\n\t  }\r\n\r\n\t  /**\r\n\t   * @dev Gets the token ID at a given index of all the tokens in this contract\r\n\t   * Reverts if the index is greater or equal to the total number of tokens\r\n\t   * @param _index uint256 representing the index to be accessed of the tokens list\r\n\t   * @return uint256 token ID at the given index of the tokens list\r\n\t   */\r\n\t  function tokenByIndex(uint256 _index) public view returns (uint256) {\r\n\t\trequire(_index < totalSupply());\r\n\t\treturn allTokens[_index];\r\n\t  }\r\n\r\n\t  /**\r\n\t   * @dev Internal function to set the token URI for a given token\r\n\t   * Reverts if the token ID does not exist\r\n\t   * @param _tokenId uint256 ID of the token to set its URI\r\n\t   * @param _uri string URI to assign\r\n\t   */\r\n\t  function _setTokenURI(uint256 _tokenId, string _uri) internal {\r\n\t\trequire(exists(_tokenId));\r\n\t\ttokenURIs[_tokenId] = _uri;\r\n\t  }\r\n\r\n\t  /**\r\n\t   * @dev Internal function to add a token ID to the list of a given address\r\n\t   * @param _to address representing the new owner of the given token ID\r\n\t   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n\t   */\r\n\t  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n\t\tsuper.addTokenTo(_to, _tokenId);\r\n\t\tuint256 length = ownedTokens[_to].length;\r\n\t\townedTokens[_to].push(_tokenId);\r\n\t\townedTokensIndex[_tokenId] = length;\r\n\t  }\r\n\r\n\t  /**\r\n\t   * @dev Internal function to remove a token ID from the list of a given address\r\n\t   * @param _from address representing the previous owner of the given token ID\r\n\t   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n\t   */\r\n\t  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n\t\tsuper.removeTokenFrom(_from, _tokenId);\r\n\r\n\t\tuint256 tokenIndex = ownedTokensIndex[_tokenId];\r\n\t\tuint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\r\n\t\tuint256 lastToken = ownedTokens[_from][lastTokenIndex];\r\n\r\n\t\townedTokens[_from][tokenIndex] = lastToken;\r\n\t\townedTokens[_from][lastTokenIndex] = 0;\r\n\t\t// Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\r\n\t\t// be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\r\n\t\t// the lastToken to the first position, and then dropping the element placed in the last position of the list\r\n\r\n\t\townedTokens[_from].length--;\r\n\t\townedTokensIndex[_tokenId] = 0;\r\n\t\townedTokensIndex[lastToken] = tokenIndex;\r\n\t  }\r\n\r\n\t  /**\r\n\t   * @dev Internal function to mint a new token\r\n\t   * Reverts if the given token ID already exists\r\n\t   * @param _to address the beneficiary that will own the minted token\r\n\t   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n\t   */\r\n\t  function _mint(address _to, uint256 _tokenId) internal {\r\n\t\tsuper._mint(_to, _tokenId);\r\n\r\n\t\tallTokensIndex[_tokenId] = allTokens.length;\r\n\t\tallTokens.push(_tokenId);\r\n\t  }\r\n\r\n\t  /**\r\n\t   * @dev Internal function to burn a specific token\r\n\t   * Reverts if the token does not exist\r\n\t   * @param _owner owner of the token to burn\r\n\t   * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n\t   */\r\n\t  function _burn(address _owner, uint256 _tokenId) internal {\r\n\t\tsuper._burn(_owner, _tokenId);\r\n\r\n\t\t// Clear metadata (if any)\r\n\t\tif (bytes(tokenURIs[_tokenId]).length != 0) {\r\n\t\t  delete tokenURIs[_tokenId];\r\n\t\t}\r\n\r\n\t\t// Reorg all tokens array\r\n\t\tuint256 tokenIndex = allTokensIndex[_tokenId];\r\n\t\tuint256 lastTokenIndex = allTokens.length.sub(1);\r\n\t\tuint256 lastToken = allTokens[lastTokenIndex];\r\n\r\n\t\tallTokens[tokenIndex] = lastToken;\r\n\t\tallTokens[lastTokenIndex] = 0;\r\n\r\n\t\tallTokens.length--;\r\n\t\tallTokensIndex[_tokenId] = 0;\r\n\t\tallTokensIndex[lastToken] = tokenIndex;\r\n\t  }\r\n\r\n\t}\r\n\r\n\tcontract dAppCaps is ERC721Token, Ownable, Fallback {\r\n\r\n\t  /*** EVENTS ***/\r\n\t  /// The event emitted (useable by web3) when a token is purchased\r\n\t  event BoughtToken(address indexed buyer, uint256 tokenId);\r\n\r\n\t  /*** CONSTANTS ***/\r\n      string public constant company = \"Qwoyn, LLC \";\r\n      string public constant contact = \"https://qwoyn.io\";\r\n      string public constant author  = \"Daniel Pittman\";\r\n\r\n\t  \r\n\t  uint8 constant TITLE_MAX_LENGTH = 64;\r\n\t  uint256 constant DESCRIPTION_MAX_LENGTH = 100000;\r\n\r\n\t  /*** DATA TYPES ***/\r\n\r\n\t  /// Price set by contract owner for each token in Wei\r\n\t  /// @dev If you'd like a different price for each token type, you will\r\n\t  ///   need to use a mapping like: `mapping(uint256 => uint256) tokenTypePrices;`\r\n\t  uint256 currentPrice = 0;\r\n\t  \r\n\t  mapping(uint256 => uint256) tokenTypes;\r\n\t  mapping(uint256 => string)  tokenTitles;\t  \r\n\t  mapping(uint256 => string)  tokenDescriptions;\r\n\t  mapping(uint256 => string)  specialQualities;\t  \r\n\t  mapping(uint256 => string)  originalImageUrls;\t  \r\n\t  mapping(uint256 => string)  tokenClasses;\r\n\t  mapping(uint256 => string)  iptcKeywords;\r\n\t  mapping(uint256 => string)  imageDescriptions;\r\n\t  \r\n\r\n\t  constructor() ERC721Token(\"dAppCaps\", \"CAPS\") public {\r\n\t\t// any init code when you deploy the contract would run here\r\n\t  }\r\n\r\n\t  /// Requires the amount of Ether be at least or more of the currentPrice\r\n\t  /// @dev Creates an instance of an token and mints it to the purchaser\r\n\t  /// @param _type The token type as an integer, dappCap and slammers noted here.\r\n\t  /// @param _title The short title of the token\r\n\t  /// @param _description Description of the token\r\n\t  function buyToken (\r\n\t\tuint256 _type,\r\n\t\tstring  _title,\r\n\t\tstring  _description,\r\n\t\tstring  _specialQuality,\r\n\t\tstring  _originalImageUrl,\r\n\t\tstring  _iptcKeyword,\r\n\t\tstring  _imageDescription,\r\n\t\tstring  _tokenClass\r\n\t  ) public onlyOwner {\r\n\t\tbytes memory _titleBytes = bytes(_title);\r\n\t\trequire(_titleBytes.length <= TITLE_MAX_LENGTH, \"Desription is too long\");\r\n\t\t\r\n\t\tbytes memory _descriptionBytes = bytes(_description);\r\n\t\trequire(_descriptionBytes.length <= DESCRIPTION_MAX_LENGTH, \"Description is too long\");\r\n\t\trequire(msg.value >= currentPrice, \"Amount of Ether sent too small\");\r\n\r\n\t\tuint256 index = allTokens.length + 1;\r\n\r\n\t\t_mint(msg.sender, index);\r\n\r\n\t\ttokenTypes[index]        = _type;\r\n\t\ttokenTitles[index]       = _title;\r\n\t\ttokenDescriptions[index] = _description;\r\n\t\tspecialQualities[index]  = _specialQuality;\r\n\t\tiptcKeywords[index]      = _iptcKeyword;\r\n\t\timageDescriptions[index] = _imageDescription;\r\n\t\ttokenClasses[index]      = _tokenClass;\r\n\t\toriginalImageUrls[index] = _originalImageUrl;\r\n\r\n\t\temit BoughtToken(msg.sender, index);\r\n\t  }\r\n\r\n\t  /**\r\n\t   * @dev Returns all of the tokens that the user owns\r\n\t   * @return An array of token indices\r\n\t   */\r\n\t  function myTokens()\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (\r\n\t\t  uint256[]\r\n\t\t)\r\n\t  {\r\n\t\treturn ownedTokens[msg.sender];\r\n\t  }\r\n\r\n\t  /// @notice Returns all the relevant information about a specific token\r\n\t  /// @param _tokenId The ID of the token of interest\r\n\t  function viewTokenMeta(uint256 _tokenId)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (\r\n\t\t  uint256 tokenType_,\r\n\t\t  string specialQuality_,\r\n\t\t  string  tokenTitle_,\r\n\t\t  string  tokenDescription_,\r\n\t\t  string  iptcKeyword_,\r\n\t\t  string  imageDescription_,\r\n\t\t  string  tokenClass_,\r\n\t\t  string  originalImageUrl_\r\n\t  ) {\r\n\t\t  tokenType_        = tokenTypes[_tokenId];\r\n\t\t  tokenTitle_       = tokenTitles[_tokenId];\r\n\t\t  tokenDescription_ = tokenDescriptions[_tokenId];\r\n\t\t  specialQuality_   = specialQualities[_tokenId];\r\n\t\t  iptcKeyword_      = iptcKeywords[_tokenId];\r\n\t\t  imageDescription_ = imageDescriptions[_tokenId];\r\n\t\t  tokenClass_       = tokenClasses[_tokenId];\r\n\t\t  originalImageUrl_ = originalImageUrls[_tokenId];\r\n\t  }\r\n\r\n\t  /// @notice Allows the owner of this contract to set the currentPrice for each token\r\n\t  function setCurrentPrice(uint256 newPrice)\r\n\t\tpublic\r\n\t\tonlyOwner\r\n\t  {\r\n\t\t  currentPrice = newPrice;\r\n\t  }\r\n\r\n\t  /// @notice Returns the currentPrice for each token\r\n\t  function getCurrentPrice()\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (\r\n\t\tuint256 price\r\n\t  ) {\r\n\t\t  price = currentPrice;\r\n\t  }\r\n\t  /// @notice allows the owner of this contract to destroy the contract\r\n\t   function kill() public {\r\n\t\t  if(msg.sender == owner) selfdestruct(owner);\r\n\t   }  \r\n\t}", "OptimizationUsed": "0", "ContractName": "dAppCaps", "ByteCode": "0x6080604052600436106101b7576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806301ffc9a71461025457806306fdde03146102b8578063081812fc14610348578063095ea7b3146103b557806318160ddd1461040257806318b200711461042d57806319fa8f501461045a57806323b872dd146104c35780632f745c591461053057806333a8c45a146105915780633ccfd60b1461062157806341c0e1b51461063857806342842e0e1461064f57806342e94c90146106bc5780634f558e79146107135780634f6ccce714610758578063552079dc146107995780636352211e146107b05780636904c94d1461081d57806370a08231146108ad578063715018a6146109045780637dd7d32d1461091b5780638da5cb5b14610c50578063949e8acd14610ca757806395d89b4114610d13578063a22cb46514610da3578063a6c3e6b914610df2578063b88d4fde14610e82578063c87b56dd14610f35578063cef35a4b14610fdb578063d7bb99ba146111f2578063e985e9c5146111fc578063eb91d37e14611277578063f10fdf5c146112a2578063f2fde38b146112cd575b60003411801561020657506000600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054115b151561021157600080fd5b33600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550005b34801561026057600080fd5b5061029e60048036038101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050611310565b604051808215151515815260200191505060405180910390f35b3480156102c457600080fd5b506102cd611377565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561030d5780820151818401526020810190506102f2565b50505050905090810190601f16801561033a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561035457600080fd5b5061037360048036038101908080359060200190929190505050611419565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103c157600080fd5b50610400600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611456565b005b34801561040e57600080fd5b5061041761159b565b6040518082815260200191505060405180910390f35b34801561043957600080fd5b50610458600480360381019080803590602001909291905050506115a8565b005b34801561046657600080fd5b5061046f61160e565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b3480156104cf57600080fd5b5061052e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611635565b005b34801561053c57600080fd5b5061057b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611742565b6040518082815260200191505060405180910390f35b34801561059d57600080fd5b506105a66117b9565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105e65780820151818401526020810190506105cb565b50505050905090810190601f1680156106135780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561062d57600080fd5b506106366117f2565b005b34801561064457600080fd5b5061064d6118d0565b005b34801561065b57600080fd5b506106ba600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611963565b005b3480156106c857600080fd5b506106fd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061199b565b6040518082815260200191505060405180910390f35b34801561071f57600080fd5b5061073e600480360381019080803590602001909291905050506119b3565b604051808215151515815260200191505060405180910390f35b34801561076457600080fd5b5061078360048036038101908080359060200190929190505050611a25565b6040518082815260200191505060405180910390f35b3480156107a557600080fd5b506107ae611a5d565b005b3480156107bc57600080fd5b506107db60048036038101908080359060200190929190505050611aac565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561082957600080fd5b50610832611b2a565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610872578082015181840152602081019050610857565b50505050905090810190601f16801561089f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156108b957600080fd5b506108ee600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611b63565b6040518082815260200191505060405180910390f35b34801561091057600080fd5b50610919611be7565b005b34801561092757600080fd5b5061094660048036038101908080359060200190929190505050611cec565b604051808981526020018060200180602001806020018060200180602001806020018060200188810388528f818151815260200191508051906020019080838360005b838110156109a4578082015181840152602081019050610989565b50505050905090810190601f1680156109d15780820380516001836020036101000a031916815260200191505b5088810387528e818151815260200191508051906020019080838360005b83811015610a0a5780820151818401526020810190506109ef565b50505050905090810190601f168015610a375780820380516001836020036101000a031916815260200191505b5088810386528d818151815260200191508051906020019080838360005b83811015610a70578082015181840152602081019050610a55565b50505050905090810190601f168015610a9d5780820380516001836020036101000a031916815260200191505b5088810385528c818151815260200191508051906020019080838360005b83811015610ad6578082015181840152602081019050610abb565b50505050905090810190601f168015610b035780820380516001836020036101000a031916815260200191505b5088810384528b818151815260200191508051906020019080838360005b83811015610b3c578082015181840152602081019050610b21565b50505050905090810190601f168015610b695780820380516001836020036101000a031916815260200191505b5088810383528a818151815260200191508051906020019080838360005b83811015610ba2578082015181840152602081019050610b87565b50505050905090810190601f168015610bcf5780820380516001836020036101000a031916815260200191505b50888103825289818151815260200191508051906020019080838360005b83811015610c08578082015181840152602081019050610bed565b50505050905090810190601f168015610c355780820380516001836020036101000a031916815260200191505b509f5050505050505050505050505050505060405180910390f35b348015610c5c57600080fd5b50610c656121dc565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610cb357600080fd5b50610cbc612202565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610cff578082015181840152602081019050610ce4565b505050509050019250505060405180910390f35b348015610d1f57600080fd5b50610d28612297565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610d68578082015181840152602081019050610d4d565b50505050905090810190601f168015610d955780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610daf57600080fd5b50610df0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050612339565b005b348015610dfe57600080fd5b50610e07612475565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610e47578082015181840152602081019050610e2c565b50505050905090810190601f168015610e745780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610e8e57600080fd5b50610f33600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506124ae565b005b348015610f4157600080fd5b50610f60600480360381019080803590602001909291905050506124ed565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610fa0578082015181840152602081019050610f85565b50505050905090810190601f168015610fcd5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610fe757600080fd5b506111f060048036038101908080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506125b6565b005b6111fa612930565b005b34801561120857600080fd5b5061125d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612a7e565b604051808215151515815260200191505060405180910390f35b34801561128357600080fd5b5061128c612b12565b6040518082815260200191505060405180910390f35b3480156112ae57600080fd5b506112b7612b1c565b6040518082815260200191505060405180910390f35b3480156112d957600080fd5b5061130e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612b63565b005b6000806000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b606060058054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561140f5780601f106113e45761010080835404028352916020019161140f565b820191906000526020600020905b8154815290600101906020018083116113f257829003601f168201915b5050505050905090565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061146182611aac565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561149e57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806114de57506114dd8133612a7e565b5b15156114e957600080fd5b826002600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b6000600980549050905090565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561160457600080fd5b80600f8190555050565b6301ffc9a77c01000000000000000000000000000000000000000000000000000000000281565b806116403382612bcb565b151561164b57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415151561168757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156116c357600080fd5b6116cd8483612c60565b6116d78483612d63565b6116e18383612f7b565b818373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a450505050565b600061174d83611b63565b8210151561175a57600080fd5b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811015156117a657fe5b9060005260206000200154905092915050565b6040805190810160405280601081526020017f68747470733a2f2f71776f796e2e696f0000000000000000000000000000000081525081565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561184e57600080fd5b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f193505050501580156118cd573d6000803e3d6000fd5b50565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561196157600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b565b8061196e3382612bcb565b151561197957600080fd5b61199584848460206040519081016040528060008152506124ae565b50505050565b600e6020528060005260406000206000915090505481565b6000806001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415915050919050565b6000611a2f61159b565b82101515611a3c57600080fd5b600982815481101515611a4b57fe5b90600052602060002001549050919050565b683635c9adc5dea00000600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6000806001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611b2157600080fd5b80915050919050565b6040805190810160405280600b81526020017f51776f796e2c204c4c432000000000000000000000000000000000000000000081525081565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515611ba057600080fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611c4357600080fd5b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482060405160405180910390a26000600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60006060806060806060806060601060008a8152602001908152602001600020549750601160008a81526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611db65780601f10611d8b57610100808354040283529160200191611db6565b820191906000526020600020905b815481529060010190602001808311611d9957829003601f168201915b50505050509550601260008a81526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611e645780601f10611e3957610100808354040283529160200191611e64565b820191906000526020600020905b815481529060010190602001808311611e4757829003601f168201915b50505050509450601360008a81526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611f125780601f10611ee757610100808354040283529160200191611f12565b820191906000526020600020905b815481529060010190602001808311611ef557829003601f168201915b50505050509650601660008a81526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611fc05780601f10611f9557610100808354040283529160200191611fc0565b820191906000526020600020905b815481529060010190602001808311611fa357829003601f168201915b50505050509350601760008a81526020019081526020016000208054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561206e5780601f106120435761010080835404028352916020019161206e565b820191906000526020600020905b81548152906001019060200180831161205157829003601f168201915b50505050509250601560008a81526020019081526020016000208054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561211c5780601f106120f15761010080835404028352916020019161211c565b820191906000526020600020905b8154815290600101906020018083116120ff57829003601f168201915b50505050509150601460008a81526020019081526020016000208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156121ca5780601f1061219f576101008083540402835291602001916121ca565b820191906000526020600020905b8154815290600101906020018083116121ad57829003601f168201915b50505050509050919395975091939597565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561228d57602002820191906000526020600020905b815481526020019060010190808311612279575b5050505050905090565b606060068054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561232f5780601f106123045761010080835404028352916020019161232f565b820191906000526020600020905b81548152906001019060200180831161231257829003601f168201915b5050505050905090565b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561237457600080fd5b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051808215151515815260200191505060405180910390a35050565b6040805190810160405280600e81526020017f44616e69656c20506974746d616e00000000000000000000000000000000000081525081565b816124b93382612bcb565b15156124c457600080fd5b6124cf858585611635565b6124db85858585613052565b15156124e657600080fd5b5050505050565b60606124f8826119b3565b151561250357600080fd5b600b60008381526020019081526020016000208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156125aa5780601f1061257f576101008083540402835291602001916125aa565b820191906000526020600020905b81548152906001019060200180831161258d57829003601f168201915b50505050509050919050565b6060806000600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561261757600080fd5b899250604060ff16835111151515612697576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f44657372697074696f6e20697320746f6f206c6f6e670000000000000000000081525060200191505060405180910390fd5b889150620186a0825111151515612716576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f4465736372697074696f6e20697320746f6f206c6f6e6700000000000000000081525060200191505060405180910390fd5b600f543410151515612790576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f416d6f756e74206f662045746865722073656e7420746f6f20736d616c6c000081525060200191505060405180910390fd5b60016009805490500190506127a53382613274565b8a6010600083815260200190815260200160002081905550896011600083815260200190815260200160002090805190602001906127e492919061373e565b508860126000838152602001908152602001600020908051906020019061280c92919061373e565b508760136000838152602001908152602001600020908051906020019061283492919061373e565b508560166000838152602001908152602001600020908051906020019061285c92919061373e565b508460176000838152602001908152602001600020908051906020019061288492919061373e565b50836015600083815260200190815260200160002090805190602001906128ac92919061373e565b50866014600083815260200190815260200160002090805190602001906128d492919061373e565b503373ffffffffffffffffffffffffffffffffffffffff167f75424253909c2f4460f8a59099700e980f5b484608c4fdd79f600f5162ac88a5826040518082815260200191505060405180910390a25050505050505050505050565b66038d7ea4c680003410151561294557600080fd5b34600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550600e6000600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115612a7c5733600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000600f54905090565b6000600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612bbf57600080fd5b612bc8816132cb565b50565b600080612bd783611aac565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480612c4657508373ffffffffffffffffffffffffffffffffffffffff16612c2e84611419565b73ffffffffffffffffffffffffffffffffffffffff16145b80612c575750612c568185612a7e565b5b91505092915050565b8173ffffffffffffffffffffffffffffffffffffffff16612c8082611aac565b73ffffffffffffffffffffffffffffffffffffffff16141515612ca257600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515612d5f5760006002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5050565b6000806000612d7285856133c7565b60086000858152602001908152602001600020549250612dde6001600760008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490506134f690919063ffffffff16565b9150600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481101515612e2c57fe5b9060005260206000200154905080600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002084815481101515612e8657fe5b90600052602060002001819055506000600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083815481101515612ee257fe5b9060005260206000200181905550600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480919060019003612f4291906137be565b50600060086000868152602001908152602001600020819055508260086000838152602001908152602001600020819055505050505050565b6000612f87838361350f565b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020829080600181540180825580915050906001820390600052602060002001600090919290919091505550806008600084815260200190815260200160002081905550505050565b6000806130748573ffffffffffffffffffffffffffffffffffffffff16613669565b1515613083576001915061326b565b8473ffffffffffffffffffffffffffffffffffffffff1663150b7a02338887876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561317857808201518184015260208101905061315d565b50505050905090810190601f1680156131a55780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b1580156131c757600080fd5b505af11580156131db573d6000803e3d6000fd5b505050506040513d60208110156131f157600080fd5b8101908080519060200190929190505050905063150b7a027c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505b50949350505050565b61327e828261367c565b600980549050600a60008381526020019081526020016000208190555060098190806001815401808255809150509060018203906000526020600020016000909192909190915055505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561330757600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b8173ffffffffffffffffffffffffffffffffffffffff166133e782611aac565b73ffffffffffffffffffffffffffffffffffffffff1614151561340957600080fd5b61345c6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546134f690919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060006001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600082821115151561350457fe5b818303905092915050565b600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561357d57600080fd5b816001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506136226001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461372290919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b600080823b905060008111915050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156136b857600080fd5b6136c28282612f7b565b808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b6000818301905082811015151561373557fe5b80905092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061377f57805160ff19168380011785556137ad565b828001600101855582156137ad579182015b828111156137ac578251825591602001919060010190613791565b5b5090506137ba91906137ea565b5090565b8154818355818111156137e5578183600052602060002091820191016137e491906137ea565b5b505050565b61380c91905b808211156138085760008160009055506001016137f0565b5090565b905600a165627a7a723058205db38380b042213efe2b9d13ea91e136b9e13721aa1c890786d582a4f8b2365f0029"}