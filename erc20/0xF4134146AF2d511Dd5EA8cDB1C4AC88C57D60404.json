{"Runs": "200", "SwarmSource": "bzzr://9532e7a324dfe9644c85936f67ec38c806882f8cfcb84bd2cef6b079ef4904b4", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"_querryAddress\",\"type\":\"address\"}],\"name\":\"isRestrictedAddress\",\"outputs\":[{\"name\":\"answer\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenFrozenUntilBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_frozenUntilBlock\",\"type\":\"uint256\"},{\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"freezeTransfersUntil\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_icoAddress\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_frozenUntilBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"TokenFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.11+commit.68ef5810", "ConstructorArguments": "0000000000000000000000005fb3d432bae33fcd418ede263d98d7440e7fa3ea", "SourceCode": "//\r\n/* SunContract Token Smart Contract v1.0 */   \r\n//\r\n\r\ncontract owned {\r\n\r\n  address public owner;\r\n\r\n  function owned() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner {\r\n    if (msg.sender != owner) throw;\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\ncontract tokenRecipient { \r\n  function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData);\r\n} \r\n\r\ncontract IERC20Token {\r\n\r\n  /// @return total amount of tokens\r\n  function totalSupply() constant returns (uint256 totalSupply);\r\n\r\n  /// @param _owner The address from which the balance will be retrieved\r\n  /// @return The balance\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {}\r\n\r\n  /// @notice send `_value` token to `_to` from `msg.sender`\r\n  /// @param _to The address of the recipient\r\n  /// @param _value The amount of tokens to be transferred\r\n  /// @return Whether the transfer was successful or not\r\n  function transfer(address _to, uint256 _value) returns (bool success) {}\r\n\r\n  /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n  /// @param _from The address of the sender\r\n  /// @param _to The address of the recipient\r\n  /// @param _value The amount of token to be transferred\r\n  /// @return Whether the transfer was successful or not\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\r\n\r\n  /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\r\n  /// @param _spender The address of the account able to transfer the tokens\r\n  /// @param _value The amount of wei to be approved for transfer\r\n  /// @return Whether the approval was successful or not\r\n  function approve(address _spender, uint256 _value) returns (bool success) {}\r\n\r\n  /// @param _owner The address of the account owning tokens\r\n  /// @param _spender The address of the account able to transfer the tokens\r\n  /// @return Amount of remaining tokens allowed to spent\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\r\n\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n} \r\n\r\ncontract SunContractToken is IERC20Token, owned{\r\n\r\n  /* Public variables of the token */\r\n  string public standard = \"SunContract token v1.0\";\r\n  string public name = \"SunContract\";\r\n  string public symbol = \"SNC\";\r\n  uint8 public decimals = 18;\r\n  address public icoContractAddress;\r\n  uint256 public tokenFrozenUntilBlock;\r\n\r\n  /* Private variables of the token */\r\n  uint256 supply = 0;\r\n  mapping (address => uint256) balances;\r\n  mapping (address => mapping (address => uint256)) allowances;\r\n  mapping (address => bool) restrictedAddresses;\r\n\r\n  /* Events */\r\n  event Mint(address indexed _to, uint256 _value);\r\n  event Burn(address indexed _from, uint256 _value);\r\n  event TokenFrozen(uint256 _frozenUntilBlock, string _reason);\r\n\r\n  /* Initializes contract and  sets restricted addresses */\r\n  function SunContractToken(address _icoAddress) {\r\n    restrictedAddresses[0x0] = true;\r\n    restrictedAddresses[_icoAddress] = true;\r\n    restrictedAddresses[address(this)] = true;\r\n    icoContractAddress = _icoAddress;\r\n  }\r\n\r\n  /* Returns total supply of issued tokens */\r\n  function totalSupply() constant returns (uint256 totalSupply) {\r\n    return supply;\r\n  }\r\n\r\n  /* Returns balance of address */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  /* Transfers tokens from your address to other */\r\n  function transfer(address _to, uint256 _value) returns (bool success) {\r\n    if (block.number < tokenFrozenUntilBlock) throw;    // Throw if token is frozen\r\n    if (restrictedAddresses[_to]) throw;                // Throw if recipient is restricted address\r\n    if (balances[msg.sender] < _value) throw;           // Throw if sender has insufficient balance\r\n    if (balances[_to] + _value < balances[_to]) throw;  // Throw if owerflow detected\r\n    balances[msg.sender] -= _value;                     // Deduct senders balance\r\n    balances[_to] += _value;                            // Add recivers blaance \r\n    Transfer(msg.sender, _to, _value);                  // Raise Transfer event\r\n    return true;\r\n  }\r\n\r\n  /* Approve other address to spend tokens on your account */\r\n  function approve(address _spender, uint256 _value) returns (bool success) {\r\n    if (block.number < tokenFrozenUntilBlock) throw;    // Throw if token is frozen        \r\n    allowances[msg.sender][_spender] = _value;          // Set allowance         \r\n    Approval(msg.sender, _spender, _value);             // Raise Approval event         \r\n    return true;\r\n  }\r\n\r\n  /* Approve and then communicate the approved contract in a single tx */ \r\n  function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {            \r\n    tokenRecipient spender = tokenRecipient(_spender);              // Cast spender to tokenRecipient contract         \r\n    approve(_spender, _value);                                      // Set approval to contract for _value         \r\n    spender.receiveApproval(msg.sender, _value, this, _extraData);  // Raise method on _spender contract         \r\n    return true;     \r\n  }     \r\n\r\n  /* A contract attempts to get the coins */\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {      \r\n    if (block.number < tokenFrozenUntilBlock) throw;    // Throw if token is frozen\r\n    if (restrictedAddresses[_to]) throw;                // Throw if recipient is restricted address  \r\n    if (balances[_from] < _value) throw;                // Throw if sender does not have enough balance     \r\n    if (balances[_to] + _value < balances[_to]) throw;  // Throw if overflow detected    \r\n    if (_value > allowances[_from][msg.sender]) throw;  // Throw if you do not have allowance       \r\n    balances[_from] -= _value;                          // Deduct senders balance    \r\n    balances[_to] += _value;                            // Add recipient blaance         \r\n    allowances[_from][msg.sender] -= _value;            // Deduct allowance for this address         \r\n    Transfer(_from, _to, _value);                       // Raise Transfer event\r\n    return true;     \r\n  }         \r\n\r\n  /* Get the amount of allowed tokens to spend */     \r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {         \r\n    return allowances[_owner][_spender];\r\n  }         \r\n\r\n  /* Issue new tokens */     \r\n  function mintTokens(address _to, uint256 _amount) {         \r\n    if (msg.sender != icoContractAddress) throw;            // Only ICO address can mint tokens        \r\n    if (restrictedAddresses[_to]) throw;                    // Throw if user wants to send to restricted address       \r\n    if (balances[_to] + _amount < balances[_to]) throw;     // Check for overflows\r\n    supply += _amount;                                      // Update total supply\r\n    balances[_to] += _amount;                               // Set minted coins to target\r\n    Mint(_to, _amount);                                     // Create Mint event       \r\n    Transfer(0x0, _to, _amount);                            // Create Transfer event from 0x\r\n  }     \r\n  \r\n  /* Destroy tokens from owners account */\r\n  function burnTokens(uint256 _amount) onlyOwner {\r\n    if(balances[msg.sender] < _amount) throw;               // Throw if you do not have enough balance\r\n    if(supply < _amount) throw;                             // Throw if overflow detected\r\n\r\n    supply -= _amount;                                      // Deduct totalSupply\r\n    balances[msg.sender] -= _amount;                        // Destroy coins on senders wallet\r\n    Burn(msg.sender, _amount);                              // Raise Burn event\r\n    Transfer(msg.sender, 0x0, _amount);                     // Raise transfer to 0x0\r\n  }\r\n\r\n  /* Stops all token transfers in case of emergency */\r\n  function freezeTransfersUntil(uint256 _frozenUntilBlock, string _reason) onlyOwner {      \r\n    tokenFrozenUntilBlock = _frozenUntilBlock;\r\n    TokenFrozen(_frozenUntilBlock, _reason);\r\n  }\r\n\r\n  function isRestrictedAddress(address _querryAddress) constant returns (bool answer){\r\n    return restrictedAddresses[_querryAddress];\r\n  }\r\n\r\n  //\r\n  /* This part is here only for testing and will not be included into final version */\r\n  //\r\n\r\n  //function changeICOAddress(address _newAddress) onlyOwner{\r\n  //  icoContractAddress = _newAddress;\r\n  //  restrictedAddresses[_newAddress] = true;   \r\n  //}\r\n\r\n  //function killContract() onlyOwner{\r\n  //  selfdestruct(msg.sender);\r\n  //}\r\n}", "OptimizationUsed": "0", "ContractName": "SunContractToken", "ByteCode": "0x60606040523615610105576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806303c175ff1461010757806306fdde0314610155578063095ea7b3146101ee57806318160ddd1461024557806323b872dd1461026b578063313ce567146102e15780635a3b7e421461030d5780636d1b229d146103a657806370a08231146103c65780638da5cb5b1461041057806391a67e1e1461046257806395d89b41146104885780639fe17cc214610521578063a9059cbb14610573578063aa19ed77146105ca578063cae9ca511461062d578063dd62ed3e146106c7578063f0dda65c14610730578063f2fde38b1461076f575bfe5b341561010f57fe5b61013b600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506107a5565b604051808215151515815260200191505060405180910390f35b341561015d57fe5b6101656107fc565b60405180806020018281038252838181518152602001915080519060200190808383600083146101b4575b8051825260208311156101b457602082019150602081019050602083039250610190565b505050905090810190601f1680156101e05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101f657fe5b61022b600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061089a565b604051808215151515815260200191505060405180910390f35b341561024d57fe5b61025561099d565b6040518082815260200191505060405180910390f35b341561027357fe5b6102c7600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506109a8565b604051808215151515815260200191505060405180910390f35b34156102e957fe5b6102f1610d0c565b604051808260ff1660ff16815260200191505060405180910390f35b341561031557fe5b61031d610d1f565b604051808060200182810382528381815181526020019150805190602001908083836000831461036c575b80518252602083111561036c57602082019150602081019050602083039250610348565b505050905090810190601f1680156103985780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103ae57fe5b6103c46004808035906020019091905050610dbd565b005b34156103ce57fe5b6103fa600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610f77565b6040518082815260200191505060405180910390f35b341561041857fe5b610420610fc1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561046a57fe5b610472610fe7565b6040518082815260200191505060405180910390f35b341561049057fe5b610498610fed565b60405180806020018281038252838181518152602001915080519060200190808383600083146104e7575b8051825260208311156104e7576020820191506020810190506020830392506104c3565b505050905090810190601f1680156105135780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561052957fe5b61053161108b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561057b57fe5b6105b0600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506110b1565b604051808215151515815260200191505060405180910390f35b34156105d257fe5b61062b600480803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050611300565b005b341561063557fe5b6106ad600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190505061141c565b604051808215151515815260200191505060405180910390f35b34156106cf57fe5b61071a600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061159a565b6040518082815260200191505060405180910390f35b341561073857fe5b61076d600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611622565b005b341561077757fe5b6107a3600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611865565b005b6000600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690505b919050565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108925780601f1061086757610100808354040283529160200191610892565b820191906000526020600020905b81548152906001019060200180831161087557829003601f168201915b505050505081565b60006005544310156108ac5760006000fd5b81600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a3600190505b92915050565b600060065490505b90565b60006005544310156109ba5760006000fd5b600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610a125760006000fd5b81600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610a5f5760006000fd5b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054011015610aed5760006000fd5b600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115610b775760006000fd5b81600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555081600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190505b9392505050565b600460009054906101000a900460ff1681565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610db55780601f10610d8a57610100808354040283529160200191610db5565b820191906000526020600020905b815481529060010190602001808311610d9857829003601f168201915b505050505081565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e1a5760006000fd5b80600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610e675760006000fd5b806006541015610e775760006000fd5b8060066000828254039250508190555080600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055503373ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5826040518082815260200191505060405180910390a260003373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35b5b50565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110835780601f1061105857610100808354040283529160200191611083565b820191906000526020600020905b81548152906001019060200180831161106657829003601f168201915b505050505081565b600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006005544310156110c35760006000fd5b600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561111b5760006000fd5b81600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156111685760006000fd5b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540110156111f65760006000fd5b81600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190505b92915050565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561135d5760006000fd5b816005819055507f6e3f7ba04d28a67d7a0a5559a2c6d933b1bc57e598867c94b9b7fca03d95a136828260405180838152602001806020018281038252838181518152602001915080519060200190808383600083146113dc575b8051825260208311156113dc576020820191506020810190506020830392506113b8565b505050905090810190601f1680156114085780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15b5b5050565b6000600084905061142d858561089a565b508073ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338630876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360008314611532575b8051825260208311156115325760208201915060208101905060208303925061150e565b505050905090810190601f16801561155e5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b151561157c57fe5b6102c65a03f1151561158a57fe5b505050600191505b509392505050565b6000600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b92915050565b600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561167f5760006000fd5b600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156116d75760006000fd5b600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540110156117655760006000fd5b8060066000828254019250508190555080600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885826040518082815260200191505060405180910390a28173ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35b5050565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156118c25760006000fd5b80600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b505600a165627a7a723058209532e7a324dfe9644c85936f67ec38c806882f8cfcb84bd2cef6b079ef4904b40029"}