{"Runs": "200", "SwarmSource": "bzzr://b8ab6cb3dd757926e48be8461ba6f3877a9a36f3d301bd0c1ee2212bd0828cf9", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_currentValue\",\"type\":\"uint256\"},{\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFund\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"fundAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.16+commit.d7661dd9", "ConstructorArguments": "000000000000000000000000909358627b668e7587d3c165621897df0c1c277c", "SourceCode": "pragma solidity ^0.4.11;\r\n\r\n  /**\r\n   * Provides methods to safely add, subtract and multiply uint256 numbers.\r\n   */\r\n  contract SafeMath {\r\n    uint256 constant private MAX_UINT256 =\r\n      0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n    /**\r\n     * Add two uint256 values, revert in case of overflow.\r\n     *\r\n     * @param x first value to add\r\n     * @param y second value to add\r\n     * @return x + y\r\n     */\r\n    function safeAdd (uint256 x, uint256 y)\r\n    constant internal\r\n    returns (uint256 z) {\r\n      require (x <= MAX_UINT256 - y);\r\n      return x + y;\r\n    }\r\n\r\n    /**\r\n     * Subtract one uint256 value from another, throw in case of underflow.\r\n     *\r\n     * @param x value to subtract from\r\n     * @param y value to subtract\r\n     * @return x - y\r\n     */\r\n    function safeSub (uint256 x, uint256 y)\r\n    constant internal\r\n    returns (uint256 z) {\r\n      require(x >= y);\r\n      return x - y;\r\n    }\r\n\r\n    /**\r\n     * Multiply two uint256 values, throw in case of overflow.\r\n     *\r\n     * @param x first value to multiply\r\n     * @param y second value to multiply\r\n     * @return x * y\r\n     */\r\n    function safeMul (uint256 x, uint256 y)\r\n    constant internal\r\n    returns (uint256 z) {\r\n      if (y == 0) return 0; // Prevent division by zero at the next line\r\n      require (x <= MAX_UINT256 / y);\r\n      return x * y;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ERC-20 standard token interface, as defined\r\n   * <a href=\"http://github.com/ethereum/EIPs/issues/20\">here</a>.\r\n   */\r\n  contract Token {\r\n    /**\r\n     * Get total number of tokens in circulation.\r\n     *\r\n     * @return total number of tokens in circulation\r\n     */\r\n    function totalSupply () constant returns (uint256 supply);\r\n\r\n    /**\r\n     * Get number of tokens currently belonging to given owner.\r\n     *\r\n     * @param _owner address to get number of tokens currently belonging to the\r\n     *        owner of\r\n     * @return number of tokens currently belonging to the owner of given address\r\n     */\r\n    function balanceOf (address _owner) constant returns (uint256 balance);\r\n\r\n    /**\r\n     * Transfer given number of tokens from message sender to given recipient.\r\n     *\r\n     * @param _to address to transfer tokens to the owner of\r\n     * @param _value number of tokens to transfer to the owner of given address\r\n     * @return true if tokens were transferred successfully, false otherwise\r\n     */\r\n    function transfer (address _to, uint256 _value) returns (bool success);\r\n\r\n    /**\r\n     * Transfer given number of tokens from given owner to given recipient.\r\n     *\r\n     * @param _from address to transfer tokens from the owner of\r\n     * @param _to address to transfer tokens to the owner of\r\n     * @param _value number of tokens to transfer from given owner to given\r\n     *        recipient\r\n     * @return true if tokens were transferred successfully, false otherwise\r\n     */\r\n    function transferFrom (address _from, address _to, uint256 _value)\r\n    returns (bool success);\r\n\r\n    /**\r\n     * Allow given spender to transfer given number of tokens from message sender.\r\n     *\r\n     * @param _spender address to allow the owner of to transfer tokens from\r\n     *        message sender\r\n     * @param _value number of tokens to allow to transfer\r\n     * @return true if token transfer was successfully approved, false otherwise\r\n     */\r\n    function approve (address _spender, uint256 _value) returns (bool success);\r\n\r\n    /**\r\n     * Tell how many tokens given spender is currently allowed to transfer from\r\n     * given owner.\r\n     *\r\n     * @param _owner address to get number of tokens allowed to be transferred\r\n     *        from the owner of\r\n     * @param _spender address to get number of tokens allowed to be transferred\r\n     *        by the owner of\r\n     * @return number of tokens given spender is currently allowed to transfer\r\n     *         from given owner\r\n     */\r\n    function allowance (address _owner, address _spender) constant\r\n    returns (uint256 remaining);\r\n\r\n    /**\r\n     * Logged when tokens were transferred from one owner to another.\r\n     *\r\n     * @param _from address of the owner, tokens were transferred from\r\n     * @param _to address of the owner, tokens were transferred to\r\n     * @param _value number of tokens transferred\r\n     */\r\n    event Transfer (address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    /**\r\n     * Logged when owner approved his tokens to be transferred by some spender.\r\n     *\r\n     * @param _owner owner who approved his tokens to be transferred\r\n     * @param _spender spender who were allowed to transfer the tokens belonging\r\n     *        to the owner\r\n     * @param _value number of tokens belonging to the owner, approved to be\r\n     *        transferred by the spender\r\n     */\r\n    event Approval (\r\n      address indexed _owner, address indexed _spender, uint256 _value);\r\n  }\r\n\r\n  /**\r\n   * Abstract Token Smart Contract that could be used as a base contract for\r\n   * ERC-20 token contracts.\r\n   */\r\n  contract AbstractToken is Token, SafeMath {\r\n\r\n    /**\r\n     * Address of the fund of this smart contract.\r\n     */\r\n    address fund;\r\n\r\n    /**\r\n     * Create new Abstract Token contract.\r\n     */\r\n    function AbstractToken () {\r\n      // Do nothing\r\n    }\r\n\r\n\r\n    /**\r\n     * Get number of tokens currently belonging to given owner.\r\n     *\r\n     * @param _owner address to get number of tokens currently belonging to the\r\n     *        owner of\r\n     * @return number of tokens currently belonging to the owner of given address\r\n     */\r\n     function balanceOf (address _owner) constant returns (uint256 balance) {\r\n      return accounts [_owner];\r\n    }\r\n\r\n    /**\r\n     * Transfer given number of tokens from message sender to given recipient.\r\n     *\r\n     * @param _to address to transfer tokens to the owner of\r\n     * @param _value number of tokens to transfer to the owner of given address\r\n     * @return true if tokens were transferred successfully, false otherwise\r\n     */\r\n    function transfer (address _to, uint256 _value) returns (bool success) {\r\n      uint256 feeTotal = fee();\r\n\r\n      if (accounts [msg.sender] < _value) return false;\r\n      if (_value > feeTotal && msg.sender != _to) {\r\n        accounts [msg.sender] = safeSub (accounts [msg.sender], _value);\r\n        \r\n        accounts [_to] = safeAdd (accounts [_to], safeSub(_value, feeTotal));\r\n\r\n        processFee(feeTotal);\r\n\r\n        Transfer (msg.sender, _to, safeSub(_value, feeTotal));\r\n        \r\n      }\r\n      return true;\r\n    }\r\n\r\n    /**\r\n     * Transfer given number of tokens from given owner to given recipient.\r\n     *\r\n     * @param _from address to transfer tokens from the owner of\r\n     * @param _to address to transfer tokens to the owner of\r\n     * @param _value number of tokens to transfer from given owner to given\r\n     *        recipient\r\n     * @return true if tokens were transferred successfully, false otherwise\r\n     */\r\n    function transferFrom (address _from, address _to, uint256 _value)\r\n    returns (bool success) {\r\n      uint256 feeTotal = fee();\r\n\r\n      if (allowances [_from][msg.sender] < _value) return false;\r\n      if (accounts [_from] < _value) return false;\r\n\r\n      allowances [_from][msg.sender] =\r\n        safeSub (allowances [_from][msg.sender], _value);\r\n\r\n      if (_value > feeTotal && _from != _to) {\r\n        accounts [_from] = safeSub (accounts [_from], _value);\r\n\r\n        \r\n        accounts [_to] = safeAdd (accounts [_to], safeSub(_value, feeTotal));\r\n\r\n        processFee(feeTotal);\r\n\r\n        Transfer (_from, _to, safeSub(_value, feeTotal));\r\n      }\r\n\r\n      return true;\r\n    }\r\n\r\n    function fee () constant returns (uint256);\r\n\r\n    function processFee(uint256 feeTotal) internal returns (bool);\r\n\r\n    /**\r\n     * Allow given spender to transfer given number of tokens from message sender.\r\n     *\r\n     * @param _spender address to allow the owner of to transfer tokens from\r\n     *        message sender\r\n     * @param _value number of tokens to allow to transfer\r\n     * @return true if token transfer was successfully approved, false otherwise\r\n     */\r\n    function approve (address _spender, uint256 _value) returns (bool success) {\r\n      allowances [msg.sender][_spender] = _value;\r\n      Approval (msg.sender, _spender, _value);\r\n\r\n      return true;\r\n    }\r\n\r\n    /**\r\n     * Tell how many tokens given spender is currently allowed to transfer from\r\n     * given owner.\r\n     *\r\n     * @param _owner address to get number of tokens allowed to be transferred\r\n     *        from the owner of\r\n     * @param _spender address to get number of tokens allowed to be transferred\r\n     *        by the owner of\r\n     * @return number of tokens given spender is currently allowed to transfer\r\n     *         from given owner\r\n     */\r\n    function allowance (address _owner, address _spender) constant\r\n    returns (uint256 remaining) {\r\n      return allowances [_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * Mapping from addresses of token holders to the numbers of tokens belonging\r\n     * to these token holders.\r\n     */\r\n    mapping (address => uint256) accounts;\r\n\r\n    /**\r\n     * Mapping from addresses of token holders to the mapping of addresses of\r\n     * spenders to the allowances set by these token holders to these spenders.\r\n     */\r\n    mapping (address => mapping (address => uint256)) allowances;\r\n  }\r\n\r\n  contract ParagonCoinToken is AbstractToken {\r\n    /**\r\n     * Initial number of tokens.\r\n     */\r\n    uint256 constant INITIAL_TOKENS_COUNT = 200000000e6;\r\n\r\n    /**\r\n     * Address of the owner of this smart contract.\r\n     */\r\n    address owner;\r\n\r\n   \r\n\r\n    /**\r\n     * Total number of tokens ins circulation.\r\n     */\r\n    uint256 tokensCount;\r\n\r\n    /**\r\n     * Create new ParagonCoin Token Smart Contract, make message sender to be the\r\n     * owner of smart contract, issue given number of tokens and give them to\r\n     * message sender.\r\n     */\r\n    function ParagonCoinToken (address fundAddress) {\r\n      tokensCount = INITIAL_TOKENS_COUNT;\r\n      accounts [msg.sender] = INITIAL_TOKENS_COUNT;\r\n      owner = msg.sender;\r\n      fund = fundAddress;\r\n    }\r\n\r\n    /**\r\n     * Get name of this token.\r\n     *\r\n     * @return name of this token\r\n     */\r\n    function name () constant returns (string name) {\r\n      return \"PRG\";\r\n    }\r\n\r\n    /**\r\n     * Get symbol of this token.\r\n     *\r\n     * @return symbol of this token\r\n     */\r\n    function symbol () constant returns (string symbol) {\r\n      return \"PRG\";\r\n    }\r\n\r\n\r\n    /**\r\n     * Get number of decimals for this token.\r\n     *\r\n     * @return number of decimals for this token\r\n     */\r\n    function decimals () constant returns (uint8 decimals) {\r\n      return 6;\r\n    }\r\n\r\n    /**\r\n     * Get total number of tokens in circulation.\r\n     *\r\n     * @return total number of tokens in circulation\r\n     */\r\n    function totalSupply () constant returns (uint256 supply) {\r\n      return tokensCount;\r\n    }\r\n\r\n    \r\n\r\n    /**\r\n     * Transfer given number of tokens from message sender to given recipient.\r\n     *\r\n     * @param _to address to transfer tokens to the owner of\r\n     * @param _value number of tokens to transfer to the owner of given address\r\n     * @return true if tokens were transferred successfully, false otherwise\r\n     */\r\n    function transfer (address _to, uint256 _value) returns (bool success) {\r\n      return AbstractToken.transfer (_to, _value);\r\n    }\r\n\r\n    /**\r\n     * Transfer given number of tokens from given owner to given recipient.\r\n     *\r\n     * @param _from address to transfer tokens from the owner of\r\n     * @param _to address to transfer tokens to the owner of\r\n     * @param _value number of tokens to transfer from given owner to given\r\n     *        recipient\r\n     * @return true if tokens were transferred successfully, false otherwise\r\n     */\r\n    function transferFrom (address _from, address _to, uint256 _value)\r\n    returns (bool success) {\r\n      return AbstractToken.transferFrom (_from, _to, _value);\r\n    }\r\n\r\n    function fee () constant returns (uint256) {\r\n      return safeAdd(safeMul(tokensCount, 5)/1e11, 25000);\r\n    }\r\n\r\n    function processFee(uint256 feeTotal) internal returns (bool) {\r\n        uint256 burnFee = feeTotal/2;\r\n        uint256 fundFee = safeSub(feeTotal, burnFee);\r\n\r\n        accounts [fund] = safeAdd (accounts [fund], fundFee);\r\n        tokensCount = safeSub (tokensCount, burnFee); // ledger burned toke\r\n\r\n        Transfer (msg.sender, fund, fundFee);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Change how many tokens given spender is allowed to transfer from message\r\n     * spender.  In order to prevent double spending of allowance, this method\r\n     * receives assumed current allowance value as an argument.  If actual\r\n     * allowance differs from an assumed one, this method just returns false.\r\n     *\r\n     * @param _spender address to allow the owner of to transfer tokens from\r\n     *        message sender\r\n     * @param _currentValue assumed number of tokens currently allowed to be\r\n     *        transferred\r\n     * @param _newValue number of tokens to allow to transfer\r\n     * @return true if token transfer was successfully approved, false otherwise\r\n     */\r\n    function approve (address _spender, uint256 _currentValue, uint256 _newValue)\r\n    returns (bool success) {\r\n      if (allowance (msg.sender, _spender) == _currentValue)\r\n        return approve (_spender, _newValue);\r\n      else return false;\r\n    }\r\n\r\n    /**\r\n     * Burn given number of tokens belonging to message sender.\r\n     *\r\n     * @param _value number of tokens to burn\r\n     * @return true on success, false on error\r\n     */\r\n    function burnTokens (uint256 _value) returns (bool success) {\r\n      if (_value > accounts [msg.sender]) return false;\r\n      else if (_value > 0) {\r\n        accounts [msg.sender] = safeSub (accounts [msg.sender], _value);\r\n        tokensCount = safeSub (tokensCount, _value);\r\n        return true;\r\n      } else return true;\r\n    }\r\n\r\n    /**\r\n     * Set new owner for the smart contract.\r\n     * May only be called by smart contract owner.\r\n     *\r\n     * @param _newOwner address of new owner of the smart contract\r\n     */\r\n    function setOwner (address _newOwner) {\r\n      require (msg.sender == owner);\r\n\r\n      owner = _newOwner;\r\n    }\r\n\r\n    \r\n    /**\r\n     * Set new fund address for the smart contract.\r\n     * May only be called by smart contract owner.\r\n     *\r\n     * @param _newFund new fund address of the smart contract\r\n     */\r\n    function setFundAddress (address _newFund) {\r\n      require (msg.sender == owner);\r\n\r\n      fund = _newFund;\r\n    }\r\n\r\n  }", "OptimizationUsed": "1", "ContractName": "ParagonCoinToken", "ByteCode": "0x606060405236156100cd5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100d2578063095ea7b31461015d57806313af40351461019357806318160ddd146101b457806323b872dd146101d9578063313ce56714610215578063426a84931461023e5780636d1b229d1461027757806370a08231146102a157806385dc3004146102d257806395d89b41146100d2578063a9059cbb1461037e578063dd62ed3e146103b4578063ddca3f43146103eb575b600080fd5b34156100dd57600080fd5b6100e5610410565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101225780820151818401525b602001610109565b50505050905090810190601f16801561014f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561016857600080fd5b61017f600160a060020a0360043516602435610452565b604051901515815260200160405180910390f35b341561019e57600080fd5b6101b2600160a060020a03600435166104bf565b005b34156101bf57600080fd5b6101c7610506565b60405190815260200160405180910390f35b34156101e457600080fd5b61017f600160a060020a036004358116906024351660443561050d565b604051901515815260200160405180910390f35b341561022057600080fd5b610228610524565b60405160ff909116815260200160405180910390f35b341561024957600080fd5b61017f600160a060020a036004351660243560443561052a565b604051901515815260200160405180910390f35b341561028257600080fd5b61017f60043561055e565b604051901515815260200160405180910390f35b34156102ac57600080fd5b6101c7600160a060020a03600435166105ee565b60405190815260200160405180910390f35b34156102dd57600080fd5b6101b2600160a060020a036004351661060d565b005b34156100dd57600080fd5b6100e5610410565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101225780820151818401525b602001610109565b50505050905090810190601f16801561014f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561038957600080fd5b61017f600160a060020a0360043516602435610696565b604051901515815260200160405180910390f35b34156103bf57600080fd5b6101c7600160a060020a03600435811690602435166106ab565b60405190815260200160405180910390f35b34156103f657600080fd5b6101c76106d8565b60405190815260200160405180910390f35b610418610b2e565b60408051908101604052600381527f5052470000000000000000000000000000000000000000000000000000000000602082015290505b90565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b60035433600160a060020a039081169116146104da57600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b50565b6004545b90565b600061051a848484610708565b90505b9392505050565b60065b90565b60008261053733866106ab565b141561054e576105478483610452565b905061051d565b50600061051d565b5b9392505050565b600160a060020a033316600090815260016020526040812054821115610586575060006105e7565b60008211156105e357600160a060020a0333166000908152600160205260409020546105b290836108d2565b600160a060020a0333166000908152600160205260409020556004546105d890836108d2565b6004555060016105e7565b5060015b5b5b919050565b600160a060020a0381166000908152600160205260409020545b919050565b60035433600160a060020a0390811691161461062857600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b50565b610418610b2e565b60408051908101604052600381527f5052470000000000000000000000000000000000000000000000000000000000602082015290505b90565b60006106a283836108ec565b90505b92915050565b600160a060020a038083166000908152600260209081526040808320938516835292905220545b92915050565b600061070264174876e8006106f06004546005610a25565b8115156106f957fe5b046161a8610a5b565b90505b90565b6000806107136106d8565b600160a060020a03808716600090815260026020908152604080832033909416835292905220549091508390101561074e57600091506108ca565b600160a060020a0385166000908152600160205260409020548390101561077857600091506108ca565b600160a060020a03808616600090815260026020908152604080832033909416835292905220546107a990846108d2565b600160a060020a038087166000908152600260209081526040808320339094168352929052205580831180156107f1575083600160a060020a031685600160a060020a031614155b156108c557600160a060020a03851660009081526001602052604090205461081990846108d2565b600160a060020a0380871660009081526001602052604080822093909355908616815220546108519061084c85846108d2565b610a5b565b600160a060020a03851660009081526001602052604090205561087381610a7a565b5083600160a060020a031685600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6108b386856108d2565b60405190815260200160405180910390a35b600191505b509392505050565b6000818310156108e157600080fd5b508082035b92915050565b6000806108f76106d8565b600160a060020a033316600090815260016020526040902054909150839010156109245760009150610a1e565b8083118015610945575083600160a060020a031633600160a060020a031614155b15610a1957600160a060020a03331660009081526001602052604090205461096d90846108d2565b600160a060020a0333811660009081526001602052604080822093909355908616815220546109a59061084c85846108d2565b610a5b565b600160a060020a0385166000908152600160205260409020556109c781610a7a565b5083600160a060020a031633600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef610a0786856108d2565b60405190815260200160405180910390a35b600191505b5092915050565b6000811515610a36575060006104b9565b81600019811515610a4357fe5b04831115610a5057600080fd5b508181025b92915050565b6000600019829003831115610a6f57600080fd5b508181015b92915050565b600080806002845b049150610a8f84836108d2565b60008054600160a060020a0316815260016020526040902054909150610ab59082610a5b565b60008054600160a060020a0316815260016020526040902055600454610adb90836108d2565b600455600054600160a060020a039081169033167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405190815260200160405180910390a3600192505b5050919050565b602060405190810160405260008152905600a165627a7a72305820b8ab6cb3dd757926e48be8461ba6f3877a9a36f3d301bd0c1ee2212bd0828cf90029"}