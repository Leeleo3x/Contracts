{"Runs": "200", "SwarmSource": "bzzr://5202a0656e9d69e4704e9c57040ea8a007bcdf383a78e1af36409b3cde620f30", "ABI": "[{\"constant\":false,\"inputs\":[],\"name\":\"freezeTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unfreezeTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"createTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_refund\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"refundTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address[]\"}],\"name\":\"burningCapableAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unfreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_refund\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"RefundTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.24+commit.e67f0147", "ConstructorArguments": "", "SourceCode": "pragma solidity ^0.4.24;\r\n\r\n/*\r\n * Creator: OPTI (OptiToken) \r\n */\r\n\r\n/*\r\n * Abstract Token Smart Contract\r\n *\r\n */\r\n\r\n \r\n /*\r\n * Safe Math Smart Contract. \r\n * https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\r\n */\r\n\r\ncontract SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * ERC-20 standard token interface, as defined\r\n * <a href=\"http://github.com/ethereum/EIPs/issues/20\">here</a>.\r\n */\r\ncontract Token {\r\n  \r\n  function totalSupply() constant returns (uint256 supply);\r\n  function balanceOf(address _owner) constant returns (uint256 balance);\r\n  function transfer(address _to, uint256 _value) returns (bool success);\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n  function approve(address _spender, uint256 _value) returns (bool success);\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * Abstract Token Smart Contract that could be used as a base contract for\r\n * ERC-20 token contracts.\r\n */\r\ncontract AbstractToken is Token, SafeMath {\r\n  /**\r\n   * Create new Abstract Token contract.\r\n   */\r\n  function AbstractToken () {\r\n    // Do nothing\r\n  }\r\n  \r\n  /**\r\n   * Get number of tokens currently belonging to given owner.\r\n   *\r\n   * @param _owner address to get number of tokens currently belonging to the\r\n   *        owner of\r\n   * @return number of tokens currently belonging to the owner of given address\r\n   */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return accounts [_owner];\r\n  }\r\n\r\n  /**\r\n   * Transfer given number of tokens from message sender to given recipient.\r\n   *\r\n   * @param _to address to transfer tokens to the owner of\r\n   * @param _value number of tokens to transfer to the owner of given address\r\n   * @return true if tokens were transferred successfully, false otherwise\r\n   * accounts [_to] + _value > accounts [_to] for overflow check\r\n   * which is already in safeMath\r\n   */\r\n  function transfer(address _to, uint256 _value) returns (bool success) {\r\n    require(_to != address(0));\r\n    if (accounts [msg.sender] < _value) return false;\r\n    if (_value > 0 && msg.sender != _to) {\r\n      accounts [msg.sender] = safeSub (accounts [msg.sender], _value);\r\n      accounts [_to] = safeAdd (accounts [_to], _value);\r\n    }\r\n    emit Transfer (msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Transfer given number of tokens from given owner to given recipient.\r\n   *\r\n   * @param _from address to transfer tokens from the owner of\r\n   * @param _to address to transfer tokens to the owner of\r\n   * @param _value number of tokens to transfer from given owner to given\r\n   *        recipient\r\n   * @return true if tokens were transferred successfully, false otherwise\r\n   * accounts [_to] + _value > accounts [_to] for overflow check\r\n   * which is already in safeMath\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n  returns (bool success) {\r\n    require(_to != address(0));\r\n    if (allowances [_from][msg.sender] < _value) return false;\r\n    if (accounts [_from] < _value) return false; \r\n\r\n    if (_value > 0 && _from != _to) {\r\n\t  allowances [_from][msg.sender] = safeSub (allowances [_from][msg.sender], _value);\r\n      accounts [_from] = safeSub (accounts [_from], _value);\r\n      accounts [_to] = safeAdd (accounts [_to], _value);\r\n    }\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Allow given spender to transfer given number of tokens from message sender.\r\n   * @param _spender address to allow the owner of to transfer tokens from message sender\r\n   * @param _value number of tokens to allow to transfer\r\n   * @return true if token transfer was successfully approved, false otherwise\r\n   */\r\n   function approve (address _spender, uint256 _value) returns (bool success) {\r\n    allowances [msg.sender][_spender] = _value;\r\n    emit Approval (msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Tell how many tokens given spender is currently allowed to transfer from\r\n   * given owner.\r\n   *\r\n   * @param _owner address to get number of tokens allowed to be transferred\r\n   *        from the owner of\r\n   * @param _spender address to get number of tokens allowed to be transferred\r\n   *        by the owner of\r\n   * @return number of tokens given spender is currently allowed to transfer\r\n   *         from given owner\r\n   */\r\n  function allowance(address _owner, address _spender) constant\r\n  returns (uint256 remaining) {\r\n    return allowances [_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * Mapping from addresses of token holders to the numbers of tokens belonging\r\n   * to these token holders.\r\n   */\r\n  mapping (address => uint256) accounts;\r\n\r\n  /**\r\n   * Mapping from addresses of token holders to the mapping of addresses of\r\n   * spenders to the allowances set by these token holders to these spenders.\r\n   */\r\n  mapping (address => mapping (address => uint256)) private allowances;\r\n  \r\n}\r\n\r\n\r\n/**\r\n * OptiToken token token smart contract.\r\n */\r\ncontract OPTIToken is AbstractToken {\r\n  /**\r\n   * Maximum allowed number of tokens in circulation.\r\n   * tokenSupply = tokensIActuallyWant * (10 ^ decimals)\r\n   */\r\n   \r\n   \r\n  uint256 constant MAX_TOKEN_COUNT = 100000000 * (10**18);\r\n   \r\n  /**\r\n   * Address of the owner of this smart contract.\r\n   */\r\n  address private owner;\r\n  \r\n  /**\r\n   * Frozen account list holder\r\n   */\r\n  mapping (address => bool) private frozenAccount;\r\n  \r\n  /**\r\n   * Burning account list holder\r\n   */\r\n  \r\n  mapping (address => bool) private burningAccount;\r\n  \r\n\r\n  /**\r\n   * Current number of tokens in circulation.\r\n   */\r\n  uint256 tokenCount = 0;\r\n  \r\n \r\n  /**\r\n   * True if tokens transfers are currently frozen, false otherwise.\r\n   */\r\n  bool frozen = false;\r\n  \r\n \r\n  /**\r\n   * Create new token smart contract and make msg.sender the\r\n   * owner of this smart contract.\r\n   */\r\n  function OPTIToken () {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * Get total number of tokens in circulation.\r\n   *\r\n   * @return total number of tokens in circulation\r\n   */\r\n  function totalSupply() constant returns (uint256 supply) {\r\n    return tokenCount;\r\n  }\r\n\r\n  string constant public name = \"OptiToken\";\r\n  string constant public symbol = \"OPTI\";\r\n  uint8 constant public decimals = 18;\r\n  \r\n  /**\r\n   * Transfer given number of tokens from message sender to given recipient.\r\n   * @param _to address to transfer tokens to the owner of\r\n   * @param _value number of tokens to transfer to the owner of given address\r\n   * @return true if tokens were transferred successfully, false otherwise\r\n   */\r\n  function transfer(address _to, uint256 _value) returns (bool success) {\r\n    require(!frozenAccount[msg.sender]);\r\n\tif (frozen) return false;\r\n    else return AbstractToken.transfer (_to, _value);\r\n  }\r\n\r\n  /**\r\n   * Transfer given number of tokens from given owner to given recipient.\r\n   *\r\n   * @param _from address to transfer tokens from the owner of\r\n   * @param _to address to transfer tokens to the owner of\r\n   * @param _value number of tokens to transfer from given owner to given\r\n   *        recipient\r\n   * @return true if tokens were transferred successfully, false otherwise\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    returns (bool success) {\r\n\trequire(!frozenAccount[_from]);\r\n    if (frozen) return false;\r\n    else return AbstractToken.transferFrom (_from, _to, _value);\r\n  }\r\n\r\n   /**\r\n   * Change how many tokens given spender is allowed to transfer from message\r\n   * spender.  In order to prevent double spending of allowance,\r\n   * To change the approve amount you first have to reduce the addresses`\r\n   * allowance to zero by calling `approve(_spender, 0)` if it is not\r\n   * already 0 to mitigate the race condition described here:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender address to allow the owner of to transfer tokens from\r\n   *        message sender\r\n   * @param _value number of tokens to allow to transfer\r\n   * @return true if token transfer was successfully approved, false otherwise\r\n   */\r\n  function approve (address _spender, uint256 _value)\r\n    returns (bool success) {\r\n\trequire(allowance (msg.sender, _spender) == 0 || _value == 0);\r\n    return AbstractToken.approve (_spender, _value);\r\n  }\r\n\r\n  /**\r\n   * Create _value new tokens and give new created tokens to msg.sender.\r\n   * Only be called by smart contract owner.\r\n   *\r\n   * @param _value number of tokens to create\r\n   * @return true if tokens were created successfully, false otherwise\r\n   */\r\n  function createTokens(uint256 _value)\r\n    returns (bool success) {\r\n    require (msg.sender == owner);\r\n\r\n    if (_value > 0) {\r\n      if (_value > safeSub (MAX_TOKEN_COUNT, tokenCount)) return false;\r\n\t  \r\n      accounts [msg.sender] = safeAdd (accounts [msg.sender], _value);\r\n      tokenCount = safeAdd (tokenCount, _value);\r\n\t  \r\n\t  // adding transfer event and _from address as null address\r\n\t  emit Transfer(0x0, msg.sender, _value);\r\n\t  \r\n\t  return true;\r\n    }\r\n\t\r\n\t  return false;\r\n    \r\n  }\r\n  \r\n  \r\n /**\r\n   * Burning capable account\r\n   * Only be called by smart contract owner.\r\n   */\r\n  function burningCapableAccount(address[] _target) {\r\n  \r\n      require (msg.sender == owner);\r\n\t  \r\n\t  for (uint i = 0; i < _target.length; i++) {\r\n\t\t\tburningAccount[_target[i]] = true;\r\n        }\r\n }\r\n  \r\n  /**\r\n   * Burn intended tokens.\r\n   * Only be called by by burnable addresses.\r\n   *\r\n   * @param _value number of tokens to burn\r\n   * @return true if burnt successfully, false otherwise\r\n   */\r\n  \r\n  function burn(uint256 _value) public returns (bool success) {\r\n  \r\n        require(accounts[msg.sender] >= _value); \r\n\t\t\r\n\t\trequire(burningAccount[msg.sender]);\r\n\t\t\r\n\t\taccounts [msg.sender] = safeSub (accounts [msg.sender], _value);\r\n\t\t\r\n        tokenCount = safeSub (tokenCount, _value);\t\r\n\t\t\r\n        emit Burn(msg.sender, _value);\r\n\t\t\r\n        return true;\r\n    }\r\n  \r\n\r\n  /**\r\n   * Set new owner for the smart contract.\r\n   * Only be called by smart contract owner.\r\n   *\r\n   * @param _newOwner address of new owner of the smart contract\r\n   */\r\n  function setOwner(address _newOwner) {\r\n    require (msg.sender == owner);\r\n\r\n    owner = _newOwner;\r\n  }\r\n\r\n  /**\r\n   * Freeze ALL token transfers.\r\n   * Only be called by smart contract owner.\r\n   */\r\n  function freezeTransfers () {\r\n    require (msg.sender == owner);\r\n\r\n    if (!frozen) {\r\n      frozen = true;\r\n      emit Freeze ();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unfreeze ALL token transfers.\r\n   * Only be called by smart contract owner.\r\n   */\r\n  function unfreezeTransfers () {\r\n    require (msg.sender == owner);\r\n\r\n    if (frozen) {\r\n      frozen = false;\r\n      emit Unfreeze ();\r\n    }\r\n  }\r\n  \r\n  \r\n  /*A user is able to unintentionally send tokens to a contract \r\n  * and if the contract is not prepared to refund them they will get stuck in the contract. \r\n  * The same issue used to happen for Ether too but new Solidity versions added the payable modifier to\r\n  * prevent unintended Ether transfers. However, there\u2019s no such mechanism for token transfers.\r\n  * so the below function is created\r\n  */\r\n  \r\n  function refundTokens(address _token, address _refund, uint256 _value) {\r\n    require (msg.sender == owner);\r\n    require(_token != address(this));\r\n    AbstractToken token = AbstractToken(_token);\r\n    token.transfer(_refund, _value);\r\n    emit RefundTokens(_token, _refund, _value);\r\n  }\r\n  \r\n  /**\r\n   * Freeze specific account\r\n   * Only be called by smart contract owner.\r\n   */\r\n  function freezeAccount(address _target, bool freeze) {\r\n      require (msg.sender == owner);\r\n\t  require (msg.sender != _target);\r\n      frozenAccount[_target] = freeze;\r\n      emit FrozenFunds(_target, freeze);\r\n }\r\n\r\n  /**\r\n   * Logged when token transfers were frozen.\r\n   */\r\n  event Freeze ();\r\n\r\n  /**\r\n   * Logged when token transfers were unfrozen.\r\n   */\r\n  event Unfreeze ();\r\n  \r\n  /**\r\n   * Logged when a particular account is frozen.\r\n   */\r\n  \r\n  event FrozenFunds(address target, bool frozen);\r\n  \r\n  /**\r\n   * Logged when a token is burnt.\r\n   */  \r\n  \r\n  event Burn(address target,uint256 _value);\r\n\r\n\r\n  \r\n  /**\r\n   * when accidentally send other tokens are refunded\r\n   */\r\n  \r\n  event RefundTokens(address _token, address _refund, uint256 _value);\r\n}", "OptimizationUsed": "1", "ContractName": "OPTIToken", "ByteCode": "0x6080604052600436106100f05763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630150246081146100f557806306fdde031461010c578063095ea7b31461019657806313af4035146101ce57806318160ddd146101ef57806323b872dd14610216578063313ce5671461024057806331c420d41461026b57806342966c681461028057806370a08231146102985780637e1f2bb8146102b957806389519c50146102d157806395d89b41146102fb578063a9059cbb14610310578063dd62ed3e14610334578063e724529c1461035b578063ed361c1714610381575b600080fd5b34801561010157600080fd5b5061010a6103d6565b005b34801561011857600080fd5b50610121610432565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561015b578181015183820152602001610143565b50505050905090810190601f1680156101885780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101a257600080fd5b506101ba600160a060020a0360043516602435610469565b604080519115158252519081900360200190f35b3480156101da57600080fd5b5061010a600160a060020a036004351661049d565b3480156101fb57600080fd5b506102046104e3565b60408051918252519081900360200190f35b34801561022257600080fd5b506101ba600160a060020a03600435811690602435166044356104e9565b34801561024c57600080fd5b50610255610537565b6040805160ff9092168252519081900360200190f35b34801561027757600080fd5b5061010a61053c565b34801561028c57600080fd5b506101ba600435610593565b3480156102a457600080fd5b50610204600160a060020a036004351661064b565b3480156102c557600080fd5b506101ba600435610666565b3480156102dd57600080fd5b5061010a600160a060020a0360043581169060243516604435610731565b34801561030757600080fd5b5061012161084a565b34801561031c57600080fd5b506101ba600160a060020a0360043516602435610881565b34801561034057600080fd5b50610204600160a060020a03600435811690602435166108c2565b34801561036757600080fd5b5061010a600160a060020a036004351660243515156108ed565b34801561038d57600080fd5b506040805160206004803580820135838102808601850190965280855261010a9536959394602494938501929182918501908490808284375094975061097e9650505050505050565b600254600160a060020a031633146103ed57600080fd5b60065460ff161515610430576006805460ff191660011790556040517f615acbaede366d76a8b8cb2a9ada6a71495f0786513d71aa97aaf0c3910b78de90600090a15b565b60408051808201909152600981527f4f707469546f6b656e0000000000000000000000000000000000000000000000602082015281565b600061047533846108c2565b158061047f575081155b151561048a57600080fd5b61049483836109f7565b90505b92915050565b600254600160a060020a031633146104b457600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60055490565b600160a060020a03831660009081526003602052604081205460ff161561050f57600080fd5b60065460ff161561052257506000610530565b61052d848484610a5d565b90505b9392505050565b601281565b600254600160a060020a0316331461055357600080fd5b60065460ff1615610430576006805460ff191690556040517f2f05ba71d0df11bf5fa562a6569d70c4f80da84284badbe015ce1456063d0ded90600090a1565b336000908152602081905260408120548211156105af57600080fd5b3360009081526004602052604090205460ff1615156105cd57600080fd5b336000908152602081905260409020546105e79083610bfc565b336000908152602081905260409020556005546106049083610bfc565b600555604080513381526020810184905281517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5929181900390910190a15060015b919050565b600160a060020a031660009081526020819052604090205490565b600254600090600160a060020a0316331461068057600080fd5b6000821115610729576106a06a52b7d2dcc80cd2e4000000600554610bfc565b8211156106af57506000610646565b336000908152602081905260409020546106c99083610c0e565b336000908152602081905260409020556005546106e69083610c0e565b60055560408051838152905133916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a3506001610646565b506000919050565b600254600090600160a060020a0316331461074b57600080fd5b600160a060020a03841630141561076157600080fd5b50604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a038481166004830152602482018490529151859283169163a9059cbb9160448083019260209291908290030181600087803b1580156107ce57600080fd5b505af11580156107e2573d6000803e3d6000fd5b505050506040513d60208110156107f857600080fd5b505060408051600160a060020a0380871682528516602082015280820184905290517ffab5e7a27e02736e52f60776d307340051d8bc15aee0ef211c7a4aa2a8cdc1549181900360600190a150505050565b60408051808201909152600481527f4f50544900000000000000000000000000000000000000000000000000000000602082015281565b3360009081526003602052604081205460ff161561089e57600080fd5b60065460ff16156108b157506000610497565b6108bb8383610c1d565b9050610497565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b600254600160a060020a0316331461090457600080fd5b33600160a060020a038316141561091a57600080fd5b600160a060020a038216600081815260036020908152604091829020805460ff191685151590811790915582519384529083015280517f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a59281900390910190a15050565b600254600090600160a060020a0316331461099857600080fd5b5060005b81518110156109f35760016004600084848151811015156109b957fe5b602090810291909101810151600160a060020a03168252810191909152604001600020805460ff191691151591909117905560010161099c565b5050565b336000818152600160209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b6000600160a060020a0383161515610a7457600080fd5b600160a060020a0384166000908152600160209081526040808320338452909152902054821115610aa757506000610530565b600160a060020a038416600090815260208190526040902054821115610acf57506000610530565b600082118015610af1575082600160a060020a031684600160a060020a031614155b15610ba757600160a060020a0384166000908152600160209081526040808320338452909152902054610b249083610bfc565b600160a060020a0385166000818152600160209081526040808320338452825280832094909455918152908190522054610b5e9083610bfc565b600160a060020a038086166000908152602081905260408082209390935590851681522054610b8d9083610c0e565b600160a060020a0384166000908152602081905260409020555b82600160a060020a031684600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a35060019392505050565b600082821115610c0857fe5b50900390565b60008282018381101561053057fe5b6000600160a060020a0383161515610c3457600080fd5b33600090815260208190526040902054821115610c5357506000610497565b600082118015610c6c575033600160a060020a03841614155b15610cd15733600090815260208190526040902054610c8b9083610bfc565b3360009081526020819052604080822092909255600160a060020a03851681522054610cb79083610c0e565b600160a060020a0384166000908152602081905260409020555b604080518381529051600160a060020a0385169133917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a3506001929150505600a165627a7a723058205202a0656e9d69e4704e9c57040ea8a007bcdf383a78e1af36409b3cde620f300029"}