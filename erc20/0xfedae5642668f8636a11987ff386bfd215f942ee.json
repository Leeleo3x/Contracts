{"Runs": "200", "SwarmSource": "bzzr://daab06a27c07f3b95c6372d46ccef2a67d1e9d5b870c188a6d226db9cb5d1b68", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSaleContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isTokenTransferable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toggle\",\"type\":\"bool\"}],\"name\":\"toggleTransferable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emergencyERC20Drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenTotalAmount\",\"type\":\"uint256\"},{\"name\":\"_adminAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.18+commit.9cf6e910", "ConstructorArguments": "0000000000000000000000000000000000000000033b2e3c9fd0803ce800000000000000000000000000000095343e65c188952ad41a56869b7cb6d89df8dd25", "SourceCode": "pragma solidity ^0.4.18;\r\n\r\n// File: contracts/zeppelin/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/CrowdsaleAuthorizer.sol\r\n\r\n/**\r\n * @title CrowdsaleAuthorizer\r\n * @dev Crowd Sale Authorizer\r\n */\r\ncontract CrowdsaleAuthorizer {\r\n    mapping(address => uint256)    public participated;\r\n    mapping(address => bool)       public whitelistAddresses;\r\n\r\n    address                        public admin;\r\n    uint256                        public saleStartTime;\r\n    uint256                        public saleEndTime;\r\n    uint256                        public increaseMaxContribTime;\r\n    uint256                        public minContribution;\r\n    uint256                        public maxContribution;\r\n\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n    * @dev Modifier for only admin\r\n    */\r\n    modifier onlyAdmin() {\r\n      require(msg.sender == admin);\r\n      _;\r\n    }\r\n\r\n    /**\r\n    * @dev Modifier for valid address\r\n    */\r\n    modifier validAddress(address _addr) {\r\n      require(_addr != address(0x0));\r\n      require(_addr != address(this));\r\n      _;\r\n    }\r\n\r\n    /**\r\n     * @dev Contract Constructor\r\n     * @param _saleStartTime - The Start Time of the Token Sale\r\n     * @param _saleEndTime - The End Time of the Token Sale\r\n     * @param _increaseMaxContribTime - Time to increase Max Contribution of the Token Sale\r\n     * @param _minContribution - Minimum ETH contribution per contributor\r\n     * @param _maxContribution - Maximum ETH contribution per contributor\r\n     */\r\n    function CrowdsaleAuthorizer(\r\n        address _admin,\r\n        uint256 _saleStartTime,\r\n        uint256 _saleEndTime,\r\n        uint256 _increaseMaxContribTime,\r\n        uint256 _minContribution,\r\n        uint256 _maxContribution\r\n    )\r\n        validAddress(_admin)\r\n        public\r\n    {\r\n        require(_saleStartTime > now);\r\n        require(_saleEndTime > now);\r\n        require(_increaseMaxContribTime > now);\r\n        require(_saleStartTime < _saleEndTime);\r\n        require(_increaseMaxContribTime > _saleStartTime);\r\n        require(_maxContribution > 0);\r\n        require(_minContribution < _maxContribution);\r\n\r\n        admin = _admin;\r\n        saleStartTime = _saleStartTime;\r\n        saleEndTime = _saleEndTime;\r\n        increaseMaxContribTime = _increaseMaxContribTime;\r\n\r\n        minContribution = _minContribution;\r\n        maxContribution = _maxContribution;\r\n    }\r\n\r\n    event UpdateWhitelist(address _user, bool _allow, uint _time);\r\n\r\n    /**\r\n     * @dev Update Whitelist Address\r\n     * @param _user - Whitelist address\r\n     * @param _allow - eligibility\r\n     */\r\n    function updateWhitelist(address _user, bool _allow)\r\n        public\r\n        onlyAdmin\r\n    {\r\n        whitelistAddresses[_user] = _allow;\r\n        UpdateWhitelist(_user, _allow, now);\r\n    }\r\n\r\n    /**\r\n     * @dev Batch Update Whitelist Address\r\n     * @param _users - Array of Whitelist addresses\r\n     * @param _allows - Array of eligibilities\r\n     */\r\n    function updateWhitelists(address[] _users, bool[] _allows)\r\n        external\r\n        onlyAdmin\r\n    {\r\n        require(_users.length == _allows.length);\r\n        for (uint i = 0 ; i < _users.length ; i++) {\r\n            address _user = _users[i];\r\n            bool _allow = _allows[i];\r\n            whitelistAddresses[_user] = _allow;\r\n            UpdateWhitelist(_user, _allow, now);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get Eligible Amount\r\n     * @param _contributor - Contributor address\r\n     * @param _amount - Intended contribution amount\r\n     */\r\n    function eligibleAmount(address _contributor, uint256 _amount)\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        // If sales has not started or sale ended, there's no allocation\r\n        if (!saleStarted() || saleEnded()) {\r\n            return 0;\r\n        }\r\n\r\n        // Amount lesser than minimum contribution will be rejected\r\n        if (_amount < minContribution) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 userMaxContribution = maxContribution;\r\n        // If sale has past 24hrs, increase max cap\r\n        if (now >= increaseMaxContribTime) {\r\n            userMaxContribution = maxContribution.mul(10);\r\n        }\r\n\r\n        // Calculate remaining contribution for the contributor\r\n        uint256 remainingCap = userMaxContribution.sub(participated[_contributor]);\r\n\r\n        // Return either the amount contributed or cap whichever is lower\r\n        return (remainingCap > _amount) ? _amount : remainingCap;\r\n    }\r\n\r\n    /**\r\n     * @dev Get if sale has started\r\n     */\r\n    function saleStarted() public view returns(bool) {\r\n        return now >= saleStartTime;\r\n    }\r\n\r\n    /**\r\n     * @dev Get if sale has ended\r\n     */\r\n    function saleEnded() public view returns(bool) {\r\n        return now > saleEndTime;\r\n    }\r\n\r\n    /**\r\n     * @dev Check for eligible amount and modify participation map\r\n     * @param _contributor - Contributor address\r\n     * @param _amount - Intended contribution amount\r\n     */\r\n    function eligibleAmountCheck(address _contributor, uint256 _amount)\r\n        internal\r\n        returns(uint256)\r\n    {\r\n        // Check if contributor is whitelisted\r\n        if (!whitelistAddresses[_contributor]) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 result = eligibleAmount(_contributor, _amount);\r\n        participated[_contributor] = participated[_contributor].add(result);\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n// File: contracts/zeppelin/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/zeppelin/token/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: contracts/zeppelin/token/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/zeppelin/token/BurnableToken.sol\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is BasicToken {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) public {\r\n    require(_value <= balances[msg.sender]);\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    address burner = msg.sender;\r\n    balances[burner] = balances[burner].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    Burn(burner, _value);\r\n  }\r\n}\r\n\r\n// File: contracts/zeppelin/token/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/zeppelin/token/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/PolicyPalNetworkToken.sol\r\n\r\n/**\r\n * @title PolicyPalNetwork Token\r\n * @dev A standard ownable token\r\n */\r\ncontract PolicyPalNetworkToken is StandardToken, BurnableToken, Ownable {\r\n    /**\r\n    * @dev Token Contract Constants\r\n    */\r\n    string    public constant name     = \"PolicyPal Network Token\";\r\n    string    public constant symbol   = \"PAL\";\r\n    uint8     public constant decimals = 18;\r\n\r\n    /**\r\n    * @dev Token Contract Public Variables\r\n    */\r\n    address public  tokenSaleContract;\r\n    bool    public  isTokenTransferable = false;\r\n\r\n\r\n    /**\r\n    * @dev   Token Contract Modifier\r\n    *\r\n    * Check if a transfer is allowed\r\n    * Transfers are restricted to token creator & owner(admin) during token sale duration\r\n    * Transfers after token sale is limited by `isTokenTransferable` toggle\r\n    *\r\n    */\r\n    modifier onlyWhenTransferAllowed() {\r\n        require(isTokenTransferable || msg.sender == owner || msg.sender == tokenSaleContract);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Token Contract Modifier\r\n     * @param _to - Address to check if valid\r\n     *\r\n     *  Check if an address is valid\r\n     *  A valid address is as follows,\r\n     *    1. Not zero address\r\n     *    2. Not token address\r\n     *\r\n     */\r\n    modifier isValidDestination(address _to) {\r\n        require(_to != address(0x0));\r\n        require(_to != address(this));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Enable Transfers (Only Owner)\r\n     */\r\n    function toggleTransferable(bool _toggle) external\r\n        onlyOwner\r\n    {\r\n        isTokenTransferable = _toggle;\r\n    }\r\n    \r\n\r\n    /**\r\n    * @dev Token Contract Constructor\r\n    * @param _adminAddr - Address of the Admin\r\n    */\r\n    function PolicyPalNetworkToken(\r\n        uint _tokenTotalAmount,\r\n        address _adminAddr\r\n    ) \r\n        public\r\n        isValidDestination(_adminAddr)\r\n    {\r\n        require(_tokenTotalAmount > 0);\r\n\r\n        totalSupply_ = _tokenTotalAmount;\r\n\r\n        // Mint all token\r\n        balances[msg.sender] = _tokenTotalAmount;\r\n        Transfer(address(0x0), msg.sender, _tokenTotalAmount);\r\n\r\n        // Assign token sale contract to creator\r\n        tokenSaleContract = msg.sender;\r\n\r\n        // Transfer contract ownership to admin\r\n        transferOwnership(_adminAddr);\r\n    }\r\n\r\n    /**\r\n    * @dev Token Contract transfer\r\n    * @param _to - Address to transfer to\r\n    * @param _value - Value to transfer\r\n    * @return bool - Result of transfer\r\n    * \"Overloaded\" Function of ERC20Basic's transfer\r\n    *\r\n    */\r\n    function transfer(address _to, uint256 _value) public\r\n        onlyWhenTransferAllowed\r\n        isValidDestination(_to)\r\n        returns (bool)\r\n    {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    /**\r\n    * @dev Token Contract transferFrom\r\n    * @param _from - Address to transfer from\r\n    * @param _to - Address to transfer to\r\n    * @param _value - Value to transfer\r\n    * @return bool - Result of transferFrom\r\n    *\r\n    * \"Overloaded\" Function of ERC20's transferFrom\r\n    * Added with modifiers,\r\n    *    1. onlyWhenTransferAllowed\r\n    *    2. isValidDestination\r\n    *\r\n    */\r\n    function transferFrom(address _from, address _to, uint256 _value) public\r\n        onlyWhenTransferAllowed\r\n        isValidDestination(_to)\r\n        returns (bool)\r\n    {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n    * @dev Token Contract burn\r\n    * @param _value - Value to burn\r\n    * \"Overloaded\" Function of BurnableToken's burn\r\n    */\r\n    function burn(uint256 _value)\r\n        public\r\n    {\r\n        super.burn(_value);\r\n        Transfer(msg.sender, address(0x0), _value);\r\n    }\r\n\r\n    /**\r\n    * @dev Token Contract Emergency Drain\r\n    * @param _token - Token to drain\r\n    * @param _amount - Amount to drain\r\n    */\r\n    function emergencyERC20Drain(ERC20 _token, uint256 _amount) public\r\n        onlyOwner\r\n    {\r\n        _token.transfer(owner, _amount);\r\n    }\r\n}\r\n\r\n// File: contracts/PolicyPalNetworkCrowdsale.sol\r\n\r\n/**\r\n * @title PPN Crowdsale\r\n * @dev Crowd Sale Contract\r\n */\r\ncontract PolicyPalNetworkCrowdsale is CrowdsaleAuthorizer {\r\n    /**\r\n    * @dev Token Crowd Sale Contract Public Variables\r\n    */\r\n    address                 public multiSigWallet;\r\n    PolicyPalNetworkToken   public token;\r\n    uint256                 public raisedWei;\r\n    bool                    public haltSale;\r\n    uint                    public rate;\r\n\r\n    /**\r\n    * @dev Modifier for valid sale\r\n    */\r\n    modifier validSale() {\r\n      require(!haltSale);\r\n      require(saleStarted());\r\n      require(!saleEnded());\r\n      _;\r\n    }\r\n\r\n    /**\r\n     * @dev Buy Event\r\n     */\r\n    event Buy(address _buyer, uint256 _tokens, uint256 _payedWei);\r\n\r\n    /**\r\n     * @dev Token Crowd Sale Contract Constructor\r\n     * @param _admin - Address of the Admin\r\n     * @param _multiSigWallet - Address of Multisig wallet\r\n     * @param _totalTokenSupply - Total Token Supply\r\n     * @param _premintedTokenSupply - Total preminted token supply\r\n     * @param _saleStartTime - The Start Time of the Token Sale\r\n     * @param _saleEndTime - The End Time of the Token Sale\r\n     * @param _increaseMaxContribTime - Time to increase max contribution\r\n     * @param _rate - Rate of ETH to PAL\r\n     * @param _minContribution - Minimum ETH contribution per contributor\r\n     * @param _maxContribution - Maximum ETH contribution per contributor\r\n     */\r\n    function PolicyPalNetworkCrowdsale(\r\n        address _admin,\r\n        address _multiSigWallet,\r\n        uint256 _totalTokenSupply,\r\n        uint256 _premintedTokenSupply,\r\n        uint256 _presaleTokenSupply,\r\n        uint256 _saleStartTime,\r\n        uint256 _saleEndTime,\r\n        uint256 _increaseMaxContribTime,\r\n        uint    _rate,\r\n        uint256 _minContribution,\r\n        uint256 _maxContribution\r\n    )\r\n    CrowdsaleAuthorizer(\r\n        _admin,\r\n        _saleStartTime,\r\n        _saleEndTime,\r\n        _increaseMaxContribTime,\r\n        _minContribution,\r\n        _maxContribution\r\n    )\r\n        validAddress(_multiSigWallet)\r\n        public\r\n    {\r\n        require(_totalTokenSupply > 0);\r\n        require(_premintedTokenSupply > 0);\r\n        require(_presaleTokenSupply > 0);\r\n        require(_rate > 0);\r\n        \r\n        require(_premintedTokenSupply < _totalTokenSupply);\r\n        require(_presaleTokenSupply < _totalTokenSupply);\r\n\r\n        multiSigWallet = _multiSigWallet;\r\n        rate = _rate;\r\n\r\n        token = new PolicyPalNetworkToken(\r\n            _totalTokenSupply,\r\n            _admin\r\n        );\r\n\r\n        // transfer preminted tokens to company wallet\r\n        token.transfer(multiSigWallet, _premintedTokenSupply);\r\n        // transfer presale tokens to admin\r\n        token.transfer(_admin, _presaleTokenSupply);\r\n    }\r\n\r\n    /**\r\n     * @dev Token Crowd Sale Contract Halter\r\n     * @param _halt - Flag to halt sale\r\n     */\r\n    function setHaltSale(bool _halt)\r\n        onlyAdmin\r\n        public\r\n    {\r\n        haltSale = _halt;\r\n    }\r\n\r\n    /**\r\n     * @dev Token Crowd Sale payable\r\n     */\r\n    function() public payable {\r\n        buy(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Token Crowd Sale Buy\r\n     * @param _recipient - Address of the recipient\r\n     */\r\n    function buy(address _recipient) public payable\r\n        validSale\r\n        validAddress(_recipient)\r\n        returns(uint256)\r\n    {\r\n        // Get the contributor's eligible amount\r\n        uint256 weiContributionAllowed = eligibleAmountCheck(_recipient, msg.value);\r\n        require(weiContributionAllowed > 0);\r\n\r\n        // Get tokens remaining for sale\r\n        uint256 tokensRemaining = token.balanceOf(address(this));\r\n        require(tokensRemaining > 0);\r\n\r\n        // Get tokens that the contributor will receive\r\n        uint256 receivedTokens = weiContributionAllowed.mul(rate);\r\n\r\n        // Check remaining tokens\r\n        // If lesser, update tokens to be transfer and contribution allowed\r\n        if (receivedTokens > tokensRemaining) {\r\n            receivedTokens = tokensRemaining;\r\n            weiContributionAllowed = tokensRemaining.div(rate);\r\n        }\r\n\r\n        // Transfer tokens to contributor\r\n        assert(token.transfer(_recipient, receivedTokens));\r\n\r\n        // Send ETH payment to MultiSig Wallet\r\n        sendETHToMultiSig(weiContributionAllowed);\r\n        raisedWei = raisedWei.add(weiContributionAllowed);\r\n\r\n        // Check weiContributionAllowed is larger than value sent\r\n        // If larger, transfer the excess back to the contributor\r\n        if (msg.value > weiContributionAllowed) {\r\n            msg.sender.transfer(msg.value.sub(weiContributionAllowed));\r\n        }\r\n\r\n        // Broadcast event\r\n        Buy(_recipient, receivedTokens, weiContributionAllowed);\r\n\r\n        return weiContributionAllowed;\r\n    }\r\n\r\n    /**\r\n     * @dev Token Crowd Sale Emergency Drain\r\n     *      In case something went wrong and ETH is stuck in contract\r\n     * @param _anyToken - Token to drain\r\n     */\r\n    function emergencyDrain(ERC20 _anyToken) public\r\n        onlyAdmin\r\n        returns(bool)\r\n    {\r\n        if (this.balance > 0) {\r\n            sendETHToMultiSig(this.balance);\r\n        }\r\n        if (_anyToken != address(0x0)) {\r\n            assert(_anyToken.transfer(multiSigWallet, _anyToken.balanceOf(this)));\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Token Crowd Sale\r\n     *      Transfer ETH to MultiSig Wallet\r\n     * @param _value - Value of ETH to send\r\n     */\r\n    function sendETHToMultiSig(uint256 _value) internal {\r\n        multiSigWallet.transfer(_value);\r\n    }\r\n}", "OptimizationUsed": "1", "ContractName": "PolicyPalNetworkToken", "ByteCode": "0x6060604052600436106100fb5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610100578063095ea7b31461018a57806318160ddd146101c057806323b872dd146101e5578063313ce5671461020d57806342966c68146102365780635d5aa2771461024e578063661884631461027d57806370a082311461029f5780638da5cb5b146102be578063958222aa146102d157806395d89b41146102e4578063a9059cbb146102f7578063d73dd62314610319578063d9194d2c1461033b578063db0e16f114610353578063dd62ed3e14610375578063f2fde38b1461039a575b600080fd5b341561010b57600080fd5b6101136103b9565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561014f578082015183820152602001610137565b50505050905090810190601f16801561017c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561019557600080fd5b6101ac600160a060020a03600435166024356103f0565b604051901515815260200160405180910390f35b34156101cb57600080fd5b6101d361045c565b60405190815260200160405180910390f35b34156101f057600080fd5b6101ac600160a060020a0360043581169060243516604435610462565b341561021857600080fd5b6102206104fa565b60405160ff909116815260200160405180910390f35b341561024157600080fd5b61024c6004356104ff565b005b341561025957600080fd5b61026161054a565b604051600160a060020a03909116815260200160405180910390f35b341561028857600080fd5b6101ac600160a060020a0360043516602435610559565b34156102aa57600080fd5b6101d3600160a060020a0360043516610653565b34156102c957600080fd5b61026161066e565b34156102dc57600080fd5b6101ac61067d565b34156102ef57600080fd5b61011361068d565b341561030257600080fd5b6101ac600160a060020a03600435166024356106c4565b341561032457600080fd5b6101ac600160a060020a036004351660243561075a565b341561034657600080fd5b61024c60043515156107fe565b341561035e57600080fd5b61024c600160a060020a0360043516602435610848565b341561038057600080fd5b6101d3600160a060020a03600435811690602435166108fe565b34156103a557600080fd5b61024c600160a060020a0360043516610929565b60408051908101604052601781527f506f6c69637950616c204e6574776f726b20546f6b656e000000000000000000602082015281565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60015490565b60045460009060a060020a900460ff168061048b575060035433600160a060020a039081169116145b806104a4575060045433600160a060020a039081169116145b15156104af57600080fd5b82600160a060020a03811615156104c557600080fd5b30600160a060020a031681600160a060020a0316141515156104e657600080fd5b6104f18585856109c4565b95945050505050565b601281565b61050881610b44565b600033600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405190815260200160405180910390a350565b600454600160a060020a031681565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054808311156105b657600160a060020a0333811660009081526002602090815260408083209388168352929052908120556105ed565b6105c6818463ffffffff610bfe16565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b600160a060020a031660009081526020819052604090205490565b600354600160a060020a031681565b60045460a060020a900460ff1681565b60408051908101604052600381527f50414c0000000000000000000000000000000000000000000000000000000000602082015281565b60045460009060a060020a900460ff16806106ed575060035433600160a060020a039081169116145b80610706575060045433600160a060020a039081169116145b151561071157600080fd5b82600160a060020a038116151561072757600080fd5b30600160a060020a031681600160a060020a03161415151561074857600080fd5b6107528484610c10565b949350505050565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054610792908363ffffffff610d2216565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b60035433600160a060020a0390811691161461081957600080fd5b6004805491151560a060020a0274ff000000000000000000000000000000000000000019909216919091179055565b60035433600160a060020a0390811691161461086357600080fd5b600354600160a060020a038084169163a9059cbb9116836000604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156108df57600080fd5b6102c65a03f115156108f057600080fd5b505050604051805150505050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a0390811691161461094457600080fd5b600160a060020a038116151561095957600080fd5b600354600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000600160a060020a03831615156109db57600080fd5b600160a060020a038416600090815260208190526040902054821115610a0057600080fd5b600160a060020a0380851660009081526002602090815260408083203390941683529290522054821115610a3357600080fd5b600160a060020a038416600090815260208190526040902054610a5c908363ffffffff610bfe16565b600160a060020a038086166000908152602081905260408082209390935590851681522054610a91908363ffffffff610d2216565b600160a060020a0380851660009081526020818152604080832094909455878316825260028152838220339093168252919091522054610ad7908363ffffffff610bfe16565b600160a060020a03808616600081815260026020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b600160a060020a033316600090815260208190526040812054821115610b6957600080fd5b5033600160a060020a038116600090815260208190526040902054610b8e9083610bfe565b600160a060020a038216600090815260208190526040902055600154610bba908363ffffffff610bfe16565b600155600160a060020a0381167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58360405190815260200160405180910390a25050565b600082821115610c0a57fe5b50900390565b6000600160a060020a0383161515610c2757600080fd5b600160a060020a033316600090815260208190526040902054821115610c4c57600080fd5b600160a060020a033316600090815260208190526040902054610c75908363ffffffff610bfe16565b600160a060020a033381166000908152602081905260408082209390935590851681522054610caa908363ffffffff610d2216565b60008085600160a060020a0316600160a060020a031681526020019081526020016000208190555082600160a060020a031633600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a350600192915050565b600082820183811015610d3157fe5b93925050505600a165627a7a72305820daab06a27c07f3b95c6372d46ccef2a67d1e9d5b870c188a6d226db9cb5d1b680029"}