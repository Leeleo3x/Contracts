{"Runs": "200", "SwarmSource": "bzzr://4383bc5307e3c701167dc9089c8f1cb7ab0a2d7a7b8963371b0017a581008cf2", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_unitAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributeAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AAcontributors\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"targets\",\"type\":\"address[]\"},{\"name\":\"unixTimes\",\"type\":\"uint256[]\"}],\"name\":\"lockupAccounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"activityFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSeasonGame\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"distributeAirdrop\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_unitAmount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedFundsForthefuture\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"autoDistribute\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"targets\",\"type\":\"address[]\"},{\"name\":\"isFrozen\",\"type\":\"bool\"}],\"name\":\"freezeAccounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"unlockUnixTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_unitAmount\",\"type\":\"uint256\"}],\"name\":\"setDistributeAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"distributeAirdrop\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"collectTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_custom_fallback\",\"type\":\"string\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"locked\",\"type\":\"uint256\"}],\"name\":\"LockedFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.18+commit.9cf6e910", "ConstructorArguments": "", "SourceCode": "pragma solidity ^0.4.18;\r\n\r\n/*   __    __   ______   __    __     _____    ______    ______   ______  __    __\r\n *  /  \\  /  | /      \\ /  \\  /  |   /     |  /      \\  /      \\ /      |/  \\  /  |\r\n *  $$  \\ $$ |/$$$$$$  |$$  \\ $$ |   $$$$$ | /$$$$$$  |/$$$$$$  |$$$$$$/ $$  \\ $$ |\r\n *  $$$  \\$$ |$$ |__$$ |$$$  \\$$ |      $$ | $$ |  $$/ $$ |  $$ |  $$ |  $$$  \\$$ |\r\n *  $$$$  $$ |$$    $$ |$$$$  $$ | __   $$ | $$ |      $$ |  $$ |  $$ |  $$$$  $$ |\r\n *  $$ $$ $$ |$$$$$$$$ |$$ $$ $$ |/  |  $$ | $$ |   __ $$ |  $$ |  $$ |  $$ $$ $$ |\r\n *  $$ |$$$$ |$$ |  $$ |$$ |$$$$ |$$ \\__$$ | $$ \\__/  |$$ \\__$$ | _$$ |_ $$ |$$$$ |\r\n *  $$ | $$$ |$$ |  $$ |$$ | $$$ |$$    $$/  $$    $$/ $$    $$/ / $$   |$$ | $$$ |\r\n *  $$/   $$/ $$/   $$/ $$/   $$/  $$$$$$/    $$$$$$/   $$$$$$/  $$$$$$/ $$/   $$/ \r\n */\r\n\r\n\r\n// JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ\r\n// JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ\r\n// JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ      JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ\r\n// JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ              JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ\r\n// JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ                      JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ\r\n// JJJJJJJJJJJJJJJJJJJJJJJJJJJJJ                            JJJJJJJJJJJJJJJJJJJJJJJJJJJJJ\r\n// JJJJJJJJJJJJJJJJJJJJJJJJJJ                                  JJJJJJJJJJJJJJJJJJJJJJJJJJ\r\n// JJJJJJJJJJJJJJJJJJJJJJ                                          JJJJJJJJJJJJJJJJJJJJJJ\r\n// JJJJJJJJJJJJJJJJJJJ                                                JJJJJJJJJJJJJJJJJJJ\r\n// JJJJJJJJJJJJJJJJJ]                                        JJJJJ     [JJJJJJJJJJJJJJJJJ\r\n// JJJJJJJJJJJJJJJJJ]                                        JJJJJJ    [JJJJJJJJJJJJJJJJJ\r\n// JJJJJJJJJJJJJJJJJ]                                        JJJJJJ    [JJJJJJJJJJJJJJJJJ\r\n// JJJJJJJJJJJJJJJJJ]                                        JJJJJJ    [JJJJJJJJJJJJJJJJJ\r\n// JJJJJJJJJJJJJJJJJ]                                        JJJJJJ    [JJJJJJJJJJJJJJJJJ\r\n// JJJJJJJJJJJJJJJJJ]                   ,                    JJJJJJ    [JJJJJJJJJJJJJJJJJ\r\n// JJJJJJJJJJJJJJJJJ]      NN    NN     AA     NN    NN      JJJJJJ    [JJJJJJJJJJJJJJJJJ\r\n// JJJJJJJJJJJJJJJJJ]      NNNN  NN    A  A    NNNN  NN      JJJJJJ    [JJJJJJJJJJJJJJJJJ\r\n// JJJJJJJJJJJJJJJJJ]      NN  NNNN   AAAAAA   NN  NNNN      JJJJJJ    [JJJJJJJJJJJJJJJJJ\r\n// JJJJJJJJJJJJJJJJJ]      NN    NN  AA    AA  NN    NN      JJJJJJ    [JJJJJJJJJJJJJJJJJ\r\n// JJJJJJJJJJJJJJJJJ]                                        JJJJJJ    [JJJJJJJJJJJJJJJJJ\r\n// JJJJJJJJJJJJJJJJJ]                                        JJJJJJ    [JJJJJJJJJJJJJJJJJ\r\n// JJJJJJJJJJJJJJJJJ]                                       JJJJJJJ    [JJJJJJJJJJJJJJJJJ\r\n// JJJJJJJJJJJJJJJJJ]                                   JJJJJJJJJJJ    [JJJJJJJJJJJJJJJJJ\r\n// JJJJJJJJJJJJJJJJJ]                                JJJJJJJJJJJJJJ    [JJJJJJJJJJJJJJJJJ\r\n// JJJJJJJJJJJJJJJJJJ                             JJJJJJJJJJJJJJ       JJJJJJJJJJJJJJJJJJ\r\n// JJJJJJJJJJJJJJJJJJJ                        JJJJJJJJJJJJJJJ        JJJJJJJJJJJJJJJJJJJJ\r\n// JJJJJJJJJJJJJJJJJJJJJJ                     JJJJJJJJJJJ         JJJJJJJJJJJJJJJJJJJJJJJ\r\n// JJJJJJJJJJJJJJJJJJJJJJJJJJ                 JJJJJJJ          JJJJJJJJJJJJJJJJJJJJJJJJJJ\r\n// JJJJJJJJJJJJJJJJJJJJJJJJJJJJJ              JJJ           JJJJJJJJJJJJJJJJJJJJJJJJJJJJJ\r\n// JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ                      JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ\r\n// JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ              JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ\r\n// JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ      JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ\r\n// JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ\r\n// JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization\r\n *      control functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the\r\n     *      sender account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * \u5f61(^)(^)\r\n * @title ERC223\r\n * @dev ERC223 contract interface with ERC20 functions and events\r\n *      Fully backward compatible with ERC20\r\n *      Recommended implementation used at https://github.com/Dexaran/ERC223-token-standard/tree/Recommended\r\n */\r\ncontract ERC223 {\r\n    uint public totalSupply;\r\n\r\n    // ERC223 and ERC20 functions and events\r\n    function balanceOf(address who) public view returns (uint);\r\n    function totalSupply() public view returns (uint256 _supply);\r\n    function transfer(address to, uint value) public returns (bool ok);\r\n    function transfer(address to, uint value, bytes data) public returns (bool ok);\r\n    function transfer(address to, uint value, bytes data, string customFallback) public returns (bool ok);\r\n    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\r\n\r\n    // ERC223 functions\r\n    function name() public view returns (string _name);\r\n    function symbol() public view returns (string _symbol);\r\n    function decimals() public view returns (uint8 _decimals);\r\n\r\n    // ERC20 functions and events\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title ContractReceiver\r\n * @dev Contract that is working with ERC223 tokens\r\n */\r\n contract ContractReceiver {\r\n\r\n    struct TKN {\r\n        address sender;\r\n        uint value;\r\n        bytes data;\r\n        bytes4 sig;\r\n    }\r\n\r\n    function tokenFallback(address _from, uint _value, bytes _data) public pure {\r\n        TKN memory tkn;\r\n        tkn.sender = _from;\r\n        tkn.value = _value;\r\n        tkn.data = _data;\r\n        uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\r\n        tkn.sig = bytes4(u);\r\n        \r\n        /*\r\n         * tkn variable is analogue of msg variable of Ether transaction\r\n         * tkn.sender is person who initiated this token transaction   (analogue of msg.sender)\r\n         * tkn.value the number of tokens that were sent   (analogue of msg.value)\r\n         * tkn.data is data of token transaction   (analogue of msg.data)\r\n         * tkn.sig is 4 bytes signature of function if data of token transaction is a function execution\r\n         */\r\n    }\r\n}\r\n\r\n\r\n/*************************\r\n * \r\n *  `\uff3f\u3000\u3000\u3000\u3000\u3000   (\u4e09|  \r\n *  |\uff8b_)\u3000\uff0f\uffe3\uffe3\uff3c \u3000L\uff86O  \r\n *  | | \uff0f\u25cf) (\u25cf)  \uff3c\uff5c\uff5c  \r\n *  |_|(\u3000(_\u4eba_)\u3000\u3000)^\u4e85  \r\n *  | \u30fd\uff3c\u3000\uffe3\u3000\uff3f\uff0f \u30df\uff89  \r\n *  \u30fd\uff89\uff89\uffe3|\uff9a\u2015-\uff72 / \uff89  \uff0f   \r\n *  \u3000\uff3c\u3000\u30fd\uff3c |/ \u30a4      \r\n * \u3000\uff0f\uffe3\u4e8c\u4e8c\u4e8c\u4e8c\u4e8c\u4e8c\uff3c   \r\n * `\uff5c\u7b54\uff5c  N A N J \uff5c\uff5c  \r\n * \u3000\uff3c\uff3f\u4e8c\u4e8c\u4e8c\u4e8c\u4e8c\u4e8c\uff0f   \r\n *\r\n *************************/\r\n\r\n/**\r\n * \u5f61(\uff9f)(\uff9f)\r\n * @title NANJCOIN\r\n * @author Tsuchinoko & NanJ people\r\n * @dev NANJCOIN is an ERC223 Token with ERC20 functions and events\r\n *      Fully backward compatible with ERC20\r\n */\r\ncontract NANJCOIN is ERC223, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    string public name = \"NANJCOIN\";\r\n    string public symbol = \"NANJ\";\r\n    string public constant AAcontributors = \"sybit & \u30af\u30ea\u30d7\u305f\u3093\";\r\n    uint8 public decimals = 8;\r\n    uint256 public totalSupply = 30e9 * 1e8;\r\n    uint256 public distributeAmount = 0;\r\n    bool public mintingFinished = false;\r\n    \r\n    address public founder = 0x1B746E35C90050E3cc236479051467F623CA14f7;\r\n    address public preSeasonGame = 0xAeC7cF1da46a76ad3A41580e28E778ff8849ec49;\r\n    address public activityFunds = 0x728899556c836ce7F8AA73e8BaCE3241F17077bF;\r\n    address public lockedFundsForthefuture = 0xB80c43bf83f7Cb6c44b84B436b01Ea92Da5dabFF;\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping (address => uint256)) public allowance;\r\n    mapping (address => bool) public frozenAccount;\r\n    mapping (address => uint256) public unlockUnixTime;\r\n    \r\n    event FrozenFunds(address indexed target, bool frozen);\r\n    event LockedFunds(address indexed target, uint256 locked);\r\n    event Burn(address indexed from, uint256 amount);\r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintFinished();\r\n\r\n\r\n    /** \r\n     * @dev Constructor is called only once and can not be called again\r\n     */\r\n    function NANJCOIN() public {\r\n        owner = activityFunds;\r\n        \r\n        balanceOf[founder] = totalSupply.mul(25).div(100);\r\n        balanceOf[preSeasonGame] = totalSupply.mul(55).div(100);\r\n        balanceOf[activityFunds] = totalSupply.mul(10).div(100);\r\n        balanceOf[lockedFundsForthefuture] = totalSupply.mul(10).div(100);\r\n    }\r\n\r\n\r\n    function name() public view returns (string _name) {\r\n        return name;\r\n    }\r\n\r\n    function symbol() public view returns (string _symbol) {\r\n        return symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8 _decimals) {\r\n        return decimals;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256 _totalSupply) {\r\n        return totalSupply;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balanceOf[_owner];\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Prevent targets from sending or receiving tokens\r\n     * @param targets Addresses to be frozen\r\n     * @param isFrozen either to freeze it or not\r\n     */\r\n    function freezeAccounts(address[] targets, bool isFrozen) onlyOwner public {\r\n        require(targets.length > 0);\r\n\r\n        for (uint j = 0; j < targets.length; j++) {\r\n            require(targets[j] != 0x0);\r\n            frozenAccount[targets[j]] = isFrozen;\r\n            FrozenFunds(targets[j], isFrozen);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Prevent targets from sending or receiving tokens by setting Unix times\r\n     * @param targets Addresses to be locked funds\r\n     * @param unixTimes Unix times when locking up will be finished\r\n     */\r\n    function lockupAccounts(address[] targets, uint[] unixTimes) onlyOwner public {\r\n        require(targets.length > 0\r\n                && targets.length == unixTimes.length);\r\n                \r\n        for(uint j = 0; j < targets.length; j++){\r\n            require(unlockUnixTime[targets[j]] < unixTimes[j]);\r\n            unlockUnixTime[targets[j]] = unixTimes[j];\r\n            LockedFunds(targets[j], unixTimes[j]);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Function that is called when a user or another contract wants to transfer funds\r\n     */\r\n    function transfer(address _to, uint _value, bytes _data, string _custom_fallback) public returns (bool success) {\r\n        require(_value > 0\r\n                && frozenAccount[msg.sender] == false \r\n                && frozenAccount[_to] == false\r\n                && now > unlockUnixTime[msg.sender] \r\n                && now > unlockUnixTime[_to]);\r\n\r\n        if (isContract(_to)) {\r\n            require(balanceOf[msg.sender] >= _value);\r\n            balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\r\n            balanceOf[_to] = balanceOf[_to].add(_value);\r\n            assert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));\r\n            Transfer(msg.sender, _to, _value, _data);\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else {\r\n            return transferToAddress(_to, _value, _data);\r\n        }\r\n    }\r\n\r\n    function transfer(address _to, uint _value, bytes _data) public  returns (bool success) {\r\n        require(_value > 0\r\n                && frozenAccount[msg.sender] == false \r\n                && frozenAccount[_to] == false\r\n                && now > unlockUnixTime[msg.sender] \r\n                && now > unlockUnixTime[_to]);\r\n\r\n        if (isContract(_to)) {\r\n            return transferToContract(_to, _value, _data);\r\n        } else {\r\n            return transferToAddress(_to, _value, _data);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Standard function transfer similar to ERC20 transfer with no _data\r\n     *      Added due to backwards compatibility reasons\r\n     */\r\n    function transfer(address _to, uint _value) public returns (bool success) {\r\n        require(_value > 0\r\n                && frozenAccount[msg.sender] == false \r\n                && frozenAccount[_to] == false\r\n                && now > unlockUnixTime[msg.sender] \r\n                && now > unlockUnixTime[_to]);\r\n\r\n        bytes memory empty;\r\n        if (isContract(_to)) {\r\n            return transferToContract(_to, _value, empty);\r\n        } else {\r\n            return transferToAddress(_to, _value, empty);\r\n        }\r\n    }\r\n\r\n    // assemble the given address bytecode. If bytecode exists then the _addr is a contract.\r\n    function isContract(address _addr) private view returns (bool is_contract) {\r\n        uint length;\r\n        assembly {\r\n            //retrieve the size of the code on target address, this needs assembly\r\n            length := extcodesize(_addr)\r\n        }\r\n        return (length > 0);\r\n    }\r\n\r\n    // function that is called when transaction target is an address\r\n    function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value, _data);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    // function that is called when transaction target is a contract\r\n    function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        ContractReceiver receiver = ContractReceiver(_to);\r\n        receiver.tokenFallback(msg.sender, _value, _data);\r\n        Transfer(msg.sender, _to, _value, _data);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     *      Added due to backwards compatibility with ERC20\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_to != address(0)\r\n                && _value > 0\r\n                && balanceOf[_from] >= _value\r\n                && allowance[_from][msg.sender] >= _value\r\n                && frozenAccount[_from] == false \r\n                && frozenAccount[_to] == false\r\n                && now > unlockUnixTime[_from] \r\n                && now > unlockUnixTime[_to]);\r\n\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows _spender to spend no more than _value tokens in your behalf\r\n     *      Added due to backwards compatibility with ERC20\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender\r\n     *      Added due to backwards compatibility with ERC20\r\n     * @param _owner address The address which owns the funds\r\n     * @param _spender address The address which will spend the funds\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return allowance[_owner][_spender];\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _from The address that will burn the tokens.\r\n     * @param _unitAmount The amount of token to be burned.\r\n     */\r\n    function burn(address _from, uint256 _unitAmount) onlyOwner public {\r\n        require(_unitAmount > 0\r\n                && balanceOf[_from] >= _unitAmount);\r\n\r\n        balanceOf[_from] = balanceOf[_from].sub(_unitAmount);\r\n        totalSupply = totalSupply.sub(_unitAmount);\r\n        Burn(_from, _unitAmount);\r\n    }\r\n\r\n\r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param _to The address that will receive the minted tokens.\r\n     * @param _unitAmount The amount of tokens to mint.\r\n     */\r\n    function mint(address _to, uint256 _unitAmount) onlyOwner canMint public returns (bool) {\r\n        require(_unitAmount > 0);\r\n        \r\n        totalSupply = totalSupply.add(_unitAmount);\r\n        balanceOf[_to] = balanceOf[_to].add(_unitAmount);\r\n        Mint(_to, _unitAmount);\r\n        Transfer(address(0), _to, _unitAmount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to stop minting new tokens.\r\n     */\r\n    function finishMinting() onlyOwner canMint public returns (bool) {\r\n        mintingFinished = true;\r\n        MintFinished();\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * @dev Function to distribute tokens to the list of addresses by the provided amount\r\n     */\r\n    function distributeAirdrop(address[] addresses, uint256 amount) public returns (bool) {\r\n        require(amount > 0 \r\n                && addresses.length > 0\r\n                && frozenAccount[msg.sender] == false\r\n                && now > unlockUnixTime[msg.sender]);\r\n\r\n        amount = amount.mul(1e8);\r\n        uint256 totalAmount = amount.mul(addresses.length);\r\n        require(balanceOf[msg.sender] >= totalAmount);\r\n        \r\n        for (uint j = 0; j < addresses.length; j++) {\r\n            require(addresses[j] != 0x0\r\n                    && frozenAccount[addresses[j]] == false\r\n                    && now > unlockUnixTime[addresses[j]]);\r\n\r\n            balanceOf[addresses[j]] = balanceOf[addresses[j]].add(amount);\r\n            Transfer(msg.sender, addresses[j], amount);\r\n        }\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(totalAmount);\r\n        return true;\r\n    }\r\n\r\n    function distributeAirdrop(address[] addresses, uint[] amounts) public returns (bool) {\r\n        require(addresses.length > 0\r\n                && addresses.length == amounts.length\r\n                && frozenAccount[msg.sender] == false\r\n                && now > unlockUnixTime[msg.sender]);\r\n                \r\n        uint256 totalAmount = 0;\r\n        \r\n        for(uint j = 0; j < addresses.length; j++){\r\n            require(amounts[j] > 0\r\n                    && addresses[j] != 0x0\r\n                    && frozenAccount[addresses[j]] == false\r\n                    && now > unlockUnixTime[addresses[j]]);\r\n                    \r\n            amounts[j] = amounts[j].mul(1e8);\r\n            totalAmount = totalAmount.add(amounts[j]);\r\n        }\r\n        require(balanceOf[msg.sender] >= totalAmount);\r\n        \r\n        for (j = 0; j < addresses.length; j++) {\r\n            balanceOf[addresses[j]] = balanceOf[addresses[j]].add(amounts[j]);\r\n            Transfer(msg.sender, addresses[j], amounts[j]);\r\n        }\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(totalAmount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to collect tokens from the list of addresses\r\n     */\r\n    function collectTokens(address[] addresses, uint[] amounts) onlyOwner public returns (bool) {\r\n        require(addresses.length > 0\r\n                && addresses.length == amounts.length);\r\n\r\n        uint256 totalAmount = 0;\r\n        \r\n        for (uint j = 0; j < addresses.length; j++) {\r\n            require(amounts[j] > 0\r\n                    && addresses[j] != 0x0\r\n                    && frozenAccount[addresses[j]] == false\r\n                    && now > unlockUnixTime[addresses[j]]);\r\n                    \r\n            amounts[j] = amounts[j].mul(1e8);\r\n            require(balanceOf[addresses[j]] >= amounts[j]);\r\n            balanceOf[addresses[j]] = balanceOf[addresses[j]].sub(amounts[j]);\r\n            totalAmount = totalAmount.add(amounts[j]);\r\n            Transfer(addresses[j], msg.sender, amounts[j]);\r\n        }\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].add(totalAmount);\r\n        return true;\r\n    }\r\n\r\n\r\n    function setDistributeAmount(uint256 _unitAmount) onlyOwner public {\r\n        distributeAmount = _unitAmount;\r\n    }\r\n    \r\n    /**\r\n     * @dev Function to distribute tokens to the msg.sender automatically\r\n     *      If distributeAmount is 0, this function doesn't work\r\n     */\r\n    function autoDistribute() payable public {\r\n        require(distributeAmount > 0\r\n                && balanceOf[activityFunds] >= distributeAmount\r\n                && frozenAccount[msg.sender] == false\r\n                && now > unlockUnixTime[msg.sender]);\r\n        if(msg.value > 0) activityFunds.transfer(msg.value);\r\n        \r\n        balanceOf[activityFunds] = balanceOf[activityFunds].sub(distributeAmount);\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].add(distributeAmount);\r\n        Transfer(activityFunds, msg.sender, distributeAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev fallback function\r\n     */\r\n    function() payable public {\r\n        autoDistribute();\r\n     }\r\n\r\n}\r\n\r\n\r\n/*\r\n *\uff08\uff40\u30fb\u03c9\u30fb\uff09\uff08\uff40\u30fb\u03c9\u30fb\u00b4\uff09\uff08\u30fb\u03c9\u30fb\u00b4\uff09\r\n *     Created by Tsuchinoko\r\n *\uff08\u00b4\u30fb\u03c9\u30fb\uff09\uff08\u00b4\u30fb\u03c9\u30fb\uff40\uff09\uff08\u30fb\u03c9\u30fb\uff40\uff09\r\n */", "OptimizationUsed": "1", "ContractName": "NANJCOIN", "ByteCode": "0x60606040526004361061017c5763ffffffff60e060020a60003504166305d2035b811461018657806306fdde03146101ad578063095ea7b31461023757806318160ddd1461025957806323b872dd1461027e578063313ce567146102a657806340c10f19146102cf5780634d853ee5146102f15780634f25eced146103205780635ab892481461033357806364ddc6051461034657806370a08231146103d55780637d64bcb4146103f457806385a156af146104075780638da5cb5b1461041a578063911a9ac01461042d578063945946251461044057806395d89b41146104915780639dc29fac146104a4578063a245b774146104c6578063a8f11eb91461017c578063a9059cbb146104d9578063b414d4b6146104fb578063be45fd621461051a578063c341b9f61461057f578063cbbe974b146105d2578063d39b1d48146105f1578063dd62ed3e14610607578063dd9245941461062c578063f0dc4171146106bb578063f2fde38b1461074a578063f6368f8a14610769575b610184610810565b005b341561019157600080fd5b610199610985565b604051901515815260200160405180910390f35b34156101b857600080fd5b6101c061098e565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101fc5780820151838201526020016101e4565b50505050905090810190601f1680156102295780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561024257600080fd5b610199600160a060020a0360043516602435610a36565b341561026457600080fd5b61026c610aa2565b60405190815260200160405180910390f35b341561028957600080fd5b610199600160a060020a0360043581169060243516604435610aa8565b34156102b157600080fd5b6102b9610cb7565b60405160ff909116815260200160405180910390f35b34156102da57600080fd5b610199600160a060020a0360043516602435610cc0565b34156102fc57600080fd5b610304610dc2565b604051600160a060020a03909116815260200160405180910390f35b341561032b57600080fd5b61026c610dd6565b341561033e57600080fd5b6101c0610ddc565b341561035157600080fd5b610184600460248135818101908301358060208181020160405190810160405280939291908181526020018383602002808284378201915050505050509190803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843750949650610e1395505050505050565b34156103e057600080fd5b61026c600160a060020a0360043516610f6d565b34156103ff57600080fd5b610199610f88565b341561041257600080fd5b610304610ff5565b341561042557600080fd5b610304611004565b341561043857600080fd5b610304611013565b341561044b57600080fd5b6101996004602481358181019083013580602081810201604051908101604052809392919081815260200183836020028082843750949650509335935061102292505050565b341561049c57600080fd5b6101c06112b0565b34156104af57600080fd5b610184600160a060020a0360043516602435611323565b34156104d157600080fd5b61030461140b565b34156104e457600080fd5b610199600160a060020a036004351660243561141a565b341561050657600080fd5b610199600160a060020a03600435166114f5565b341561052557600080fd5b61019960048035600160a060020a03169060248035919060649060443590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061150a95505050505050565b341561058a57600080fd5b61018460046024813581810190830135806020818102016040519081016040528093929190818152602001838360200280828437509496505050509135151591506115d59050565b34156105dd57600080fd5b61026c600160a060020a03600435166116d7565b34156105fc57600080fd5b6101846004356116e9565b341561061257600080fd5b61026c600160a060020a0360043581169060243516611709565b341561063757600080fd5b61019960046024813581810190830135806020818102016040519081016040528093929190818152602001838360200280828437820191505050505050919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284375094965061173495505050505050565b34156106c657600080fd5b6101996004602481358181019083013580602081810201604051908101604052809392919081815260200183836020028082843782019150505050505091908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437509496506119e695505050505050565b341561075557600080fd5b610184600160a060020a0360043516611cb4565b341561077457600080fd5b61019960048035600160a060020a03169060248035919060649060443590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f016020809104026020016040519081016040528181529291906020840183838082843750949650611d4f95505050505050565b600060065411801561083e5750600654600954600160a060020a03166000908152600b602052604090205410155b80156108635750600160a060020a0333166000908152600d602052604090205460ff16155b80156108865750600160a060020a0333166000908152600e602052604090205442115b151561089157600080fd5b60003411156108ce57600954600160a060020a03163480156108fc0290604051600060405180830381858888f1935050505015156108ce57600080fd5b600654600954600160a060020a03166000908152600b60205260409020546108fb9163ffffffff6120a716565b600954600160a060020a039081166000908152600b60205260408082209390935560065433909216815291909120546109399163ffffffff6120b916565b600160a060020a033381166000818152600b60205260409081902093909355600954600654919392169160008051602061250b83398151915291905190815260200160405180910390a3565b60075460ff1681565b6109966124e1565b60028054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a2c5780601f10610a0157610100808354040283529160200191610a2c565b820191906000526020600020905b815481529060010190602001808311610a0f57829003601f168201915b5050505050905090565b600160a060020a033381166000818152600c6020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60055490565b6000600160a060020a03831615801590610ac25750600082115b8015610ae75750600160a060020a0384166000908152600b6020526040902054829010155b8015610b1a5750600160a060020a038085166000908152600c602090815260408083203390941683529290522054829010155b8015610b3f5750600160a060020a0384166000908152600d602052604090205460ff16155b8015610b645750600160a060020a0383166000908152600d602052604090205460ff16155b8015610b875750600160a060020a0384166000908152600e602052604090205442115b8015610baa5750600160a060020a0383166000908152600e602052604090205442115b1515610bb557600080fd5b600160a060020a0384166000908152600b6020526040902054610bde908363ffffffff6120a716565b600160a060020a038086166000908152600b60205260408082209390935590851681522054610c13908363ffffffff6120b916565b600160a060020a038085166000908152600b60209081526040808320949094558783168252600c8152838220339093168252919091522054610c5b908363ffffffff6120a716565b600160a060020a038086166000818152600c60209081526040808320338616845290915290819020939093559085169160008051602061250b8339815191529085905190815260200160405180910390a35060015b9392505050565b60045460ff1690565b60015460009033600160a060020a03908116911614610cde57600080fd5b60075460ff1615610cee57600080fd5b60008211610cfb57600080fd5b600554610d0e908363ffffffff6120b916565b600555600160a060020a0383166000908152600b6020526040902054610d3a908363ffffffff6120b916565b600160a060020a0384166000818152600b60205260409081902092909255907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859084905190815260200160405180910390a2600160a060020a038316600060008051602061250b8339815191528460405190815260200160405180910390a350600192915050565b6007546101009004600160a060020a031681565b60065481565b60408051908101604052601781527f7379626974202620e382afe383aae38397e3819fe38293000000000000000000602082015281565b60015460009033600160a060020a03908116911614610e3157600080fd5b60008351118015610e43575081518351145b1515610e4e57600080fd5b5060005b8251811015610f6857818181518110610e6757fe5b90602001906020020151600e6000858481518110610e8157fe5b90602001906020020151600160a060020a0316815260208101919091526040016000205410610eaf57600080fd5b818181518110610ebb57fe5b90602001906020020151600e6000858481518110610ed557fe5b90602001906020020151600160a060020a03168152602081019190915260400160002055828181518110610f0557fe5b90602001906020020151600160a060020a03167f1bd6fb9fa2c39ce5d0d2afa1eaba998963eb5f553fd862c94f131aa9e35c1577838381518110610f4557fe5b9060200190602002015160405190815260200160405180910390a2600101610e52565b505050565b600160a060020a03166000908152600b602052604090205490565b60015460009033600160a060020a03908116911614610fa657600080fd5b60075460ff1615610fb657600080fd5b6007805460ff191660011790557fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a150600190565b600954600160a060020a031681565b600154600160a060020a031681565b600854600160a060020a031681565b60008060008084118015611037575060008551115b801561105c5750600160a060020a0333166000908152600d602052604090205460ff16155b801561107f5750600160a060020a0333166000908152600e602052604090205442115b151561108a57600080fd5b61109e846305f5e10063ffffffff6120c816565b93506110b28551859063ffffffff6120c816565b600160a060020a0333166000908152600b6020526040902054909250829010156110db57600080fd5b5060005b8451811015611263578481815181106110f457fe5b90602001906020020151600160a060020a0316158015906111495750600d600086838151811061112057fe5b90602001906020020151600160a060020a0316815260208101919091526040016000205460ff16155b801561118e5750600e600086838151811061116057fe5b90602001906020020151600160a060020a0316600160a060020a031681526020019081526020016000205442115b151561119957600080fd5b6111dd84600b60008885815181106111ad57fe5b90602001906020020151600160a060020a031681526020810191909152604001600020549063ffffffff6120b916565b600b60008784815181106111ed57fe5b90602001906020020151600160a060020a0316815260208101919091526040016000205584818151811061121d57fe5b90602001906020020151600160a060020a031633600160a060020a031660008051602061250b8339815191528660405190815260200160405180910390a36001016110df565b600160a060020a0333166000908152600b602052604090205461128c908363ffffffff6120a716565b33600160a060020a03166000908152600b6020526040902055506001949350505050565b6112b86124e1565b60038054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a2c5780601f10610a0157610100808354040283529160200191610a2c565b60015433600160a060020a0390811691161461133e57600080fd5b6000811180156113675750600160a060020a0382166000908152600b6020526040902054819010155b151561137257600080fd5b600160a060020a0382166000908152600b602052604090205461139b908263ffffffff6120a716565b600160a060020a0383166000908152600b60205260409020556005546113c7908263ffffffff6120a716565b600555600160a060020a0382167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58260405190815260200160405180910390a25050565b600a54600160a060020a031681565b60006114246124e1565b60008311801561144d5750600160a060020a0333166000908152600d602052604090205460ff16155b80156114725750600160a060020a0384166000908152600d602052604090205460ff16155b80156114955750600160a060020a0333166000908152600e602052604090205442115b80156114b85750600160a060020a0384166000908152600e602052604090205442115b15156114c357600080fd5b6114cc846120f3565b156114e3576114dc8484836120fb565b91506114ee565b6114dc84848361235e565b5092915050565b600d6020526000908152604090205460ff1681565b600080831180156115345750600160a060020a0333166000908152600d602052604090205460ff16155b80156115595750600160a060020a0384166000908152600d602052604090205460ff16155b801561157c5750600160a060020a0333166000908152600e602052604090205442115b801561159f5750600160a060020a0384166000908152600e602052604090205442115b15156115aa57600080fd5b6115b3846120f3565b156115ca576115c38484846120fb565b9050610cb0565b6115c384848461235e565b60015460009033600160a060020a039081169116146115f357600080fd5b600083511161160157600080fd5b5060005b8251811015610f685782818151811061161a57fe5b90602001906020020151600160a060020a0316151561163857600080fd5b81600d600085848151811061164957fe5b90602001906020020151600160a060020a031681526020810191909152604001600020805460ff191691151591909117905582818151811061168757fe5b90602001906020020151600160a060020a03167f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a583604051901515815260200160405180910390a2600101611605565b600e6020526000908152604090205481565b60015433600160a060020a0390811691161461170457600080fd5b600655565b600160a060020a039182166000908152600c6020908152604080832093909416825291909152205490565b600080600080855111801561174a575083518551145b801561176f5750600160a060020a0333166000908152600d602052604090205460ff16155b80156117925750600160a060020a0333166000908152600e602052604090205442115b151561179d57600080fd5b5060009050805b84518110156118ef5760008482815181106117bb57fe5b906020019060200201511180156117ef57508481815181106117d957fe5b90602001906020020151600160a060020a031615155b801561182f5750600d600086838151811061180657fe5b90602001906020020151600160a060020a0316815260208101919091526040016000205460ff16155b80156118745750600e600086838151811061184657fe5b90602001906020020151600160a060020a0316600160a060020a031681526020019081526020016000205442115b151561187f57600080fd5b6118a96305f5e10085838151811061189357fe5b906020019060200201519063ffffffff6120c816565b8482815181106118b557fe5b602090810290910101526118e58482815181106118ce57fe5b90602001906020020151839063ffffffff6120b916565b91506001016117a4565b600160a060020a0333166000908152600b60205260409020548290101561191557600080fd5b5060005b84518110156112635761194b84828151811061193157fe5b90602001906020020151600b60008885815181106111ad57fe5b600b600087848151811061195b57fe5b90602001906020020151600160a060020a0316815260208101919091526040016000205584818151811061198b57fe5b90602001906020020151600160a060020a031633600160a060020a031660008051602061250b8339815191528684815181106119c357fe5b9060200190602002015160405190815260200160405180910390a3600101611919565b6001546000908190819033600160a060020a03908116911614611a0857600080fd5b60008551118015611a1a575083518551145b1515611a2557600080fd5b5060009050805b8451811015611c8b576000848281518110611a4357fe5b90602001906020020151118015611a775750848181518110611a6157fe5b90602001906020020151600160a060020a031615155b8015611ab75750600d6000868381518110611a8e57fe5b90602001906020020151600160a060020a0316815260208101919091526040016000205460ff16155b8015611afc5750600e6000868381518110611ace57fe5b90602001906020020151600160a060020a0316600160a060020a031681526020019081526020016000205442115b1515611b0757600080fd5b611b1b6305f5e10085838151811061189357fe5b848281518110611b2757fe5b60209081029091010152838181518110611b3d57fe5b90602001906020020151600b6000878481518110611b5757fe5b90602001906020020151600160a060020a031681526020810191909152604001600020541015611b8657600080fd5b611bdf848281518110611b9557fe5b90602001906020020151600b6000888581518110611baf57fe5b90602001906020020151600160a060020a031681526020810191909152604001600020549063ffffffff6120a716565b600b6000878481518110611bef57fe5b90602001906020020151600160a060020a03168152602081019190915260400160002055611c228482815181106118ce57fe5b915033600160a060020a0316858281518110611c3a57fe5b90602001906020020151600160a060020a031660008051602061250b833981519152868481518110611c6857fe5b9060200190602002015160405190815260200160405180910390a3600101611a2c565b600160a060020a0333166000908152600b602052604090205461128c908363ffffffff6120b916565b60015433600160a060020a03908116911614611ccf57600080fd5b600160a060020a0381161515611ce457600080fd5b600154600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008084118015611d795750600160a060020a0333166000908152600d602052604090205460ff16155b8015611d9e5750600160a060020a0385166000908152600d602052604090205460ff16155b8015611dc15750600160a060020a0333166000908152600e602052604090205442115b8015611de45750600160a060020a0385166000908152600e602052604090205442115b1515611def57600080fd5b611df8856120f3565b1561209157600160a060020a0333166000908152600b602052604090205484901015611e2357600080fd5b600160a060020a0333166000908152600b6020526040902054611e4c908563ffffffff6120a716565b600160a060020a033381166000908152600b60205260408082209390935590871681522054611e81908563ffffffff6120b916565b600160a060020a0386166000818152600b60205260408082209390935590918490518082805190602001908083835b60208310611ecf5780518252601f199092019160209182019101611eb0565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051809103902060e060020a9004903387876040518563ffffffff1660e060020a0281526004018084600160a060020a0316600160a060020a03168152602001838152602001828051906020019080838360005b83811015611f60578082015183820152602001611f48565b50505050905090810190601f168015611f8d5780820380516001836020036101000a031916815260200191505b50935050505060006040518083038185886187965a03f193505050501515611fb157fe5b826040518082805190602001908083835b60208310611fe15780518252601f199092019160209182019101611fc2565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051809103902085600160a060020a031633600160a060020a03167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c168760405190815260200160405180910390a484600160a060020a031633600160a060020a031660008051602061250b8339815191528660405190815260200160405180910390a350600161209f565b61209c85858561235e565b90505b949350505050565b6000828211156120b357fe5b50900390565b600082820183811015610cb057fe5b6000808315156120db57600091506114ee565b508282028284828115156120eb57fe5b0414610cb057fe5b6000903b1190565b600160a060020a0333166000908152600b602052604081205481908490101561212357600080fd5b600160a060020a0333166000908152600b602052604090205461214c908563ffffffff6120a716565b600160a060020a033381166000908152600b60205260408082209390935590871681522054612181908563ffffffff6120b916565b600160a060020a0386166000818152600b602052604090819020929092558692509063c0ee0b8a90339087908790518463ffffffff1660e060020a0281526004018084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561221a578082015183820152602001612202565b50505050905090810190601f1680156122475780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b151561226757600080fd5b6102c65a03f1151561227857600080fd5b505050826040518082805190602001908083835b602083106122ab5780518252601f19909201916020918201910161228c565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051809103902085600160a060020a031633600160a060020a03167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c168760405190815260200160405180910390a484600160a060020a031633600160a060020a031660008051602061250b8339815191528660405190815260200160405180910390a3506001949350505050565b600160a060020a0333166000908152600b60205260408120548390101561238457600080fd5b600160a060020a0333166000908152600b60205260409020546123ad908463ffffffff6120a716565b600160a060020a033381166000908152600b602052604080822093909355908616815220546123e2908463ffffffff6120b916565b600160a060020a0385166000908152600b602052604090819020919091558290518082805190602001908083835b6020831061242f5780518252601f199092019160209182019101612410565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051809103902084600160a060020a031633600160a060020a03167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c168660405190815260200160405180910390a483600160a060020a031633600160a060020a031660008051602061250b8339815191528560405190815260200160405180910390a35060019392505050565b60206040519081016040526000815290565b600080828481151561250157fe5b049493505050505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a723058204383bc5307e3c701167dc9089c8f1cb7ab0a2d7a7b8963371b0017a581008cf20029"}