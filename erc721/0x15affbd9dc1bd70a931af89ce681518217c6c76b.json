{"Runs": "200", "SwarmSource": "bzzr://dd001735a4c8b0082694923813c177efbb5a926fa681b3e51d0aebcc329ca0d1", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_studioId\",\"type\":\"uint8\"},{\"name\":\"_inviterId\",\"type\":\"uint256\"}],\"name\":\"buyStar\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"InterfaceId_ERC165\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"starPower\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"forceTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"starCoinAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_logicContractAddress\",\"type\":\"address\"}],\"name\":\"setLogicContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"starData\",\"outputs\":[{\"name\":\"fieldA\",\"type\":\"uint16\"},{\"name\":\"fieldB\",\"type\":\"uint16\"},{\"name\":\"fieldC\",\"type\":\"uint32\"},{\"name\":\"fieldD\",\"type\":\"uint32\"},{\"name\":\"fieldE\",\"type\":\"uint32\"},{\"name\":\"fieldF\",\"type\":\"uint64\"},{\"name\":\"fieldG\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"starStudio\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"logicContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"setActiveStar\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"studios\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"genome\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"activeStar\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"activeStarGenome\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_fieldA\",\"type\":\"uint16\"},{\"name\":\"_fieldB\",\"type\":\"uint16\"},{\"name\":\"_fieldC\",\"type\":\"uint32\"},{\"name\":\"_fieldD\",\"type\":\"uint32\"},{\"name\":\"_fieldE\",\"type\":\"uint32\"},{\"name\":\"_fieldF\",\"type\":\"uint64\"},{\"name\":\"_fieldG\",\"type\":\"uint64\"}],\"name\":\"setStarData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_genome\",\"type\":\"uint256\"}],\"name\":\"setGenome\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_studioId\",\"type\":\"uint8\"},{\"name\":\"_studioAddress\",\"type\":\"address\"}],\"name\":\"addStudio\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_starCoinAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ActiveStarChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_studioId\",\"type\":\"uint8\"}],\"name\":\"BoughtStar\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.24+commit.e67f0147", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000298b4939fa7ff6d7ec2da22521c8c4dca670585c0000000000000000000000000000000000000000000000000000000000000014457468657220506f726e5374617273205374617200000000000000000000000000000000000000000000000000000000000000000000000000000000000000074550537374617200000000000000000000000000000000000000000000000000", "SourceCode": "pragma solidity ^0.4.24;\r\n\r\n//Have an idea for a studio? Email: admin[at]EtherPornStars.com\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n  function totalSupply() public view returns (uint256);\r\n\r\n  function balanceOf(address _who) public view returns (uint256);\r\n\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = _a * _b;\r\n    require(c / _a == _b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    require(_b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    require(_b <= _a);\r\n    uint256 c = _a - _b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    uint256 c = _a + _b;\r\n    require(c >= _a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20 {\r\n  using SafeMath for uint256;\r\n\r\n  mapping (address => uint256) balances;\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_value <= balances[msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint256 _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint256 _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue >= oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that mints an amount of the token and assigns it to\r\n   * an account. This encapsulates the modification of balances such that the\r\n   * proper events are emitted.\r\n   * @param _account The account that will receive the created tokens.\r\n   * @param _amount The amount that will be created.\r\n   */\r\n  function _mint(address _account, uint256 _amount) internal {\r\n    require(_account != 0);\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_account] = balances[_account].add(_amount);\r\n    emit Transfer(address(0), _account, _amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that burns an amount of the token of a given\r\n   * account.\r\n   * @param _account The account whose tokens will be burnt.\r\n   * @param _amount The amount that will be burnt.\r\n   */\r\n  function _burn(address _account, uint256 _amount) internal {\r\n    require(_account != 0);\r\n    require(_amount <= balances[_account]);\r\n\r\n    totalSupply_ = totalSupply_.sub(_amount);\r\n    balances[_account] = balances[_account].sub(_amount);\r\n    emit Transfer(_account, address(0), _amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that burns an amount of the token of a given\r\n   * account, deducting from the sender's allowance for said account. Uses the\r\n   * internal _burn function.\r\n   * @param _account The account whose tokens will be burnt.\r\n   * @param _amount The amount that will be burnt.\r\n   */\r\n  function _burnFrom(address _account, uint256 _amount) internal {\r\n    require(_amount <= allowed[_account][msg.sender]);\r\n\r\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\r\n    // this function needs to emit an event with the updated approval.\r\n    allowed[_account][msg.sender] = allowed[_account][msg.sender].sub(_amount);\r\n    _burn(_account, _amount);\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n *  from ERC20 asset contracts.\r\n */\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\n\r\n\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n}\r\n\r\n\r\ncontract StarCoin is Ownable, StandardToken {\r\n    using SafeMath for uint;\r\n    address gateway;\r\n    string public name = \"EtherPornStars Coin\";\r\n    string public symbol = \"EPS\";\r\n    uint8 public decimals = 18;\r\n    mapping (uint8 => address) public studioContracts;\r\n    mapping (address => bool) public isMinter;\r\n    event Withdrawal(address indexed to, uint256 value);\r\n    event Burn(address indexed from, uint256 value);\r\n    modifier onlyMinters {\r\n      require(msg.sender == owner || isMinter[msg.sender]);\r\n      _;\r\n    }\r\n\r\n    constructor () public {\r\n  }\r\n  /**\r\n   * @dev Future sidechain integration for studios.\r\n   */\r\n    function setGateway(address _gateway) external onlyOwner {\r\n        gateway = _gateway;\r\n    }\r\n\r\n\r\n    function _mintTokens(address _user, uint256 _amount) private {\r\n        require(_user != 0x0);\r\n        balances[_user] = balances[_user].add(_amount);\r\n        totalSupply_ = totalSupply_.add(_amount);\r\n        emit Transfer(address(this), _user, _amount);\r\n    }\r\n\r\n    function rewardTokens(address _user, uint256 _tokens) external   { \r\n        require(msg.sender == owner || isMinter[msg.sender]);\r\n        _mintTokens(_user, _tokens);\r\n    }\r\n    function buyStudioStake(address _user, uint256 _tokens) external   { \r\n        require(msg.sender == owner || isMinter[msg.sender]);\r\n        _burn(_user, _tokens);\r\n    }\r\n    function transferFromStudio(\r\n      address _from,\r\n      address _to,\r\n      uint256 _value\r\n    )\r\n      external\r\n      returns (bool)\r\n    {\r\n      require(msg.sender == owner || isMinter[msg.sender]);\r\n      require(_value <= balances[_from]);\r\n      require(_to != address(0));\r\n\r\n      balances[_from] = balances[_from].sub(_value);\r\n      balances[_to] = balances[_to].add(_value);\r\n      emit Transfer(_from, _to, _value);\r\n      return true;\r\n  }\r\n\r\n    function() payable public {\r\n        // Intentionally left empty, for use by studios\r\n    }\r\n\r\n    function accountAuth(uint256 /*_challenge*/) external {\r\n        // Does nothing by design\r\n    }\r\n\r\n    function burn(uint256 _amount) external {\r\n        require(balances[msg.sender] >= _amount);\r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        totalSupply_ = totalSupply_.sub(_amount);\r\n        emit Burn(msg.sender, _amount);\r\n    }\r\n\r\n    function withdrawBalance(uint _amount) external {\r\n        require(balances[msg.sender] >= _amount);\r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        totalSupply_ = totalSupply_.sub(_amount);\r\n        uint ethexchange = _amount.div(2);\r\n        msg.sender.transfer(ethexchange);\r\n    }\r\n\r\n    function setIsMinter(address _address, bool _value) external onlyOwner {\r\n        isMinter[_address] = _value;\r\n    }\r\n\r\n    function depositToGateway(uint256 amount) external {\r\n        transfer(gateway, amount);\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC165\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n */\r\ninterface ERC165 {\r\n\r\n  /**\r\n   * @notice Query if a contract implements an interface\r\n   * @param _interfaceId The interface identifier, as specified in ERC-165\r\n   * @dev Interface identification is specified in ERC-165. This function\r\n   * uses less than 30,000 gas.\r\n   */\r\n  function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool);\r\n}\r\n\r\ncontract SupportsInterfaceWithLookup is ERC165 {\r\n\r\n  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\r\n  /**\r\n   * 0x01ffc9a7 ===\r\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\r\n   */\r\n\r\n  /**\r\n   * @dev a mapping of interface id to whether or not it's supported\r\n   */\r\n  mapping(bytes4 => bool) internal supportedInterfaces;\r\n\r\n  /**\r\n   * @dev A contract implementing SupportsInterfaceWithLookup\r\n   * implement ERC165 itself\r\n   */\r\n  constructor()\r\n    public\r\n  {\r\n    _registerInterface(InterfaceId_ERC165);\r\n  }\r\n\r\n  /**\r\n   * @dev implement supportsInterface(bytes4) using a lookup table\r\n   */\r\n  function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool)\r\n  {\r\n    return supportedInterfaces[_interfaceId];\r\n  }\r\n\r\n  /**\r\n   * @dev private method for registering an interface\r\n   */\r\n  function _registerInterface(bytes4 _interfaceId)\r\n    internal\r\n  {\r\n    require(_interfaceId != 0xffffffff);\r\n    supportedInterfaces[_interfaceId] = true;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract StarLogicInterface {\r\n    function isTransferAllowed(address _from, address _to, uint256 _tokenId) public view returns (bool);\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic interface\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Basic is ERC165 {\r\n\r\n  bytes4 internal constant InterfaceId_ERC721 = 0x80ac58cd;\r\n  /*\r\n   * 0x80ac58cd ===\r\n   *   bytes4(keccak256('balanceOf(address)')) ^\r\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\r\n   *   bytes4(keccak256('approve(address,uint256)')) ^\r\n   *   bytes4(keccak256('getApproved(uint256)')) ^\r\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\r\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\r\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\r\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\r\n   */\r\n\r\n  bytes4 internal constant InterfaceId_ERC721Enumerable = 0x780e9d63;\r\n  /**\r\n   * 0x780e9d63 ===\r\n   *   bytes4(keccak256('totalSupply()')) ^\r\n   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\r\n   *   bytes4(keccak256('tokenByIndex(uint256)'))\r\n   */\r\n\r\n  bytes4 internal constant InterfaceId_ERC721Metadata = 0x5b5e139f;\r\n  /**\r\n   * 0x5b5e139f ===\r\n   *   bytes4(keccak256('name()')) ^\r\n   *   bytes4(keccak256('symbol()')) ^\r\n   *   bytes4(keccak256('tokenURI(uint256)'))\r\n   */\r\n\r\n  event Transfer(\r\n    address indexed _from,\r\n    address indexed _to,\r\n    uint256 indexed _tokenId\r\n  );\r\n  event Approval(\r\n    address indexed _owner,\r\n    address indexed _approved,\r\n    uint256 indexed _tokenId\r\n  );\r\n  event ApprovalForAll(\r\n    address indexed _owner,\r\n    address indexed _operator,\r\n    bool _approved\r\n  );\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 _balance);\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function getApproved(uint256 _tokenId)\r\n    public view returns (address _operator);\r\n\r\n  function setApprovalForAll(address _operator, bool _approved) public;\r\n  function isApprovedForAll(address _owner, address _operator)\r\n    public view returns (bool);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId)\r\n    public;\r\n\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public;\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Enumerable is ERC721Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function tokenOfOwnerByIndex(\r\n    address _owner,\r\n    uint256 _index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256 _tokenId);\r\n\r\n  function tokenByIndex(uint256 _index) public view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Metadata is ERC721Basic {\r\n  function name() external view returns (string _name);\r\n  function symbol() external view returns (string _symbol);\r\n  function tokenURI(uint256 _tokenId) public view returns (string);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ncontract ERC721Receiver {\r\n  /**\r\n   * @dev Magic value to be returned upon successful reception of an NFT\r\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`,\r\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n   */\r\n  bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n  /**\r\n   * @notice Handle the receipt of an NFT\r\n   * @dev The ERC721 smart contract calls this function on the recipient\r\n   * after a `safetransfer`. This function MAY throw to revert and reject the\r\n   * transfer. Return of other than the magic value MUST result in the\r\n   * transaction being reverted.\r\n   * Note: the contract address is always the message sender.\r\n   * @param _operator The address which called `safeTransferFrom` function\r\n   * @param _from The address which previously owned the token\r\n   * @param _tokenId The NFT identifier which is being transferred\r\n   * @param _data Additional data with no specified format\r\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n   */\r\n  function onERC721Received(\r\n    address _operator,\r\n    address _from,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n    returns(bytes4);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   * as the code is not actually created until after the constructor finishes.\r\n   * @param _account address of the account to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address _account) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(_account) }\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic implementation\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721BasicToken is SupportsInterfaceWithLookup, ERC721Basic {\r\n\r\n  using SafeMath for uint256;\r\n  using AddressUtils for address;\r\n\r\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n  bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n  // Mapping from token ID to owner\r\n  mapping (uint256 => address) internal tokenOwner;\r\n\r\n  // Mapping from token ID to approved address\r\n  mapping (uint256 => address) internal tokenApprovals;\r\n\r\n  // Mapping from owner to number of owned token\r\n  mapping (address => uint256) internal ownedTokensCount;\r\n\r\n  // Mapping from owner to operator approvals\r\n  mapping (address => mapping (address => bool)) internal operatorApprovals;\r\n\r\n  constructor()\r\n    public\r\n  {\r\n    // register the supported interfaces to conform to ERC721 via ERC165\r\n    _registerInterface(InterfaceId_ERC721);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the balance of the specified address\r\n   * @param _owner address to query the balance of\r\n   * @return uint256 representing the amount owned by the passed address\r\n   */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    require(_owner != address(0));\r\n    return ownedTokensCount[_owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the owner of the specified token ID\r\n   * @param _tokenId uint256 ID of the token to query the owner of\r\n   * @return owner address currently marked as the owner of the given token ID\r\n   */\r\n  function ownerOf(uint256 _tokenId) public view returns (address) {\r\n    address owner = tokenOwner[_tokenId];\r\n    require(owner != address(0));\r\n    return owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Approves another address to transfer the given token ID\r\n   * The zero address indicates there is no approved address.\r\n   * There can only be one approved address per token at a given time.\r\n   * Can only be called by the token owner or an approved operator.\r\n   * @param _to address to be approved for the given token ID\r\n   * @param _tokenId uint256 ID of the token to be approved\r\n   */\r\n  function approve(address _to, uint256 _tokenId) public {\r\n    address owner = ownerOf(_tokenId);\r\n    require(_to != owner);\r\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n    tokenApprovals[_tokenId] = _to;\r\n    emit Approval(owner, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the approved address for a token ID, or zero if no address set\r\n   * @param _tokenId uint256 ID of the token to query the approval of\r\n   * @return address currently approved for the given token ID\r\n   */\r\n  function getApproved(uint256 _tokenId) public view returns (address) {\r\n    return tokenApprovals[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Sets or unsets the approval of a given operator\r\n   * An operator is allowed to transfer all tokens of the sender on their behalf\r\n   * @param _to operator address to set the approval\r\n   * @param _approved representing the status of the approval to be set\r\n   */\r\n  function setApprovalForAll(address _to, bool _approved) public {\r\n    require(_to != msg.sender);\r\n    operatorApprovals[msg.sender][_to] = _approved;\r\n    emit ApprovalForAll(msg.sender, _to, _approved);\r\n  }\r\n\r\n  /**\r\n   * @dev Tells whether an operator is approved by a given owner\r\n   * @param _owner owner address which you want to query the approval of\r\n   * @param _operator operator address which you want to query the approval of\r\n   * @return bool whether the given operator is approved by the given owner\r\n   */\r\n  function isApprovedForAll(\r\n    address _owner,\r\n    address _operator\r\n  )\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return operatorApprovals[_owner][_operator];\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers the ownership of a given token ID to another address\r\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n  {\r\n    require(isApprovedOrOwner(msg.sender, _tokenId));\r\n    require(_to != address(0));\r\n\r\n    clearApproval(_from, _tokenId);\r\n    removeTokenFrom(_from, _tokenId);\r\n    addTokenTo(_to, _tokenId);\r\n\r\n    emit Transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * If the target address is a contract, it must implement `onERC721Received`,\r\n   * which is called upon a safe transfer, and return the magic value\r\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n   * the transfer is reverted.\r\n   *\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n  {\r\n    // solium-disable-next-line arg-overflow\r\n    safeTransferFrom(_from, _to, _tokenId, \"\");\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * If the target address is a contract, it must implement `onERC721Received`,\r\n   * which is called upon a safe transfer, and return the magic value\r\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n   * the transfer is reverted.\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes data to send along with a safe transfer check\r\n   */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n  {\r\n    transferFrom(_from, _to, _tokenId);\r\n    // solium-disable-next-line arg-overflow\r\n    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the specified token exists\r\n   * @param _tokenId uint256 ID of the token to query the existence of\r\n   * @return whether the token exists\r\n   */\r\n  function _exists(uint256 _tokenId) internal view returns (bool) {\r\n    address owner = tokenOwner[_tokenId];\r\n    return owner != address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the given spender can transfer a given token ID\r\n   * @param _spender address of the spender to query\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @return bool whether the msg.sender is approved for the given token ID,\r\n   *  is an operator of the owner, or is the owner of the token\r\n   */\r\n  function isApprovedOrOwner(\r\n    address _spender,\r\n    uint256 _tokenId\r\n  )\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    address owner = ownerOf(_tokenId);\r\n    // Disable solium check because of\r\n    // https://github.com/duaraghav8/Solium/issues/175\r\n    // solium-disable-next-line operator-whitespace\r\n    return (\r\n      _spender == owner ||\r\n      getApproved(_tokenId) == _spender ||\r\n      isApprovedForAll(owner, _spender)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * Reverts if the given token ID already exists\r\n   * @param _to The address that will own the minted token\r\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    require(_to != address(0));\r\n    addTokenTo(_to, _tokenId);\r\n    emit Transfer(address(0), _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * Reverts if the token does not exist\r\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    clearApproval(_owner, _tokenId);\r\n    removeTokenFrom(_owner, _tokenId);\r\n    emit Transfer(_owner, address(0), _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to clear current approval of a given token ID\r\n   * Reverts if the given address is not indeed the owner of the token\r\n   * @param _owner owner of the token\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   */\r\n  function clearApproval(address _owner, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _owner);\r\n    if (tokenApprovals[_tokenId] != address(0)) {\r\n      tokenApprovals[_tokenId] = address(0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * @param _to address representing the new owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    require(tokenOwner[_tokenId] == address(0));\r\n    tokenOwner[_tokenId] = _to;\r\n    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _from);\r\n    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\r\n    tokenOwner[_tokenId] = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to invoke `onERC721Received` on a target address\r\n   * The call is not executed if the target address is not a contract\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _to target address that will receive the tokens\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes optional data to send along with the call\r\n   * @return whether the call correctly returned the expected magic value\r\n   */\r\n  function checkAndCallSafeTransfer(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    internal\r\n    returns (bool)\r\n  {\r\n    if (!_to.isContract()) {\r\n      return true;\r\n    }\r\n    bytes4 retval = ERC721Receiver(_to).onERC721Received(\r\n      msg.sender, _from, _tokenId, _data);\r\n    return (retval == ERC721_RECEIVED);\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SupportsInterfaceWithLookup\r\n * @author Matt Condon (@shrugs)\r\n * @dev Implements ERC165 using a lookup table.\r\n */\r\n\r\n\r\n\r\ncontract EtherPornStars is Ownable, SupportsInterfaceWithLookup, ERC721BasicToken, ERC721 {\r\n\r\n  struct StarData {\r\n      uint16 fieldA;\r\n      uint16 fieldB;\r\n      uint32 fieldC;\r\n      uint32 fieldD;\r\n      uint32 fieldE;\r\n      uint64 fieldF;\r\n      uint64 fieldG;\r\n  }\r\n\r\n  address public logicContractAddress;\r\n  address public starCoinAddress;\r\n\r\n  // Ether Porn Star data\r\n  mapping(uint256 => StarData) public starData;\r\n  mapping(uint256 => bool) public starPower;\r\n  mapping(uint256 => uint256) public starStudio;\r\n  // Active Ether Porn Star\r\n  mapping(address => uint256) public activeStar;\r\n  // Mapping to studios\r\n  mapping(uint8 => address) public studios;\r\n  event ActiveStarChanged(address indexed _from, uint256 _tokenId);\r\n  // Token name\r\n  string internal name_;\r\n  // Token symbol\r\n  string internal symbol_;\r\n  // Genomes\r\n  mapping(uint256 => uint256) public genome;\r\n  // Mapping from owner to list of owned token IDs\r\n  mapping(address => uint256[]) internal ownedTokens;\r\n  // Mapping from token ID to index of the owner tokens list\r\n  mapping(uint256 => uint256) internal ownedTokensIndex;\r\n  // Array with all token ids, used for enumeration\r\n  uint256[] internal allTokens;\r\n  // Mapping from token id to position in the allTokens array\r\n  mapping(uint256 => uint256) internal allTokensIndex;\r\n  // Optional mapping for token URIs\r\n  mapping(uint256 => string) internal tokenURIs;\r\n   // Mapping for multi-level network rewards\r\n  mapping (uint256 => uint256) inviter;\r\n  // Emitted when a user buys a star\r\n  event BoughtStar(address indexed buyer, uint256 _tokenId, uint8 _studioId );\r\n  /**\r\n   * @dev Constructor function\r\n   */\r\n  modifier onlyLogicContract {\r\n    require(msg.sender == logicContractAddress || msg.sender == owner);\r\n    _;\r\n  }\r\n  constructor(string _name, string _symbol, address _starCoinAddress) public {\r\n    name_ = _name;\r\n    symbol_ = _symbol;\r\n    starCoinAddress = _starCoinAddress;\r\n\r\n    // register the supported interfaces to conform to ERC721 via ERC165\r\n    _registerInterface(InterfaceId_ERC721Enumerable);\r\n    _registerInterface(InterfaceId_ERC721Metadata);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token name\r\n   * @return string representing the token name\r\n   */\r\n\r\n\r\n    /**\r\n    * @dev Sets the token's interchangeable logic contract\r\n    */\r\n  function setLogicContract(address _logicContractAddress) external onlyOwner {\r\n    logicContractAddress = _logicContractAddress;\r\n  }\r\n\r\n  function addStudio(uint8 _studioId, address _studioAddress) external onlyOwner {\r\n    studios[_studioId] = _studioAddress;\r\n}\r\n  function name() external view returns (string) {\r\n    return name_;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token symbol\r\n   * @return string representing the token symbol\r\n   */\r\n  function symbol() external view returns (string) {\r\n    return symbol_;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns an URI for a given token ID\r\n   * Throws if the token ID does not exist. May return an empty string.\r\n   * @param _tokenId uint256 ID of the token to query\r\n   */\r\n  function tokenURI(uint256 _tokenId) public view returns (string) {\r\n    require(_exists(_tokenId));\r\n    return tokenURIs[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\r\n   * @param _owner address owning the tokens list to be accessed\r\n   * @param _index uint256 representing the index to be accessed of the requested tokens list\r\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\r\n   */\r\n  function tokenOfOwnerByIndex(\r\n    address _owner,\r\n    uint256 _index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    require(_index < balanceOf(_owner));\r\n    return ownedTokens[_owner][_index];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the total amount of tokens stored by the contract\r\n   * @return uint256 representing the total amount of tokens\r\n   */\r\n  function totalSupply() public view returns (uint256) {\r\n    return allTokens.length;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of all the tokens in this contract\r\n   * Reverts if the index is greater or equal to the total number of tokens\r\n   * @param _index uint256 representing the index to be accessed of the tokens list\r\n   * @return uint256 token ID at the given index of the tokens list\r\n   */\r\n  function tokenByIndex(uint256 _index) public view returns (uint256) {\r\n    require(_index < totalSupply());\r\n    return allTokens[_index];\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to set the token URI for a given token\r\n   * Reverts if the token ID does not exist\r\n   * @param _tokenId uint256 ID of the token to set its URI\r\n   * @param _uri string URI to assign\r\n   */\r\n  function _setTokenURI(uint256 _tokenId, string _uri) internal {\r\n    require(_exists(_tokenId));\r\n    tokenURIs[_tokenId] = _uri;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * @param _to address representing the new owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    super.addTokenTo(_to, _tokenId);\r\n    uint256 length = ownedTokens[_to].length;\r\n    ownedTokens[_to].push(_tokenId);\r\n    ownedTokensIndex[_tokenId] = length;\r\n\r\n    if (activeStar[_to] == 0) {\r\n      activeStar[_to] = _tokenId;\r\n      emit ActiveStarChanged(_to, _tokenId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    super.removeTokenFrom(_from, _tokenId);\r\n    // To prevent a gap in the array, we store the last token in the index of the token to delete, and\r\n    // then delete the last slot.\r\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\r\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\r\n    ownedTokens[_from][tokenIndex] = lastToken;\r\n    // This also deletes the contents at the last position of the array\r\n    ownedTokens[_from].length--;\r\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\r\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\r\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\r\n    ownedTokensIndex[_tokenId] = 0;\r\n    ownedTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * Reverts if the given token ID already exists\r\n   * @param _to address the beneficiary that will own the minted token\r\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    super._mint(_to, _tokenId);\r\n    allTokensIndex[_tokenId] = allTokens.length;\r\n    allTokens.push(_tokenId);\r\n  }\r\n\r\n  function mint(address _to, uint256 _tokenId) external onlyLogicContract {\r\n    _mint(_to, _tokenId);\r\n  }\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * Reverts if the token does not exist\r\n   * @param _owner owner of the token to burn\r\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    super._burn(_owner, _tokenId);\r\n    // Clear metadata (if any)\r\n    if (bytes(tokenURIs[_tokenId]).length != 0) {\r\n      delete tokenURIs[_tokenId];\r\n    }\r\n    // Reorg all tokens array\r\n    uint256 tokenIndex = allTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = allTokens.length.sub(1);\r\n    uint256 lastToken = allTokens[lastTokenIndex];\r\n\r\n    allTokens[tokenIndex] = lastToken;\r\n    allTokens[lastTokenIndex] = 0;\r\n\r\n    allTokens.length--;\r\n    allTokensIndex[_tokenId] = 0;\r\n    allTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n  function burn(address _owner, uint256 _tokenId) external onlyLogicContract {\r\n    _burn(_owner, _tokenId);\r\n}\r\n\r\n/**\r\n    * @dev Allows setting star data for a star\r\n    * @param _tokenId star to set data for\r\n    */\r\n  function setStarData(\r\n      uint256 _tokenId,\r\n      uint16 _fieldA,\r\n      uint16 _fieldB,\r\n      uint32 _fieldC,\r\n      uint32 _fieldD,\r\n      uint32 _fieldE,\r\n      uint64 _fieldF,\r\n      uint64 _fieldG\r\n  ) external onlyLogicContract {\r\n      starData[_tokenId] = StarData(\r\n          _fieldA,\r\n          _fieldB,\r\n          _fieldC,\r\n          _fieldD,\r\n          _fieldE,\r\n          _fieldF,\r\n          _fieldG\r\n      );\r\n  }\r\n    /**\r\n    * @dev Allow setting star genome\r\n    * @param _tokenId token to set data for\r\n    * @param _genome genome data to set\r\n    */\r\n  function setGenome(uint256 _tokenId, uint256 _genome) external onlyLogicContract {\r\n    genome[_tokenId] = _genome;\r\n  }\r\n\r\n  function activeStarGenome(address _owner) public view returns (uint256) {\r\n    uint256 tokenId = activeStar[_owner];\r\n    if (tokenId == 0) {\r\n        return 0;\r\n    }\r\n    return genome[tokenId];\r\n    }\r\n\r\n  function setActiveStar(uint256 _tokenId) external {\r\n    require(msg.sender == ownerOf(_tokenId));\r\n    activeStar[msg.sender] = _tokenId;\r\n    emit ActiveStarChanged(msg.sender, _tokenId);\r\n    }\r\n\r\n  function forceTransfer(address _from, address _to, uint256 _tokenId) external onlyLogicContract {\r\n      require(_from != address(0));\r\n      require(_to != address(0));\r\n      removeTokenFrom(_from, _tokenId);\r\n      addTokenTo(_to, _tokenId);\r\n      emit Transfer(_from, _to, _tokenId);\r\n  }\r\n  function transfer(address _to, uint256 _tokenId) external {\r\n    require(msg.sender == ownerOf(_tokenId));\r\n    require(_to != address(0));\r\n    removeTokenFrom(msg.sender, _tokenId);\r\n    addTokenTo(_to, _tokenId);\r\n    emit Transfer(msg.sender, _to, _tokenId);\r\n    }\r\n  function addrecruit(uint256 _recId, uint256 _inviterId) private {\r\n    inviter[_recId] = _inviterId;\r\n}\r\n  function buyStar(uint256 _tokenId, uint8 _studioId, uint256 _inviterId) external payable {\r\n      require(msg.value >= 0.1 ether);\r\n      _mint(msg.sender, _tokenId);\r\n      emit BoughtStar(msg.sender, _tokenId, _studioId);\r\n      uint amount = msg.value;\r\n      starCoinAddress.transfer(msg.value);\r\n      addrecruit(_tokenId, _inviterId);\r\n      starStudio[_tokenId] = _studioId;\r\n      StarCoin instanceStarCoin = StarCoin(starCoinAddress);\r\n      instanceStarCoin.rewardTokens(msg.sender, amount);\r\n        if (_inviterId != 0) {\r\n          recReward(amount, _inviterId);\r\n      }\r\n      if(_studioId == 1) {\r\n          starPower[_tokenId] = true;\r\n      }\r\n    }\r\n  function recReward(uint amount, uint256 _inviterId) private {\r\n    StarCoin instanceStarCoin = StarCoin(starCoinAddress);\r\n    uint i=0;\r\n    owner = ownerOf(_inviterId);\r\n    amount = amount/2;\r\n    instanceStarCoin.rewardTokens(owner, amount);\r\n    while (i < 4) {\r\n      amount = amount/2;\r\n      owner = ownerOf(inviter[_inviterId]);\r\n      if(owner==address(0)){\r\n        break;\r\n      }\r\n      instanceStarCoin.rewardTokens(owner, amount);\r\n      _inviterId = inviter[_inviterId];\r\n      i++;\r\n    }\r\n  }\r\n\r\n  function myTokens()\r\n    external\r\n    view\r\n    returns (\r\n      uint256[]\r\n    )\r\n  {\r\n    return ownedTokens[msg.sender];\r\n  }\r\n}", "OptimizationUsed": "1", "ContractName": "EtherPornStars", "ByteCode": "0x6080604052600436106101d75763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301ffc9a781146101dc578063025e029b1461021257806306fdde0314610228578063081812fc146102b2578063095ea7b3146102e657806318160ddd1461030a57806319fa8f501461033157806320f511c51461036357806323b872dd1461037b5780632f745c59146103a557806333bebb77146103c957806340c10f19146103f357806342842e0e1461041757806344751e3c146104415780634f6ccce7146104565780635aa4470f1461046e5780635d59bb361461048f5780636352211e146104fa57806370a0823114610512578063741ff5f9146105335780638da5cb5b1461054b578063949e8acd1461056057806395d89b41146105c55780639dc29fac146105da578063a22cb465146105fe578063a9059cbb14610624578063b88d4fde14610648578063bccda810146106b7578063bfc3aef0146106cc578063c87b56dd146106e4578063cdda01a9146106fc578063d847057614610717578063e615362c1461072f578063e985e9c514610750578063e9986f9014610777578063f082650b14610798578063f21f80d0146107e5578063f356385c14610800575b600080fd5b3480156101e857600080fd5b506101fe600160e060020a031960043516610827565b604080519115158252519081900360200190f35b61022660043560ff60243516604435610846565b005b34801561023457600080fd5b5061023d6109c0565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561027757818101518382015260200161025f565b50505050905090810190601f1680156102a45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102be57600080fd5b506102ca600435610a57565b60408051600160a060020a039092168252519081900360200190f35b3480156102f257600080fd5b50610226600160a060020a0360043516602435610a72565b34801561031657600080fd5b5061031f610b1b565b60408051918252519081900360200190f35b34801561033d57600080fd5b50610346610b21565b60408051600160e060020a03199092168252519081900360200190f35b34801561036f57600080fd5b506101fe600435610b45565b34801561038757600080fd5b50610226600160a060020a0360043581169060243516604435610b5a565b3480156103b157600080fd5b5061031f600160a060020a0360043516602435610bd6565b3480156103d557600080fd5b50610226600160a060020a0360043581169060243516604435610c23565b3480156103ff57600080fd5b50610226600160a060020a0360043516602435610c7b565b34801561042357600080fd5b50610226600160a060020a0360043581169060243516604435610cb7565b34801561044d57600080fd5b506102ca610cd8565b34801561046257600080fd5b5061031f600435610ce7565b34801561047a57600080fd5b50610226600160a060020a0360043516610d1c565b34801561049b57600080fd5b506104a7600435610d55565b6040805161ffff988916815296909716602087015263ffffffff9485168688015292841660608601529216608084015267ffffffffffffffff91821660a08401521660c082015290519081900360e00190f35b34801561050657600080fd5b506102ca600435610de6565b34801561051e57600080fd5b5061031f600160a060020a0360043516610e14565b34801561053f57600080fd5b5061031f600435610e47565b34801561055757600080fd5b506102ca610e59565b34801561056c57600080fd5b50610575610e68565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156105b1578181015183820152602001610599565b505050509050019250505060405180910390f35b3480156105d157600080fd5b5061023d610ec8565b3480156105e657600080fd5b50610226600160a060020a0360043516602435610f29565b34801561060a57600080fd5b50610226600160a060020a03600435166024351515610f61565b34801561063057600080fd5b50610226600160a060020a0360043516602435610fe5565b34801561065457600080fd5b50604080516020601f60643560048181013592830184900484028501840190955281845261022694600160a060020a0381358116956024803590921695604435953695608494019181908401838280828437509497506110559650505050505050565b3480156106c357600080fd5b506102ca61107d565b3480156106d857600080fd5b5061022660043561108c565b3480156106f057600080fd5b5061023d6004356110f3565b34801561070857600080fd5b506102ca60ff600435166111a8565b34801561072357600080fd5b5061031f6004356111c3565b34801561073b57600080fd5b5061031f600160a060020a03600435166111d5565b34801561075c57600080fd5b506101fe600160a060020a03600435811690602435166111e7565b34801561078357600080fd5b5061031f600160a060020a0360043516611215565b3480156107a457600080fd5b5061022660043561ffff6024358116906044351663ffffffff60643581169060843581169060a4351667ffffffffffffffff60c43581169060e43516611253565b3480156107f157600080fd5b50610226600435602435611400565b34801561080c57600080fd5b5061022660ff60043516600160a060020a0360243516611440565b600160e060020a03191660009081526001602052604090205460ff1690565b60008067016345785d8a000034101561085e57600080fd5b610868338661148a565b6040805186815260ff86166020820152815133927f625f556b150d0c8a55c7a18666d15f5436eb3d316bc81271da046d0ed158fe04928290030190a2600754604051349350600160a060020a039091169083156108fc029084906000818181858888f193505050501580156108e1573d6000803e3d6000fd5b506108ec85846114d9565b506000848152600a602052604080822060ff8616905560075481517f81a4af15000000000000000000000000000000000000000000000000000000008152336004820152602481018590529151600160a060020a039091169283926381a4af15926044808301939282900301818387803b15801561096957600080fd5b505af115801561097d573d6000803e3d6000fd5b50508415915061099390505761099382846114eb565b8360ff16600114156109b9576000858152600960205260409020805460ff191660011790555b5050505050565b600d8054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610a4c5780601f10610a2157610100808354040283529160200191610a4c565b820191906000526020600020905b815481529060010190602001808311610a2f57829003601f168201915b505050505090505b90565b600090815260036020526040902054600160a060020a031690565b6000610a7d82610de6565b9050600160a060020a038381169082161415610a9857600080fd5b33600160a060020a0382161480610ab45750610ab481336111e7565b1515610abf57600080fd5b6000828152600360205260408082208054600160a060020a031916600160a060020a0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b60125490565b7f01ffc9a70000000000000000000000000000000000000000000000000000000081565b60096020526000908152604090205460ff1681565b610b643382611688565b1515610b6f57600080fd5b600160a060020a0382161515610b8457600080fd5b610b8e83826116e7565b610b988382611749565b610ba28282611850565b8082600160a060020a031684600160a060020a0316600080516020611dd883398151915260405160405180910390a4505050565b6000610be183610e14565b8210610bec57600080fd5b600160a060020a0383166000908152601060205260409020805483908110610c1057fe5b9060005260206000200154905092915050565b600654600160a060020a0316331480610c465750600054600160a060020a031633145b1515610c5157600080fd5b600160a060020a0383161515610c6657600080fd5b600160a060020a0382161515610b8e57600080fd5b600654600160a060020a0316331480610c9e5750600054600160a060020a031633145b1515610ca957600080fd5b610cb3828261148a565b5050565b610cd38383836020604051908101604052806000815250611055565b505050565b600754600160a060020a031681565b6000610cf1610b1b565b8210610cfc57600080fd5b6012805483908110610d0a57fe5b90600052602060002001549050919050565b600054600160a060020a03163314610d3357600080fd5b60068054600160a060020a031916600160a060020a0392909216919091179055565b60086020526000908152604090205461ffff808216916201000081049091169063ffffffff64010000000082048116916801000000000000000081048216916c010000000000000000000000008204169067ffffffffffffffff7001000000000000000000000000000000008204811691780100000000000000000000000000000000000000000000000090041687565b600081815260026020526040812054600160a060020a0316801515610e0a57600080fd5b8091505b50919050565b6000600160a060020a0382161515610e2b57600080fd5b50600160a060020a031660009081526004602052604090205490565b600a6020526000908152604090205481565b600054600160a060020a031681565b33600090815260106020908152604091829020805483518184028101840190945280845260609392830182828015610a4c57602002820191906000526020600020905b815481526020019060010190808311610eab575050505050905090565b600e8054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610a4c5780601f10610a2157610100808354040283529160200191610a4c565b600654600160a060020a0316331480610f4c5750600054600160a060020a031633145b1515610f5757600080fd5b610cb382826118fe565b600160a060020a038216331415610f7757600080fd5b336000818152600560209081526040808320600160a060020a03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b610fee81610de6565b600160a060020a0316331461100257600080fd5b600160a060020a038216151561101757600080fd5b6110213382611749565b61102b8282611850565b6040518190600160a060020a038416903390600080516020611dd883398151915290600090a45050565b611060848484610b5a565b61106c848484846119f8565b151561107757600080fd5b50505050565b600654600160a060020a031681565b61109581610de6565b600160a060020a031633146110a957600080fd5b336000818152600b6020908152604091829020849055815184815291517f2957f3e68580020e01d07225d26de316484a93d3b6a5b652ddd2e27827571f499281900390910190a250565b60606110fe82611b65565b151561110957600080fd5b60008281526014602090815260409182902080548351601f60026000196101006001861615020190931692909204918201849004840281018401909452808452909183018282801561119c5780601f106111715761010080835404028352916020019161119c565b820191906000526020600020905b81548152906001019060200180831161117f57829003601f168201915b50505050509050919050565b600c60205260009081526040902054600160a060020a031681565b600f6020526000908152604090205481565b600b6020526000908152604090205481565b600160a060020a03918216600090815260056020908152604080832093909416825291909152205460ff1690565b600160a060020a0381166000908152600b602052604081205480151561123e5760009150610e0e565b6000908152600f602052604090205492915050565b600654600160a060020a03163314806112765750600054600160a060020a031633145b151561128157600080fd5b6040805160e08101825261ffff9889168152968816602080890191825263ffffffff97881689840190815296881660608a0190815295881660808a0190815267ffffffffffffffff95861660a08b0190815294861660c08b0190815260009c8d52600890925292909a2097518854915196519551925193519a5161ffff19909216908a161763ffff000019166201000096909916959095029790971767ffffffff00000000191664010000000093861693909302929092176bffffffff000000000000000019166801000000000000000096851696909602959095176fffffffff00000000000000000000000019166c0100000000000000000000000091909316029190911777ffffffffffffffff000000000000000000000000000000001916700100000000000000000000000000000000948416949094029390931777ffffffffffffffffffffffffffffffffffffffffffffffff1678010000000000000000000000000000000000000000000000009390921692909202179055565b600654600160a060020a03163314806114235750600054600160a060020a031633145b151561142e57600080fd5b6000918252600f602052604090912055565b600054600160a060020a0316331461145757600080fd5b60ff919091166000908152600c602052604090208054600160a060020a031916600160a060020a03909216919091179055565b6114948282611b82565b601280546000838152601360205260408120829055600182018355919091527fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec3444015550565b60009182526015602052604090912055565b600754600160a060020a0316600061150283610de6565b60008054600160a060020a031916600160a060020a0392831617808255604080517f81a4af1500000000000000000000000000000000000000000000000000000000815291841660048301526002909704602482018190529651928516926381a4af159260448084019391929182900301818387803b15801561158457600080fd5b505af1158015611598573d6000803e3d6000fd5b505050505b6004811015611077576000838152601560205260409020546002909404936115c490610de6565b60008054600160a060020a031916600160a060020a0392831617908190551615156115ee57611077565b60008054604080517f81a4af15000000000000000000000000000000000000000000000000000000008152600160a060020a039283166004820152602481018890529051918516926381a4af159260448084019382900301818387803b15801561165757600080fd5b505af115801561166b573d6000803e3d6000fd5b50505060009384525060156020526040909220549160010161159d565b60008061169483610de6565b905080600160a060020a031684600160a060020a031614806116cf575083600160a060020a03166116c484610a57565b600160a060020a0316145b806116df57506116df81856111e7565b949350505050565b81600160a060020a03166116fa82610de6565b600160a060020a03161461170d57600080fd5b600081815260036020526040902054600160a060020a031615610cb35760009081526003602052604090208054600160a060020a031916905550565b60008060006117588585611bcb565b600084815260116020908152604080832054600160a060020a038916845260109092529091205490935061179390600163ffffffff611c5416565b600160a060020a0386166000908152601060205260409020805491935090839081106117bb57fe5b90600052602060002001549050806010600087600160a060020a0316600160a060020a03168152602001908152602001600020848154811015156117fb57fe5b6000918252602080832090910192909255600160a060020a0387168152601090915260409020805490611832906000198301611d4e565b50600093845260116020526040808520859055908452909220555050565b600061185c8383611c6b565b50600160a060020a03821660008181526010602090815260408083208054600181018255908452828420810186905585845260118352818420819055938352600b9091529020541515610cd357600160a060020a0383166000818152600b6020908152604091829020859055815185815291517f2957f3e68580020e01d07225d26de316484a93d3b6a5b652ddd2e27827571f499281900390910190a2505050565b600080600061190d8585611cef565b600084815260146020526040902054600260001961010060018416150201909116041561194b57600084815260146020526040812061194b91611d72565b60008481526013602052604090205460125490935061197190600163ffffffff611c5416565b915060128281548110151561198257fe5b906000526020600020015490508060128481548110151561199f57fe5b600091825260208220019190915560128054849081106119bb57fe5b60009182526020909120015560128054906119da906000198301611d4e565b50600093845260136020526040808520859055908452909220555050565b600080611a0d85600160a060020a0316611d2d565b1515611a1c5760019150611b5c565b6040517f150b7a020000000000000000000000000000000000000000000000000000000081523360048201818152600160a060020a03898116602485015260448401889052608060648501908152875160848601528751918a169463150b7a0294938c938b938b93909160a490910190602085019080838360005b83811015611aaf578181015183820152602001611a97565b50505050905090810190601f168015611adc5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015611afe57600080fd5b505af1158015611b12573d6000803e3d6000fd5b505050506040513d6020811015611b2857600080fd5b5051600160e060020a031981167f150b7a020000000000000000000000000000000000000000000000000000000014925090505b50949350505050565b600090815260026020526040902054600160a060020a0316151590565b600160a060020a0382161515611b9757600080fd5b611ba18282611850565b6040518190600160a060020a03841690600090600080516020611dd8833981519152908290a45050565b81600160a060020a0316611bde82610de6565b600160a060020a031614611bf157600080fd5b600160a060020a038216600090815260046020526040902054611c1b90600163ffffffff611c5416565b600160a060020a039092166000908152600460209081526040808320949094559181526002909152208054600160a060020a0319169055565b60008083831115611c6457600080fd5b5050900390565b600081815260026020526040902054600160a060020a031615611c8d57600080fd5b60008181526002602090815260408083208054600160a060020a031916600160a060020a03871690811790915583526004909152902054611ccf906001611d35565b600160a060020a0390921660009081526004602052604090209190915550565b611cf982826116e7565b611d038282611749565b6040518190600090600160a060020a03851690600080516020611dd8833981519152908390a45050565b6000903b1190565b600082820183811015611d4757600080fd5b9392505050565b815481835581811115610cd357600083815260209020610cd3918101908301611db9565b50805460018160011615610100020316600290046000825580601f10611d985750611db6565b601f016020900490600052602060002090810190611db69190611db9565b50565b610a5491905b80821115611dd35760008155600101611dbf565b50905600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820dd001735a4c8b0082694923813c177efbb5a926fa681b3e51d0aebcc329ca0d10029"}