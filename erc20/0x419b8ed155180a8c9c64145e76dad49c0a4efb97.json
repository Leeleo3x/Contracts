{"Runs": "200", "SwarmSource": "bzzr://3dca17aea96e042867a1eb06a00f46077c25e65100d1135a61bbcafe3527689f", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"userRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ticker\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unfrozen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"takeAway\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unfrezee\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_registry\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unfrezee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.18+commit.9cf6e910", "ConstructorArguments": "000000000000000000000000b0f109ac40273682b2e7f0c3fed4d7634dbcf137", "SourceCode": "pragma solidity ^0.4.18;\r\n\r\ncontract TokenRecipient {\r\n  function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; \r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract ApproveAndCallToken is StandardToken {\r\n  function approveAndCall(address _spender, uint _value, bytes _data) public returns (bool) {\r\n    TokenRecipient spender = TokenRecipient(_spender);\r\n    if (approve(_spender, _value)) {\r\n      spender.receiveApproval(msg.sender, _value, this, _data);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  // ERC223 Token improvement to send tokens to smart-contracts\r\n  function transfer(address _to, uint _value) public returns (bool success) { \r\n    //standard function transfer similar to ERC20 transfer with no _data\r\n    //added due to backwards compatibility reasons\r\n    bytes memory empty;\r\n    if (isContract(_to)) {\r\n        return transferToContract(_to, _value, empty);\r\n    }\r\n    else {\r\n        return super.transfer(_to, _value);\r\n    }\r\n  }\r\n\r\n  //assemble the given address bytecode. If bytecode exists then the _addr is a contract.\r\n  function isContract(address _addr) private view returns (bool) {\r\n    uint length;\r\n    assembly {\r\n      //retrieve the size of the code on target address, this needs assembly\r\n      length := extcodesize(_addr)\r\n    }\r\n    return (length>0);\r\n  }\r\n\r\n  //function that is called when transaction target is a contract\r\n  function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\r\n    return approveAndCall(_to, _value, _data);\r\n  }\r\n}\r\n\r\ncontract UserRegistryInterface {\r\n  event AddAddress(address indexed who);\r\n  event AddIdentity(address indexed who);\r\n\r\n  function knownAddress(address _who) public constant returns(bool);\r\n  function hasIdentity(address _who) public constant returns(bool);\r\n  function systemAddresses(address _to, address _from) public constant returns(bool);\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract TokenPolicy is StandardToken, Ownable {\r\n  bool public unfrozen;\r\n  UserRegistryInterface public userRegistry;\r\n\r\n  function TokenPolicy(address registry) public {\r\n    require(registry != 0x0);\r\n    userRegistry = UserRegistryInterface(registry);\r\n  }\r\n\r\n  event Unfrezee();\r\n\r\n  modifier shouldPassPolicy(address _from, address _to) {\r\n    // KYC policy\r\n    require(\r\n      !userRegistry.knownAddress(_from) || \r\n       userRegistry.hasIdentity(_from) || \r\n       userRegistry.systemAddresses(_to, _from));\r\n\r\n    // Freeze policy\r\n    require(unfrozen || userRegistry.systemAddresses(_to, _from));\r\n\r\n    _;\r\n  }\r\n  function transfer(address _to, uint256 _value) shouldPassPolicy(msg.sender, _to) public returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) shouldPassPolicy(_from, _to) public returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function unfrezee() onlyOwner public returns (bool) {\r\n    require(!unfrozen);\r\n    unfrozen = true;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract DefaultToken is MintableToken, TokenPolicy, ApproveAndCallToken {\r\n  using SafeMath for uint;\r\n\r\n  string public name;\r\n  string public ticker;\r\n  uint public decimals;\r\n  \r\n  function DefaultToken(string _name, string _ticker, uint _decimals, address _registry) \r\n    ApproveAndCallToken()\r\n    MintableToken()\r\n    TokenPolicy(_registry) public {\r\n    name = _name;\r\n    ticker = _ticker;\r\n    decimals = _decimals;\r\n  }\r\n\r\n  function takeAway(address _holder, address _to) onlyOwner public returns (bool) {\r\n    require(userRegistry.knownAddress(_holder) && !userRegistry.hasIdentity(_holder));\r\n\r\n    uint allBalance = balances[_holder];\r\n    balances[_to] = balances[_to].add(allBalance);\r\n    balances[_holder] = 0;\r\n    \r\n    Transfer(_holder, _to, allBalance);\r\n  }\r\n}\r\n\r\ncontract AltToken is DefaultToken {\r\n  function AltToken(address _registry) DefaultToken(\"AltEstate token\", \"ALT\", 18, _registry) public {\r\n  }\r\n}", "OptimizationUsed": "1", "ContractName": "AltToken", "ByteCode": "0x6060604052600436106101035763ffffffff60e060020a60003504166305d2035b811461010857806306fdde031461012f578063095ea7b3146101b957806318160ddd146101db57806323b872dd14610200578063313ce5671461022857806340c10f191461023b5780635c7460d61461025d578063661884631461028c57806370a08231146102ae5780637d64bcb4146102cd5780638ba47bdd146102e05780638da5cb5b146102f3578063a034062514610306578063a9059cbb14610319578063cae9ca511461033b578063cf6fbeea146103a0578063d73dd623146103c5578063d8507a8d146103e7578063dd62ed3e146103fa578063f2fde38b1461041f575b600080fd5b341561011357600080fd5b61011b610440565b604051901515815260200160405180910390f35b341561013a57600080fd5b610142610450565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561017e578082015183820152602001610166565b50505050905090810190601f1680156101ab5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101c457600080fd5b61011b600160a060020a03600435166024356104ee565b34156101e657600080fd5b6101ee61055a565b60405190815260200160405180910390f35b341561020b57600080fd5b61011b600160a060020a0360043581169060243516604435610560565b341561023357600080fd5b6101ee610794565b341561024657600080fd5b61011b600160a060020a036004351660243561079a565b341561026857600080fd5b610270610895565b604051600160a060020a03909116815260200160405180910390f35b341561029757600080fd5b61011b600160a060020a03600435166024356108a4565b34156102b957600080fd5b6101ee600160a060020a03600435166109a0565b34156102d857600080fd5b61011b6109bb565b34156102eb57600080fd5b610142610a46565b34156102fe57600080fd5b610270610ab1565b341561031157600080fd5b61011b610ac0565b341561032457600080fd5b61011b600160a060020a0360043516602435610ad0565b341561034657600080fd5b61011b60048035600160a060020a03169060248035919060649060443590810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650610b0495505050505050565b34156103ab57600080fd5b61011b600160a060020a0360043581169060243516610c26565b34156103d057600080fd5b61011b600160a060020a0360043516602435610dca565b34156103f257600080fd5b61011b610e6e565b341561040557600080fd5b6101ee600160a060020a0360043581169060243516610ecb565b341561042a57600080fd5b61043e600160a060020a0360043516610ef6565b005b60035460a060020a900460ff1681565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104e65780601f106104bb576101008083540402835291602001916104e6565b820191906000526020600020905b8154815290600101906020018083116104c957829003601f168201915b505050505081565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60005481565b60045460009084908490600160a060020a031663a75df81483856040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156105bf57600080fd5b6102c65a03f115156105d057600080fd5b5050506040518051905015806106565750600454600160a060020a031663237f1a218360006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561063a57600080fd5b6102c65a03f1151561064b57600080fd5b505050604051805190505b806106d95750600454600160a060020a031663637c39d8828460006040516020015260405160e060020a63ffffffff8516028152600160a060020a03928316600482015291166024820152604401602060405180830381600087803b15156106bd57600080fd5b6102c65a03f115156106ce57600080fd5b505050604051805190505b15156106e457600080fd5b60035460a860020a900460ff16806107745750600454600160a060020a031663637c39d8828460006040516020015260405160e060020a63ffffffff8516028152600160a060020a03928316600482015291166024820152604401602060405180830381600087803b151561075857600080fd5b6102c65a03f1151561076957600080fd5b505050604051805190505b151561077f57600080fd5b61078a868686610f91565b9695505050505050565b60075481565b60035460009033600160a060020a039081169116146107b857600080fd5b60035460a060020a900460ff16156107cf57600080fd5b6000546107e2908363ffffffff61110116565b6000908155600160a060020a03841681526001602052604090205461080d908363ffffffff61110116565b600160a060020a0384166000818152600160205260409081902092909255907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859084905190815260200160405180910390a2600160a060020a03831660006000805160206114748339815191528460405190815260200160405180910390a350600192915050565b600454600160a060020a031681565b600160a060020a0333811660009081526002602090815260408083209386168352929052908120548083111561090157600160a060020a033381166000908152600260209081526040808320938816835292905290812055610938565b610911818463ffffffff61111716565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a3600191505b5092915050565b600160a060020a031660009081526001602052604090205490565b60035460009033600160a060020a039081169116146109d957600080fd5b60035460a060020a900460ff16156109f057600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a1790557fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a150600190565b60068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104e65780601f106104bb576101008083540402835291602001916104e6565b600354600160a060020a031681565b60035460a860020a900460ff1681565b6000610ada611461565b610ae384611129565b15610afa57610af3848483611131565b9150610999565b610af38484611146565b600083610b1181856104ee565b15610c195780600160a060020a0316638f4ffcb1338630876040518563ffffffff1660e060020a0281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610bae578082015183820152602001610b96565b50505050905090810190601f168015610bdb5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1515610bfc57600080fd5b6102c65a03f11515610c0d57600080fd5b50505060019150610c1e565b600091505b509392505050565b600354600090819033600160a060020a03908116911614610c4657600080fd5b600454600160a060020a031663a75df8148560006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610c9f57600080fd5b6102c65a03f11515610cb057600080fd5b505050604051805190508015610d375750600454600160a060020a031663237f1a218560006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610d1a57600080fd5b6102c65a03f11515610d2b57600080fd5b50505060405180519050155b1515610d4257600080fd5b50600160a060020a03808416600090815260016020526040808220549285168252902054610d76908263ffffffff61110116565b600160a060020a038085166000818152600160205260408082209490945591871680835283832092909255916000805160206114748339815191529084905190815260200160405180910390a35092915050565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054610e02908363ffffffff61110116565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b60035460009033600160a060020a03908116911614610e8c57600080fd5b60035460a860020a900460ff1615610ea357600080fd5b6003805475ff000000000000000000000000000000000000000000191660a860020a17905590565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a03908116911614610f1157600080fd5b600160a060020a0381161515610f2657600080fd5b600354600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000600160a060020a0383161515610fa857600080fd5b600160a060020a038416600090815260016020526040902054821115610fcd57600080fd5b600160a060020a038085166000908152600260209081526040808320339094168352929052205482111561100057600080fd5b600160a060020a038416600090815260016020526040902054611029908363ffffffff61111716565b600160a060020a03808616600090815260016020526040808220939093559085168152205461105e908363ffffffff61110116565b600160a060020a038085166000908152600160209081526040808320949094558783168252600281528382203390931682529190915220546110a6908363ffffffff61111716565b600160a060020a03808616600081815260026020908152604080832033861684529091529081902093909355908516916000805160206114748339815191529085905190815260200160405180910390a35060019392505050565b60008282018381101561111057fe5b9392505050565b60008282111561112357fe5b50900390565b6000903b1190565b600061113e848484610b04565b949350505050565b60045460009033908490600160a060020a031663a75df81483856040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156111a557600080fd5b6102c65a03f115156111b657600080fd5b50505060405180519050158061123c5750600454600160a060020a031663237f1a218360006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561122057600080fd5b6102c65a03f1151561123157600080fd5b505050604051805190505b806112bf5750600454600160a060020a031663637c39d8828460006040516020015260405160e060020a63ffffffff8516028152600160a060020a03928316600482015291166024820152604401602060405180830381600087803b15156112a357600080fd5b6102c65a03f115156112b457600080fd5b505050604051805190505b15156112ca57600080fd5b60035460a860020a900460ff168061135a5750600454600160a060020a031663637c39d8828460006040516020015260405160e060020a63ffffffff8516028152600160a060020a03928316600482015291166024820152604401602060405180830381600087803b151561133e57600080fd5b6102c65a03f1151561134f57600080fd5b505050604051805190505b151561136557600080fd5b61136f8585611378565b95945050505050565b6000600160a060020a038316151561138f57600080fd5b600160a060020a0333166000908152600160205260409020548211156113b457600080fd5b600160a060020a0333166000908152600160205260409020546113dd908363ffffffff61111716565b600160a060020a033381166000908152600160205260408082209390935590851681522054611412908363ffffffff61110116565b600160a060020a0380851660008181526001602052604090819020939093559133909116906000805160206114748339815191529085905190815260200160405180910390a350600192915050565b602060405190810160405260008152905600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a723058203dca17aea96e042867a1eb06a00f46077c25e65100d1135a61bbcafe3527689f0029"}