{"Runs": "200", "SwarmSource": "bzzr://158c88fdb7d1763655f4899299cf7bd51ca84e2a69500481dd9276c31595f570", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_approved\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"transferFromInBatch\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rnid\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_rnid\",\"type\":\"uint256\"}],\"name\":\"isRefundApplied\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_rnid\",\"type\":\"uint256\"}],\"name\":\"roomNight\",\"outputs\":[{\"name\":\"_vendorId\",\"type\":\"uint256\"},{\"name\":\"_rpid\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_date\",\"type\":\"uint256\"},{\"name\":\"_ipfs\",\"type\":\"bytes32\"},{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"uint256\"},{\"name\":\"_limit\",\"type\":\"uint256\"},{\"name\":\"_isVendor\",\"type\":\"bool\"}],\"name\":\"roomNightsOfOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rnid\",\"type\":\"uint256\"},{\"name\":\"_isRefund\",\"type\":\"bool\"}],\"name\":\"applyRefund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"uint256\"}],\"name\":\"withdrawTokenId\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vendorId\",\"type\":\"uint256\"},{\"name\":\"_rpid\",\"type\":\"uint256\"},{\"name\":\"_dates\",\"type\":\"uint256[]\"},{\"name\":\"_token\",\"type\":\"uint256\"}],\"name\":\"buyInBatch\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_dataSource\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_customer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_vendor\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_rpid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_dates\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"_token\",\"type\":\"uint256\"}],\"name\":\"BuyInBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_customer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_rnid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_isRefund\",\"type\":\"bool\"}],\"name\":\"ApplyRefund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_vendor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_rnid\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.24+commit.e67f0147", "ConstructorArguments": "00000000000000000000000052ef5080612920a0365be1d382765089b596c708", "SourceCode": "pragma solidity ^0.4.24;\r\n\r\ninterface ERC165 {\r\n    /// @notice Query if a contract implements an interface\r\n    /// @param interfaceID The interface identifier, as specified in ERC-165\r\n    /// @dev Interface identification is specified in ERC-165. This function\r\n    ///  uses less than 30,000 gas.\r\n    /// @return `true` if the contract implements `interfaceID` and\r\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\r\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\r\n}\r\n\r\n/// @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n///  Note: the ERC-165 identifier for this interface is 0x5b5e139f\r\ninterface ERC721Metadata /* is ERC721 */ {\r\n    /// @notice A descriptive name for a collection of NFTs in this contract\r\n    function name() external pure returns (string _name);\r\n\r\n    /// @notice An abbreviated name for NFTs in this contract\r\n    function symbol() external pure returns (string _symbol);\r\n\r\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\r\n    /// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\r\n    ///  3986. The URI may point to a JSON file that conforms to the \"ERC721\r\n    ///  Metadata JSON Schema\".\r\n    function tokenURI(uint256 _tokenId) external view returns (string);\r\n}\r\n\r\n\r\n/// @title ERC-721 Non-Fungible Token Standard\r\n/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n///  Note: the ERC-165 identifier for this interface is 0x80ac58cd\r\ninterface ERC721 /* is ERC165 */ {\r\n    /// @dev This emits when ownership of any NFT changes by any mechanism.\r\n    ///  This event emits when NFTs are created (`from` == 0) and destroyed\r\n    ///  (`to` == 0). Exception: during contract creation, any number of NFTs\r\n    ///  may be created and assigned without emitting Transfer. At the time of\r\n    ///  any transfer, the approved address for that NFT (if any) is reset to none.\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n\r\n    /// @dev This emits when the approved address for an NFT is changed or\r\n    ///  reaffirmed. The zero address indicates there is no approved address.\r\n    ///  When a Transfer event emits, this also indicates that the approved\r\n    ///  address for that NFT (if any) is reset to none.\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n\r\n    /// @dev This emits when an operator is enabled or disabled for an owner.\r\n    ///  The operator can manage all NFTs of the owner.\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n    /// @notice Count all NFTs assigned to an owner\r\n    /// @dev NFTs assigned to the zero address are considered invalid, and this\r\n    ///  function throws for queries about the zero address.\r\n    /// @param _owner An address for whom to query the balance\r\n    /// @return The number of NFTs owned by `_owner`, possibly zero\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n\r\n    /// @notice Find the owner of an NFT\r\n    /// @dev NFTs assigned to zero address are considered invalid, and queries\r\n    ///  about them do throw.\r\n    /// @param _tokenId The identifier for an NFT\r\n    /// @return The address of the owner of the NFT\r\n    function ownerOf(uint256 _tokenId) external view returns (address);\r\n\r\n    /// @notice Transfers the ownership of an NFT from one address to another address\r\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\r\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\r\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\r\n    ///  `_tokenId` is not a valid NFT. When transfer is complete, this function\r\n    ///  checks if `_to` is a smart contract (code size > 0). If so, it calls\r\n    ///  `onERC721Received` on `_to` and throws if the return value is not\r\n    ///  `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`.\r\n    /// @param _from The current owner of the NFT\r\n    /// @param _to The new owner\r\n    /// @param _tokenId The NFT to transfer\r\n    /// @param data Additional data with no specified format, sent in call to `_to`\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) external payable;\r\n\r\n    /// @notice Transfers the ownership of an NFT from one address to another address\r\n    /// @dev This works identically to the other function with an extra data parameter,\r\n    ///  except this function just sets data to \"\"\r\n    /// @param _from The current owner of the NFT\r\n    /// @param _to The new owner\r\n    /// @param _tokenId The NFT to transfer\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\r\n\r\n    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\r\n    ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\r\n    ///  THEY MAY BE PERMANENTLY LOST\r\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\r\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\r\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\r\n    ///  `_tokenId` is not a valid NFT.\r\n    /// @param _from The current owner of the NFT\r\n    /// @param _to The new owner\r\n    /// @param _tokenId The NFT to transfer\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\r\n\r\n    /// @notice Set or reaffirm the approved address for an NFT\r\n    /// @dev The zero address indicates there is no approved address.\r\n    /// @dev Throws unless `msg.sender` is the current NFT owner, or an authorized\r\n    ///  operator of the current owner.\r\n    /// @param _approved The new approved NFT controller\r\n    /// @param _tokenId The NFT to approve\r\n    function approve(address _approved, uint256 _tokenId) external payable;\r\n\r\n    /// @notice Enable or disable approval for a third party (\"operator\") to manage\r\n    ///  all of `msg.sender`'s assets.\r\n    /// @dev Emits the ApprovalForAll event. The contract MUST allow\r\n    ///  multiple operators per owner.\r\n    /// @param _operator Address to add to the set of authorized operators.\r\n    /// @param _approved True if the operator is approved, false to revoke approval\r\n    function setApprovalForAll(address _operator, bool _approved) external;\r\n\r\n    /// @notice Get the approved address for a single NFT\r\n    /// @dev Throws if `_tokenId` is not a valid NFT\r\n    /// @param _tokenId The NFT to find the approved address for\r\n    /// @return The approved address for this NFT, or the zero address if there is none\r\n    function getApproved(uint256 _tokenId) external view returns (address);\r\n\r\n    /// @notice Query if an address is an authorized operator for another address\r\n    /// @param _owner The address that owns the NFTs\r\n    /// @param _operator The address that acts on behalf of the owner\r\n    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n *  from ERC721 asset contracts.\r\n */\r\ncontract ERC721Receiver {\r\n    /**\r\n    * @notice Handle the receipt of an NFT\r\n    * @dev The ERC721 smart contract calls this function on the recipient\r\n    *  after a `safetransfer`. This function MAY throw to revert and reject the\r\n    *  transfer. This function MUST use 50,000 gas or less. Return of other\r\n    *  than the magic value MUST result in the transaction being reverted.\r\n    *  Note: the contract address is always the message sender.\r\n    * @param _from The sending address\r\n    * @param _tokenId The NFT identifier which is being transfered\r\n    * @param _data Additional data with no specified format\r\n    * @return `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`\r\n    */\r\n    function onERC721Received(address _from, uint256 _tokenId, bytes _data) external returns(bytes4);\r\n}\r\n\r\n/**\r\n * Owned contract\r\n */\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed from, address indexed to);\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Only the owner of contract\r\n     */ \r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * @dev transfer the ownership to other\r\n     *      - Only the owner can operate\r\n     */ \r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    /** \r\n     * @dev Accept the ownership from last owner\r\n     */ \r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\ncontract TRNData is Owned {\r\n    TripioRoomNightData dataSource;\r\n    /**\r\n     * Only the valid vendor and the vendor is valid\r\n     */ \r\n    modifier onlyVendor {\r\n        uint256 vendorId = dataSource.vendorIds(msg.sender);\r\n        require(vendorId > 0);\r\n        (,,,bool valid) = dataSource.getVendor(vendorId);\r\n        require(valid);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * The vendor is valid\r\n     */\r\n    modifier vendorValid(address _vendor) {\r\n        uint256 vendorId = dataSource.vendorIds(_vendor);\r\n        require(vendorId > 0);\r\n        (,,,bool valid) = dataSource.getVendor(vendorId);\r\n        require(valid);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * The vendorId is valid\r\n     */\r\n    modifier vendorIdValid(uint256 _vendorId) {\r\n        (,,,bool valid) = dataSource.getVendor(_vendorId);\r\n        require(valid);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Rate plan exist.\r\n     */\r\n    modifier ratePlanExist(uint256 _vendorId, uint256 _rpid) {\r\n        (,,,bool valid) = dataSource.getVendor(_vendorId);\r\n        require(valid);\r\n        require(dataSource.ratePlanIsExist(_vendorId, _rpid));\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * Token is valid\r\n     */\r\n    modifier validToken(uint256 _tokenId) {\r\n        require(_tokenId > 0);\r\n        require(dataSource.roomNightIndexToOwner(_tokenId) != address(0));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Tokens are valid\r\n     */\r\n    modifier validTokenInBatch(uint256[] _tokenIds) {\r\n        for(uint256 i = 0; i < _tokenIds.length; i++) {\r\n            require(_tokenIds[i] > 0);\r\n            require(dataSource.roomNightIndexToOwner(_tokenIds[i]) != address(0));\r\n        }\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Whether the `_tokenId` can be transfered\r\n     */\r\n    modifier canTransfer(uint256 _tokenId) {\r\n        address owner = dataSource.roomNightIndexToOwner(_tokenId);\r\n        bool isOwner = (msg.sender == owner);\r\n        bool isApproval = (msg.sender == dataSource.roomNightApprovals(_tokenId));\r\n        bool isOperator = (dataSource.operatorApprovals(owner, msg.sender));\r\n        require(isOwner || isApproval || isOperator);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Whether the `_tokenIds` can be transfered\r\n     */\r\n    modifier canTransferInBatch(uint256[] _tokenIds) {\r\n        for(uint256 i = 0; i < _tokenIds.length; i++) {\r\n            address owner = dataSource.roomNightIndexToOwner(_tokenIds[i]);\r\n            bool isOwner = (msg.sender == owner);\r\n            bool isApproval = (msg.sender == dataSource.roomNightApprovals(_tokenIds[i]));\r\n            bool isOperator = (dataSource.operatorApprovals(owner, msg.sender));\r\n            require(isOwner || isApproval || isOperator);\r\n        }\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * Whether the `_tokenId` can be operated by `msg.sender`\r\n     */\r\n    modifier canOperate(uint256 _tokenId) {\r\n        address owner = dataSource.roomNightIndexToOwner(_tokenId);\r\n        bool isOwner = (msg.sender == owner);\r\n        bool isOperator = (dataSource.operatorApprovals(owner, msg.sender));\r\n        require(isOwner || isOperator);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Whether the `_date` is valid(no hours, no seconds)\r\n     */\r\n    modifier validDate(uint256 _date) {\r\n        require(_date > 0);\r\n        require(dateIsLegal(_date));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Whether the `_dates` are valid(no hours, no seconds)\r\n     */\r\n    modifier validDates(uint256[] _dates) {\r\n        for(uint256 i = 0;i < _dates.length; i++) {\r\n            require(_dates[i] > 0);\r\n            require(dateIsLegal(_dates[i]));\r\n        }\r\n        _;\r\n    }\r\n\r\n    function dateIsLegal(uint256 _date) pure private returns(bool) {\r\n        uint256 year = _date / 10000;\r\n        uint256 mon = _date / 100 - year * 100;\r\n        uint256 day = _date - mon * 100 - year * 10000;\r\n        \r\n        if(year < 1970 || mon <= 0 || mon > 12 || day <= 0 || day > 31)\r\n            return false;\r\n\r\n        if(4 == mon || 6 == mon || 9 == mon || 11 == mon){\r\n            if (day == 31) {\r\n                return false;\r\n            }\r\n        }\r\n        if(((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0)) {\r\n            if(2 == mon && day > 29) {\r\n                return false;\r\n            }\r\n        }else {\r\n            if(2 == mon && day > 28){\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor() public {\r\n\r\n    }\r\n}\r\n\r\ncontract TRNOwners is TRNData {\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor() public {\r\n\r\n    }\r\n\r\n    /**\r\n     * Add room night token to `_owner`'s account(from the header)\r\n     */\r\n    function _pushRoomNight(address _owner, uint256 _rnid, bool _isVendor) internal {\r\n        require(_owner != address(0));\r\n        require(_rnid != 0);\r\n        if (_isVendor) {\r\n            dataSource.pushOrderOfVendor(_owner, _rnid, false);\r\n        } else {\r\n            dataSource.pushOrderOfOwner(_owner, _rnid, false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove room night token from `_owner`'s account\r\n     */\r\n    function _removeRoomNight(address _owner, uint256 _rnid) internal {\r\n        dataSource.removeOrderOfOwner(_owner, _rnid);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns all the room nights of the `msg.sender`(Customer)\r\n     * @param _from The begin of room nights Id\r\n     * @param _limit The total room nights \r\n     * @param _isVendor Is Vendor\r\n     * @return Room nights of the `msg.sender` and the next vernier\r\n     */\r\n    function roomNightsOfOwner(uint256 _from, uint256 _limit, bool _isVendor) \r\n        external\r\n        view \r\n        returns(uint256[], uint256) {\r\n        if(_isVendor) {\r\n            return dataSource.getOrdersOfVendor(msg.sender, _from, _limit, true);\r\n        }else {\r\n            return dataSource.getOrdersOfOwner(msg.sender, _from, _limit, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the room night infomation in detail\r\n     * @param _rnid Room night id\r\n     * @return Room night infomation in detail\r\n     */\r\n    function roomNight(uint256 _rnid) \r\n        external \r\n        view \r\n        returns(uint256 _vendorId,uint256 _rpid,uint256 _token,uint256 _price,uint256 _timestamp,uint256 _date,bytes32 _ipfs, string _name) {\r\n        (_vendorId, _rpid, _token, _price, _timestamp, _date, _ipfs) = dataSource.roomnights(_rnid);\r\n        (_name,,) = dataSource.getRatePlan(_vendorId, _rpid);\r\n    }\r\n}\r\n\r\nlibrary IPFSLib {\r\n    bytes constant ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\r\n    bytes constant HEX = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Base58 encoding\r\n     * @param _source Bytes data\r\n     * @return Encoded bytes data\r\n     */\r\n    function base58Address(bytes _source) internal pure returns (bytes) {\r\n        uint8[] memory digits = new uint8[](_source.length * 136/100 + 1);\r\n        digits[0] = 0;\r\n        uint8 digitlength = 1;\r\n        for (uint i = 0; i < _source.length; ++i) {\r\n            uint carry = uint8(_source[i]);\r\n            for (uint j = 0; j<digitlength; ++j) {\r\n                carry += uint(digits[j]) * 256;\r\n                digits[j] = uint8(carry % 58);\r\n                carry = carry / 58;\r\n            }\r\n            \r\n            while (carry > 0) {\r\n                digits[digitlength] = uint8(carry % 58);\r\n                digitlength++;\r\n                carry = carry / 58;\r\n            }\r\n        }\r\n        return toAlphabet(reverse(truncate(digits, digitlength)));\r\n    }\r\n\r\n    /**\r\n     * @dev Hex encoding, convert bytes32 data to hex string\r\n     * @param _source Bytes32 data\r\n     * @return hex string bytes\r\n     */\r\n    function hexAddress(bytes32 _source) internal pure returns(bytes) {\r\n        uint256 value = uint256(_source);\r\n        bytes memory result = \"0000000000000000000000000000000000000000000000000000000000000000\";\r\n        uint8 index = 0;\r\n        while(value > 0) {\r\n            result[index] = HEX[value & 0xf];\r\n            index++;\r\n            value = value>>4;\r\n        }\r\n        bytes memory ipfsBytes = reverseBytes(result);\r\n        return ipfsBytes;\r\n    }\r\n\r\n    /**\r\n     * @dev Truncate `_array` by `_length`\r\n     * @param _array The source array\r\n     * @param _length The target length of the `_array`\r\n     * @return The truncated array \r\n     */\r\n    function truncate(uint8[] _array, uint8 _length) internal pure returns (uint8[]) {\r\n        uint8[] memory output = new uint8[](_length);\r\n        for (uint i = 0; i < _length; i++) {\r\n            output[i] = _array[i];\r\n        }\r\n        return output;\r\n    }\r\n    \r\n    /**\r\n     * @dev Reverse `_input` array \r\n     * @param _input The source array \r\n     * @return The reversed array \r\n     */\r\n    function reverse(uint8[] _input) internal pure returns (uint8[]) {\r\n        uint8[] memory output = new uint8[](_input.length);\r\n        for (uint i = 0; i < _input.length; i++) {\r\n            output[i] = _input[_input.length - 1 - i];\r\n        }\r\n        return output;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverse `_input` bytes\r\n     * @param _input The source bytes\r\n     * @return The reversed bytes\r\n     */\r\n    function reverseBytes(bytes _input) private pure returns (bytes) {\r\n        bytes memory output = new bytes(_input.length);\r\n        for (uint8 i = 0; i < _input.length; i++) {\r\n            output[i] = _input[_input.length-1-i];\r\n        }\r\n        return output;\r\n    }\r\n    \r\n    /**\r\n     * @dev Convert the indices to alphabet\r\n     * @param _indices The indices of alphabet\r\n     * @return The alphabets\r\n     */\r\n    function toAlphabet(uint8[] _indices) internal pure returns (bytes) {\r\n        bytes memory output = new bytes(_indices.length);\r\n        for (uint i = 0; i < _indices.length; i++) {\r\n            output[i] = ALPHABET[_indices[i]];\r\n        }\r\n        return output;\r\n    }\r\n\r\n    /**\r\n     * @dev Convert bytes32 to bytes\r\n     * @param _input The source bytes32\r\n     * @return The bytes\r\n     */\r\n    function toBytes(bytes32 _input) internal pure returns (bytes) {\r\n        bytes memory output = new bytes(32);\r\n        for (uint8 i = 0; i < 32; i++) {\r\n            output[i] = _input[i];\r\n        }\r\n        return output;\r\n    }\r\n\r\n    /**\r\n     * @dev Concat two bytes to one\r\n     * @param _byteArray The first bytes\r\n     * @param _byteArray2 The second bytes\r\n     * @return The concated bytes\r\n     */\r\n    function concat(bytes _byteArray, bytes _byteArray2) internal pure returns (bytes) {\r\n        bytes memory returnArray = new bytes(_byteArray.length + _byteArray2.length);\r\n        for (uint16 i = 0; i < _byteArray.length; i++) {\r\n            returnArray[i] = _byteArray[i];\r\n        }\r\n        for (i; i < (_byteArray.length + _byteArray2.length); i++) {\r\n            returnArray[i] = _byteArray2[i - _byteArray.length];\r\n        }\r\n        return returnArray;\r\n    }\r\n}\r\n\r\ncontract TRNAsset is TRNData, ERC721Metadata {\r\n    using IPFSLib for bytes;\r\n    using IPFSLib for bytes32;\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor() public {\r\n        \r\n    }\r\n\r\n    /**\r\n     * @dev Descriptive name for Tripio's Room Night Token in this contract\r\n     * @return The name of the contract\r\n     */\r\n    function name() external pure returns (string _name) {\r\n        return \"Tripio Room Night\";\r\n    }\r\n\r\n    /**\r\n     * @dev Abbreviated name for Tripio's Room Night Token in this contract\r\n     * @return The simple name of the contract\r\n     */\r\n    function symbol() external pure returns (string _symbol) {\r\n        return \"TRN\";\r\n    }\r\n\r\n    /**\r\n     * @dev If `_tokenId` is not valid trows an exception otherwise return a URI which point to a JSON file like:\r\n     *      {\r\n     *       \"name\": \"Identifies the asset to which this NFT represents\",\r\n     *       \"description\": \"Describes the asset to which this NFT represents\",\r\n     *       \"image\": \"A URI pointing to a resource with mime type image/* representing the asset to which this NFT represents. Consider making any images at a width between 320 and 1080 pixels and aspect ratio between 1.91:1 and 4:5 inclusive.\"\r\n     *      }\r\n     * @param _tokenId The RoomNight digital token\r\n     * @return The digital token asset uri\r\n     */\r\n    function tokenURI(uint256 _tokenId) \r\n        external \r\n        view \r\n        validToken(_tokenId) \r\n        returns (string) { \r\n        bytes memory prefix = new bytes(2);\r\n        prefix[0] = 0x12;\r\n        prefix[1] = 0x20;\r\n        (,,,,,,bytes32 ipfs) = dataSource.roomnights(_tokenId);\r\n        bytes memory value = prefix.concat(ipfs.toBytes());\r\n        bytes memory ipfsBytes = value.base58Address();\r\n        bytes memory tokenBaseURIBytes = bytes(dataSource.tokenBaseURI());\r\n        return string(tokenBaseURIBytes.concat(ipfsBytes));\r\n    }\r\n}\r\n\r\ncontract TRNOwnership is TRNOwners, ERC721 {\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor() public {\r\n\r\n    }\r\n\r\n    /**\r\n     * This emits when ownership of any TRN changes by any mechanism.\r\n     */\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n\r\n    /**\r\n     * This emits when the approved address for an RTN is changed or reaffirmed.\r\n     */\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n\r\n    /**\r\n     * This emits when an operator is enabled or disabled for an owner.\r\n     * The operator can manage all RTNs of the owner.\r\n     */\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n    /**\r\n     * @dev Transfer the `_tokenId` to `_to` directly\r\n     * @param _tokenId The room night token\r\n     * @param _to The target owner\r\n     */\r\n    function _transfer(uint256 _tokenId, address _to) private {\r\n        // Find the FROM address\r\n        address from = dataSource.roomNightIndexToOwner(_tokenId);\r\n\r\n        // Remove room night from the `from`\r\n        _removeRoomNight(from, _tokenId);\r\n\r\n        // Add room night to the `_to`\r\n        _pushRoomNight(_to, _tokenId, false);\r\n\r\n        // Change the owner of `_tokenId`\r\n        // Remove approval of `_tokenId`\r\n        dataSource.transferTokenTo(_tokenId, _to);\r\n\r\n        // Emit Transfer event\r\n        emit Transfer(from, _to, _tokenId);\r\n    }\r\n\r\n    function _safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data)\r\n        private\r\n        validToken(_tokenId)\r\n        canTransfer(_tokenId) {\r\n        // The token's owner is equal to `_from`\r\n        address owner = dataSource.roomNightIndexToOwner(_tokenId);\r\n        require(owner == _from);\r\n\r\n        // Avoid `_to` is equal to address(0)\r\n        require(_to != address(0));\r\n\r\n        _transfer(_tokenId, _to);\r\n\r\n        uint256 codeSize;\r\n        assembly { codeSize := extcodesize(_to) }\r\n        if (codeSize == 0) {\r\n            return;\r\n        }\r\n        bytes4 retval = ERC721Receiver(_to).onERC721Received(_from, _tokenId, _data);\r\n        require (retval == dataSource.ERC721_RECEIVED());\r\n    }\r\n\r\n    /**\r\n     * @dev Count all TRNs assigned to an owner.\r\n     *      Throw when `_owner` is equal to address(0)\r\n     * @param _owner An address for whom to query the balance.\r\n     * @return The number of TRNs owned by `_owner`.\r\n     */\r\n    function balanceOf(address _owner) external view returns (uint256) {\r\n        require(_owner != address(0));\r\n        return dataSource.balanceOf(_owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Find the owner of an TRN\r\n     *      Throw unless `_tokenId` more than zero\r\n     * @param _tokenId The identifier for an TRN\r\n     * @return The address of the owner of the TRN\r\n     */\r\n    function ownerOf(uint256 _tokenId) external view returns (address) {\r\n        require(_tokenId > 0);\r\n        return dataSource.roomNightIndexToOwner(_tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers the ownership of an TRN from one address to another address.\r\n     *      Throws unless `msg.sender` is the current owner or an approved address for this TRN.\r\n     *      Throws if `_tokenId` is not a valid TRN. When transfer is complete, this function checks if \r\n     *      `_to` is a smart contract (code size > 0). If so, it calls `onERC721Received` on `_to` and \r\n     * throws if the return value is not `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`.\r\n     * @param _from The current owner of the TRN\r\n     * @param _to The new owner\r\n     * @param _tokenId The TRN to transfer\r\n     * @param _data Additional data with no specified format, sent in call to `_to`\r\n     */\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) external payable {\r\n        _safeTransferFrom(_from, _to, _tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Same like safeTransferFrom with an extra data parameter, except this function just sets data to \"\"(empty)\r\n     * @param _from The current owner of the TRN\r\n     * @param _to The new owner\r\n     * @param _tokenId The TRN to transfer\r\n     */\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable {\r\n        _safeTransferFrom(_from, _to, _tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers the ownership of an TRN from one address to another address.\r\n     *      Throws unless `msg.sender` is the current owner or an approved address for this TRN.\r\n     *      Throws if `_tokenId` is not a valid TRN.\r\n     * @param _from The current owner of the TRN\r\n     * @param _to The new owner\r\n     * @param _tokenId The TRN to transfer\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) \r\n        external \r\n        payable\r\n        validToken(_tokenId)\r\n        canTransfer(_tokenId) {\r\n        // The token's owner is equal to `_from`\r\n        address owner = dataSource.roomNightIndexToOwner(_tokenId);\r\n        require(owner == _from);\r\n\r\n        // Avoid `_to` is equal to address(0)\r\n        require(_to != address(0));\r\n\r\n        _transfer(_tokenId, _to);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers the ownership of TRNs from one address to another address.\r\n     *      Throws unless `msg.sender` is the current owner or an approved address for this TRN.\r\n     *      Throws if `_tokenIds` are not valid TRNs.\r\n     * @param _from The current owner of the TRN\r\n     * @param _to The new owner\r\n     * @param _tokenIds The TRNs to transfer\r\n     */\r\n    function transferFromInBatch(address _from, address _to, uint256[] _tokenIds) \r\n        external\r\n        payable\r\n        validTokenInBatch(_tokenIds)\r\n        canTransferInBatch(_tokenIds) {\r\n        for(uint256 i = 0; i < _tokenIds.length; i++) {\r\n            // The token's owner is equal to `_from`\r\n            address owner = dataSource.roomNightIndexToOwner(_tokenIds[i]);\r\n            require(owner == _from);\r\n\r\n            // Avoid `_to` is equal to address(0)\r\n            require(_to != address(0));\r\n\r\n            _transfer(_tokenIds[i], _to);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Set or reaffirm the approved address for an TRN.\r\n     *      Throws unless `msg.sender` is the current TRN owner, or an authorized\r\n     * @param _approved The new approved TRN controller\r\n     * @param _tokenId The TRN to approve\r\n     */\r\n    function approve(address _approved, uint256 _tokenId) \r\n        external \r\n        payable \r\n        validToken(_tokenId)\r\n        canOperate(_tokenId) {\r\n        address owner = dataSource.roomNightIndexToOwner(_tokenId);\r\n        \r\n        dataSource.approveTokenTo(_tokenId, _approved);\r\n        emit Approval(owner, _approved, _tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Enable or disable approval for a third party (\"operator\") to manage \r\n     *      all of `msg.sender`'s assets.\r\n     *      Emits the ApprovalForAll event. \r\n     * @param _operator Address to add to the set of authorized operators.\r\n     * @param _approved True if the operator is approved, false to revoke approval.\r\n     */\r\n    function setApprovalForAll(address _operator, bool _approved) external {\r\n        require(_operator != address(0));\r\n        dataSource.approveOperatorTo(_operator, msg.sender, _approved);\r\n        emit ApprovalForAll(msg.sender, _operator, _approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Get the approved address for a single TRN.\r\n     *      Throws if `_tokenId` is not a valid TRN.\r\n     * @param _tokenId The TRN to find the approved address for\r\n     * @return The approved address for this TRN, or the zero address if there is none\r\n     */\r\n    function getApproved(uint256 _tokenId) \r\n        external \r\n        view \r\n        validToken(_tokenId)\r\n        returns (address) {\r\n        return dataSource.roomNightApprovals(_tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Query if an address is an authorized operator for another address.\r\n     * @param _owner The address that owns The TRNs\r\n     * @param _operator The address that acts on behalf of the owner\r\n     * @return True if `_operator` is an approved operator for `_owner`, false otherwise\r\n     */\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool) {\r\n        return dataSource.operatorApprovals(_owner, _operator);\r\n    }\r\n}\r\n\r\n\r\ncontract TRNSupportsInterface is TRNData, ERC165 {\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor() public {\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Query if a contract implements an interface\r\n     * @param interfaceID The interface identifier, as specified in ERC-165\r\n     * @return true if the contract implements `interfaceID` \r\n     * and `interfaceID` is not 0xffffffff, false otherwise\r\n     */\r\n    function supportsInterface(bytes4 interfaceID) \r\n        external \r\n        view \r\n        returns (bool) {\r\n        return ((interfaceID == dataSource.interfaceSignature_ERC165()) ||\r\n        (interfaceID == dataSource.interfaceSignature_ERC721Metadata()) ||\r\n        (interfaceID == dataSource.interfaceSignature_ERC721())) &&\r\n        (interfaceID != 0xffffffff);\r\n    }\r\n}\r\n/**\r\n * This utility library was forked from https://github.com/o0ragman0o/LibCLL\r\n */\r\nlibrary LinkedListLib {\r\n\r\n    uint256 constant NULL = 0;\r\n    uint256 constant HEAD = 0;\r\n    bool constant PREV = false;\r\n    bool constant NEXT = true;\r\n\r\n    struct LinkedList {\r\n        mapping (uint256 => mapping (bool => uint256)) list;\r\n        uint256 length;\r\n        uint256 index;\r\n    }\r\n\r\n    /**\r\n     * @dev returns true if the list exists\r\n     * @param self stored linked list from contract\r\n     */\r\n    function listExists(LinkedList storage self)\r\n        internal\r\n        view returns (bool) {\r\n        return self.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev returns true if the node exists\r\n     * @param self stored linked list from contract\r\n     * @param _node a node to search for\r\n     */\r\n    function nodeExists(LinkedList storage self, uint256 _node)\r\n        internal\r\n        view returns (bool) {\r\n        if (self.list[_node][PREV] == HEAD && self.list[_node][NEXT] == HEAD) {\r\n            if (self.list[HEAD][NEXT] == _node) {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of elements in the list\r\n     * @param self stored linked list from contract\r\n     */ \r\n    function sizeOf(LinkedList storage self) \r\n        internal \r\n        view \r\n        returns (uint256 numElements) {\r\n        return self.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the links of a node as a tuple\r\n     * @param self stored linked list from contract\r\n     * @param _node id of the node to get\r\n     */\r\n    function getNode(LinkedList storage self, uint256 _node)\r\n        public \r\n        view \r\n        returns (bool, uint256, uint256) {\r\n        if (!nodeExists(self,_node)) {\r\n            return (false, 0, 0);\r\n        } else {\r\n            return (true, self.list[_node][PREV], self.list[_node][NEXT]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the link of a node `_node` in direction `_direction`.\r\n     * @param self stored linked list from contract\r\n     * @param _node id of the node to step from\r\n     * @param _direction direction to step in\r\n     */\r\n    function getAdjacent(LinkedList storage self, uint256 _node, bool _direction)\r\n        public \r\n        view \r\n        returns (bool, uint256) {\r\n        if (!nodeExists(self,_node)) {\r\n            return (false,0);\r\n        } else {\r\n            return (true,self.list[_node][_direction]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Can be used before `insert` to build an ordered list\r\n     * @param self stored linked list from contract\r\n     * @param _node an existing node to search from, e.g. HEAD.\r\n     * @param _value value to seek\r\n     * @param _direction direction to seek in\r\n     * @return next first node beyond '_node' in direction `_direction`\r\n     */\r\n    function getSortedSpot(LinkedList storage self, uint256 _node, uint256 _value, bool _direction)\r\n        public \r\n        view \r\n        returns (uint256) {\r\n        if (sizeOf(self) == 0) { \r\n            return 0; \r\n        }\r\n        require((_node == 0) || nodeExists(self,_node));\r\n        bool exists;\r\n        uint256 next;\r\n        (exists,next) = getAdjacent(self, _node, _direction);\r\n        while  ((next != 0) && (_value != next) && ((_value < next) != _direction)) next = self.list[next][_direction];\r\n        return next;\r\n    }\r\n\r\n    /**\r\n     * @dev Creates a bidirectional link between two nodes on direction `_direction`\r\n     * @param self stored linked list from contract\r\n     * @param _node first node for linking\r\n     * @param _link  node to link to in the _direction\r\n     */\r\n    function createLink(LinkedList storage self, uint256 _node, uint256 _link, bool _direction) \r\n        private {\r\n        self.list[_link][!_direction] = _node;\r\n        self.list[_node][_direction] = _link;\r\n    }\r\n\r\n    /**\r\n     * @dev Insert node `_new` beside existing node `_node` in direction `_direction`.\r\n     * @param self stored linked list from contract\r\n     * @param _node existing node\r\n     * @param _new  new node to insert\r\n     * @param _direction direction to insert node in\r\n     */\r\n    function insert(LinkedList storage self, uint256 _node, uint256 _new, bool _direction) \r\n        internal \r\n        returns (bool) {\r\n        if(!nodeExists(self,_new) && nodeExists(self,_node)) {\r\n            uint256 c = self.list[_node][_direction];\r\n            createLink(self, _node, _new, _direction);\r\n            createLink(self, _new, c, _direction);\r\n            self.length++;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev removes an entry from the linked list\r\n     * @param self stored linked list from contract\r\n     * @param _node node to remove from the list\r\n     */\r\n    function remove(LinkedList storage self, uint256 _node) \r\n        internal \r\n        returns (uint256) {\r\n        if ((_node == NULL) || (!nodeExists(self,_node))) { \r\n            return 0; \r\n        }\r\n        createLink(self, self.list[_node][PREV], self.list[_node][NEXT], NEXT);\r\n        delete self.list[_node][PREV];\r\n        delete self.list[_node][NEXT];\r\n        self.length--;\r\n        return _node;\r\n    }\r\n\r\n    /**\r\n     * @dev pushes an enrty to the head of the linked list\r\n     * @param self stored linked list from contract\r\n     * @param _index The node Id\r\n     * @param _direction push to the head (NEXT) or tail (PREV)\r\n     */\r\n    function add(LinkedList storage self, uint256 _index, bool _direction) \r\n        internal \r\n        returns (uint256) {\r\n        insert(self, HEAD, _index, _direction);\r\n        return self.index;\r\n    }\r\n\r\n    /**\r\n     * @dev pushes an enrty to the head of the linked list\r\n     * @param self stored linked list from contract\r\n     * @param _direction push to the head (NEXT) or tail (PREV)\r\n     */\r\n    function push(LinkedList storage self, bool _direction) \r\n        internal \r\n        returns (uint256) {\r\n        self.index++;\r\n        insert(self, HEAD, self.index, _direction);\r\n        return self.index;\r\n    }\r\n\r\n    /**\r\n     * @dev pops the first entry from the linked list\r\n     * @param self stored linked list from contract\r\n     * @param _direction pop from the head (NEXT) or the tail (PREV)\r\n     */\r\n    function pop(LinkedList storage self, bool _direction) \r\n        internal \r\n        returns (uint256) {\r\n        bool exists;\r\n        uint256 adj;\r\n        (exists,adj) = getAdjacent(self, HEAD, _direction);\r\n        return remove(self, adj);\r\n    }\r\n}\r\n\r\ncontract TripioToken {\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\r\n}\r\n\r\ncontract TripioRoomNightData is Owned {\r\n    using LinkedListLib for LinkedListLib.LinkedList;\r\n    // Interface signature of erc165.\r\n    // bytes4(keccak256(\"supportsInterface(bytes4)\"))\r\n    bytes4 constant public interfaceSignature_ERC165 = 0x01ffc9a7;\r\n\r\n    // Interface signature of erc721 metadata.\r\n    // bytes4(keccak256(\"name()\")) ^ bytes4(keccak256(\"symbol()\")) ^ bytes4(keccak256(\"tokenURI(uint256)\"));\r\n    bytes4 constant public interfaceSignature_ERC721Metadata = 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd;\r\n        \r\n    // Interface signature of erc721.\r\n    // bytes4(keccak256(\"balanceOf(address)\")) ^\r\n    // bytes4(keccak256(\"ownerOf(uint256)\")) ^\r\n    // bytes4(keccak256(\"safeTransferFrom(address,address,uint256,bytes)\")) ^\r\n    // bytes4(keccak256(\"safeTransferFrom(address,address,uint256)\")) ^\r\n    // bytes4(keccak256(\"transferFrom(address,address,uint256)\")) ^\r\n    // bytes4(keccak256(\"approve(address,uint256)\")) ^\r\n    // bytes4(keccak256(\"setApprovalForAll(address,bool)\")) ^\r\n    // bytes4(keccak256(\"getApproved(uint256)\")) ^\r\n    // bytes4(keccak256(\"isApprovedForAll(address,address)\"));\r\n    bytes4 constant public interfaceSignature_ERC721 = 0x70a08231 ^ 0x6352211e ^ 0xb88d4fde ^ 0x42842e0e ^ 0x23b872dd ^ 0x095ea7b3 ^ 0xa22cb465 ^ 0x081812fc ^ 0xe985e9c5;\r\n\r\n    // Base URI of token asset\r\n    string public tokenBaseURI;\r\n\r\n    // Authorized contracts\r\n    struct AuthorizedContract {\r\n        string name;\r\n        address acontract;\r\n    }\r\n    mapping (address=>uint256) public authorizedContractIds;\r\n    mapping (uint256 => AuthorizedContract) public authorizedContracts;\r\n    LinkedListLib.LinkedList public authorizedContractList = LinkedListLib.LinkedList(0, 0);\r\n\r\n    // Rate plan prices\r\n    struct Price {\r\n        uint16 inventory;       // Rate plan inventory\r\n        bool init;              // Whether the price is initied\r\n        mapping (uint256 => uint256) tokens;\r\n    }\r\n\r\n    // Vendor hotel RPs\r\n    struct RatePlan {\r\n        string name;            // Name of rate plan.\r\n        uint256 timestamp;      // Create timestamp.\r\n        bytes32 ipfs;           // The address of rate plan detail on IPFS.\r\n        Price basePrice;        // The base price of rate plan\r\n        mapping (uint256 => Price) prices;   // date -> Price\r\n    }\r\n\r\n    // Vendors\r\n    struct Vendor {\r\n        string name;            // Name of vendor.\r\n        address vendor;         // Address of vendor.\r\n        uint256 timestamp;      // Create timestamp.\r\n        bool valid;             // Whether the vendor is valid(default is true)\r\n        LinkedListLib.LinkedList ratePlanList;\r\n        mapping (uint256=>RatePlan) ratePlans;\r\n    }\r\n    mapping (address => uint256) public vendorIds;\r\n    mapping (uint256 => Vendor) vendors;\r\n    LinkedListLib.LinkedList public vendorList = LinkedListLib.LinkedList(0, 0);\r\n\r\n    // Supported digital currencies\r\n    mapping (uint256 => address) public tokenIndexToAddress;\r\n    LinkedListLib.LinkedList public tokenList = LinkedListLib.LinkedList(0, 0);\r\n\r\n    // RoomNight tokens\r\n    struct RoomNight {\r\n        uint256 vendorId;\r\n        uint256 rpid;\r\n        uint256 token;          // The digital currency token \r\n        uint256 price;          // The digital currency price\r\n        uint256 timestamp;      // Create timestamp.\r\n        uint256 date;           // The checkin date\r\n        bytes32 ipfs;           // The address of rate plan detail on IPFS.\r\n    }\r\n    RoomNight[] public roomnights;\r\n    // rnid -> owner\r\n    mapping (uint256 => address) public roomNightIndexToOwner;\r\n\r\n    // Owner Account\r\n    mapping (address => LinkedListLib.LinkedList) public roomNightOwners;\r\n\r\n    // Vendor Account\r\n    mapping (address => LinkedListLib.LinkedList) public roomNightVendors;\r\n\r\n    // The authorized address for each TRN\r\n    mapping (uint256 => address) public roomNightApprovals;\r\n\r\n    // The authorized operators for each address\r\n    mapping (address => mapping (address => bool)) public operatorApprovals;\r\n\r\n    // The applications of room night redund\r\n    mapping (address => mapping (uint256 => bool)) public refundApplications;\r\n\r\n    // The signature of `onERC721Received(address,uint256,bytes)`\r\n    // bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"));\r\n    bytes4 constant public ERC721_RECEIVED = 0xf0b9e5ba;\r\n\r\n    /**\r\n     * This emits when contract authorized\r\n     */\r\n    event ContractAuthorized(address _contract);\r\n\r\n    /**\r\n     * This emits when contract deauthorized\r\n     */\r\n    event ContractDeauthorized(address _contract);\r\n\r\n    /**\r\n     * The contract is valid\r\n     */\r\n    modifier authorizedContractValid(address _contract) {\r\n        require(authorizedContractIds[_contract] > 0);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * The contract is valid\r\n     */\r\n    modifier authorizedContractIdValid(uint256 _cid) {\r\n        require(authorizedContractList.nodeExists(_cid));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Only the owner or authorized contract is valid\r\n     */\r\n    modifier onlyOwnerOrAuthorizedContract {\r\n        require(msg.sender == owner || authorizedContractIds[msg.sender] > 0);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor() public {\r\n        // Add one invalid RoomNight, avoid subscript 0\r\n        roomnights.push(RoomNight(0, 0, 0, 0, 0, 0, 0));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the node list and next node as a tuple\r\n     * @param self stored linked list from contract\r\n     * @param _node the begin id of the node to get\r\n     * @param _limit the total nodes of one page\r\n     * @param _direction direction to step in\r\n     */\r\n    function getNodes(LinkedListLib.LinkedList storage self, uint256 _node, uint256 _limit, bool _direction) \r\n        private\r\n        view \r\n        returns (uint256[], uint256) {\r\n        bool exists;\r\n        uint256 i = 0;\r\n        uint256 ei = 0;\r\n        uint256 index = 0;\r\n        uint256 count = _limit;\r\n        if(count > self.length) {\r\n            count = self.length;\r\n        }\r\n        (exists, i) = self.getAdjacent(_node, _direction);\r\n        if(!exists || count == 0) {\r\n            return (new uint256[](0), 0);\r\n        }else {\r\n            uint256[] memory temp = new uint256[](count);\r\n            if(_node != 0) {\r\n                index++;\r\n                temp[0] = _node;\r\n            }\r\n            while (i != 0 && index < count) {\r\n                temp[index] = i;\r\n                (exists,i) = self.getAdjacent(i, _direction);\r\n                index++;\r\n            }\r\n            ei = i;\r\n            if(index < count) {\r\n                uint256[] memory result = new uint256[](index);\r\n                for(i = 0; i < index; i++) {\r\n                    result[i] = temp[i];\r\n                }\r\n                return (result, ei);\r\n            }else {\r\n                return (temp, ei);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Authorize `_contract` to execute this contract's funs\r\n     * @param _contract The contract address\r\n     * @param _name The contract name\r\n     */\r\n    function authorizeContract(address _contract, string _name) \r\n        public \r\n        onlyOwner \r\n        returns(bool) {\r\n        uint256 codeSize;\r\n        assembly { codeSize := extcodesize(_contract) }\r\n        require(codeSize != 0);\r\n        // Not exists\r\n        require(authorizedContractIds[_contract] == 0);\r\n\r\n        // Add\r\n        uint256 id = authorizedContractList.push(false);\r\n        authorizedContractIds[_contract] = id;\r\n        authorizedContracts[id] = AuthorizedContract(_name, _contract);\r\n\r\n        // Event\r\n        emit ContractAuthorized(_contract);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Deauthorized `_contract` by address\r\n     * @param _contract The contract address\r\n     */\r\n    function deauthorizeContract(address _contract) \r\n        public \r\n        onlyOwner\r\n        authorizedContractValid(_contract)\r\n        returns(bool) {\r\n        uint256 id = authorizedContractIds[_contract];\r\n        authorizedContractList.remove(id);\r\n        authorizedContractIds[_contract] = 0;\r\n        delete authorizedContracts[id];\r\n        \r\n        // Event \r\n        emit ContractDeauthorized(_contract);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Deauthorized `_contract` by contract id\r\n     * @param _cid The contract id\r\n     */\r\n    function deauthorizeContractById(uint256 _cid) \r\n        public\r\n        onlyOwner\r\n        authorizedContractIdValid(_cid)\r\n        returns(bool) {\r\n        address acontract = authorizedContracts[_cid].acontract;\r\n        authorizedContractList.remove(_cid);\r\n        authorizedContractIds[acontract] = 0;\r\n        delete authorizedContracts[_cid];\r\n\r\n        // Event \r\n        emit ContractDeauthorized(acontract);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Get authorize contract ids by page\r\n     * @param _from The begin authorize contract id\r\n     * @param _limit How many authorize contract ids one page\r\n     * @return The authorize contract ids and the next authorize contract id as tuple, the next page not exists when next eq 0\r\n     */\r\n    function getAuthorizeContractIds(uint256 _from, uint256 _limit) \r\n        external \r\n        view \r\n        returns(uint256[], uint256){\r\n        return getNodes(authorizedContractList, _from, _limit, true);\r\n    }\r\n\r\n    /**\r\n     * @dev Get authorize contract by id\r\n     * @param _cid Then authorize contract id\r\n     * @return The authorize contract info(_name, _acontract)\r\n     */\r\n    function getAuthorizeContract(uint256 _cid) \r\n        external \r\n        view \r\n        returns(string _name, address _acontract) {\r\n        AuthorizedContract memory acontract = authorizedContracts[_cid]; \r\n        _name = acontract.name;\r\n        _acontract = acontract.acontract;\r\n    }\r\n\r\n    /*************************************** GET ***************************************/\r\n\r\n    /**\r\n     * @dev Get the rate plan by `_vendorId` and `_rpid`\r\n     * @param _vendorId The vendor id\r\n     * @param _rpid The rate plan id\r\n     */\r\n    function getRatePlan(uint256 _vendorId, uint256 _rpid) \r\n        public \r\n        view \r\n        returns (string _name, uint256 _timestamp, bytes32 _ipfs) {\r\n        _name = vendors[_vendorId].ratePlans[_rpid].name;\r\n        _timestamp = vendors[_vendorId].ratePlans[_rpid].timestamp;\r\n        _ipfs = vendors[_vendorId].ratePlans[_rpid].ipfs;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the rate plan price by `_vendorId`, `_rpid`, `_date` and `_tokenId`\r\n     * @param _vendorId The vendor id\r\n     * @param _rpid The rate plan id\r\n     * @param _date The date desc (20180723)\r\n     * @param _tokenId The digital token id\r\n     * @return The price info(inventory, init, price)\r\n     */\r\n    function getPrice(uint256 _vendorId, uint256 _rpid, uint256 _date, uint256 _tokenId) \r\n        public\r\n        view \r\n        returns(uint16 _inventory, bool _init, uint256 _price) {\r\n        _inventory = vendors[_vendorId].ratePlans[_rpid].prices[_date].inventory;\r\n        _init = vendors[_vendorId].ratePlans[_rpid].prices[_date].init;\r\n        _price = vendors[_vendorId].ratePlans[_rpid].prices[_date].tokens[_tokenId];\r\n        if(!_init) {\r\n            // Get the base price\r\n            _inventory = vendors[_vendorId].ratePlans[_rpid].basePrice.inventory;\r\n            _price = vendors[_vendorId].ratePlans[_rpid].basePrice.tokens[_tokenId];\r\n            _init = vendors[_vendorId].ratePlans[_rpid].basePrice.init;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get the rate plan prices by `_vendorId`, `_rpid`, `_dates` and `_tokenId`\r\n     * @param _vendorId The vendor id\r\n     * @param _rpid The rate plan id\r\n     * @param _dates The dates desc ([20180723,20180724,20180725])\r\n     * @param _tokenId The digital token id\r\n     * @return The price info(inventory, init, price)\r\n     */\r\n    function getPrices(uint256 _vendorId, uint256 _rpid, uint256[] _dates, uint256 _tokenId) \r\n        public\r\n        view \r\n        returns(uint16[] _inventories, uint256[] _prices) {\r\n        uint16[] memory inventories = new uint16[](_dates.length);\r\n        uint256[] memory prices = new uint256[](_dates.length);\r\n        uint256 date;\r\n        for(uint256 i = 0; i < _dates.length; i++) {\r\n            date = _dates[i];\r\n            uint16 inventory = vendors[_vendorId].ratePlans[_rpid].prices[date].inventory;\r\n            bool init = vendors[_vendorId].ratePlans[_rpid].prices[date].init;\r\n            uint256 price = vendors[_vendorId].ratePlans[_rpid].prices[date].tokens[_tokenId];\r\n            if(!init) {\r\n                // Get the base price\r\n                inventory = vendors[_vendorId].ratePlans[_rpid].basePrice.inventory;\r\n                price = vendors[_vendorId].ratePlans[_rpid].basePrice.tokens[_tokenId];\r\n                init = vendors[_vendorId].ratePlans[_rpid].basePrice.init;\r\n            }\r\n            inventories[i] = inventory;\r\n            prices[i] = price;\r\n        }\r\n        return (inventories, prices);\r\n    }\r\n\r\n    /**\r\n     * @dev Get the inventory by  by `_vendorId`, `_rpid` and `_date`\r\n     * @param _vendorId The vendor id\r\n     * @param _rpid The rate plan id\r\n     * @param _date The date desc (20180723)\r\n     * @return The inventory info(inventory, init)\r\n     */\r\n    function getInventory(uint256 _vendorId, uint256 _rpid, uint256 _date) \r\n        public\r\n        view \r\n        returns(uint16 _inventory, bool _init) {\r\n        _inventory = vendors[_vendorId].ratePlans[_rpid].prices[_date].inventory;\r\n        _init = vendors[_vendorId].ratePlans[_rpid].prices[_date].init;\r\n        if(!_init) {\r\n            // Get the base price\r\n            _inventory = vendors[_vendorId].ratePlans[_rpid].basePrice.inventory;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Whether the rate plan is exist\r\n     * @param _vendorId The vendor id\r\n     * @param _rpid The rate plan id\r\n     * @return If the rate plan of the vendor is exist returns true otherwise return false\r\n     */\r\n    function ratePlanIsExist(uint256 _vendorId, uint256 _rpid) \r\n        public \r\n        view \r\n        returns (bool) {\r\n        return vendors[_vendorId].ratePlanList.nodeExists(_rpid);\r\n    }\r\n\r\n    /**\r\n     * @dev Get orders of owner by page\r\n     * @param _owner The owner address\r\n     * @param _from The begin id of the node to get\r\n     * @param _limit The total nodes of one page\r\n     * @param _direction Direction to step in\r\n     * @return The order ids and the next id\r\n     */\r\n    function getOrdersOfOwner(address _owner, uint256 _from, uint256 _limit, bool _direction) \r\n        public \r\n        view \r\n        returns (uint256[], uint256) {\r\n        return getNodes(roomNightOwners[_owner], _from, _limit, _direction);\r\n    }\r\n\r\n    /**\r\n     * @dev Get orders of vendor by page\r\n     * @param _owner The vendor address\r\n     * @param _from The begin id of the node to get\r\n     * @param _limit The total nodes of on page\r\n     * @param _direction Direction to step in \r\n     * @return The order ids and the next id\r\n     */\r\n    function getOrdersOfVendor(address _owner, uint256 _from, uint256 _limit, bool _direction) \r\n        public \r\n        view \r\n        returns (uint256[], uint256) {\r\n        return getNodes(roomNightVendors[_owner], _from, _limit, _direction);\r\n    }\r\n\r\n    /**\r\n     * @dev Get the token count of somebody \r\n     * @param _owner The owner of token\r\n     * @return The token count of `_owner`\r\n     */\r\n    function balanceOf(address _owner) \r\n        public \r\n        view \r\n        returns(uint256) {\r\n        return roomNightOwners[_owner].length;\r\n    }\r\n\r\n    /**\r\n     * @dev Get rate plan ids of `_vendorId`\r\n     * @param _from The begin id of the node to get\r\n     * @param _limit The total nodes of on page\r\n     * @param _direction Direction to step in \r\n     * @return The rate plan ids and the next id\r\n     */\r\n    function getRatePlansOfVendor(uint256 _vendorId, uint256 _from, uint256 _limit, bool _direction) \r\n        public \r\n        view \r\n        returns(uint256[], uint256) {\r\n        return getNodes(vendors[_vendorId].ratePlanList, _from, _limit, _direction);\r\n    }\r\n\r\n    /**\r\n     * @dev Get token ids\r\n     * @param _from The begin id of the node to get\r\n     * @param _limit The total nodes of on page\r\n     * @param _direction Direction to step in \r\n     * @return The token ids and the next id\r\n     */\r\n    function getTokens(uint256 _from, uint256 _limit, bool _direction) \r\n        public \r\n        view \r\n        returns(uint256[], uint256) {\r\n        return getNodes(tokenList, _from, _limit, _direction);\r\n    }\r\n\r\n    /**\r\n     * @dev Get token Info\r\n     * @param _tokenId The token id\r\n     * @return The token info(symbol, name, decimals)\r\n     */\r\n    function getToken(uint256 _tokenId)\r\n        public \r\n        view \r\n        returns(string _symbol, string _name, uint8 _decimals, address _token) {\r\n        _token = tokenIndexToAddress[_tokenId];\r\n        TripioToken tripio = TripioToken(_token);\r\n        _symbol = tripio.symbol();\r\n        _name = tripio.name();\r\n        _decimals = tripio.decimals();\r\n    }\r\n\r\n    /**\r\n     * @dev Get vendor ids\r\n     * @param _from The begin id of the node to get\r\n     * @param _limit The total nodes of on page\r\n     * @param _direction Direction to step in \r\n     * @return The vendor ids and the next id\r\n     */\r\n    function getVendors(uint256 _from, uint256 _limit, bool _direction) \r\n        public \r\n        view \r\n        returns(uint256[], uint256) {\r\n        return getNodes(vendorList, _from, _limit, _direction);\r\n    }\r\n\r\n    /**\r\n     * @dev Get the vendor infomation by vendorId\r\n     * @param _vendorId The vendor id\r\n     * @return The vendor infomation(name, vendor, timestamp, valid)\r\n     */\r\n    function getVendor(uint256 _vendorId) \r\n        public \r\n        view \r\n        returns(string _name, address _vendor,uint256 _timestamp, bool _valid) {\r\n        _name = vendors[_vendorId].name;\r\n        _vendor = vendors[_vendorId].vendor;\r\n        _timestamp = vendors[_vendorId].timestamp;\r\n        _valid = vendors[_vendorId].valid;\r\n    }\r\n\r\n    /*************************************** SET ***************************************/\r\n    /**\r\n     * @dev Update base uri of token metadata\r\n     * @param _tokenBaseURI The base uri\r\n     */\r\n    function updateTokenBaseURI(string _tokenBaseURI) \r\n        public \r\n        onlyOwnerOrAuthorizedContract {\r\n        tokenBaseURI = _tokenBaseURI;\r\n    }\r\n\r\n    /**\r\n     * @dev Push order to user's order list\r\n     * @param _owner The buyer address\r\n     * @param _rnid The room night order id\r\n     * @param _direction direction to step in\r\n     */\r\n    function pushOrderOfOwner(address _owner, uint256 _rnid, bool _direction) \r\n        public \r\n        onlyOwnerOrAuthorizedContract {\r\n        if(!roomNightOwners[_owner].listExists()) {\r\n            roomNightOwners[_owner] = LinkedListLib.LinkedList(0, 0);\r\n        }\r\n        roomNightOwners[_owner].add(_rnid, _direction);\r\n    }\r\n\r\n    /**\r\n     * @dev Remove order from owner's order list\r\n     * @param _owner The owner address\r\n     * @param _rnid The room night order id\r\n     */\r\n    function removeOrderOfOwner(address _owner, uint _rnid) \r\n        public \r\n        onlyOwnerOrAuthorizedContract {\r\n        require(roomNightOwners[_owner].nodeExists(_rnid));\r\n        roomNightOwners[_owner].remove(_rnid);\r\n    }\r\n\r\n    /**\r\n     * @dev Push order to the vendor's order list\r\n     * @param _vendor The vendor address\r\n     * @param _rnid The room night order id\r\n     * @param _direction direction to step in\r\n     */\r\n    function pushOrderOfVendor(address _vendor, uint256 _rnid, bool _direction) \r\n        public \r\n        onlyOwnerOrAuthorizedContract {\r\n        if(!roomNightVendors[_vendor].listExists()) {\r\n            roomNightVendors[_vendor] = LinkedListLib.LinkedList(0, 0);\r\n        }\r\n        roomNightVendors[_vendor].add(_rnid, _direction);\r\n    }\r\n\r\n    /**\r\n     * @dev Remove order from vendor's order list\r\n     * @param _vendor The vendor address\r\n     * @param _rnid The room night order id\r\n     */\r\n    function removeOrderOfVendor(address _vendor, uint256 _rnid) \r\n        public \r\n        onlyOwnerOrAuthorizedContract {\r\n        require(roomNightVendors[_vendor].nodeExists(_rnid));\r\n        roomNightVendors[_vendor].remove(_rnid);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer token to somebody\r\n     * @param _tokenId The token id \r\n     * @param _to The target owner of the token\r\n     */\r\n    function transferTokenTo(uint256 _tokenId, address _to) \r\n        public \r\n        onlyOwnerOrAuthorizedContract {\r\n        roomNightIndexToOwner[_tokenId] = _to;\r\n        roomNightApprovals[_tokenId] = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `_to` to operate the `_tokenId`\r\n     * @param _tokenId The token id\r\n     * @param _to Somebody to be approved\r\n     */\r\n    function approveTokenTo(uint256 _tokenId, address _to) \r\n        public \r\n        onlyOwnerOrAuthorizedContract {\r\n        roomNightApprovals[_tokenId] = _to;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `_operator` to operate all the Token of `_to`\r\n     * @param _operator The operator to be approved\r\n     * @param _to The owner of tokens to be operate\r\n     * @param _approved Approved or not\r\n     */\r\n    function approveOperatorTo(address _operator, address _to, bool _approved) \r\n        public \r\n        onlyOwnerOrAuthorizedContract {\r\n        operatorApprovals[_to][_operator] = _approved;\r\n    } \r\n\r\n    /**\r\n     * @dev Update base price of rate plan\r\n     * @param _vendorId The vendor id\r\n     * @param _rpid The rate plan id\r\n     * @param _tokenId The digital token id\r\n     * @param _price The price to be updated\r\n     */\r\n    function updateBasePrice(uint256 _vendorId, uint256 _rpid, uint256 _tokenId, uint256 _price)\r\n        public \r\n        onlyOwnerOrAuthorizedContract {\r\n        vendors[_vendorId].ratePlans[_rpid].basePrice.init = true;\r\n        vendors[_vendorId].ratePlans[_rpid].basePrice.tokens[_tokenId] = _price;\r\n    }\r\n\r\n    /**\r\n     * @dev Update base inventory of rate plan \r\n     * @param _vendorId The vendor id\r\n     * @param _rpid The rate plan id\r\n     * @param _inventory The inventory to be updated\r\n     */\r\n    function updateBaseInventory(uint256 _vendorId, uint256 _rpid, uint16 _inventory)\r\n        public \r\n        onlyOwnerOrAuthorizedContract {\r\n        vendors[_vendorId].ratePlans[_rpid].basePrice.inventory = _inventory;\r\n    }\r\n\r\n    /**\r\n     * @dev Update price by `_vendorId`, `_rpid`, `_date`, `_tokenId` and `_price`\r\n     * @param _vendorId The vendor id\r\n     * @param _rpid The rate plan id\r\n     * @param _date The date desc (20180723)\r\n     * @param _tokenId The digital token id\r\n     * @param _price The price to be updated\r\n     */\r\n    function updatePrice(uint256 _vendorId, uint256 _rpid, uint256 _date, uint256 _tokenId, uint256 _price)\r\n        public\r\n        onlyOwnerOrAuthorizedContract {\r\n        if (vendors[_vendorId].ratePlans[_rpid].prices[_date].init) {\r\n            vendors[_vendorId].ratePlans[_rpid].prices[_date].tokens[_tokenId] = _price;\r\n        } else {\r\n            vendors[_vendorId].ratePlans[_rpid].prices[_date] = Price(0, true);\r\n            vendors[_vendorId].ratePlans[_rpid].prices[_date].tokens[_tokenId] = _price;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Update inventory by `_vendorId`, `_rpid`, `_date`, `_inventory`\r\n     * @param _vendorId The vendor id\r\n     * @param _rpid The rate plan id\r\n     * @param _date The date desc (20180723)\r\n     * @param _inventory The inventory to be updated\r\n     */\r\n    function updateInventories(uint256 _vendorId, uint256 _rpid, uint256 _date, uint16 _inventory)\r\n        public \r\n        onlyOwnerOrAuthorizedContract {\r\n        if (vendors[_vendorId].ratePlans[_rpid].prices[_date].init) {\r\n            vendors[_vendorId].ratePlans[_rpid].prices[_date].inventory = _inventory;\r\n        } else {\r\n            vendors[_vendorId].ratePlans[_rpid].prices[_date] = Price(_inventory, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Reduce inventories\r\n     * @param _vendorId The vendor id\r\n     * @param _rpid The rate plan id\r\n     * @param _date The date desc (20180723)\r\n     * @param _inventory The amount to be reduced\r\n     */\r\n    function reduceInventories(uint256 _vendorId, uint256 _rpid, uint256 _date, uint16 _inventory) \r\n        public  \r\n        onlyOwnerOrAuthorizedContract {\r\n        uint16 a = 0;\r\n        if(vendors[_vendorId].ratePlans[_rpid].prices[_date].init) {\r\n            a = vendors[_vendorId].ratePlans[_rpid].prices[_date].inventory;\r\n            require(_inventory <= a);\r\n            vendors[_vendorId].ratePlans[_rpid].prices[_date].inventory = a - _inventory;\r\n        }else if(vendors[_vendorId].ratePlans[_rpid].basePrice.init){\r\n            a = vendors[_vendorId].ratePlans[_rpid].basePrice.inventory;\r\n            require(_inventory <= a);\r\n            vendors[_vendorId].ratePlans[_rpid].basePrice.inventory = a - _inventory;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Add inventories\r\n     * @param _vendorId The vendor id\r\n     * @param _rpid The rate plan id\r\n     * @param _date The date desc (20180723)\r\n     * @param _inventory The amount to be add\r\n     */\r\n    function addInventories(uint256 _vendorId, uint256 _rpid, uint256 _date, uint16 _inventory) \r\n        public  \r\n        onlyOwnerOrAuthorizedContract {\r\n        uint16 c = 0;\r\n        if(vendors[_vendorId].ratePlans[_rpid].prices[_date].init) {\r\n            c = _inventory + vendors[_vendorId].ratePlans[_rpid].prices[_date].inventory;\r\n            require(c >= _inventory);\r\n            vendors[_vendorId].ratePlans[_rpid].prices[_date].inventory = c;\r\n        }else if(vendors[_vendorId].ratePlans[_rpid].basePrice.init) {\r\n            c = _inventory + vendors[_vendorId].ratePlans[_rpid].basePrice.inventory;\r\n            require(c >= _inventory);\r\n            vendors[_vendorId].ratePlans[_rpid].basePrice.inventory = c;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Update inventory and price by `_vendorId`, `_rpid`, `_date`, `_tokenId`, `_price` and `_inventory`\r\n     * @param _vendorId The vendor id\r\n     * @param _rpid The rate plan id\r\n     * @param _date The date desc (20180723)\r\n     * @param _tokenId The digital token id\r\n     * @param _price The price to be updated\r\n     * @param _inventory The inventory to be updated\r\n     */\r\n    function updatePriceAndInventories(uint256 _vendorId, uint256 _rpid, uint256 _date, uint256 _tokenId, uint256 _price, uint16 _inventory)\r\n        public \r\n        onlyOwnerOrAuthorizedContract {\r\n        if (vendors[_vendorId].ratePlans[_rpid].prices[_date].init) {\r\n            vendors[_vendorId].ratePlans[_rpid].prices[_date].inventory = _inventory;\r\n            vendors[_vendorId].ratePlans[_rpid].prices[_date].tokens[_tokenId] = _price;\r\n        } else {\r\n            vendors[_vendorId].ratePlans[_rpid].prices[_date] = Price(_inventory, true);\r\n            vendors[_vendorId].ratePlans[_rpid].prices[_date].tokens[_tokenId] = _price;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Push rate plan to `_vendorId`'s rate plan list\r\n     * @param _vendorId The vendor id\r\n     * @param _name The name of rate plan\r\n     * @param _ipfs The rate plan IPFS address\r\n     * @param _direction direction to step in\r\n     */\r\n    function pushRatePlan(uint256 _vendorId, string _name, bytes32 _ipfs, bool _direction) \r\n        public \r\n        onlyOwnerOrAuthorizedContract\r\n        returns(uint256) {\r\n        RatePlan memory rp = RatePlan(_name, uint256(now), _ipfs, Price(0, false));\r\n        \r\n        uint256 id = vendors[_vendorId].ratePlanList.push(_direction);\r\n        vendors[_vendorId].ratePlans[id] = rp;\r\n        return id;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove rate plan of `_vendorId` by `_rpid`\r\n     * @param _vendorId The vendor id\r\n     * @param _rpid The rate plan id\r\n     */\r\n    function removeRatePlan(uint256 _vendorId, uint256 _rpid) \r\n        public \r\n        onlyOwnerOrAuthorizedContract {\r\n        delete vendors[_vendorId].ratePlans[_rpid];\r\n        vendors[_vendorId].ratePlanList.remove(_rpid);\r\n    }\r\n\r\n    /**\r\n     * @dev Update `_rpid` of `_vendorId` by `_name` and `_ipfs`\r\n     * @param _vendorId The vendor id\r\n     * @param _rpid The rate plan id\r\n     * @param _name The rate plan name\r\n     * @param _ipfs The rate plan IPFS address\r\n     */\r\n    function updateRatePlan(uint256 _vendorId, uint256 _rpid, string _name, bytes32 _ipfs)\r\n        public \r\n        onlyOwnerOrAuthorizedContract {\r\n        vendors[_vendorId].ratePlans[_rpid].ipfs = _ipfs;\r\n        vendors[_vendorId].ratePlans[_rpid].name = _name;\r\n    }\r\n    \r\n    /**\r\n     * @dev Push token contract to the token list\r\n     * @param _direction direction to step in\r\n     */\r\n    function pushToken(address _contract, bool _direction)\r\n        public \r\n        onlyOwnerOrAuthorizedContract \r\n        returns(uint256) {\r\n        uint256 id = tokenList.push(_direction);\r\n        tokenIndexToAddress[id] = _contract;\r\n        return id;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove token by `_tokenId`\r\n     * @param _tokenId The digital token id\r\n     */\r\n    function removeToken(uint256 _tokenId) \r\n        public \r\n        onlyOwnerOrAuthorizedContract {\r\n        delete tokenIndexToAddress[_tokenId];\r\n        tokenList.remove(_tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Generate room night token\r\n     * @param _vendorId The vendor id\r\n     * @param _rpid The rate plan id\r\n     * @param _date The date desc (20180723)\r\n     * @param _token The token id\r\n     * @param _price The token price\r\n     * @param _ipfs The rate plan IPFS address\r\n     */\r\n    function generateRoomNightToken(uint256 _vendorId, uint256 _rpid, uint256 _date, uint256 _token, uint256 _price, bytes32 _ipfs)\r\n        public \r\n        onlyOwnerOrAuthorizedContract \r\n        returns(uint256) {\r\n        roomnights.push(RoomNight(_vendorId, _rpid, _token, _price, now, _date, _ipfs));\r\n\r\n        // Give the token to `_customer`\r\n        uint256 rnid = uint256(roomnights.length - 1);\r\n        return rnid;\r\n    }\r\n\r\n    /**\r\n     * @dev Update refund applications\r\n     * @param _buyer The room night token holder\r\n     * @param _rnid The room night token id\r\n     * @param _isRefund Is redund or not\r\n     */\r\n    function updateRefundApplications(address _buyer, uint256 _rnid, bool _isRefund) \r\n        public \r\n        onlyOwnerOrAuthorizedContract {\r\n        refundApplications[_buyer][_rnid] = _isRefund;\r\n    }\r\n\r\n    /**\r\n     * @dev Push vendor info to the vendor list\r\n     * @param _name The name of vendor\r\n     * @param _vendor The vendor address\r\n     * @param _direction direction to step in\r\n     */\r\n    function pushVendor(string _name, address _vendor, bool _direction)\r\n        public \r\n        onlyOwnerOrAuthorizedContract \r\n        returns(uint256) {\r\n        uint256 id = vendorList.push(_direction);\r\n        vendorIds[_vendor] = id;\r\n        vendors[id] = Vendor(_name, _vendor, uint256(now), true, LinkedListLib.LinkedList(0, 0));\r\n        return id;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove vendor from vendor list\r\n     * @param _vendorId The vendor id\r\n     */\r\n    function removeVendor(uint256 _vendorId) \r\n        public \r\n        onlyOwnerOrAuthorizedContract {\r\n        vendorList.remove(_vendorId);\r\n        address vendor = vendors[_vendorId].vendor;\r\n        vendorIds[vendor] = 0;\r\n        delete vendors[_vendorId];\r\n    }\r\n\r\n    /**\r\n     * @dev Make vendor valid or invalid\r\n     * @param _vendorId The vendor id\r\n     * @param _valid The vendor is valid or not\r\n     */\r\n    function updateVendorValid(uint256 _vendorId, bool _valid)\r\n        public \r\n        onlyOwnerOrAuthorizedContract {\r\n        vendors[_vendorId].valid = _valid;\r\n    }\r\n\r\n    /**\r\n     * @dev Modify vendor's name\r\n     * @param _vendorId The vendor id\r\n     * @param _name Then vendor name\r\n     */\r\n    function updateVendorName(uint256 _vendorId, string _name)\r\n        public \r\n        onlyOwnerOrAuthorizedContract {\r\n        vendors[_vendorId].name = _name;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract TRNTransactions is TRNOwners {\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor() public {\r\n\r\n    }\r\n\r\n    /**\r\n     * This emits when rate plan is bought in batch\r\n     */\r\n    event BuyInBatch(address indexed _customer, address indexed _vendor, uint256 indexed _rpid, uint256[] _dates, uint256 _token);\r\n\r\n    /**\r\n     * This emits when token refund is applied \r\n     */\r\n    event ApplyRefund(address _customer, uint256 indexed _rnid, bool _isRefund);\r\n\r\n    /**\r\n     * This emits when refunded\r\n     */\r\n    event Refund(address _vendor, uint256 _rnid);\r\n\r\n    /**\r\n     * @dev Complete the buy transaction,\r\n     *      The inventory minus one and the room night token transfer to customer\r\n     * @param _vendorId The vendor account\r\n     * @param _rpid The vendor's rate plan id\r\n     * @param _date The booking date\r\n     * @param _customer The customer account\r\n     * @param _token The token Id\r\n     */\r\n    function _buy(uint256 _vendorId, uint256 _rpid, uint256 _date, address _customer, uint256 _token) private {\r\n        // Product room night token\r\n        (,,uint256 _price) = dataSource.getPrice(_vendorId, _rpid, _date, _token);\r\n        (,,bytes32 _ipfs) = dataSource.getRatePlan(_vendorId, _rpid);\r\n        uint256 rnid = dataSource.generateRoomNightToken(_vendorId, _rpid, _date, _token, _price, _ipfs);\r\n\r\n        // Give the token to `_customer`\r\n        dataSource.transferTokenTo(rnid, _customer);\r\n\r\n        // Record the token to `_customer` account\r\n        _pushRoomNight(_customer, rnid, false);\r\n\r\n        // Record the token to `_vendor` account\r\n        (,address vendor,,) = dataSource.getVendor(_vendorId);\r\n        _pushRoomNight(vendor, rnid, true);\r\n\r\n        // The inventory minus one\r\n        dataSource.reduceInventories(_vendorId, _rpid, _date, 1);\r\n    }\r\n\r\n    /**\r\n     * @dev Complete the buy transaction in batch,\r\n     *      The inventory minus one and the room night token transfer to customer\r\n     * @param _vendorId The vendor account\r\n     * @param _vendor Then vendor address\r\n     * @param _rpid The vendor's rate plan id\r\n     * @param _dates The booking date\r\n     * @param _token The token Id\r\n     */\r\n    function _buyInBatch(uint256 _vendorId, address _vendor, uint256 _rpid, uint256[] _dates, uint256 _token) private returns(bool) {\r\n        (uint16[] memory inventories, uint256[] memory values) = dataSource.getPrices(_vendorId, _rpid, _dates, _token);\r\n        uint256 totalValues = 0;\r\n        for(uint256 i = 0; i < _dates.length; i++) {\r\n            if(inventories[i] == 0 || values[i] == 0) {\r\n                return false;\r\n            }\r\n            totalValues += values[i];\r\n            // Transfer the room night to `msg.sender`\r\n            _buy(_vendorId, _rpid, _dates[i], msg.sender, _token);\r\n        }\r\n        \r\n        if (_token == 0) {\r\n            // By through ETH\r\n            require(msg.value == totalValues);\r\n\r\n            // Transfer the ETH to `_vendor`\r\n            _vendor.transfer(totalValues);\r\n        } else {\r\n            // By through other digital token\r\n            address tokenAddress = dataSource.tokenIndexToAddress(_token);\r\n            require(tokenAddress != address(0));\r\n\r\n            // This contract transfer `price.trio` from `msg.sender` account\r\n            TripioToken tripio = TripioToken(tokenAddress);\r\n            tripio.transferFrom(msg.sender, _vendor, totalValues);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Complete the refund transaction\r\n     * Remove the `_rnid` from the owner account and the inventory plus one\r\n     */\r\n    function _refund(uint256 _rnid, uint256 _vendorId, uint256 _rpid, uint256 _date) private {\r\n        // Remove the `_rnid` from the owner\r\n        _removeRoomNight(dataSource.roomNightIndexToOwner(_rnid), _rnid);\r\n\r\n        // The inventory plus one\r\n        dataSource.addInventories(_vendorId, _rpid, _date, 1);\r\n\r\n        // Change the owner of `_rnid`\r\n        dataSource.transferTokenTo(_rnid, address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev By room nigth in batch through ETH(`_token` == 0) or other digital token(`_token != 0`)\r\n     *      Throw when `_rpid` not exist\r\n     *      Throw unless each inventory more than zero\r\n     *      Throw unless `msg.value` equal to `price.eth`\r\n     *      This method is payable, can accept ETH transfer\r\n     * @param _vendorId The vendor Id\r\n     * @param _rpid The _vendor's rate plan id\r\n     * @param _dates The booking dates\r\n     * @param _token The digital currency token \r\n     */\r\n    function buyInBatch(uint256 _vendorId, uint256 _rpid, uint256[] _dates, uint256 _token) \r\n        external\r\n        payable\r\n        ratePlanExist(_vendorId, _rpid)\r\n        validDates(_dates)\r\n        returns(bool) {\r\n        \r\n        (,address vendor,,) = dataSource.getVendor(_vendorId);\r\n        \r\n        bool result = _buyInBatch(_vendorId, vendor, _rpid, _dates, _token);\r\n        \r\n        require(result);\r\n\r\n        // Event\r\n        emit BuyInBatch(msg.sender, vendor, _rpid, _dates, _token);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Apply room night refund\r\n     *      Throw unless `_rnid` is valid\r\n     *      Throw unless `_rnid` can transfer\r\n     * @param _rnid room night identifier\r\n     * @param _isRefund if `true` the `_rnid` can transfer else not\r\n     */\r\n    function applyRefund(uint256 _rnid, bool _isRefund) \r\n        external\r\n        validToken(_rnid)\r\n        canTransfer(_rnid)\r\n        returns(bool) {\r\n        dataSource.updateRefundApplications(msg.sender, _rnid, _isRefund);\r\n\r\n        // Event\r\n        emit ApplyRefund(msg.sender, _rnid, _isRefund);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Whether the `_rnid` is in refund applications\r\n     * @param _rnid room night identifier\r\n     */\r\n    function isRefundApplied(uint256 _rnid) \r\n        external\r\n        view\r\n        validToken(_rnid) returns(bool) {\r\n        return dataSource.refundApplications(dataSource.roomNightIndexToOwner(_rnid), _rnid);\r\n    }\r\n\r\n    /**\r\n     * @dev Refund through ETH or other digital token, give the room night ETH/TOKEN to customer and take back inventory\r\n     *      Throw unless `_rnid` is valid\r\n     *      Throw unless `msg.sender` is vendor\r\n     *      Throw unless the refund application is true\r\n     *      Throw unless the `msg.value` is equal to `roomnight.eth`\r\n     * @param _rnid room night identifier\r\n     */\r\n    function refund(uint256 _rnid) \r\n        external\r\n        payable\r\n        validToken(_rnid) \r\n        returns(bool) {\r\n        // Refund application is true\r\n        require(dataSource.refundApplications(dataSource.roomNightIndexToOwner(_rnid), _rnid));\r\n\r\n        // The `msg.sender` is the vendor of the room night.\r\n        (uint256 vendorId,uint256 rpid,uint256 token,uint256 price,,uint256 date,) = dataSource.roomnights(_rnid);\r\n        (,address vendor,,) = dataSource.getVendor(vendorId);\r\n        require(msg.sender == vendor);\r\n\r\n        address ownerAddress = dataSource.roomNightIndexToOwner(_rnid);\r\n\r\n        if (token == 0) {\r\n            // Refund by ETH\r\n\r\n            // The `msg.sender` is equal to `roomnight.eth`\r\n            uint256 value = price;\r\n            require(msg.value >= value);\r\n\r\n            // Transfer the ETH to roomnight's owner\r\n            ownerAddress.transfer(value);\r\n        } else {\r\n            // Refund  by TRIO\r\n\r\n            // The `roomnight.trio` is more than zero\r\n            require(price > 0);\r\n\r\n            // This contract transfer `price.trio` from `msg.sender` account\r\n            TripioToken tripio = TripioToken(dataSource.tokenIndexToAddress(token));\r\n            tripio.transferFrom(msg.sender, ownerAddress, price);\r\n        }\r\n        // Refund\r\n        _refund(_rnid, vendorId, rpid, date);\r\n\r\n        // Event \r\n        emit Refund(msg.sender, _rnid);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract TripioRoomNightCustomer is TRNAsset, TRNSupportsInterface, TRNOwnership, TRNTransactions {\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor(address _dataSource) public {\r\n        // Init the data source\r\n        dataSource = TripioRoomNightData(_dataSource);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw ETH balance from contract account, the balance will transfer to the contract owner\r\n     */\r\n    function withdrawBalance() external onlyOwner {\r\n        owner.transfer(address(this).balance);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw other TOKEN balance from contract account, the balance will transfer to the contract owner\r\n     * @param _token The TOKEN id\r\n     */\r\n    function withdrawTokenId(uint _token) external onlyOwner {\r\n        TripioToken tripio = TripioToken(dataSource.tokenIndexToAddress(_token));\r\n        uint256 tokens = tripio.balanceOf(address(this));\r\n        tripio.transfer(owner, tokens);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw other TOKEN balance from contract account, the balance will transfer to the contract owner\r\n     * @param _tokenAddress The TOKEN address\r\n     */\r\n    function withdrawToken(address _tokenAddress) external onlyOwner {\r\n        TripioToken tripio = TripioToken(_tokenAddress);\r\n        uint256 tokens = tripio.balanceOf(address(this));\r\n        tripio.transfer(owner, tokens);\r\n    }\r\n\r\n    /**\r\n     * @dev Destory the contract\r\n     */\r\n    function destroy() external onlyOwner {\r\n        selfdestruct(owner);\r\n    }\r\n\r\n    function() external payable {\r\n\r\n    }\r\n}", "OptimizationUsed": "1", "ContractName": "TripioRoomNightCustomer", "ByteCode": "0x6080604052600436106101505763ffffffff60e060020a60003504166301ffc9a7811461015257806306fdde0314610188578063081812fc14610212578063095ea7b31461024657806311a767291461025d57806323b872dd14610285578063278ecde1146102a257806342842e0e146102ad5780635fd8c710146102ca578063612ef6e9146102df578063628c225c146102f75780636352211e146103c057806370a08231146103d857806379ba50971461040b57806383197ef0146104205780638947606914610435578063899f107d146104565780638da5cb5b146104d157806395d89b41146104e6578063a22cb465146104fb578063b08e0d3e14610521578063b88d4fde1461053e578063bb6ad6ef1461056a578063c87b56dd14610582578063d4ee1d901461059a578063dfd17f2b146105af578063e985e9c5146105cd578063f2fde38b146105f4575b005b34801561015e57600080fd5b50610174600160e060020a031960043516610615565b604080519115158252519081900360200190f35b34801561019457600080fd5b5061019d6107f5565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101d75781810151838201526020016101bf565b50505050905090810190601f1680156102045780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561021e57600080fd5b5061022a60043561082c565b60408051600160a060020a039092168252519081900360200190f35b610150600160a060020a036004351660243561094f565b610150600160a060020a03600480358216916024803590911691604435918201910135610c67565b610150600160a060020a0360043581169060243516604435611097565b6101746004356113bb565b610150600160a060020a03600435811690602435166044356119d8565b3480156102d657600080fd5b506101506119f9565b3480156102eb57600080fd5b50610174600435611a4e565b34801561030357600080fd5b5061030f600435611bbe565b60405180898152602001888152602001878152602001868152602001858152602001848152602001836000191660001916815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561037e578181015183820152602001610366565b50505050905090810190601f1680156103ab5780820380516001836020036101000a031916815260200191505b50995050505050505050505060405180910390f35b3480156103cc57600080fd5b5061022a600435611dbc565b3480156103e457600080fd5b506103f9600160a060020a0360043516611e4d565b60408051918252519081900360200190f35b34801561041757600080fd5b50610150611ecc565b34801561042c57600080fd5b50610150611f54565b34801561044157600080fd5b50610150600160a060020a0360043516611f79565b34801561046257600080fd5b5061047660043560243560443515156120c8565b6040518080602001838152602001828103825284818151815260200191508051906020019060200280838360005b838110156104bc5781810151838201526020016104a4565b50505050905001935050505060405180910390f35b3480156104dd57600080fd5b5061022a612268565b3480156104f257600080fd5b5061019d612277565b34801561050757600080fd5b50610150600160a060020a036004351660243515156122ae565b34801561052d57600080fd5b506101746004356024351515612396565b610150600160a060020a03600480358216916024803590911691604435916064359081019101356126d1565b34801561057657600080fd5b5061015060043561270d565b34801561058e57600080fd5b5061019d60043561281f565b3480156105a657600080fd5b5061022a612b2f565b61017460048035906024803591604435918201910135606435612b3e565b3480156105d957600080fd5b50610174600160a060020a0360043581169060243516612f4f565b34801561060057600080fd5b50610150600160a060020a0360043516612fac565b600254604080517f5e0f9e060000000000000000000000000000000000000000000000000000000081529051600092600160a060020a031691635e0f9e0691600480830192602092919082900301818787803b15801561067457600080fd5b505af1158015610688573d6000803e3d6000fd5b505050506040513d602081101561069e57600080fd5b5051600160e060020a0319838116911614806107445750600260009054906101000a9004600160a060020a0316600160a060020a031663c1752ef16040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561070857600080fd5b505af115801561071c573d6000803e3d6000fd5b505050506040513d602081101561073257600080fd5b5051600160e060020a03198381169116145b806107d95750600260009054906101000a9004600160a060020a0316600160a060020a0316633f2e681c6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561079d57600080fd5b505af11580156107b1573d6000803e3d6000fd5b505050506040513d60208110156107c757600080fd5b5051600160e060020a03198381169116145b80156107ef5750600160e060020a031980831614155b92915050565b60408051808201909152601181527f54726970696f20526f6f6d204e69676874000000000000000000000000000000602082015290565b60008181811161083b57600080fd5b6002546040805160e060020a63e7f95c45028152600481018490529051600092600160a060020a03169163e7f95c4591602480830192602092919082900301818787803b15801561088b57600080fd5b505af115801561089f573d6000803e3d6000fd5b505050506040513d60208110156108b557600080fd5b5051600160a060020a031614156108cb57600080fd5b6002546040805160e160020a632376fe85028152600481018690529051600160a060020a03909216916346edfd0a916024808201926020929091908290030181600087803b15801561091c57600080fd5b505af1158015610930573d6000803e3d6000fd5b505050506040513d602081101561094657600080fd5b50519392505050565b60008181811161095e57600080fd5b6002546040805160e060020a63e7f95c45028152600481018490529051600092600160a060020a03169163e7f95c4591602480830192602092919082900301818787803b1580156109ae57600080fd5b505af11580156109c2573d6000803e3d6000fd5b505050506040513d60208110156109d857600080fd5b5051600160a060020a031614156109ee57600080fd5b6002546040805160e060020a63e7f95c45028152600481018690529051859260009283928392600160a060020a03169163e7f95c4591602480830192602092919082900301818787803b158015610a4457600080fd5b505af1158015610a58573d6000803e3d6000fd5b505050506040513d6020811015610a6e57600080fd5b50516002546040805160e260020a6303657815028152600160a060020a038085166004830181905233602484018190529351959850929092149550911691630d95e054916044808201926020929091908290030181600087803b158015610ad457600080fd5b505af1158015610ae8573d6000803e3d6000fd5b505050506040513d6020811015610afe57600080fd5b505190508180610b0b5750805b1515610b1657600080fd5b6002546040805160e060020a63e7f95c45028152600481018a90529051600160a060020a039092169163e7f95c45916024808201926020929091908290030181600087803b158015610b6757600080fd5b505af1158015610b7b573d6000803e3d6000fd5b505050506040513d6020811015610b9157600080fd5b5051600254604080517f6a385043000000000000000000000000000000000000000000000000000000008152600481018b9052600160a060020a038c811660248301529151939950911691636a3850439160448082019260009290919082900301818387803b158015610c0357600080fd5b505af1158015610c17573d6000803e3d6000fd5b5050604080518a81529051600160a060020a03808d1694508a1692507f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259181900360200190a35050505050505050565b6000808383808060200260200160405190810160405280939291908181526020018383602002808284375060009450505050505b8151811015610d775760008282815181101515610cb457fe5b6020908102909101015111610cc857600080fd5b6002548251600091600160a060020a03169063e7f95c4590859085908110610cec57fe5b906020019060200201516040518263ffffffff1660e060020a02815260040180828152602001915050602060405180830381600087803b158015610d2f57600080fd5b505af1158015610d43573d6000803e3d6000fd5b505050506040513d6020811015610d5957600080fd5b5051600160a060020a03161415610d6f57600080fd5b600101610c9b565b85858080602002602001604051908101604052809392919081815260200183836020028082843750600094508493508392508291508190505b8551851015610f9b576002548651600160a060020a039091169063e7f95c4590889088908110610ddc57fe5b906020019060200201516040518263ffffffff1660e060020a02815260040180828152602001915050602060405180830381600087803b158015610e1f57600080fd5b505af1158015610e33573d6000803e3d6000fd5b505050506040513d6020811015610e4957600080fd5b50516002548751919550600160a060020a038087163314955016906346edfd0a90889088908110610e7657fe5b906020019060200201516040518263ffffffff1660e060020a02815260040180828152602001915050602060405180830381600087803b158015610eb957600080fd5b505af1158015610ecd573d6000803e3d6000fd5b505050506040513d6020811015610ee357600080fd5b50516002546040805160e260020a6303657815028152600160a060020a038881166004830152336024830181905292519481169092149550911691630d95e054916044808201926020929091908290030181600087803b158015610f4657600080fd5b505af1158015610f5a573d6000803e3d6000fd5b505050506040513d6020811015610f7057600080fd5b505190508280610f7d5750815b80610f855750805b1515610f9057600080fd5b600190940193610db0565b600099505b8a8a101561108757600254600160a060020a031663e7f95c458d8d8d818110610fc557fe5b905060200201356040518263ffffffff1660e060020a02815260040180828152602001915050602060405180830381600087803b15801561100557600080fd5b505af1158015611019573d6000803e3d6000fd5b505050506040513d602081101561102f57600080fd5b50519850600160a060020a03808a16908f161461104b57600080fd5b600160a060020a038d16151561106057600080fd5b61107c8c8c8c81811061106f57fe5b905060200201358e612ff2565b600190990198610fa0565b5050505050505050505050505050565b6000818181116110a657600080fd5b6002546040805160e060020a63e7f95c45028152600481018490529051600092600160a060020a03169163e7f95c4591602480830192602092919082900301818787803b1580156110f657600080fd5b505af115801561110a573d6000803e3d6000fd5b505050506040513d602081101561112057600080fd5b5051600160a060020a0316141561113657600080fd5b82600080600080600260009054906101000a9004600160a060020a0316600160a060020a031663e7f95c45866040518263ffffffff1660e060020a02815260040180828152602001915050602060405180830381600087803b15801561119b57600080fd5b505af11580156111af573d6000803e3d6000fd5b505050506040513d60208110156111c557600080fd5b50516002546040805160e160020a632376fe85028152600481018990529051929650600160a060020a0380881633149650909116916346edfd0a916024808201926020929091908290030181600087803b15801561122257600080fd5b505af1158015611236573d6000803e3d6000fd5b505050506040513d602081101561124c57600080fd5b50516002546040805160e260020a6303657815028152600160a060020a038881166004830152336024830181905292519481169092149550911691630d95e054916044808201926020929091908290030181600087803b1580156112af57600080fd5b505af11580156112c3573d6000803e3d6000fd5b505050506040513d60208110156112d957600080fd5b5051905082806112e65750815b806112ee5750805b15156112f957600080fd5b6002546040805160e060020a63e7f95c45028152600481018b90529051600160a060020a039092169163e7f95c45916024808201926020929091908290030181600087803b15801561134a57600080fd5b505af115801561135e573d6000803e3d6000fd5b505050506040513d602081101561137457600080fd5b50519650600160a060020a03808816908b161461139057600080fd5b600160a060020a03891615156113a557600080fd5b6113af888a612ff2565b50505050505050505050565b60008080808080808080808a8181116113d357600080fd5b6002546040805160e060020a63e7f95c45028152600481018490529051600092600160a060020a03169163e7f95c4591602480830192602092919082900301818787803b15801561142357600080fd5b505af1158015611437573d6000803e3d6000fd5b505050506040513d602081101561144d57600080fd5b5051600160a060020a0316141561146357600080fd5b6002546040805160e060020a63e7f95c45028152600481018f90529051600160a060020a03909216916330c7090391839163e7f95c45916024808201926020929091908290030181600087803b1580156114bc57600080fd5b505af11580156114d0573d6000803e3d6000fd5b505050506040513d60208110156114e657600080fd5b81019080805190602001909291905050508e6040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b15801561154a57600080fd5b505af115801561155e573d6000803e3d6000fd5b505050506040513d602081101561157457600080fd5b5051151561158157600080fd5b600254604080517f3bdf5878000000000000000000000000000000000000000000000000000000008152600481018f90529051600160a060020a0390921691633bdf58789160248082019260e0929091908290030181600087803b1580156115e857600080fd5b505af11580156115fc573d6000803e3d6000fd5b505050506040513d60e081101561161257600080fd5b8101908080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190505050509a50509950995099509950600260009054906101000a9004600160a060020a0316600160a060020a03166365de1eb38b6040518263ffffffff1660e060020a02815260040180828152602001915050600060405180830381600087803b1580156116c957600080fd5b505af11580156116dd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052608081101561170657600080fd5b81019080805164010000000081111561171e57600080fd5b8201602081018481111561173157600080fd5b815164010000000081118282018710171561174b57600080fd5b5050506020015196505050600160a060020a038516331461176b57600080fd5b6002546040805160e060020a63e7f95c45028152600481018f90529051600160a060020a039092169163e7f95c45916024808201926020929091908290030181600087803b1580156117bc57600080fd5b505af11580156117d0573d6000803e3d6000fd5b505050506040513d60208110156117e657600080fd5b5051935087151561183d578692503483111561180157600080fd5b604051600160a060020a0385169084156108fc029085906000818181858888f19350505050158015611837573d6000803e3d6000fd5b5061197f565b6000871161184a57600080fd5b600254604080517fa306cdeb000000000000000000000000000000000000000000000000000000008152600481018b90529051600160a060020a039092169163a306cdeb916024808201926020929091908290030181600087803b1580156118b157600080fd5b505af11580156118c5573d6000803e3d6000fd5b505050506040513d60208110156118db57600080fd5b5051604080517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a038781166024830152604482018b90529151929450908416916323b872dd916064808201926020929091908290030181600087803b15801561195257600080fd5b505af1158015611966573d6000803e3d6000fd5b505050506040513d602081101561197c57600080fd5b50505b61198b8c8b8b89613153565b60408051338152602081018e905281517fbb28353e4598c3b9199101a66e0989549b659a59a54d2c27fbb183f1932c8e6d929181900390910190a15060019b9a5050505050505050505050565b6119f483838360206040519081016040528060008152506132f2565b505050565b600054600160a060020a03163314611a1057600080fd5b60008054604051600160a060020a0390911691303180156108fc02929091818181858888f19350505050158015611a4b573d6000803e3d6000fd5b50565b600081818111611a5d57600080fd5b6002546040805160e060020a63e7f95c45028152600481018490529051600092600160a060020a03169163e7f95c4591602480830192602092919082900301818787803b158015611aad57600080fd5b505af1158015611ac1573d6000803e3d6000fd5b505050506040513d6020811015611ad757600080fd5b5051600160a060020a03161415611aed57600080fd5b6002546040805160e060020a63e7f95c45028152600481018690529051600160a060020a03909216916330c7090391839163e7f95c45916024808201926020929091908290030181600087803b158015611b4657600080fd5b505af1158015611b5a573d6000803e3d6000fd5b505050506040513d6020811015611b7057600080fd5b50516040805160e060020a63ffffffff8516028152600160a060020a039092166004830152602482018790525160448083019260209291908290030181600087803b15801561091c57600080fd5b60008060008060008060006060600260009054906101000a9004600160a060020a0316600160a060020a0316633bdf58788a6040518263ffffffff1660e060020a0281526004018082815260200191505060e060405180830381600087803b158015611c2957600080fd5b505af1158015611c3d573d6000803e3d6000fd5b505050506040513d60e0811015611c5357600080fd5b8101908080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190505050809850819950829a50839b50849c50859d50869e5050505050505050600260009054906101000a9004600160a060020a0316600160a060020a031663762fdc0c89896040518363ffffffff1660e060020a0281526004018083815260200182815260200192505050600060405180830381600087803b158015611d2257600080fd5b505af1158015611d36573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526060811015611d5f57600080fd5b810190808051640100000000811115611d7757600080fd5b82016020810184811115611d8a57600080fd5b8151640100000000811182820187101715611da457600080fd5b509b9d9a9c50989a5096989597949650929492505050565b6000808211611dca57600080fd5b6002546040805160e060020a63e7f95c45028152600481018590529051600160a060020a039092169163e7f95c45916024808201926020929091908290030181600087803b158015611e1b57600080fd5b505af1158015611e2f573d6000803e3d6000fd5b505050506040513d6020811015611e4557600080fd5b505192915050565b6000600160a060020a0382161515611e6457600080fd5b600254604080517f70a08231000000000000000000000000000000000000000000000000000000008152600160a060020a038581166004830152915191909216916370a082319160248083019260209291908290030181600087803b158015611e1b57600080fd5b600154600160a060020a03163314611ee357600080fd5b60015460008054604051600160a060020a0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b600054600160a060020a03163314611f6b57600080fd5b600054600160a060020a0316ff5b600080548190600160a060020a03163314611f9357600080fd5b604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051849350600160a060020a038416916370a082319160248083019260209291908290030181600087803b158015611ff757600080fd5b505af115801561200b573d6000803e3d6000fd5b505050506040513d602081101561202157600080fd5b505160008054604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201526024810185905290519394509085169263a9059cbb92604480840193602093929083900390910190829087803b15801561209757600080fd5b505af11580156120ab573d6000803e3d6000fd5b505050506040513d60208110156120c157600080fd5b5050505050565b6060600082156121e657600254604080517f4cb0c7a10000000000000000000000000000000000000000000000000000000081523360048201526024810188905260448101879052600160648201529051600160a060020a0390921691634cb0c7a19160848082019260009290919082900301818387803b15801561214c57600080fd5b505af1158015612160573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604090815281101561218957600080fd5b8101908080516401000000008111156121a157600080fd5b820160208101848111156121b457600080fd5b81518560208202830111640100000000821117156121d157600080fd5b50506020909101519094509250612260915050565b600254604080517f600cf0d90000000000000000000000000000000000000000000000000000000081523360048201526024810188905260448101879052600160648201529051600160a060020a039092169163600cf0d99160848082019260009290919082900301818387803b15801561214c57600080fd5b935093915050565b600054600160a060020a031681565b60408051808201909152600381527f54524e0000000000000000000000000000000000000000000000000000000000602082015290565b600160a060020a03821615156122c357600080fd5b600254604080517f35058a2a000000000000000000000000000000000000000000000000000000008152600160a060020a0385811660048301523360248301528415156044830152915191909216916335058a2a91606480830192600092919082900301818387803b15801561233857600080fd5b505af115801561234c573d6000803e3d6000fd5b50506040805184151581529051600160a060020a03861693503392507f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319181900360200190a35050565b6000828181116123a557600080fd5b6002546040805160e060020a63e7f95c45028152600481018490529051600092600160a060020a03169163e7f95c4591602480830192602092919082900301818787803b1580156123f557600080fd5b505af1158015612409573d6000803e3d6000fd5b505050506040513d602081101561241f57600080fd5b5051600160a060020a0316141561243557600080fd5b83600080600080600260009054906101000a9004600160a060020a0316600160a060020a031663e7f95c45866040518263ffffffff1660e060020a02815260040180828152602001915050602060405180830381600087803b15801561249a57600080fd5b505af11580156124ae573d6000803e3d6000fd5b505050506040513d60208110156124c457600080fd5b50516002546040805160e160020a632376fe85028152600481018990529051929650600160a060020a0380881633149650909116916346edfd0a916024808201926020929091908290030181600087803b15801561252157600080fd5b505af1158015612535573d6000803e3d6000fd5b505050506040513d602081101561254b57600080fd5b50516002546040805160e260020a6303657815028152600160a060020a038881166004830152336024830181905292519481169092149550911691630d95e054916044808201926020929091908290030181600087803b1580156125ae57600080fd5b505af11580156125c2573d6000803e3d6000fd5b505050506040513d60208110156125d857600080fd5b5051905082806125e55750815b806125ed5750805b15156125f857600080fd5b600254604080517f602b7001000000000000000000000000000000000000000000000000000000008152336004820152602481018c90528a151560448201529051600160a060020a039092169163602b70019160648082019260009290919082900301818387803b15801561266c57600080fd5b505af1158015612680573d6000803e3d6000fd5b5050604080513381528b1515602082015281518d94507fa8b03d10e96b23d3ed7630fcc9e32aec81ef79975e8d1345dd9e98306b73805393509081900390910190a250600198975050505050505050565b6120c185858585858080601f016020809104026020016040519081016040528093929190818152602001838380828437506132f2945050505050565b600080548190600160a060020a0316331461272757600080fd5b600254604080517fa306cdeb000000000000000000000000000000000000000000000000000000008152600481018690529051600160a060020a039092169163a306cdeb916024808201926020929091908290030181600087803b15801561278e57600080fd5b505af11580156127a2573d6000803e3d6000fd5b505050506040513d60208110156127b857600080fd5b5051604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051919350600160a060020a038416916370a08231916024808201926020929091908290030181600087803b158015611ff757600080fd5b60608060008180808684811161283457600080fd5b6002546040805160e060020a63e7f95c45028152600481018490529051600092600160a060020a03169163e7f95c4591602480830192602092919082900301818787803b15801561288457600080fd5b505af1158015612898573d6000803e3d6000fd5b505050506040513d60208110156128ae57600080fd5b5051600160a060020a031614156128c457600080fd5b60408051600280825281830183529091602083019080388339505081519197507f120000000000000000000000000000000000000000000000000000000000000091889150600090811061291457fe5b906020010190600160f860020a031916908160001a90535085517f2000000000000000000000000000000000000000000000000000000000000000908790600190811061295d57fe5b906020010190600160f860020a031916908160001a905350600254604080517f3bdf5878000000000000000000000000000000000000000000000000000000008152600481018b90529051600160a060020a0390921691633bdf58789160248082019260e0929091908290030181600087803b1580156129dc57600080fd5b505af11580156129f0573d6000803e3d6000fd5b505050506040513d60e0811015612a0657600080fd5b5060c001519450612a26612a19866137cb565b879063ffffffff61385116565b9350612a3184613966565b9250600260009054906101000a9004600160a060020a0316600160a060020a0316634e99b8006040518163ffffffff1660e060020a028152600401600060405180830381600087803b158015612a8657600080fd5b505af1158015612a9a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015612ac357600080fd5b810190808051640100000000811115612adb57600080fd5b82016020810184811115612aee57600080fd5b8151640100000000811182820187101715612b0857600080fd5b50909550612b2393508592508691505063ffffffff61385116565b98975050505050505050565b600154600160a060020a031681565b600080600087876000600260009054906101000a9004600160a060020a0316600160a060020a03166365de1eb3846040518263ffffffff1660e060020a02815260040180828152602001915050600060405180830381600087803b158015612ba557600080fd5b505af1158015612bb9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526080811015612be257600080fd5b810190808051640100000000811115612bfa57600080fd5b82016020810184811115612c0d57600080fd5b8151640100000000811182820187101715612c2757600080fd5b5050506060015192505050801515612c3e57600080fd5b600254604080517f6b65a83400000000000000000000000000000000000000000000000000000000815260048101869052602481018590529051600160a060020a0390921691636b65a834916044808201926020929091908290030181600087803b158015612cac57600080fd5b505af1158015612cc0573d6000803e3d6000fd5b505050506040513d6020811015612cd657600080fd5b50511515612ce357600080fd5b8888808060200260200160405190810160405280939291908181526020018383602002808284375060009450505050505b8151811015612d745760008282815181101515612d2d57fe5b6020908102909101015111612d4157600080fd5b612d618282815181101515612d5257fe5b90602001906020020151613aed565b1515612d6c57600080fd5b600101612d14565b600260009054906101000a9004600160a060020a0316600160a060020a03166365de1eb38e6040518263ffffffff1660e060020a02815260040180828152602001915050600060405180830381600087803b158015612dd257600080fd5b505af1158015612de6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526080811015612e0f57600080fd5b810190808051640100000000811115612e2757600080fd5b82016020810184811115612e3a57600080fd5b8151640100000000811182820187101715612e5457600080fd5b50509291906020018051906020019092919080519060200190929190805190602001909291905050505050975050612ebe8d888e8e8e808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050508d613bf8565b9550851515612ecc57600080fd5b8b87600160a060020a031633600160a060020a03167f378b913ef532468f5ca14ee9e03c0b47e22440edd666fd7fcb4b7f146c1b752a8e8e8e604051808060200183815260200182810382528585828181526020019250602002808284376040519201829003965090945050505050a45060019c9b505050505050505050505050565b6002546040805160e260020a6303657815028152600160a060020a038581166004830152848116602483015291516000939290921691630d95e0549160448082019260209290919082900301818787803b15801561091c57600080fd5b600054600160a060020a03163314612fc357600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6002546040805160e060020a63e7f95c45028152600481018590529051600092600160a060020a03169163e7f95c4591602480830192602092919082900301818787803b15801561304257600080fd5b505af1158015613056573d6000803e3d6000fd5b505050506040513d602081101561306c57600080fd5b5051905061307a8184613fea565b61308682846000614074565b600254604080517f491a790400000000000000000000000000000000000000000000000000000000815260048101869052600160a060020a0385811660248301529151919092169163491a790491604480830192600092919082900301818387803b1580156130f457600080fd5b505af1158015613108573d6000803e3d6000fd5b5050604080518681529051600160a060020a038087169450851692507fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a3505050565b6002546040805160e060020a63e7f95c450281526004810187905290516131d792600160a060020a03169163e7f95c459160248083019260209291908290030181600087803b1580156131a557600080fd5b505af11580156131b9573d6000803e3d6000fd5b505050506040513d60208110156131cf57600080fd5b505185613fea565b600254604080517fbbb7eb64000000000000000000000000000000000000000000000000000000008152600481018690526024810185905260448101849052600160648201529051600160a060020a039092169163bbb7eb649160848082019260009290919082900301818387803b15801561325257600080fd5b505af1158015613266573d6000803e3d6000fd5b5050600254604080517f491a7904000000000000000000000000000000000000000000000000000000008152600481018990526000602482018190529151600160a060020a03909316945063491a790493506044808201939182900301818387803b1580156132d457600080fd5b505af11580156132e8573d6000803e3d6000fd5b5050505050505050565b600080808481811161330357600080fd5b6002546040805160e060020a63e7f95c45028152600481018490529051600092600160a060020a03169163e7f95c4591602480830192602092919082900301818787803b15801561335357600080fd5b505af1158015613367573d6000803e3d6000fd5b505050506040513d602081101561337d57600080fd5b5051600160a060020a0316141561339357600080fd5b85600080600080600260009054906101000a9004600160a060020a0316600160a060020a031663e7f95c45866040518263ffffffff1660e060020a02815260040180828152602001915050602060405180830381600087803b1580156133f857600080fd5b505af115801561340c573d6000803e3d6000fd5b505050506040513d602081101561342257600080fd5b50516002546040805160e160020a632376fe85028152600481018990529051929650600160a060020a0380881633149650909116916346edfd0a916024808201926020929091908290030181600087803b15801561347f57600080fd5b505af1158015613493573d6000803e3d6000fd5b505050506040513d60208110156134a957600080fd5b50516002546040805160e260020a6303657815028152600160a060020a038881166004830152336024830181905292519481169092149550911691630d95e054916044808201926020929091908290030181600087803b15801561350c57600080fd5b505af1158015613520573d6000803e3d6000fd5b505050506040513d602081101561353657600080fd5b5051905082806135435750815b8061354b5750805b151561355657600080fd5b6002546040805160e060020a63e7f95c45028152600481018e90529051600160a060020a039092169163e7f95c45916024808201926020929091908290030181600087803b1580156135a757600080fd5b505af11580156135bb573d6000803e3d6000fd5b505050506040513d60208110156135d157600080fd5b50519850600160a060020a03808a16908e16146135ed57600080fd5b600160a060020a038c16151561360257600080fd5b61360c8b8d612ff2565b8b3b975087151561361c576137bc565b8b600160a060020a031663f0b9e5ba8e8d8d6040518463ffffffff1660e060020a0281526004018084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561369b578181015183820152602001613683565b50505050905090810190601f1680156136c85780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b1580156136e957600080fd5b505af11580156136fd573d6000803e3d6000fd5b505050506040513d602081101561371357600080fd5b5051600254604080517fecc98ce40000000000000000000000000000000000000000000000000000000081529051929950600160a060020a039091169163ecc98ce4916004808201926020929091908290030181600087803b15801561377857600080fd5b505af115801561378c573d6000803e3d6000fd5b505050506040513d60208110156137a257600080fd5b5051600160e060020a03198881169116146137bc57600080fd5b50505050505050505050505050565b604080516020808252818301909252606091829160009180820161040080388339019050509150600090505b60208160ff16101561384a578360ff82166020811061381257fe5b1a60f860020a02828260ff1681518110151561382a57fe5b906020010190600160f860020a031916908160001a9053506001016137f7565b5092915050565b606080600083518551016040519080825280601f01601f191660200182016040528015613888578160200160208202803883390190505b509150600090505b84518161ffff1610156138f457848161ffff168151811015156138af57fe5b90602001015160f860020a900460f860020a02828261ffff168151811015156138d457fe5b906020010190600160f860020a031916908160001a905350600101613890565b83518551018161ffff16101561395e578385518261ffff160381518110151561391957fe5b90602001015160f860020a900460f860020a02828261ffff1681518110151561393e57fe5b906020010190600160f860020a031916908160001a9053506001016138f4565b509392505050565b6060806000806000806064875160880281151561397f57fe5b046001016040519080825280602002602001820160405280156139ac578160200160208202803883390190505b50945060008560008151811015156139c057fe5b60ff90921660209283029091019091015260019350600092505b8651831015613ac85786838151811015156139f157fe5b90602001015160f860020a900460f860020a0260f860020a900460ff169150600090505b8360ff16811015613a7d578481815181101515613a2e57fe5b9060200190602002015160ff166101000282019150603a82811515613a4f57fe5b068582815181101515613a5e57fe5b60ff909216602092830290910190910152603a82049150600101613a15565b6000821115613abd57603a8206858560ff16815181101515613a9b57fe5b60ff909216602092830290910190910152600190930192603a82049150613a7d565b8260010192506139da565b613ae2613add613ad887876141bb565b61423f565b6142c5565b979650505050505050565b6000612710808304906064808302818604039183029082028503036107b2831080613b19575060008211155b80613b245750600c82115b80613b30575060008111155b80613b3b5750601f81115b15613b495760009350613bf0565b8160041480613b585750816006145b80613b635750816009145b80613b6e575081600b145b15613b855780601f1415613b855760009350613bf0565b60048306158015613b9857506064830615155b80613ba557506101908306155b15613bcd57816002148015613bba5750601d81115b15613bc85760009350613bf0565b613beb565b816002148015613bdd5750601c81115b15613beb5760009350613bf0565b600193505b505050919050565b6000606080600080600080600260009054906101000a9004600160a060020a0316600160a060020a031663644e8b248d8c8c8c6040518563ffffffff1660e060020a0281526004018085815260200184815260200180602001838152602001828103825284818151815260200191508051906020019060200280838360005b83811015613c8f578181015183820152602001613c77565b5050505090500195505050505050600060405180830381600087803b158015613cb757600080fd5b505af1158015613ccb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040908152811015613cf457600080fd5b810190808051640100000000811115613d0c57600080fd5b82016020810184811115613d1f57600080fd5b8151856020820283011164010000000082111715613d3c57600080fd5b50509291906020018051640100000000811115613d5857600080fd5b82016020810184811115613d6b57600080fd5b8151856020820283011164010000000082111715613d8857600080fd5b50949a50985060009750879650505050505b8851831015613e3d578583815181101515613db157fe5b9060200190602002015161ffff1660001480613de457508483815181101515613dd657fe5b906020019060200201516000145b15613df25760009650613fdb565b8483815181101515613e0057fe5b9060200190602002015184019350613e328c8b8b86815181101515613e2157fe5b90602001906020020151338c6143cf565b600190920191613d9a565b871515613e8c57348414613e5057600080fd5b604051600160a060020a038c169085156108fc029086906000818181858888f19350505050158015613e86573d6000803e3d6000fd5b50613fd6565b600254604080517fa306cdeb000000000000000000000000000000000000000000000000000000008152600481018b90529051600160a060020a039092169163a306cdeb916024808201926020929091908290030181600087803b158015613ef357600080fd5b505af1158015613f07573d6000803e3d6000fd5b505050506040513d6020811015613f1d57600080fd5b50519150600160a060020a0382161515613f3657600080fd5b50604080517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a038c8116602483015260448201869052915183928316916323b872dd9160648083019260209291908290030181600087803b158015613fa957600080fd5b505af1158015613fbd573d6000803e3d6000fd5b505050506040513d6020811015613fd357600080fd5b50505b600196505b50505050505095945050505050565b600254604080517f28543417000000000000000000000000000000000000000000000000000000008152600160a060020a0385811660048301526024820185905291519190921691632854341791604480830192600092919082900301818387803b15801561405857600080fd5b505af115801561406c573d6000803e3d6000fd5b505050505050565b600160a060020a038316151561408957600080fd5b81151561409557600080fd5b801561412b57600254604080517f6cd44d55000000000000000000000000000000000000000000000000000000008152600160a060020a038681166004830152602482018690526000604483018190529251931692636cd44d559260648084019391929182900301818387803b15801561410e57600080fd5b505af1158015614122573d6000803e3d6000fd5b505050506119f4565b600254604080517f5ec5bc8e000000000000000000000000000000000000000000000000000000008152600160a060020a038681166004830152602482018690526000604483018190529251931692635ec5bc8e9260648084019391929182900301818387803b15801561419e57600080fd5b505af11580156141b2573d6000803e3d6000fd5b50505050505050565b60608060008360ff166040519080825280602002602001820160405280156141ed578160200160208202803883390190505b509150600090505b8360ff1681101561395e57848181518110151561420e57fe5b90602001906020020151828281518110151561422657fe5b60ff9092166020928302909101909101526001016141f5565b6060806000835160405190808252806020026020018201604052801561426f578160200160208202803883390190505b509150600090505b835181101561384a57835184908281036000190190811061429457fe5b9060200190602002015182828151811015156142ac57fe5b60ff909216602092830290910190910152600101614277565b606080600083516040519080825280601f01601f1916602001820160405280156142f9578160200160208202803883390190505b509150600090505b835181101561384a57606060405190810160405280603a81526020017f31323334353637383941424344454647484a4b4c4d4e5051525354555657585981526020017f5a6162636465666768696a6b6d6e6f707172737475767778797a000000000000815250848281518110151561437557fe5b9060200190602002015160ff1681518110151561438e57fe5b90602001015160f860020a900460f860020a0282828151811015156143af57fe5b906020010190600160f860020a031916908160001a905350600101614301565b600254604080517fc4725577000000000000000000000000000000000000000000000000000000008152600481018890526024810187905260448101869052606481018490529051600092839283928392600160a060020a03169163c472557791608480830192606092919082900301818787803b15801561445057600080fd5b505af1158015614464573d6000803e3d6000fd5b505050506040513d606081101561447a57600080fd5b5060409081015160025482517f762fdc0c000000000000000000000000000000000000000000000000000000008152600481018d9052602481018c90529251919650600160a060020a03169163762fdc0c91604480830192600092919082900301818387803b1580156144ec57600080fd5b505af1158015614500573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052606081101561452957600080fd5b81019080805164010000000081111561454157600080fd5b8201602081018481111561455457600080fd5b815164010000000081118282018710171561456e57600080fd5b50505060409081015160025482517fc6f70370000000000000000000000000000000000000000000000000000000008152600481018f9052602481018e9052604481018d9052606481018b9052608481018a905260a481018390529251919750600160a060020a0316935063c6f70370925060c48083019260209291908290030181600087803b15801561460157600080fd5b505af1158015614615573d6000803e3d6000fd5b505050506040513d602081101561462b57600080fd5b5051600254604080517f491a790400000000000000000000000000000000000000000000000000000000815260048101849052600160a060020a038a81166024830152915193955091169163491a79049160448082019260009290919082900301818387803b15801561469d57600080fd5b505af11580156146b1573d6000803e3d6000fd5b505050506146c186836000614074565b600254604080517f65de1eb3000000000000000000000000000000000000000000000000000000008152600481018c90529051600160a060020a03909216916365de1eb39160248082019260009290919082900301818387803b15801561472757600080fd5b505af115801561473b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052608081101561476457600080fd5b81019080805164010000000081111561477c57600080fd5b8201602081018481111561478f57600080fd5b81516401000000008111828201871017156147a957600080fd5b5050506020015192506147c29150829050836001614074565b600254604080517fde5dead6000000000000000000000000000000000000000000000000000000008152600481018c9052602481018b9052604481018a9052600160648201529051600160a060020a039092169163de5dead69160848082019260009290919082900301818387803b15801561483d57600080fd5b505af11580156137bc573d6000803e3d6000fd00a165627a7a72305820158c88fdb7d1763655f4899299cf7bd51ca84e2a69500481dd9276c31595f5700029"}