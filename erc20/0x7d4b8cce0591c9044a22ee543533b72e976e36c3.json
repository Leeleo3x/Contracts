{"Runs": "200", "SwarmSource": "bzzr://023769bef759d94a6c5aae171107c9f5c2a6263cf18d83bbdbbade8901dc8e63", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startTrading\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tradingStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.16+commit.d7661dd9", "ConstructorArguments": "", "SourceCode": "pragma solidity ^0.4.16;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n contract StandardToken is ERC20, BasicToken {\r\n\r\n   mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n   /**\r\n    * @dev Transfer tokens from one address to another\r\n    * @param _from address The address which you want to send tokens from\r\n    * @param _to address The address which you want to transfer to\r\n    * @param _value uint256 the amout of tokens to be transfered\r\n    */\r\n   function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n     var _allowance = allowed[_from][msg.sender];\r\n\r\n     // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n     // require (_value <= _allowance);\r\n\r\n     balances[_to] = balances[_to].add(_value);\r\n     balances[_from] = balances[_from].sub(_value);\r\n     allowed[_from][msg.sender] = _allowance.sub(_value);\r\n     Transfer(_from, _to, _value);\r\n     return true;\r\n   }\r\n\r\n   /**\r\n    * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _value The amount of tokens to be spent.\r\n    */\r\n   function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n     // To change the approve amount you first have to reduce the addresses`\r\n     //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n     //  already 0 to mitigate the race condition described here:\r\n     //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n     allowed[msg.sender][_spender] = _value;\r\n     Approval(msg.sender, _spender, _value);\r\n     return true;\r\n   }\r\n\r\n   /**\r\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n    * @param _owner address The address which owns the funds.\r\n    * @param _spender address The address which will spend the funds.\r\n    * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n    */\r\n   function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n     return allowed[_owner][_spender];\r\n   }\r\n\r\n }\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will recieve the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Transfer(0X0, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract ChangeCoin is MintableToken {\r\n  string public name = \"Change COIN\";\r\n  string public symbol = \"CAG\";\r\n  uint256 public decimals = 18;\r\n\r\n  bool public tradingStarted = false;\r\n\r\n  /**\r\n   * @dev modifier that throws if trading has not started yet\r\n   */\r\n  modifier hasStartedTrading() {\r\n    require(tradingStarted);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the owner to enable the trading. This can not be undone\r\n   */\r\n  function startTrading() onlyOwner {\r\n    tradingStarted = true;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows anyone to transfer the Change tokens once trading has started\r\n   * @param _to the recipient address of the tokens.\r\n   * @param _value number of tokens to be transfered.\r\n   */\r\n  function transfer(address _to, uint _value) hasStartedTrading returns (bool){\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows anyone to transfer the Change tokens once trading has started\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint _value) hasStartedTrading returns (bool){\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n}\r\n\r\ncontract ChangeCoinPresale is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  // The token being sold\r\n  ChangeCoin public token;\r\n\r\n  // start and end block where investments are allowed (both inclusive)\r\n  uint256 public startTimestamp;\r\n  uint256 public endTimestamp;\r\n\r\n  // address where funds are collected\r\n  address public hardwareWallet;\r\n\r\n  // how many token units a buyer gets per wei\r\n  uint256 public rate;\r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n\r\n  // minimum contributio to participate in tokensale\r\n  uint256 public minContribution;\r\n\r\n  // maximum amount of ether being raised\r\n  uint256 public hardcap;\r\n\r\n  // number of participants in presale\r\n  uint256 public numberOfPurchasers = 0;\r\n\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n  event PreSaleClosed();\r\n\r\n  function ChangeCoinPresale() {\r\n    startTimestamp = 1504945800;\r\n    endTimestamp = 1505397600;\r\n    rate = 500;\r\n    hardwareWallet = 0x71B1Ee0848c4F68df05429490fc4237089692e1e;\r\n    token = new ChangeCoin();\r\n    minContribution = 9.9 ether;\r\n    hardcap = 50000 ether;\r\n\r\n    require(startTimestamp >= now);\r\n    require(endTimestamp >= startTimestamp);\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the amount of bonus coins the buyer gets\r\n   * @param tokens uint the amount of tokens you get according to current rate\r\n   * @return uint the amount of bonus tokens the buyer gets\r\n   */\r\n  function bonusAmmount(uint256 tokens) internal returns(uint256) {\r\n    // first 500 get extra 30%\r\n    if (numberOfPurchasers < 501) {\r\n      return tokens * 3 / 10;\r\n    } else {\r\n      return tokens /4;\r\n    }\r\n  }\r\n\r\n  // check if valid purchase\r\n  modifier validPurchase {\r\n    require(now >= startTimestamp);\r\n    require(now <= endTimestamp);\r\n    require(msg.value >= minContribution);\r\n    require(weiRaised.add(msg.value) <= hardcap);\r\n    _;\r\n  }\r\n\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    bool timeLimitReached = now > endTimestamp;\r\n    bool capReached = weiRaised >= hardcap;\r\n    return timeLimitReached || capReached;\r\n  }\r\n\r\n  // low level token purchase function\r\n  function buyTokens(address beneficiary) payable validPurchase {\r\n    require(beneficiary != 0x0);\r\n\r\n    uint256 weiAmount = msg.value;\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = weiAmount.mul(rate);\r\n    tokens = tokens + bonusAmmount(tokens);\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n    numberOfPurchasers = numberOfPurchasers + 1;\r\n\r\n    token.mint(beneficiary, tokens);\r\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n    hardwareWallet.transfer(msg.value);\r\n  }\r\n\r\n  // transfer ownership of the token to the owner of the presale contract\r\n  function finishPresale() public onlyOwner {\r\n    require(hasEnded());\r\n    token.transferOwnership(owner);\r\n    PreSaleClosed();\r\n  }\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n}", "OptimizationUsed": "1", "ContractName": "ChangeCoin", "ByteCode": "0x606060405236156100e35763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b81146100e857806306fdde031461010f578063095ea7b31461019a57806318160ddd146101d057806323b872dd146101f5578063293230b814610231578063313ce5671461024657806340c10f191461026b5780635b4f472a146102a157806370a08231146102c85780637d64bcb4146102f95780638da5cb5b1461032057806395d89b411461034f578063a9059cbb146103da578063dd62ed3e14610410578063f2fde38b14610447575b600080fd5b34156100f357600080fd5b6100fb610468565b604051901515815260200160405180910390f35b341561011a57600080fd5b610122610489565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561015f5780820151818401525b602001610146565b50505050905090810190601f16801561018c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101a557600080fd5b6100fb600160a060020a0360043516602435610527565b604051901515815260200160405180910390f35b34156101db57600080fd5b6101e36105ce565b60405190815260200160405180910390f35b341561020057600080fd5b6100fb600160a060020a03600435811690602435166044356105d4565b604051901515815260200160405180910390f35b341561023c57600080fd5b6102446105fe565b005b341561025157600080fd5b6101e361062a565b60405190815260200160405180910390f35b341561027657600080fd5b6100fb600160a060020a0360043516602435610630565b604051901515815260200160405180910390f35b34156102ac57600080fd5b6100fb610712565b604051901515815260200160405180910390f35b34156102d357600080fd5b6101e3600160a060020a036004351661071b565b60405190815260200160405180910390f35b341561030457600080fd5b6100fb61073a565b604051901515815260200160405180910390f35b341561032b57600080fd5b6103336107c1565b604051600160a060020a03909116815260200160405180910390f35b341561035a57600080fd5b6101226107d0565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561015f5780820151818401525b602001610146565b50505050905090810190601f16801561018c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103e557600080fd5b6100fb600160a060020a036004351660243561086e565b604051901515815260200160405180910390f35b341561041b57600080fd5b6101e3600160a060020a0360043581169060243516610896565b60405190815260200160405180910390f35b341561045257600080fd5b610244600160a060020a03600435166108c3565b005b60035474010000000000000000000000000000000000000000900460ff1681565b60048054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561051f5780601f106104f45761010080835404028352916020019161051f565b820191906000526020600020905b81548152906001019060200180831161050257829003601f168201915b505050505081565b60008115806105595750600160a060020a03338116600090815260026020908152604080832093871683529290522054155b151561056457600080fd5b600160a060020a03338116600081815260026020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b60005481565b60075460009060ff1615156105e857600080fd5b6105f384848461091b565b90505b5b9392505050565b60035433600160a060020a0390811691161461061957600080fd5b6007805460ff191660011790555b5b565b60065481565b60035460009033600160a060020a0390811691161461064e57600080fd5b60035474010000000000000000000000000000000000000000900460ff161561067657600080fd5b600054610689908363ffffffff610a3016565b6000908155600160a060020a0384168152600160205260409020546106b4908363ffffffff610a3016565b600160a060020a0384166000818152600160205260408082209390935590917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060015b5b5b92915050565b60075460ff1681565b600160a060020a0381166000908152600160205260409020545b919050565b60035460009033600160a060020a0390811691161461075857600080fd5b6003805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790557fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a15060015b5b90565b600354600160a060020a031681565b60058054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561051f5780601f106104f45761010080835404028352916020019161051f565b820191906000526020600020905b81548152906001019060200180831161050257829003601f168201915b505050505081565b60075460009060ff16151561088257600080fd5b61088c8383610a4a565b90505b5b92915050565b600160a060020a038083166000908152600260209081526040808320938516835292905220545b92915050565b60035433600160a060020a039081169116146108de57600080fd5b600160a060020a03811615610916576003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b5b50565b600160a060020a038084166000908152600260209081526040808320338516845282528083205493861683526001909152812054909190610962908463ffffffff610a3016565b600160a060020a038086166000908152600160205260408082209390935590871681522054610997908463ffffffff610b0a16565b600160a060020a0386166000908152600160205260409020556109c0818463ffffffff610b0a16565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3600191505b509392505050565b600082820183811015610a3f57fe5b8091505b5092915050565b600160a060020a033316600090815260016020526040812054610a73908363ffffffff610b0a16565b600160a060020a033381166000908152600160205260408082209390935590851681522054610aa8908363ffffffff610a3016565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060015b92915050565b600082821115610b1657fe5b508082035b929150505600a165627a7a72305820023769bef759d94a6c5aae171107c9f5c2a6263cf18d83bbdbbade8901dc8e630029"}