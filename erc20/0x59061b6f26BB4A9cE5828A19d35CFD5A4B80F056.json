{"Runs": "200", "SwarmSource": "bzzr://720880c483483e89687cc10de593a3bf79b1d9be58f1f9fb0497bd1a3e172921", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unMutex\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"changeRental\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rollOver\",\"type\":\"uint8\"},{\"name\":\"_start\",\"type\":\"uint8\"}],\"name\":\"changeTimes\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"completeCrowdsale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseTransfers\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"changeLedger\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimUnrented\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"rentOut\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"changePrice\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resumeTransfers\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"changeClub\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_destAddr\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"dilute\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeAdd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_numCheckins\",\"type\":\"uint256\"}],\"name\":\"checkIn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_seizeAddr\",\"type\":\"address\"}],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_tokenName\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_ledger\",\"type\":\"address\"},{\"name\":\"_rental\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"address\"}],\"name\":\"LedgerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Dilution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.10+commit.f0d539ae", "ConstructorArguments": "000000000000000000000000857aafd6efd502575dcce5103e942538094b29ab00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000100000000000000000000000000ee57d52408be2fe49999fe09a16dc0a9e0545aeb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000074c6567656e64730000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034c47440000000000000000000000000000000000000000000000000000000000", "SourceCode": "pragma solidity ^0.4.8;\r\n\r\ncontract Owned {\r\n    address public owner;\r\n\r\n    function changeOwner(address _addr) onlyOwner {\r\n        if (_addr == 0x0) throw;\r\n        owner = _addr;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        if (msg.sender != owner) throw;\r\n        _;\r\n    }\r\n}\r\n\r\ncontract Mutex is Owned {\r\n    bool locked = false;\r\n    modifier mutexed {\r\n        if (locked) throw;\r\n        locked = true;\r\n        _;\r\n        locked = false;\r\n    }\r\n\r\n    function unMutex() onlyOwner {\r\n        locked = false;\r\n    }\r\n}\r\n\r\n\r\ncontract Rental is Owned {\r\n    function Rental(address _owner) {\r\n        if (_owner == 0x0) throw;\r\n        owner = _owner;\r\n    }\r\n\r\n    function offer(address from, uint num) {\r\n\r\n    }\r\n\r\n    function claimBalance(address) returns(uint) {\r\n        return 0;\r\n    }\r\n\r\n    function exec(address dest) onlyOwner {\r\n        if (!dest.call(msg.data)) throw;\r\n    }\r\n}\r\n\r\ncontract Token is Owned, Mutex {\r\n    uint ONE = 10**8;\r\n    uint price = 5000;\r\n    Ledger ledger;\r\n    Rental rentalContract;\r\n    uint8 rollOverTime = 4;\r\n    uint8 startTime = 8;\r\n    bool live = false;\r\n    address club;\r\n    uint lockedSupply = 0;\r\n    string public name;\r\n    uint8 public decimals; \r\n    string public symbol;     \r\n    string public version = '0.1';  \r\n    bool transfersOn = false;\r\n\r\n\r\n\r\n    function Token(address _owner, string _tokenName, uint8 _decimals, string _symbol, address _ledger, address _rental) {\r\n        if (_owner == 0x0) throw;\r\n        owner = _owner;\r\n\r\n        name = _tokenName;\r\n        decimals = _decimals;\r\n        symbol = _symbol;\r\n        ONE = 10**uint(decimals);\r\n        ledger = Ledger(_ledger);\r\n        rentalContract = Rental(_rental);\r\n    }\r\n\r\n    /*\r\n    *\tBookkeeping and Admin Functions\r\n    */\r\n\r\n    event LedgerUpdated(address,address);\r\n\r\n    function changeClub(address _addr) onlyOwner {\r\n        if (_addr == 0x0) throw;\r\n\r\n        club = _addr;\r\n    }\r\n\r\n    function changePrice(uint _num) onlyOwner {\r\n        price = _num;\r\n    }\r\n\r\n    function safeAdd(uint a, uint b) returns (uint) {\r\n        if ((a + b) < a) throw;\r\n        return (a + b);\r\n    }\r\n\r\n    function changeLedger(address _addr) onlyOwner {\r\n        if (_addr == 0x0) throw;\r\n\r\n        LedgerUpdated(msg.sender, _addr);\r\n        ledger = Ledger(_addr);\r\n    }\r\n\r\n    function changeRental(address _addr) onlyOwner {\r\n        if (_addr == 0x0) throw;\r\n        rentalContract = Rental(_addr);\r\n    }\r\n\r\n    function changeTimes(uint8 _rollOver, uint8 _start) onlyOwner {\r\n        rollOverTime = _rollOver;\r\n        startTime = _start;\r\n    }\r\n\r\n    /*\r\n    * Locking is a feature that turns a user's balances into\r\n    * un-issued tokens, taking them out of an account and reducing the supply.\r\n    * Diluting is so named to remind the caller that they are changing the money supply.\r\n        */\r\n\r\n    function lock(address _seizeAddr) onlyOwner mutexed {\r\n        uint myBalance = ledger.balanceOf(_seizeAddr);\r\n\r\n        lockedSupply += myBalance;\r\n        ledger.setBalance(_seizeAddr, 0);\r\n    }\r\n\r\n    event Dilution(address, uint);\r\n\r\n    function dilute(address _destAddr, uint amount) onlyOwner {\r\n        if (amount > lockedSupply) throw;\r\n\r\n        Dilution(_destAddr, amount);\r\n\r\n        lockedSupply -= amount;\r\n\r\n        uint curBalance = ledger.balanceOf(_destAddr);\r\n        curBalance = safeAdd(amount, curBalance);\r\n        ledger.setBalance(_destAddr, curBalance);\r\n    }\r\n\r\n    /* \r\n     * Crowdsale -- \r\n     *\r\n     */\r\n    function completeCrowdsale() onlyOwner {\r\n        // Lock unsold tokens\r\n        // allow transfers for arbitrary owners\r\n        transfersOn = true;\r\n        lock(owner);\r\n    }\r\n\r\n    function pauseTransfers() onlyOwner {\r\n        transfersOn = false;\r\n    }\r\n\r\n    function resumeTransfers() onlyOwner {\r\n        transfersOn = true;\r\n    }\r\n\r\n    /*\r\n    * Renting -- Logic TBD later. For now, we trust the rental contract\r\n    * to manage everything about the rentals, including bookkeeping on earnings\r\n    * and returning tokens.\r\n    */\r\n\r\n    function rentOut(uint num) {\r\n        if (ledger.balanceOf(msg.sender) < num) throw;\r\n        rentalContract.offer(msg.sender, num);\r\n        ledger.tokenTransfer(msg.sender, rentalContract, num);\r\n    }\r\n\r\n    function claimUnrented() {  \r\n        uint amount = rentalContract.claimBalance(msg.sender); // this should reduce sender's claimableBalance to 0\r\n\r\n        ledger.tokenTransfer(rentalContract, msg.sender, amount);\r\n    }\r\n\r\n    /*\r\n    * Burning -- We allow any user to burn tokens.\r\n    *\r\n     */\r\n\r\n    function burn(uint _amount) {\r\n        uint balance = ledger.balanceOf(msg.sender);\r\n        if (_amount > balance) throw;\r\n\r\n        ledger.setBalance(msg.sender, balance - _amount);\r\n    }\r\n\r\n    /*\r\n    Entry\r\n    */\r\n    function checkIn(uint _numCheckins) returns(bool) {\r\n        int needed = int(price * ONE* _numCheckins);\r\n        if (int(ledger.balanceOf(msg.sender)) > needed) {\r\n            ledger.changeUsed(msg.sender, needed);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // ERC20 Support. This could also use the fallback but\r\n    // I prefer the control for now.\r\n\r\n    event Transfer(address, address, uint);\r\n    event Approval(address, address, uint);\r\n\r\n    function totalSupply() constant returns(uint) {\r\n        return ledger.totalSupply();\r\n    }\r\n\r\n    function transfer(address _to, uint _amount) returns(bool) {\r\n        if (!transfersOn && msg.sender != owner) return false;\r\n        if (! ledger.tokenTransfer(msg.sender, _to, _amount)) { return false; }\r\n\r\n        Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _amount) returns (bool) {\r\n        if (!transfersOn && msg.sender != owner) return false;\r\n        if (! ledger.tokenTransferFrom(msg.sender, _from, _to, _amount) ) { return false;}\r\n\r\n        Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _from, address _to) constant returns(uint) {\r\n        return ledger.allowance(_from, _to); \r\n    }\r\n\r\n    function approve(address _spender, uint _value) returns (bool) {\r\n        if ( ledger.tokenApprove(msg.sender, _spender, _value) ) {\r\n            Approval(msg.sender, _spender, _value);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function balanceOf(address _addr) constant returns(uint) {\r\n        return ledger.balanceOf(_addr);\r\n    }\r\n}\r\n\r\ncontract Ledger is Owned {\r\n    mapping (address => uint) balances;\r\n    mapping (address => uint) usedToday;\r\n\r\n    mapping (address => bool) seenHere;\r\n    address[] public seenHereA;\r\n\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    address token;\r\n    uint public totalSupply = 0;\r\n\r\n    function Ledger(address _owner, uint _preMined, uint ONE) {\r\n        if (_owner == 0x0) throw;\r\n        owner = _owner;\r\n\r\n        seenHere[_owner] = true;\r\n        seenHereA.push(_owner);\r\n\r\n        totalSupply = _preMined *ONE;\r\n        balances[_owner] = totalSupply;\r\n    }\r\n\r\n    modifier onlyToken {\r\n        if (msg.sender != token) throw;\r\n        _;\r\n    }\r\n\r\n    modifier onlyTokenOrOwner {\r\n        if (msg.sender != token && msg.sender != owner) throw;\r\n        _;\r\n    }\r\n\r\n\r\n    function tokenTransfer(address _from, address _to, uint amount) onlyToken returns(bool) {\r\n        if (amount > balances[_from]) return false;\r\n        if ((balances[_to] + amount) < balances[_to]) return false;\r\n        if (amount == 0) { return false; }\r\n\r\n        balances[_from] -= amount;\r\n        balances[_to] += amount;\r\n\r\n        if (seenHere[_to] == false) {\r\n            seenHereA.push(_to);\r\n            seenHere[_to] = true;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function tokenTransferFrom(address _sender, address _from, address _to, uint amount) onlyToken returns(bool) {\r\n        if (allowed[_from][_sender] <= amount) return false;\r\n        if (amount > balanceOf(_from)) return false;\r\n        if (amount == 0) return false;\r\n\r\n        if ((balances[_to] + amount) < amount) return false;\r\n\r\n        balances[_from] -= amount;\r\n        balances[_to] += amount;\r\n        allowed[_from][_sender] -= amount;\r\n\r\n        if (seenHere[_to] == false) {\r\n            seenHereA.push(_to);\r\n            seenHere[_to] = true;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    function changeUsed(address _addr, int amount) onlyToken {\r\n        int myToday = int(usedToday[_addr]) + amount;\r\n        usedToday[_addr] = uint(myToday);\r\n    }\r\n\r\n    function resetUsedToday(uint8 startI, uint8 numTimes) onlyTokenOrOwner returns(uint8) {\r\n        uint8 numDeleted;\r\n        for (uint i = 0; i < numTimes && i + startI < seenHereA.length; i++) {\r\n            if (usedToday[seenHereA[i+startI]] != 0) { \r\n                delete usedToday[seenHereA[i+startI]];\r\n                numDeleted++;\r\n            }\r\n        }\r\n        return numDeleted;\r\n    }\r\n\r\n    function balanceOf(address _addr) constant returns (uint) {\r\n        // don't forget to subtract usedToday\r\n        if (usedToday[_addr] >= balances[_addr]) { return 0;}\r\n        return balances[_addr] - usedToday[_addr];\r\n    }\r\n\r\n    event Approval(address, address, uint);\r\n\r\n    function tokenApprove(address _from, address _spender, uint256 _value) onlyToken returns (bool) {\r\n        allowed[_from][_spender] = _value;\r\n        Approval(_from, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function changeToken(address _token) onlyOwner {\r\n        token = Token(_token);\r\n    }\r\n\r\n    function reduceTotalSupply(uint amount) onlyToken {\r\n        if (amount > totalSupply) throw;\r\n\r\n        totalSupply -= amount;    \r\n    }\r\n\r\n    function setBalance(address _addr, uint amount) onlyTokenOrOwner {\r\n        if (balances[_addr] == amount) { return; }\r\n        if (balances[_addr] < amount) {\r\n            // increasing totalSupply\r\n            uint increase = amount - balances[_addr];\r\n            totalSupply += increase;\r\n        } else {\r\n            // decreasing totalSupply\r\n            uint decrease = balances[_addr] - amount;\r\n            //TODO: safeSub\r\n            totalSupply -= decrease;\r\n        }\r\n        balances[_addr] = amount;\r\n    }\r\n\r\n}", "OptimizationUsed": "1", "ContractName": "Token", "ByteCode": "0x6060604052361561014e5763ffffffff60e060020a60003504166306fdde038114610150578063095ea7b3146101e05780630da4fc46146102135780630ea49bc11461022557806318160ddd146102435780631fae93611461026557806323b872dd14610283578063313ce567146102bc5780633cbf41d2146102e257806342966c68146102f457806347af99571461030957806354fd4d501461031b57806363750dfb146103ab57806370a08231146103c9578063809e4a2d146103f7578063848efb3d146104095780638da5cb5b1461041e57806395d89b411461044a578063a2b40d19146104da578063a6f9dae1146104ef578063a9059cbb1461050d578063c77a16ed14610540578063c847259c14610552578063ccd3953714610570578063dd62ed3e14610591578063e6cb9013146105c5578063e95a644f146105ed578063f435f5a714610614575bfe5b341561015857fe5b610160610632565b6040805160208082528351818301528351919283929083019185019080838382156101a6575b8051825260208311156101a657601f199092019160209182019101610186565b505050905090810190601f1680156101d25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101e857fe5b6101ff600160a060020a03600435166024356106c0565b604080519115158252519081900360200190f35b341561021b57fe5b6102236107b3565b005b341561022d57fe5b610223600160a060020a03600435166107e3565b005b341561024b57fe5b610253610835565b60408051918252519081900360200190f35b341561026d57fe5b61022360ff600435811690602435166108b2565b005b341561028b57fe5b6101ff600160a060020a036004358116906024351660443561092a565b604080519115158252519081900360200190f35b34156102c457fe5b6102cc610a59565b6040805160ff9092168252519081900360200190f35b34156102ea57fe5b610223610a62565b005b34156102fc57fe5b610223600435610aa4565b005b341561031157fe5b610223610b8a565b005b341561032357fe5b610160610bb4565b6040805160208082528351818301528351919283929083019185019080838382156101a6575b8051825260208311156101a657601f199092019160209182019101610186565b505050905090810190601f1680156101d25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103b357fe5b610223600160a060020a0360043516610c42565b005b34156103d157fe5b610253600160a060020a0360043516610cd9565b60408051918252519081900360200190f35b34156103ff57fe5b610223610d4d565b005b341561041157fe5b610223600435610e58565b005b341561042657fe5b61042e610fd5565b60408051600160a060020a039092168252519081900360200190f35b341561045257fe5b610160610fe4565b6040805160208082528351818301528351919283929083019185019080838382156101a6575b8051825260208311156101a657601f199092019160209182019101610186565b505050905090810190601f1680156101d25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156104e257fe5b610223600435611072565b005b34156104f757fe5b610223600160a060020a0360043516611098565b005b341561051557fe5b6101ff600160a060020a03600435166024356110ea565b604080519115158252519081900360200190f35b341561054857fe5b6102236111fa565b005b341561055a57fe5b610223600160a060020a0360043516611227565b005b341561057857fe5b610223600160a060020a0360043516602435611279565b005b341561059957fe5b610253600160a060020a03600435811690602435166113d9565b60408051918252519081900360200190f35b34156105cd57fe5b61025360043560243561146c565b60408051918252519081900360200190f35b34156105f557fe5b6101ff600435611489565b604080519115158252519081900360200190f35b341561061c57fe5b610223600160a060020a036004351661159b565b005b6007805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106b85780601f1061068d576101008083540402835291602001916106b8565b820191906000526020600020905b81548152906001019060200180831161069b57829003601f168201915b505050505081565b600354604080516000602091820181905282517ffb3f4d29000000000000000000000000000000000000000000000000000000008152600160a060020a03338116600483015287811660248301526044820187905293519194939093169263fb3f4d2992606480830193919282900301818787803b151561073d57fe5b60325a03f1151561074a57fe5b5050604051511590506107a95760408051600160a060020a0333811682528516602082015280820184905290517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259181900360600190a15060016107ad565b5060005b92915050565b60005433600160a060020a039081169116146107cf5760006000fd5b6000805460a060020a60ff02191690555b5b565b60005433600160a060020a039081169116146107ff5760006000fd5b600160a060020a03811615156108155760006000fd5b60048054600160a060020a031916600160a060020a0383161790555b5b50565b600354604080516000602091820181905282517f18160ddd00000000000000000000000000000000000000000000000000000000815292519093600160a060020a0316926318160ddd92600480830193919282900301818787803b151561089857fe5b60325a03f115156108a557fe5b5050604051519150505b90565b60005433600160a060020a039081169116146108ce5760006000fd5b6004805460ff83811675010000000000000000000000000000000000000000000275ff0000000000000000000000000000000000000000001991861660a060020a0260a060020a60ff021990931692909217161790555b5b5050565b600b5460009060ff1615801561094f575060005433600160a060020a03908116911614155b1561095c57506000610a52565b600354604080516000602091820181905282517ff3913e69000000000000000000000000000000000000000000000000000000008152600160a060020a03338116600483015289811660248301528881166044830152606482018890529351939094169363f3913e69936084808301949391928390030190829087803b15156109e157fe5b60325a03f115156109ee57fe5b50506040515115159050610a0457506000610a52565b60408051600160a060020a0333811682528516602082015280820184905290517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360600190a15060015b9392505050565b60085460ff1681565b60005433600160a060020a03908116911614610a7e5760006000fd5b600b805460ff191660011790556000546107e090600160a060020a031661159b565b5b5b565b6003546040805160006020918201819052825160e060020a6370a08231028152600160a060020a0333811660048301529351919493909316926370a0823192602480830193919282900301818787803b1515610afc57fe5b60325a03f11515610b0957fe5b50506040515191505080821115610b205760006000fd5b6003546040805160e260020a6338c110ef028152600160a060020a03338116600483015285850360248301529151919092169163e30443bc91604480830192600092919082900301818387803b1515610b7557fe5b60325a03f11515610b8257fe5b5050505b5050565b60005433600160a060020a03908116911614610ba65760006000fd5b600b805460ff191690555b5b565b600a805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106b85780601f1061068d576101008083540402835291602001916106b8565b820191906000526020600020905b81548152906001019060200180831161069b57829003601f168201915b505050505081565b60005433600160a060020a03908116911614610c5e5760006000fd5b600160a060020a0381161515610c745760006000fd5b60408051600160a060020a0333811682528316602082015281517fb27913a64a004c63f97f942e6eb87635094b1ffc4e878c7093547361c0f5b933929181900390910190a160038054600160a060020a031916600160a060020a0383161790555b5b50565b6003546040805160006020918201819052825160e060020a6370a08231028152600160a060020a0386811660048301529351919493909316926370a0823192602480830193919282900301818787803b1515610d3157fe5b60325a03f11515610d3e57fe5b5050604051519150505b919050565b6000600460009054906101000a9004600160a060020a0316600160a060020a031663b633e4cd336000604051602001526040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b1515610dc457fe5b60325a03f11515610dd157fe5b50506040805180516003546004805460006020958601819052865160e060020a6315eaef6b028152600160a060020a0392831693810193909352338216602484015260448301859052955193975090911694506315eaef6b9360648083019493928390030190829087803b1515610e4457fe5b60325a03f11515610e5157fe5b5050505b50565b6003546040805160006020918201819052825160e060020a6370a08231028152600160a060020a0333811660048301529351869594909416936370a082319360248084019491938390030190829087803b1515610eb157fe5b60325a03f11515610ebe57fe5b505050604051805190501015610ed45760006000fd5b60048054604080517f6b212960000000000000000000000000000000000000000000000000000000008152600160a060020a03338116948201949094526024810185905290519290911691636b2129609160448082019260009290919082900301818387803b1515610f4257fe5b60325a03f11515610f4f57fe5b5050600354600480546040805160006020918201819052825160e060020a6315eaef6b028152600160a060020a033381169682019690965293851660248501526044840188905291519390941694506315eaef6b9360648084019491939192918390030190829087803b1515610e4457fe5b60325a03f11515610e5157fe5b5050505b50565b600054600160a060020a031681565b6009805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106b85780601f1061068d576101008083540402835291602001916106b8565b820191906000526020600020905b81548152906001019060200180831161069b57829003601f168201915b505050505081565b60005433600160a060020a0390811691161461108e5760006000fd5b60028190555b5b50565b60005433600160a060020a039081169116146110b45760006000fd5b600160a060020a03811615156110ca5760006000fd5b60008054600160a060020a031916600160a060020a0383161790555b5b50565b600b5460009060ff1615801561110f575060005433600160a060020a03908116911614155b1561111c575060006107ad565b6003546040805160006020918201819052825160e060020a6315eaef6b028152600160a060020a033381166004830152888116602483015260448201889052935193909416936315eaef6b936064808301949391928390030190829087803b151561118357fe5b60325a03f1151561119057fe5b505060405151151590506111a6575060006107ad565b60408051600160a060020a0333811682528516602082015280820184905290517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360600190a15060015b92915050565b60005433600160a060020a039081169116146112165760006000fd5b600b805460ff191660011790555b5b565b60005433600160a060020a039081169116146112435760006000fd5b600160a060020a03811615156112595760006000fd5b60058054600160a060020a031916600160a060020a0383161790555b5b50565b6000805433600160a060020a039081169116146112965760006000fd5b6006548211156112a65760006000fd5b60408051600160a060020a03851681526020810184905281517fbe7118a70d979e6eb7add7f9f4ae042c9f96f1c85cbda849257f72f065951a67929181900390910190a16006805483900390556003546040805160006020918201819052825160e060020a6370a08231028152600160a060020a038881166004830152935193909416936370a08231936024808301949391928390030190829087803b151561134b57fe5b60325a03f1151561135857fe5b505060405151915061136c9050828261146c565b6003546040805160e260020a6338c110ef028152600160a060020a03878116600483015260248201859052915193945091169163e30443bc9160448082019260009290919082900301818387803b15156113c257fe5b60325a03f115156113cf57fe5b5050505b5b505050565b600354604080516000602091820181905282517fdd62ed3e000000000000000000000000000000000000000000000000000000008152600160a060020a038781166004830152868116602483015293519194939093169263dd62ed3e92604480830193919282900301818787803b151561144f57fe5b60325a03f1151561145c57fe5b5050604051519150505b92915050565b600082828401101561147e5760006000fd5b508181015b92915050565b6001546002546003546040805160006020918201819052825160e060020a6370a08231028152600160a060020a0333811660048301529351919695909502870294859493909316926370a0823192602480830193919282900301818987803b15156114f057fe5b60325a03f115156114fd57fe5b50505060405180519050131561159057600354604080517f2042495b000000000000000000000000000000000000000000000000000000008152600160a060020a0333811660048301526024820185905291519190921691632042495b91604480830192600092919082900301818387803b151561157757fe5b60325a03f1151561158457fe5b50505060019150611595565b600091505b50919050565b6000805433600160a060020a039081169116146115b85760006000fd5b60005460a060020a900460ff16156115d05760006000fd5b6000805460a060020a60ff02191660a060020a178155600354604080516020908101849052815160e060020a6370a08231028152600160a060020a038781166004830152925192909316936370a082319360248082019492918390030190829087803b151561163b57fe5b60325a03f1151561164857fe5b5050604080518051600680548201905560035460e260020a6338c110ef028352600160a060020a038781166004850152600060248501819052945192965016935063e30443bc9260448084019391929182900301818387803b15156116a957fe5b60325a03f115156116b657fe5b5050505b6000805460a060020a60ff02191690555b5b50505600a165627a7a72305820720880c483483e89687cc10de593a3bf79b1d9be58f1f9fb0497bd1a3e1729210029"}