{"Runs": "200", "SwarmSource": "bzzr://ff4a336888f642e2f1867681060839a3c9ecb34243d6b384a5b83c35c9cfd016", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_SITE_TOKEN_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_approved\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_adventureHandler\",\"type\":\"address\"}],\"name\":\"setAdventureHandler\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"moderators\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_SITE_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_target\",\"type\":\"uint256\"},{\"name\":\"_param\",\"type\":\"uint256\"}],\"name\":\"useSingleItem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isMaintaining\",\"type\":\"bool\"}],\"name\":\"UpdateMaintaining\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalModerators\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newModerator\",\"type\":\"address\"}],\"name\":\"AddModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_OWNER_PERS_SITE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adventureHandler\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldModerator\",\"type\":\"address\"}],\"name\":\"RemoveModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token1\",\"type\":\"uint256\"},{\"name\":\"_token2\",\"type\":\"uint256\"},{\"name\":\"_token3\",\"type\":\"uint256\"},{\"name\":\"_target\",\"type\":\"uint256\"},{\"name\":\"_param\",\"type\":\"uint256\"}],\"name\":\"useMultipleItem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalItem\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"items\",\"outputs\":[{\"name\":\"classId\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_classId\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"spawnItem\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getItemInfo\",\"outputs\":[{\"name\":\"classId\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_classId\",\"type\":\"uint256\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"spawnSite\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMaintaining\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"ChangeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.24+commit.e67f0147", "ConstructorArguments": "", "SourceCode": "pragma solidity ^0.4.23;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   *  as the code is not actually created until after the constructor finishes.\r\n   * @param addr address to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address addr) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(addr) }\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\ninterface ERC165 {\r\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool);\r\n}\r\n\r\ncontract SupportsInterface is ERC165 {\r\n    \r\n    mapping(bytes4 => bool) internal supportedInterfaces;\r\n\r\n    constructor() public {\r\n        supportedInterfaces[0x01ffc9a7] = true; // ERC165\r\n    }\r\n\r\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool) {\r\n        return supportedInterfaces[_interfaceID];\r\n    }\r\n}\r\n\r\ninterface ERC721 {\r\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n    \r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    function ownerOf(uint256 _tokenId) external view returns (address);\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) external;\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\r\n    function approve(address _approved, uint256 _tokenId) external;\r\n    function setApprovalForAll(address _operator, bool _approved) external;\r\n    \r\n    function getApproved(uint256 _tokenId) external view returns (address);\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\r\n}\r\n\r\ninterface ERC721Enumerable {\r\n    function totalSupply() external view returns (uint256);\r\n    function tokenByIndex(uint256 _index) external view returns (uint256);\r\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256);\r\n}\r\n\r\ninterface ERC721Metadata {\r\n    function name() external view returns (string _name);\r\n    function symbol() external view returns (string _symbol);\r\n    function tokenURI(uint256 _tokenId) external view returns (string);\r\n}\r\n\r\ninterface ERC721TokenReceiver {\r\n  function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes _data) external returns(bytes4);\r\n}\r\n\r\ncontract NFToken is ERC721, SupportsInterface {\r\n\r\n    using SafeMath for uint256;\r\n    using AddressUtils for address;\r\n    \r\n    // A mapping from NFT ID to the address that owns it.\r\n    mapping (uint256 => address) internal idToOwner;\r\n    \r\n    // Mapping from NFT ID to approved address.\r\n    mapping (uint256 => address) internal idToApprovals;\r\n    \r\n    // Mapping from owner address to count of his tokens.\r\n    mapping (address => uint256) internal ownerToNFTokenCount;\r\n    \r\n    // Mapping from owner address to mapping of operator addresses.\r\n    mapping (address => mapping (address => bool)) internal ownerToOperators;\r\n    \r\n    /**\r\n    * @dev Magic value of a smart contract that can recieve NFT.\r\n    * Equal to: bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\")).\r\n    */\r\n    bytes4 constant MAGIC_ON_ERC721_RECEIVED = 0x150b7a02;\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n    modifier canOperate(uint256 _tokenId) {\r\n        address tokenOwner = idToOwner[_tokenId];\r\n        require(tokenOwner == msg.sender || ownerToOperators[tokenOwner][msg.sender]);\r\n        _;\r\n    }\r\n\r\n\r\n    modifier canTransfer(uint256 _tokenId) {\r\n        address tokenOwner = idToOwner[_tokenId];\r\n        require(tokenOwner == msg.sender || getApproved(_tokenId) == msg.sender || ownerToOperators[tokenOwner][msg.sender]);\r\n        _;\r\n    }\r\n\r\n    modifier validNFToken(uint256 _tokenId) {\r\n        require(idToOwner[_tokenId] != address(0));\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        supportedInterfaces[0x80ac58cd] = true; // ERC721\r\n    }\r\n\r\n\r\n    function balanceOf(address _owner) external view returns (uint256) {\r\n        require(_owner != address(0));\r\n        return ownerToNFTokenCount[_owner];\r\n    }\r\n\r\n    function ownerOf(uint256 _tokenId) external view returns (address _owner) {\r\n        _owner = idToOwner[_tokenId];\r\n        require(_owner != address(0));\r\n    }\r\n\r\n\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) external {\r\n        _safeTransferFrom(_from, _to, _tokenId, _data);\r\n    }\r\n\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external {\r\n        _safeTransferFrom(_from, _to, _tokenId, \"\");\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external canTransfer(_tokenId) validNFToken(_tokenId) {\r\n        address tokenOwner = idToOwner[_tokenId];\r\n        require(tokenOwner == _from);\r\n        require(_to != address(0));\r\n        _transfer(_to, _tokenId);\r\n    }\r\n\r\n    function approve(address _approved, uint256 _tokenId) external canOperate(_tokenId) validNFToken(_tokenId) {\r\n        address tokenOwner = idToOwner[_tokenId];\r\n        require(_approved != tokenOwner);\r\n\r\n        idToApprovals[_tokenId] = _approved;\r\n        emit Approval(tokenOwner, _approved, _tokenId);\r\n    }\r\n\r\n    function setApprovalForAll(address _operator, bool _approved) external {\r\n        require(_operator != address(0));\r\n        ownerToOperators[msg.sender][_operator] = _approved;\r\n        emit ApprovalForAll(msg.sender, _operator, _approved);\r\n    }\r\n\r\n    function getApproved(uint256 _tokenId) public view validNFToken(_tokenId) returns (address) {\r\n        return idToApprovals[_tokenId];\r\n    }\r\n\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool) {\r\n        require(_owner != address(0));\r\n        require(_operator != address(0));\r\n        return ownerToOperators[_owner][_operator];\r\n    }\r\n\r\n    function _safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) internal canTransfer(_tokenId) validNFToken(_tokenId) {\r\n        address tokenOwner = idToOwner[_tokenId];\r\n        require(tokenOwner == _from);\r\n        require(_to != address(0));\r\n\r\n        _transfer(_to, _tokenId);\r\n\r\n        if (_to.isContract()) {\r\n            bytes4 retval = ERC721TokenReceiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data);\r\n            require(retval == MAGIC_ON_ERC721_RECEIVED);\r\n        }\r\n    }\r\n\r\n    function _transfer(address _to, uint256 _tokenId) private {\r\n        address from = idToOwner[_tokenId];\r\n        clearApproval(_tokenId);\r\n        removeNFToken(from, _tokenId);\r\n        addNFToken(_to, _tokenId);\r\n        emit Transfer(from, _to, _tokenId);\r\n    }\r\n   \r\n\r\n    function _mint(address _to, uint256 _tokenId) internal {\r\n        require(_to != address(0));\r\n        require(_tokenId != 0);\r\n        require(idToOwner[_tokenId] == address(0));\r\n\r\n        addNFToken(_to, _tokenId);\r\n\r\n        emit Transfer(address(0), _to, _tokenId);\r\n    }\r\n\r\n    function _burn(address _owner, uint256 _tokenId) validNFToken(_tokenId) internal { \r\n        clearApproval(_tokenId);\r\n        removeNFToken(_owner, _tokenId);\r\n        emit Transfer(_owner, address(0), _tokenId);\r\n    }\r\n\r\n    function clearApproval(uint256 _tokenId) private {\r\n        if(idToApprovals[_tokenId] != 0) {\r\n            delete idToApprovals[_tokenId];\r\n        }\r\n    }\r\n\r\n    function removeNFToken(address _from, uint256 _tokenId) internal {\r\n        require(idToOwner[_tokenId] == _from);\r\n        assert(ownerToNFTokenCount[_from] > 0);\r\n        ownerToNFTokenCount[_from] = ownerToNFTokenCount[_from] - 1;\r\n        delete idToOwner[_tokenId];\r\n    }\r\n\r\n    function addNFToken(address _to, uint256 _tokenId) internal {\r\n        require(idToOwner[_tokenId] == address(0));\r\n\r\n        idToOwner[_tokenId] = _to;\r\n        ownerToNFTokenCount[_to] = ownerToNFTokenCount[_to].add(1);\r\n    }\r\n}\r\n\r\n\r\ncontract NFTokenEnumerable is NFToken, ERC721Enumerable {\r\n\r\n    // Array of all NFT IDs.\r\n    uint256[] internal tokens;\r\n\r\n    // Mapping from token ID its index in global tokens array.\r\n    mapping(uint256 => uint256) internal idToIndex;\r\n\r\n    // Mapping from owner to list of owned NFT IDs.\r\n    mapping(address => uint256[]) internal ownerToIds;\r\n\r\n    // Mapping from NFT ID to its index in the owner tokens list.\r\n    mapping(uint256 => uint256) internal idToOwnerIndex;\r\n\r\n    constructor() public {\r\n        supportedInterfaces[0x780e9d63] = true; // ERC721Enumerable\r\n    }\r\n\r\n    function _mint(address _to, uint256 _tokenId) internal {\r\n        super._mint(_to, _tokenId);\r\n        uint256 length = tokens.push(_tokenId);\r\n        idToIndex[_tokenId] = length - 1;\r\n    }\r\n\r\n    function _burn(address _owner, uint256 _tokenId) internal {\r\n        super._burn(_owner, _tokenId);\r\n        assert(tokens.length > 0);\r\n\r\n        uint256 tokenIndex = idToIndex[_tokenId];\r\n        // Sanity check. This could be removed in the future.\r\n        assert(tokens[tokenIndex] == _tokenId);\r\n        uint256 lastTokenIndex = tokens.length - 1;\r\n        uint256 lastToken = tokens[lastTokenIndex];\r\n\r\n        tokens[tokenIndex] = lastToken;\r\n\r\n        tokens.length--;\r\n        // Consider adding a conditional check for the last token in order to save GAS.\r\n        idToIndex[lastToken] = tokenIndex;\r\n        idToIndex[_tokenId] = 0;\r\n    }\r\n\r\n    function removeNFToken(address _from, uint256 _tokenId) internal\r\n    {\r\n        super.removeNFToken(_from, _tokenId);\r\n        assert(ownerToIds[_from].length > 0);\r\n\r\n        uint256 tokenToRemoveIndex = idToOwnerIndex[_tokenId];\r\n        uint256 lastTokenIndex = ownerToIds[_from].length - 1;\r\n        uint256 lastToken = ownerToIds[_from][lastTokenIndex];\r\n\r\n        ownerToIds[_from][tokenToRemoveIndex] = lastToken;\r\n\r\n        ownerToIds[_from].length--;\r\n        // Consider adding a conditional check for the last token in order to save GAS.\r\n        idToOwnerIndex[lastToken] = tokenToRemoveIndex;\r\n        idToOwnerIndex[_tokenId] = 0;\r\n    }\r\n\r\n    function addNFToken(address _to, uint256 _tokenId) internal {\r\n        super.addNFToken(_to, _tokenId);\r\n\r\n        uint256 length = ownerToIds[_to].push(_tokenId);\r\n        idToOwnerIndex[_tokenId] = length - 1;\r\n    }\r\n\r\n    function totalSupply() external view returns (uint256) {\r\n        return tokens.length;\r\n    }\r\n\r\n    function tokenByIndex(uint256 _index) external view returns (uint256) {\r\n        require(_index < tokens.length);\r\n        // Sanity check. This could be removed in the future.\r\n        assert(idToIndex[tokens[_index]] == _index);\r\n        return tokens[_index];\r\n    }\r\n\r\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\r\n        require(_index < ownerToIds[_owner].length);\r\n        return ownerToIds[_owner][_index];\r\n    }\r\n\r\n}\r\n\r\ncontract NFTStandard is NFTokenEnumerable, ERC721Metadata {\r\n    string internal nftName;\r\n    string internal nftSymbol;\r\n    \r\n    mapping (uint256 => string) internal idToUri;\r\n    \r\n    constructor(string _name, string _symbol) public {\r\n        nftName = _name;\r\n        nftSymbol = _symbol;\r\n        supportedInterfaces[0x5b5e139f] = true; // ERC721Metadata\r\n    }\r\n    \r\n    function _burn(address _owner, uint256 _tokenId) internal {\r\n        super._burn(_owner, _tokenId);\r\n        if (bytes(idToUri[_tokenId]).length != 0) {\r\n        delete idToUri[_tokenId];\r\n        }\r\n    }\r\n    \r\n    function _setTokenUri(uint256 _tokenId, string _uri) validNFToken(_tokenId) internal {\r\n        idToUri[_tokenId] = _uri;\r\n    }\r\n    \r\n    function name() external view returns (string _name) {\r\n        _name = nftName;\r\n    }\r\n    \r\n    function symbol() external view returns (string _symbol) {\r\n        _symbol = nftSymbol;\r\n    }\r\n    \r\n    function tokenURI(uint256 _tokenId) validNFToken(_tokenId) external view returns (string) {\r\n        return idToUri[_tokenId];\r\n    }\r\n}\r\n\r\ncontract BasicAccessControl {\r\n    address public owner;\r\n    // address[] public moderators;\r\n    uint16 public totalModerators = 0;\r\n    mapping (address => bool) public moderators;\r\n    bool public isMaintaining = false;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyModerators() {\r\n        require(msg.sender == owner || moderators[msg.sender] == true);\r\n        _;\r\n    }\r\n\r\n    modifier isActive {\r\n        require(!isMaintaining);\r\n        _;\r\n    }\r\n\r\n    function ChangeOwner(address _newOwner) onlyOwner public {\r\n        if (_newOwner != address(0)) {\r\n            owner = _newOwner;\r\n        }\r\n    }\r\n\r\n\r\n    function AddModerator(address _newModerator) onlyOwner public {\r\n        if (moderators[_newModerator] == false) {\r\n            moderators[_newModerator] = true;\r\n            totalModerators += 1;\r\n        }\r\n    }\r\n    \r\n    function RemoveModerator(address _oldModerator) onlyOwner public {\r\n        if (moderators[_oldModerator] == true) {\r\n            moderators[_oldModerator] = false;\r\n            totalModerators -= 1;\r\n        }\r\n    }\r\n\r\n    function UpdateMaintaining(bool _isMaintaining) onlyOwner public {\r\n        isMaintaining = _isMaintaining;\r\n    }\r\n}\r\n\r\ninterface EtheremonAdventureHandler {\r\n    function handleSingleItem(address _sender, uint _classId, uint _value, uint _target, uint _param) external;\r\n    function handleMultipleItems(address _sender, uint _classId1, uint _classId2, uint _classId3, uint _target, uint _param) external;\r\n}\r\n\r\ncontract EtheremonAdventureItem is NFTStandard(\"EtheremonAdventure\", \"EMOND\"), BasicAccessControl {\r\n    uint constant public MAX_OWNER_PERS_SITE = 10;\r\n    uint constant public MAX_SITE_ID = 108;\r\n    uint constant public MAX_SITE_TOKEN_ID = 1080;\r\n    \r\n    // smartcontract\r\n    address public adventureHandler;\r\n    \r\n    // class sites: 1 -> 108\r\n    // shard: 109 - 126\r\n    // level, exp\r\n    struct Item {\r\n        uint classId;\r\n        uint value;\r\n    }\r\n    \r\n    uint public totalItem = MAX_SITE_TOKEN_ID;\r\n    mapping (uint => Item) public items; // token id => info\r\n    \r\n    modifier requireAdventureHandler {\r\n        require(adventureHandler != address(0));\r\n        _;        \r\n    }\r\n    \r\n    function setAdventureHandler(address _adventureHandler) onlyModerators external {\r\n        adventureHandler = _adventureHandler;\r\n    }\r\n    \r\n    function setTokenURI(uint256 _tokenId, string _uri) onlyModerators external {\r\n        _setTokenUri(_tokenId, _uri);\r\n    }\r\n    \r\n    function spawnSite(uint _classId, uint _tokenId, address _owner) onlyModerators external {\r\n        if (_owner == address(0)) revert();\r\n        if (_classId > MAX_SITE_ID || _classId == 0 || _tokenId > MAX_SITE_TOKEN_ID || _tokenId == 0) revert();\r\n        \r\n        Item storage item = items[_tokenId];\r\n        if (item.classId != 0) revert(); // token existed\r\n        item.classId = _classId;\r\n        \r\n        _mint(_owner, _tokenId);\r\n    }\r\n    \r\n    function spawnItem(uint _classId, uint _value, address _owner) onlyModerators external returns(uint) {\r\n        if (_owner == address(0)) revert();\r\n        if (_classId < MAX_SITE_ID) revert();\r\n        \r\n        totalItem += 1;\r\n        Item storage item = items[totalItem];\r\n        item.classId = _classId;\r\n        item.value = _value;\r\n        \r\n        _mint(_owner, totalItem);\r\n        return totalItem;\r\n    }\r\n    \r\n    \r\n    // public write \r\n    function useSingleItem(uint _tokenId, uint _target, uint _param) isActive requireAdventureHandler public {\r\n        // check ownership\r\n        if (_tokenId == 0 || idToOwner[_tokenId] != msg.sender) revert();\r\n        Item storage item = items[_tokenId];\r\n        \r\n        EtheremonAdventureHandler handler = EtheremonAdventureHandler(adventureHandler);\r\n        handler.handleSingleItem(msg.sender, item.classId, item.value, _target, _param);\r\n        \r\n        _burn(msg.sender, _tokenId);\r\n    }\r\n    \r\n    function useMultipleItem(uint _token1, uint _token2, uint _token3, uint _target, uint _param) isActive requireAdventureHandler public {\r\n        if (_token1 > 0 && idToOwner[_token1] != msg.sender) revert();\r\n        if (_token2 > 0 && idToOwner[_token2] != msg.sender) revert();\r\n        if (_token3 > 0 && idToOwner[_token3] != msg.sender) revert();\r\n        \r\n        Item storage item1 = items[_token1];\r\n        Item storage item2 = items[_token2];\r\n        Item storage item3 = items[_token3];\r\n        \r\n        EtheremonAdventureHandler handler = EtheremonAdventureHandler(adventureHandler);\r\n        handler.handleMultipleItems(msg.sender, item1.classId, item2.classId, item3.classId, _target, _param);\r\n        \r\n        if (_token1 > 0) _burn(msg.sender, _token1);\r\n        if (_token2 > 0) _burn(msg.sender, _token2);\r\n        if (_token3 > 0) _burn(msg.sender, _token3);\r\n    }\r\n    \r\n    \r\n    // public read \r\n    function getItemInfo(uint _tokenId) constant public returns(uint classId, uint value) {\r\n        Item storage item = items[_tokenId];\r\n        classId = item.classId;\r\n        value = item.value;\r\n    }\r\n\r\n}", "OptimizationUsed": "1", "ContractName": "EtheremonAdventureItem", "ByteCode": "0x6080604052600436106101cc5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301ffc9a781146101d1578063030a78aa1461021c57806306fdde0314610243578063081812fc146102cd578063095ea7b3146103015780630b2c588c1461032757806314d0f1ba14610348578063162094c41461036957806318160ddd1461038d5780631a5b8f96146103a257806323b872dd146103b75780632f745c59146103e15780633f1a1cac1461040557806342842e0e1461042357806348ef5aa81461044d5780634efb023e146104675780634f6ccce7146104935780636352211e146104ab5780636c81fd6d146104c35780636e575537146104e457806370a08231146104f95780638da5cb5b1461051a57806395d89b411461052f578063a22cb46514610544578063b239e2f11461056a578063b85d62751461057f578063b88d4fde146105a0578063b919be66146105d9578063bda4fd89146105fd578063bfb231d214610612578063c87b56dd14610643578063d33925451461065b578063de7fe3e714610682578063e985e9c51461069a578063ebf06bcb146106c1578063ee4e4416146106e8578063f2853292146106fd575b600080fd5b3480156101dd57600080fd5b506102087bffffffffffffffffffffffffffffffffffffffffffffffffffffffff196004351661071e565b604080519115158252519081900360200190f35b34801561022857600080fd5b50610231610756565b60408051918252519081900360200190f35b34801561024f57600080fd5b5061025861075c565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561029257818101518382015260200161027a565b50505050905090810190601f1680156102bf5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102d957600080fd5b506102e56004356107f2565b60408051600160a060020a039092168252519081900360200190f35b34801561030d57600080fd5b50610325600160a060020a0360043516602435610834565b005b34801561033357600080fd5b50610325600160a060020a0360043516610945565b34801561035457600080fd5b50610208600160a060020a03600435166109b2565b34801561037557600080fd5b506103256004803590602480359081019101356109c7565b34801561039957600080fd5b50610231610a3e565b3480156103ae57600080fd5b50610231610a45565b3480156103c357600080fd5b50610325600160a060020a0360043581169060243516604435610a4a565b3480156103ed57600080fd5b50610231600160a060020a0360043516602435610b31565b34801561041157600080fd5b50610325600435602435604435610b8c565b34801561042f57600080fd5b50610325600160a060020a0360043581169060243516604435610caf565b34801561045957600080fd5b506103256004351515610ccb565b34801561047357600080fd5b5061047c610cf5565b6040805161ffff9092168252519081900360200190f35b34801561049f57600080fd5b50610231600435610d17565b3480156104b757600080fd5b506102e5600435610d7f565b3480156104cf57600080fd5b50610325600160a060020a0360043516610da3565b3480156104f057600080fd5b50610231610e50565b34801561050557600080fd5b50610231600160a060020a0360043516610e55565b34801561052657600080fd5b506102e5610e88565b34801561053b57600080fd5b50610258610e97565b34801561055057600080fd5b50610325600160a060020a03600435166024351515610ef8565b34801561057657600080fd5b506102e5610f7b565b34801561058b57600080fd5b50610325600160a060020a0360043516610f8f565b3480156105ac57600080fd5b50610325600160a060020a0360048035821691602480359091169160443591606435908101910135611036565b3480156105e557600080fd5b50610325600435602435604435606435608435611072565b34801561060957600080fd5b50610231611249565b34801561061e57600080fd5b5061062a60043561124f565b6040805192835260208301919091528051918290030190f35b34801561064f57600080fd5b50610258600435611268565b34801561066757600080fd5b50610231600435602435600160a060020a0360443516611330565b34801561068e57600080fd5b5061062a6004356113cd565b3480156106a657600080fd5b50610208600160a060020a03600435811690602435166113e7565b3480156106cd57600080fd5b50610325600435602435600160a060020a0360443516611442565b3480156106f457600080fd5b506102086114ec565b34801561070957600080fd5b50610325600160a060020a03600435166114f5565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19811660009081526020819052604090205460ff165b919050565b61043881565b60098054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156107e85780601f106107bd576101008083540402835291602001916107e8565b820191906000526020600020905b8154815290600101906020018083116107cb57829003601f168201915b5050505050905090565b6000818152600160205260408120548290600160a060020a0316151561081757600080fd5b5050600090815260026020526040902054600160a060020a031690565b6000818152600160205260408120548290600160a060020a03163381148061087f5750600160a060020a038116600090815260046020908152604080832033845290915290205460ff165b151561088a57600080fd5b6000848152600160205260409020548490600160a060020a031615156108af57600080fd5b600085815260016020526040902054600160a060020a03908116945086168414156108d957600080fd5b600085815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038a811691821790925591518893918816917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050505050565b600c54600160a060020a03163314806109725750336000908152600d602052604090205460ff1615156001145b151561097d57600080fd5b600e8054600160a060020a039092166101000274ffffffffffffffffffffffffffffffffffffffff0019909216919091179055565b600d6020526000908152604090205460ff1681565b600c54600160a060020a03163314806109f45750336000908152600d602052604090205460ff1615156001145b15156109ff57600080fd5b610a398383838080601f01602080910402602001604051908101604052809392919081815260200183838082843750611548945050505050565b505050565b6005545b90565b606c81565b6000818152600160205260408120548290600160a060020a031633811480610a82575033610a77836107f2565b600160a060020a0316145b80610ab05750600160a060020a038116600090815260046020908152604080832033845290915290205460ff165b1515610abb57600080fd5b6000848152600160205260409020548490600160a060020a03161515610ae057600080fd5b600085815260016020526040902054600160a060020a03908116945087168414610b0957600080fd5b600160a060020a0386161515610b1e57600080fd5b610b28868661158c565b50505050505050565b600160a060020a0382166000908152600760205260408120548210610b5557600080fd5b600160a060020a0383166000908152600760205260409020805483908110610b7957fe5b9060005260206000200154905092915050565b600e54600090819060ff1615610ba157600080fd5b600e546101009004600160a060020a03161515610bbd57600080fd5b841580610be15750600085815260016020526040902054600160a060020a03163314155b15610beb57600080fd5b5050600083815260106020526040808220600e548154600183015484517f1b44a5ef00000000000000000000000000000000000000000000000000000000815233600482015260248101929092526044820152606481018790526084810186905292519193610100909104600160a060020a0316928392631b44a5ef9260a48084019391929182900301818387803b158015610c8657600080fd5b505af1158015610c9a573d6000803e3d6000fd5b50505050610ca83386611607565b5050505050565b610a398383836020604051908101604052806000815250611653565b600c54600160a060020a03163314610ce257600080fd5b600e805460ff1916911515919091179055565b600c5474010000000000000000000000000000000000000000900461ffff1681565b6005546000908210610d2857600080fd5b8160066000600585815481101515610d3c57fe5b9060005260206000200154815260200190815260200160002054141515610d5f57fe5b6005805483908110610d6d57fe5b90600052602060002001549050919050565b600081815260016020526040902054600160a060020a031680151561075157600080fd5b600c54600160a060020a03163314610dba57600080fd5b600160a060020a0381166000908152600d602052604090205460ff161515610e4d57600160a060020a0381166000908152600d60205260409020805460ff19166001908117909155600c805461ffff7401000000000000000000000000000000000000000080830482169094011690920275ffff0000000000000000000000000000000000000000199092169190911790555b50565b600a81565b6000600160a060020a0382161515610e6c57600080fd5b50600160a060020a031660009081526003602052604090205490565b600c54600160a060020a031681565b600a8054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156107e85780601f106107bd576101008083540402835291602001916107e8565b600160a060020a0382161515610f0d57600080fd5b336000818152600460209081526040808320600160a060020a03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b600e546101009004600160a060020a031681565b600c54600160a060020a03163314610fa657600080fd5b600160a060020a0381166000908152600d602052604090205460ff16151560011415610e4d57600160a060020a03166000908152600d60205260409020805460ff19169055600c805475ffff0000000000000000000000000000000000000000198116740100000000000000000000000000000000000000009182900461ffff9081166000190116909102179055565b610ca885858585858080601f01602080910402602001604051908101604052809392919081815260200183838082843750611653945050505050565b600e5460009081908190819060ff161561108b57600080fd5b600e546101009004600160a060020a031615156110a757600080fd5b6000891180156110ce5750600089815260016020526040902054600160a060020a03163314155b156110d857600080fd5b6000881180156110ff5750600088815260016020526040902054600160a060020a03163314155b1561110957600080fd5b6000871180156111305750600087815260016020526040902054600160a060020a03163314155b1561113a57600080fd5b505050600086815260106020526040808220878352818320878452828420600e5483548354835487517f5477e571000000000000000000000000000000000000000000000000000000008152336004820152602481019390935260448301919091526064820152608481018a905260a48101899052945193965091949093610100909204600160a060020a0316928392635477e5719260c480830193919282900301818387803b1580156111ed57600080fd5b505af1158015611201573d6000803e3d6000fd5b50505050600089111561121857611218338a611607565b600088111561122b5761122b3389611607565b600087111561123e5761123e3388611607565b505050505050505050565b600f5481565b6010602052600090815260409020805460019091015482565b6000818152600160205260409020546060908290600160a060020a0316151561129057600080fd5b6000838152600b602090815260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845290918301828280156113235780601f106112f857610100808354040283529160200191611323565b820191906000526020600020905b81548152906001019060200180831161130657829003601f168201915b5050505050915050919050565b600c546000908190600160a060020a03163314806113625750336000908152600d602052604090205460ff1615156001145b151561136d57600080fd5b600160a060020a038316151561138257600080fd5b606c85101561139057600080fd5b50600f80546001908101808355600090815260106020526040902086815590810185905590546113c19084906118a5565b5050600f549392505050565b600090815260106020526040902080546001909101549091565b6000600160a060020a03831615156113fe57600080fd5b600160a060020a038216151561141357600080fd5b50600160a060020a03918216600090815260046020908152604080832093909416825291909152205460ff1690565b600c54600090600160a060020a03163314806114725750336000908152600d602052604090205460ff1615156001145b151561147d57600080fd5b600160a060020a038216151561149257600080fd5b606c84118061149f575083155b806114ab575061043883115b806114b4575082155b156114be57600080fd5b5060008281526010602052604090208054156114d957600080fd5b8381556114e682846118a5565b50505050565b600e5460ff1681565b600c54600160a060020a0316331461150c57600080fd5b600160a060020a03811615610e4d57600c8054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff1990911617905550565b6000828152600160205260409020548290600160a060020a0316151561156d57600080fd5b6000838152600b6020908152604090912083516114e692850190611d80565b600081815260016020526040902054600160a060020a03166115ad826118f6565b6115b7818361193e565b6115c18383611a3f565b8183600160a060020a031682600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6116118282611a88565b6000818152600b6020526040902054600260001961010060018416150201909116041561164f576000818152600b6020526040812061164f91611dfe565b5050565b60008281526001602052604081205481908490600160a060020a03163381148061168d575033611682836107f2565b600160a060020a0316145b806116bb5750600160a060020a038116600090815260046020908152604080832033845290915290205460ff165b15156116c657600080fd5b6000868152600160205260409020548690600160a060020a031615156116eb57600080fd5b600087815260016020526040902054600160a060020a0390811695508916851461171457600080fd5b600160a060020a038816151561172957600080fd5b611733888861158c565b61174588600160a060020a0316611b48565b1561123e576040517f150b7a020000000000000000000000000000000000000000000000000000000081523360048201818152600160a060020a038c81166024850152604484018b90526080606485019081528a5160848601528a51918d169463150b7a0294938f938e938e93909160a490910190602085019080838360005b838110156117dd5781810151838201526020016117c5565b50505050905090810190601f16801561180a5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561182c57600080fd5b505af1158015611840573d6000803e3d6000fd5b505050506040513d602081101561185657600080fd5b505193507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1984167f150b7a02000000000000000000000000000000000000000000000000000000001461123e57600080fd5b60006118b18383611b50565b5060058054600181019091557f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db081018290556000918252600660205260409091205550565b600081815260026020526040902054600160a060020a031615610e4d576000908152600260205260409020805473ffffffffffffffffffffffffffffffffffffffff19169055565b600080600061194d8585611bd9565b600160a060020a0385166000908152600760205260408120541161196d57fe5b600084815260086020908152604080832054600160a060020a0389168452600790925290912080549194506000198201935090839081106119aa57fe5b90600052602060002001549050806007600087600160a060020a0316600160a060020a03168152602001908152602001600020848154811015156119ea57fe5b6000918252602080832090910192909255600160a060020a0387168152600790915260409020805490611a21906000198301611e42565b50600090815260086020526040808220939093559283525081205550565b6000611a4b8383611c68565b50600160a060020a039091166000908152600760209081526040808320805460018101825590845282842081018590559383526008909152902055565b6000806000611a978585611cf8565b600554600010611aa357fe5b60008481526006602052604090205460058054919450859185908110611ac557fe5b9060005260206000200154141515611ad957fe5b600580546000198101935083908110611aee57fe5b9060005260206000200154905080600584815481101515611b0b57fe5b6000918252602090912001556005805490611b2a906000198301611e42565b50600090815260066020526040808220939093559283525081205550565b6000903b1190565b600160a060020a0382161515611b6557600080fd5b801515611b7157600080fd5b600081815260016020526040902054600160a060020a031615611b9357600080fd5b611b9d8282611a3f565b6040518190600160a060020a038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600081815260016020526040902054600160a060020a03838116911614611bff57600080fd5b600160a060020a03821660009081526003602052604081205411611c1f57fe5b600160a060020a03909116600090815260036020908152604080832080546000190190559282526001905220805473ffffffffffffffffffffffffffffffffffffffff19169055565b600081815260016020526040902054600160a060020a031615611c8a57600080fd5b6000818152600160208181526040808420805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0388169081179091558452600390915290912054611cd891611d6d565b600160a060020a0390921660009081526003602052604090209190915550565b6000818152600160205260409020548190600160a060020a03161515611d1d57600080fd5b611d26826118f6565b611d30838361193e565b6040518290600090600160a060020a038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a4505050565b81810182811015611d7a57fe5b92915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611dc157805160ff1916838001178555611dee565b82800160010185558215611dee579182015b82811115611dee578251825591602001919060010190611dd3565b50611dfa929150611e62565b5090565b50805460018160011615610100020316600290046000825580601f10611e245750610e4d565b601f016020900490600052602060002090810190610e4d9190611e62565b815481835581811115610a3957600083815260209020610a399181019083015b610a4291905b80821115611dfa5760008155600101611e685600a165627a7a72305820ff4a336888f642e2f1867681060839a3c9ecb34243d6b384a5b83c35c9cfd0160029"}