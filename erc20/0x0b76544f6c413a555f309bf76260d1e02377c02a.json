{"Runs": "200", "SwarmSource": "bzzr://c7c013cd405f93e8bd14ecf05fa89a4a29b5f93ebce5f49b98fc103451ab5c3d", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"newSellPrice\",\"type\":\"uint256\"},{\"name\":\"newBuyPrice\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.13+commit.fb4cb1a", "ConstructorArguments": "", "SourceCode": "pragma solidity ^0.4.13; contract owned { address public owner;\r\n  function owned() {\r\n      owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner {\r\n      require(msg.sender == owner);\r\n      _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n      owner = newOwner;\r\n  }\r\n}\r\ncontract tokenRecipient { function receiveApproval(address from, uint256 value, address token, bytes extraData); }\r\ncontract token { /*Public variables of the token*/ string public name; string public symbol; uint8 public decimals; uint256 public totalSupply;\r\n  /* This creates an array with all balances */\r\n  mapping (address => uint256) public balanceOf;\r\n  mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n  /* This generates a public event on the blockchain that will notify clients */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /* This notifies clients about the amount burnt */\r\n  event Burn(address indexed from, uint256 value);\r\n\r\n  /* Initializes contract with initial supply tokens to the creator of the contract */\r\n  function token(\r\n      uint256 initialSupply,\r\n      string tokenName,\r\n      uint8 decimalUnits,\r\n      string tokenSymbol\r\n      ) {\r\n      balanceOf[msg.sender] = initialSupply;              // Give the creator all initial tokens\r\n      totalSupply = initialSupply;                        // Update total supply\r\n      name = tokenName;                                   // Set the name for display purposes\r\n      symbol = tokenSymbol;                               // Set the symbol for display purposes\r\n      decimals = decimalUnits;                            // Amount of decimals for display purposes\r\n  }\r\n\r\n  /* Internal transfer, only can be called by this contract */\r\n  function _transfer(address _from, address _to, uint _value) internal {\r\n      require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\r\n      require (balanceOf[_from] > _value);                // Check if the sender has enough\r\n      require (balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows\r\n      balanceOf[_from] -= _value;                         // Subtract from the sender\r\n      balanceOf[_to] += _value;                            // Add the same to the recipient\r\n      Transfer(_from, _to, _value);\r\n  }\r\n\r\n  /// @notice Send `_value` tokens to `_to` from your account\r\n  /// @param _to The address of the recipient\r\n  /// @param _value the amount to send\r\n  function transfer(address _to, uint256 _value) {\r\n      _transfer(msg.sender, _to, _value);\r\n  }\r\n\r\n  /// @notice Send `_value` tokens to `_to` in behalf of `_from`\r\n  /// @param _from The address of the sender\r\n  /// @param _to The address of the recipient\r\n  /// @param _value the amount to send\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n      require (_value < allowance[_from][msg.sender]);     // Check allowance\r\n      allowance[_from][msg.sender] -= _value;\r\n      _transfer(_from, _to, _value);\r\n      return true;\r\n  }\r\n\r\n  /// @notice Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n  /// @param _spender The address authorized to spend\r\n  /// @param _value the max amount they can spend\r\n  function approve(address _spender, uint256 _value)\r\n      returns (bool success) {\r\n      allowance[msg.sender][_spender] = _value;\r\n      return true;\r\n  }\r\n\r\n  /// @notice Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\r\n  /// @param _spender The address authorized to spend\r\n  /// @param _value the max amount they can spend\r\n  /// @param _extraData some extra information to send to the approved contract\r\n  function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n      returns (bool success) {\r\n      tokenRecipient spender = tokenRecipient(_spender);\r\n      if (approve(_spender, _value)) {\r\n          spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n          return true;\r\n      }\r\n  }        \r\n\r\n  /// @notice Remove `_value` tokens from the system irreversibly\r\n  /// @param _value the amount of money to burn\r\n  function burn(uint256 _value) returns (bool success) {\r\n      require (balanceOf[msg.sender] > _value);            // Check if the sender has enough\r\n      balanceOf[msg.sender] -= _value;                      // Subtract from the sender\r\n      totalSupply -= _value;                                // Updates totalSupply\r\n      Burn(msg.sender, _value);\r\n      return true;\r\n  }\r\n\r\n  function burnFrom(address _from, uint256 _value) returns (bool success) {\r\n      require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\r\n      require(_value <= allowance[_from][msg.sender]);    // Check allowance\r\n      balanceOf[_from] -= _value;                         // Subtract from the targeted balance\r\n      allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\r\n      totalSupply -= _value;                              // Update totalSupply\r\n      Burn(_from, _value);\r\n      return true;\r\n  }\r\n}\r\ncontract INTToken is owned, token {\r\n  uint256 public sellPrice;\r\n  uint256 public buyPrice;\r\n\r\n  mapping (address => bool) public frozenAccount;\r\n\r\n  /* This generates a public event on the blockchain that will notify clients */\r\n  event FrozenFunds(address target, bool frozen);\r\n\r\n  /* Initializes contract with initial supply tokens to the creator of the contract */\r\n  function INTToken(\r\n      uint256 initialSupply,\r\n      string tokenName,\r\n      uint8 decimalUnits,\r\n      string tokenSymbol\r\n  ) token (initialSupply, tokenName, decimalUnits, tokenSymbol) {}\r\n\r\n  /* Internal transfer, only can be called by this contract */\r\n  function _transfer(address _from, address _to, uint _value) internal {\r\n      require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\r\n      require (balanceOf[_from] > _value);                // Check if the sender has enough\r\n      require (balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows\r\n      require(!frozenAccount[_from]);                     // Check if sender is frozen\r\n      require(!frozenAccount[_to]);                       // Check if recipient is frozen\r\n      balanceOf[_from] -= _value;                         // Subtract from the sender\r\n      balanceOf[_to] += _value;                           // Add the same to the recipient\r\n      Transfer(_from, _to, _value);\r\n  }\r\n\r\n  /// @notice Create `mintedAmount` tokens and send it to `target`\r\n  /// @param target Address to receive the tokens\r\n  /// @param mintedAmount the amount of tokens it will receive\r\n  function mintToken(address target, uint256 mintedAmount) onlyOwner {\r\n      balanceOf[target] += mintedAmount;\r\n      totalSupply += mintedAmount;\r\n      Transfer(0, this, mintedAmount);\r\n      Transfer(this, target, mintedAmount);\r\n  }\r\n\r\n  /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\r\n  /// @param target Address to be frozen\r\n  /// @param freeze either to freeze it or not\r\n  function freezeAccount(address target, bool freeze) onlyOwner {\r\n      frozenAccount[target] = freeze;\r\n      FrozenFunds(target, freeze);\r\n  }\r\n\r\n  /// @notice Allow users to buy tokens for `newBuyPrice` eth and sell tokens for `newSellPrice` eth\r\n  /// @param newSellPrice Price the users can sell to the contract\r\n  /// @param newBuyPrice Price users can buy from the contract\r\n  function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner {\r\n      sellPrice = newSellPrice;\r\n      buyPrice = newBuyPrice;\r\n  }\r\n\r\n  /// @notice Buy tokens from contract by sending ether\r\n  function buy() payable {\r\n      uint amount = msg.value / buyPrice;               // calculates the amount\r\n      _transfer(this, msg.sender, amount);              // makes the transfers\r\n  }\r\n\r\n  /// @notice Sell `amount` tokens to contract\r\n  /// @param amount amount of tokens to be sold\r\n  function sell(uint256 amount) {\r\n      require(this.balance >= amount * sellPrice);      // checks if the contract has enough ether to buy\r\n      _transfer(msg.sender, this, amount);              // makes the transfers\r\n      msg.sender.transfer(amount * sellPrice);          // sends ether to the seller. It's important to do this last to avoid recursion attacks\r\n  }\r\n}\r\ncontract INT is INTToken(1000000000000000, \"Internet Node Token\", 6, \"INT\") {}", "OptimizationUsed": "1", "ContractName": "INT", "ByteCode": "0x606060405236156101255763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305fefda7811461012a57806306fdde0314610145578063095ea7b3146101d057806318160ddd1461020657806323b872dd1461022b578063313ce5671461026757806342966c68146102905780634b750334146102ba57806370a08231146102df57806379c650681461031057806379cc6790146103345780638620410b1461036a5780638da5cb5b1461038f57806395d89b41146103be578063a6f2ae3a14610449578063a9059cbb14610453578063b414d4b614610477578063cae9ca51146104aa578063dd62ed3e14610523578063e4849b321461055a578063e724529c14610572578063f2fde38b14610598575b600080fd5b341561013557600080fd5b6101436004356024356105b9565b005b341561015057600080fd5b6101586105e4565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101955780820151818401525b60200161017c565b50505050905090810190601f1680156101c25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101db57600080fd5b6101f2600160a060020a0360043516602435610682565b604051901515815260200160405180910390f35b341561021157600080fd5b6102196106b3565b60405190815260200160405180910390f35b341561023657600080fd5b6101f2600160a060020a03600435811690602435166044356106b9565b604051901515815260200160405180910390f35b341561027257600080fd5b61027a610730565b60405160ff909116815260200160405180910390f35b341561029b57600080fd5b6101f2600435610739565b604051901515815260200160405180910390f35b34156102c557600080fd5b6102196107c4565b60405190815260200160405180910390f35b34156102ea57600080fd5b610219600160a060020a03600435166107ca565b60405190815260200160405180910390f35b341561031b57600080fd5b610143600160a060020a03600435166024356107dc565b005b341561033f57600080fd5b6101f2600160a060020a03600435166024356108a4565b604051901515815260200160405180910390f35b341561037557600080fd5b610219610981565b60405190815260200160405180910390f35b341561039a57600080fd5b6103a2610987565b604051600160a060020a03909116815260200160405180910390f35b34156103c957600080fd5b610158610996565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101955780820151818401525b60200161017c565b50505050905090810190601f1680156101c25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610143610a34565b005b341561045e57600080fd5b610143600160a060020a0360043516602435610a55565b005b341561048257600080fd5b6101f2600160a060020a0360043516610a65565b604051901515815260200160405180910390f35b34156104b557600080fd5b6101f260048035600160a060020a03169060248035919060649060443590810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650610a7a95505050505050565b604051901515815260200160405180910390f35b341561052e57600080fd5b610219600160a060020a0360043581169060243516610bae565b60405190815260200160405180910390f35b341561056557600080fd5b610143600435610bcb565b005b341561057d57600080fd5b610143600160a060020a03600435166024351515610c2c565b005b34156105a357600080fd5b610143600160a060020a0360043516610cba565b005b60005433600160a060020a039081169116146105d457600080fd5b600782905560088190555b5b5050565b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561067a5780601f1061064f5761010080835404028352916020019161067a565b820191906000526020600020905b81548152906001019060200180831161065d57829003601f168201915b505050505081565b600160a060020a03338116600090815260066020908152604080832093861683529290522081905560015b92915050565b60045481565b600160a060020a0380841660009081526006602090815260408083203390941683529290529081205482106106ed57600080fd5b600160a060020a0380851660009081526006602090815260408083203390941683529290522080548390039055610725848484610d02565b5060015b9392505050565b60035460ff1681565b600160a060020a03331660009081526005602052604081205482901161075e57600080fd5b600160a060020a03331660008181526005602052604090819020805485900390556004805485900390557fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59084905190815260200160405180910390a25060015b919050565b60075481565b60056020526000908152604090205481565b60005433600160a060020a039081169116146107f757600080fd5b600160a060020a03808316600090815260056020526040808220805485019055600480548501905530909216917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9084905190815260200160405180910390a381600160a060020a031630600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405190815260200160405180910390a35b5b5050565b600160a060020a038216600090815260056020526040812054829010156108ca57600080fd5b600160a060020a03808416600090815260066020908152604080832033909416835292905220548211156108fd57600080fd5b600160a060020a038084166000818152600560209081526040808320805488900390556006825280832033909516835293905282902080548590039055600480548590039055907fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59084905190815260200160405180910390a25060015b92915050565b60085481565b600054600160a060020a031681565b60028054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561067a5780601f1061064f5761010080835404028352916020019161067a565b820191906000526020600020905b81548152906001019060200180831161065d57829003601f168201915b505050505081565b600060085434811515610a4357fe5b049050610a51303383610d02565b5b50565b6105df338383610d02565b5b5050565b60096020526000908152604090205460ff1681565b600083610a878185610682565b15610ba55780600160a060020a0316638f4ffcb1338630876040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610b3e5780820151818401525b602001610b25565b50505050905090810190601f168015610b6b5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1515610b8c57600080fd5b6102c65a03f11515610b9d57600080fd5b505050600191505b5b509392505050565b600660209081526000928352604080842090915290825290205481565b6007548102600160a060020a033016311015610be657600080fd5b610bf1333083610d02565b33600160a060020a03166108fc60075483029081150290604051600060405180830381858888f193505050501515610a5157600080fd5b5b50565b60005433600160a060020a03908116911614610c4757600080fd5b600160a060020a03821660009081526009602052604090819020805460ff19168315151790557f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a5908390839051600160a060020a039092168252151560208201526040908101905180910390a15b5b5050565b60005433600160a060020a03908116911614610cd557600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b50565b600160a060020a0382161515610d1757600080fd5b600160a060020a038316600090815260056020526040902054819011610d3c57600080fd5b600160a060020a03821660009081526005602052604090205481810111610d6257600080fd5b600160a060020a03831660009081526009602052604090205460ff1615610d8857600080fd5b600160a060020a03821660009081526009602052604090205460ff1615610dae57600080fd5b600160a060020a038084166000818152600560205260408082208054869003905592851680825290839020805485019055917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9084905190815260200160405180910390a35b5050505600a165627a7a72305820c7c013cd405f93e8bd14ecf05fa89a4a29b5f93ebce5f49b98fc103451ab5c3d0029"}