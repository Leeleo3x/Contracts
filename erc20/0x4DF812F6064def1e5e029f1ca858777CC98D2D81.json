{"Runs": "200", "SwarmSource": "", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"_dataContractAddress\",\"type\":\"address\"}],\"name\":\"setDataContract\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_alliesContractAddress\",\"type\":\"address\"}],\"name\":\"setAlliesContract\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dataContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_curratorAddress\",\"type\":\"address\"}],\"name\":\"setXauForGasCurrator\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwnerAdress\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_meltingContractAddress\",\"type\":\"address\"}],\"name\":\"setMeltingContract\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"status\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_source\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferViaProxy\",\"outputs\":[{\"name\":\"status\",\"type\":\"bool\"},{\"name\":\"sendFrom\",\"type\":\"address\"},{\"name\":\"sentTo\",\"type\":\"address\"},{\"name\":\"sentToAmount\",\"type\":\"uint256\"},{\"name\":\"burnAddress\",\"type\":\"address\"},{\"name\":\"burnAmount\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"getGasForXau\",\"outputs\":[{\"name\":\"sucess\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockdown\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"alliesContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalGoldSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"doBurnFromContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proxyContractAddress\",\"type\":\"address\"}],\"name\":\"setProxyContract\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_accountAddress\",\"type\":\"address\"}],\"name\":\"isAccountLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fillGas\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_xaurAmount\",\"type\":\"uint256\"},{\"name\":\"_goldAmount\",\"type\":\"uint256\"}],\"name\":\"doMelt\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_coinageAddresses\",\"type\":\"address[]\"},{\"name\":\"_coinageAmounts\",\"type\":\"uint256[]\"},{\"name\":\"_usdAmount\",\"type\":\"uint256\"},{\"name\":\"_xaurCoined\",\"type\":\"uint256\"},{\"name\":\"_goldBought\",\"type\":\"uint256\"}],\"name\":\"doCoinage\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burningAdress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coinageContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dev\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"status\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"freezeCoin\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_source\",\"type\":\"address\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFromViaProxy\",\"outputs\":[{\"name\":\"status\",\"type\":\"bool\"},{\"name\":\"sendFrom\",\"type\":\"address\"},{\"name\":\"sentTo\",\"type\":\"address\"},{\"name\":\"sentToAmount\",\"type\":\"uint256\"},{\"name\":\"burnAddress\",\"type\":\"address\"},{\"name\":\"burnAmount\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"lockAccount\",\"outputs\":[{\"name\":\"answer\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_source\",\"type\":\"address\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowanceFromProxy\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proxyContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_source\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approveFromProxy\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"meltingContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_coinageContractAddress\",\"type\":\"address\"}],\"name\":\"setCoinageContract\",\"outputs\":[],\"type\":\"function\"},{\"inputs\":[{\"name\":\"_burningAddress\",\"type\":\"address\"}],\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"burningType\",\"type\":\"XaurumToken.BurningType\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"xaurAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"goldAmount\",\"type\":\"uint256\"}],\"name\":\"Melt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"coinageId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"usdAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"xaurAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"goldAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalGoldSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"Coinage\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.3.3+commit.4dc1cb1", "ConstructorArguments": "000000000000000000000000ed3f8c4c63524a376833b0f687487182c9f9bbf8", "SourceCode": "contract ERC20TokenInterface {\r\n\r\n    /// @return total amount of tokens\r\n    function totalSupply() constant returns (uint256 supply) {}\r\n\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {}\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _value) returns (bool success) {}\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\r\n\r\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of wei to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint256 _value) returns (bool success) {}\r\n\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}   \r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract XaurumProxyERC20 is ERC20TokenInterface {\r\n\r\n    bool public xaurumProxyWorking;\r\n\r\n    XaurumToken xaurumTokenReference; \r\n\r\n    address proxyCurrator;\r\n    address owner;\r\n    address dev;\r\n\r\n    /* Public variables of the token */\r\n    string public standard = 'XaurumERCProxy';\r\n    string public name = 'Xaurum';\r\n    string public symbol = 'XAUR';\r\n    uint8 public decimals = 8;\r\n\r\n\r\n    modifier isWorking(){\r\n        if (xaurumProxyWorking && !xaurumTokenReference.lockdown()){\r\n            _\r\n        }\r\n    }\r\n\r\n    function XaurumProxyERC20(){\r\n        dev = msg.sender;\r\n        xaurumProxyWorking = true;\r\n    }\r\n\r\n    function setTokenReference(address _xaurumTokenAress) returns (bool){\r\n        if (msg.sender == proxyCurrator){\r\n            xaurumTokenReference = XaurumToken(_xaurumTokenAress);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function EnableDisableTokenProxy() returns (bool){\r\n        if (msg.sender == proxyCurrator){        \r\n            xaurumProxyWorking = !xaurumProxyWorking;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function setProxyCurrator(address _newCurratorAdress) returns (bool){\r\n        if (msg.sender == owner || msg.sender == dev){        \r\n            proxyCurrator = _newCurratorAdress;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function setOwner(address _newOwnerAdress) returns (bool){\r\n        if ( msg.sender == dev ){        \r\n            owner = _newOwnerAdress;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function totalSupply() constant returns (uint256 supply) {\r\n        return xaurumTokenReference.totalSupply();\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return xaurumTokenReference.balanceOf(_owner);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) isWorking returns (bool success) {\r\n        bool answerStatus;\r\n        address sentFrom;\r\n        address sentTo;\r\n        uint256 sentToAmount;\r\n        address burningAddress;\r\n        uint256 burningAmount;\r\n\r\n        (answerStatus, sentFrom, sentTo, sentToAmount, burningAddress, burningAmount) = xaurumTokenReference.transferViaProxy(msg.sender, _to, _value);\r\n        if(answerStatus){\r\n            Transfer(sentFrom, sentTo, sentToAmount);\r\n            Transfer(sentFrom, burningAddress, burningAmount);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) isWorking returns (bool success) {\r\n        bool answerStatus;\r\n        address sentFrom;\r\n        address sentTo;\r\n        uint256 sentToAmount;\r\n        address burningAddress;\r\n        uint256 burningAmount;\r\n\r\n        (answerStatus, sentFrom, sentTo, sentToAmount, burningAddress, burningAmount) = xaurumTokenReference.transferFromViaProxy(msg.sender, _from, _to, _value);\r\n        if(answerStatus){\r\n            Transfer(sentFrom, sentTo, sentToAmount);\r\n            Transfer(sentFrom, burningAddress, burningAmount);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) isWorking returns (bool success) {\r\n        if (xaurumTokenReference.approveFromProxy(msg.sender, _spender, _value)){\r\n            Approval(msg.sender, _spender, _value);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return xaurumTokenReference.allowanceFromProxy(msg.sender, _owner, _spender);\r\n    } \r\n}\r\n\r\ncontract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\r\n\r\ncontract XaurumToken {\r\n    \r\n    /* Public variables of the token */\r\n    string public standard = 'Xaurum v1.0';\r\n    string public name = 'Xaurum';\r\n    string public symbol = 'XAUR';\r\n    uint8 public decimals = 8;\r\n\r\n    uint256 public totalSupply = 0;\r\n    uint256 public totalGoldSupply = 0;\r\n    bool public lockdown = false;\r\n    uint256 numberOfCoinages;\r\n\r\n    /* Private variabiles for the token */\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    mapping (address => uint) lockedAccounts;\r\n\r\n    /* Events */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event Burn(address from, uint256 value, BurningType burningType);\r\n    event Melt(uint256 xaurAmount, uint256 goldAmount);\r\n    event Coinage(uint256 coinageId, uint256 usdAmount, uint256 xaurAmount, uint256 goldAmount, uint256 totalGoldSupply, uint256 totalSupply);\r\n\r\n    /*enums*/\r\n    enum BurningType { TxtFee, AllyDonation, ServiceFee }\r\n\r\n   /* Contracts */\r\n    XaurumMeltingContract public meltingContract;\r\n    function setMeltingContract(address _meltingContractAddress){\r\n        if (msg.sender == owner || msg.sender == dev){\r\n            meltingContract = XaurumMeltingContract(_meltingContractAddress);\r\n        }\r\n    }\r\n\r\n    XaurumDataContract public dataContract;\r\n    function setDataContract(address _dataContractAddress){\r\n        if (msg.sender == owner || msg.sender == dev){\r\n            dataContract = XaurumDataContract(_dataContractAddress);\r\n        }\r\n    }\r\n\r\n    XaurumCoinageContract public coinageContract;\r\n    function setCoinageContract(address _coinageContractAddress){\r\n        if (msg.sender == owner || msg.sender == dev){\r\n            coinageContract = XaurumCoinageContract(_coinageContractAddress);\r\n        }\r\n    }\r\n\r\n    XaurmProxyContract public proxyContract;\r\n    function setProxyContract(address _proxyContractAddress){\r\n        if (msg.sender == owner || msg.sender == dev){\r\n            proxyContract = XaurmProxyContract(_proxyContractAddress);\r\n        }\r\n    }\r\n\r\n    XaurumAlliesContract public alliesContract;\r\n    function setAlliesContract(address _alliesContractAddress){\r\n        if (msg.sender == owner || msg.sender == dev){\r\n            alliesContract = XaurumAlliesContract(_alliesContractAddress);\r\n        }\r\n    }\r\n    \r\n    \r\n    \r\n\r\n    /* owner */\r\n    address public owner;\r\n    function setOwner(address _newOwnerAdress) returns (bool){\r\n        if ( msg.sender == dev ){        \r\n            owner = _newOwnerAdress;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    address public dev;\r\n\r\n    /* Xaur for gas */\r\n    address xaurForGasCurrator;\r\n    function setXauForGasCurrator(address _curratorAddress){\r\n        if (msg.sender == owner || msg.sender == dev){\r\n            xaurForGasCurrator = _curratorAddress;\r\n        }\r\n    }\r\n\r\n    /* Burrning */\r\n    address public burningAdress;\r\n\r\n    /* Constructor */\r\n    function XaurumToken(address _burningAddress) { \r\n        burningAdress = _burningAddress;\r\n        lockdown = false;\r\n        dev = msg.sender;\r\n       \r\n        \r\n        // initial\r\n         numberOfCoinages += 1;\r\n         balances[0x097B7b672fe0dc3eF61f53B954B3DCC86382e7B9] += 5999319593600000;\r\n         totalSupply += 5999319593600000;\r\n         totalGoldSupply += 1696620000000;\r\n         Coinage(numberOfCoinages, 0, 5999319593600000, 1696620000000, totalGoldSupply, totalSupply);      \r\n\t\t\r\n\r\n        // Mint 1\r\n         numberOfCoinages += 1;\r\n         balances[0x097B7b672fe0dc3eF61f53B954B3DCC86382e7B9] += 1588947591000000;\r\n         totalSupply += 1588947591000000;\r\n         totalGoldSupply += 1106042126000;\r\n         Coinage(numberOfCoinages, 60611110000000, 1588947591000000, 1106042126000, totalGoldSupply, totalSupply);\r\n        \t\t\r\n\t\t\r\n        // Mint 2\r\n         numberOfCoinages += 1;\r\n         balances[0x097B7b672fe0dc3eF61f53B954B3DCC86382e7B9] += 151127191000000;\r\n         totalSupply += 151127191000000;\r\n         totalGoldSupply += 110134338200;\r\n         Coinage(numberOfCoinages, 6035361000000, 151127191000000, 110134338200, totalGoldSupply, totalSupply);\r\n        \r\n\t\t\r\n\t\t   // Mint 3\r\n         numberOfCoinages += 1;\r\n         balances[0x097B7b672fe0dc3eF61f53B954B3DCC86382e7B9] += 63789854418800;\r\n         totalSupply += 63789854418800;\r\n         totalGoldSupply +=  46701000000;\r\n         Coinage(numberOfCoinages, 2559215000000, 63789854418800, 46701000000, totalGoldSupply, totalSupply);\r\n        \r\n\r\n\t\t   // Mint 4\r\n         numberOfCoinages += 1;\r\n         balances[0x097B7b672fe0dc3eF61f53B954B3DCC86382e7B9] +=  393015011191000;\r\n         totalSupply += 393015011191000;\r\n         totalGoldSupply +=  290692000000;\r\n         Coinage(numberOfCoinages, 15929931000000, 393015011191000, 290692000000, totalGoldSupply, totalSupply);\r\n        \r\n\r\n\t\t   // Mint 5\r\n         numberOfCoinages += 1;\r\n         balances[0x097B7b672fe0dc3eF61f53B954B3DCC86382e7B9] +=  49394793870000;\r\n         totalSupply += 49394793870000;\r\n         totalGoldSupply +=  36891368614;\r\n         Coinage(numberOfCoinages, 2021647000000, 49394793870000, 36891368614, totalGoldSupply, totalSupply);\r\n    }\r\n    \r\n    function freezeCoin(){\r\n        if (msg.sender == owner || msg.sender == dev){\r\n            lockdown = !lockdown;\r\n        }\r\n    }\r\n\r\n    /* Get balance of the account */\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /* Send coins */\r\n    function transfer(address _to, uint256 _amount) returns (bool status) {\r\n        uint256 goldFee = dataContract.goldFee();\r\n\r\n        if (balances[msg.sender] >= _amount &&                                  // Check if the sender has enough\r\n            balances[_to] + _amount > balances[_to] &&                          // Check for overflows\r\n            _amount > goldFee &&                                                // Check if there is something left after burning fee\r\n            !lockdown &&                                                        // Check if coin is on lockdown\r\n            lockedAccounts[msg.sender] <= block.number) {                       // Check if the account is locked\r\n            balances[msg.sender] -= _amount;                                    // Subtract from the sender minus the fee\r\n            balances[_to] += (_amount - goldFee );                              // Add the same to the recipient\r\n            Transfer(msg.sender, _to, (_amount - goldFee ));                    // Notify anyone listening that this transfer took place\r\n            doBurn(msg.sender, goldFee, BurningType.TxtFee);                    // Notify anyone listening that this burn took place\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    /* A contract attempts to get the coins and sends them*/\r\n    function transferFrom(address _from, address _to, uint256 _amount) returns (bool status) {\r\n        uint256 goldFee = dataContract.goldFee();\r\n\r\n        if (balances[_from] >= _amount &&                                  // Check if the sender has enough\r\n            balances[_to] + _amount > balances[_to] &&                          // Check for overflows\r\n            _amount > goldFee &&                                                // Check if there is something left after burning fee\r\n            !lockdown &&                                                        // Check if coin is on lockdown\r\n            lockedAccounts[_from] <= block.number) {                       // Check if the account is locked\r\n            if (_amount > allowed[_from][msg.sender]){                          // Check allowance\r\n                return false;\r\n            }\r\n            balances[_from] -= _amount;                                    // Subtract from the sender minus the fee\r\n            balances[_to] += (_amount - goldFee);                               // Add the same to the recipient\r\n            Transfer(_from, _to, (_amount - goldFee));                     // Notify anyone listening that this transfer took place\r\n            doBurn(_from, goldFee, BurningType.TxtFee);                    \r\n            allowed[_from][msg.sender] -= _amount;                              // Update allowance\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    /* Allow another contract to spend some tokens in your behalf */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n        returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n        return true;\r\n    }\r\n\r\n     function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n    /* Send coins via proxy */\r\n    function transferViaProxy(address _source, address _to, uint256 _amount) returns (bool status, address sendFrom, address sentTo, uint256 sentToAmount, address burnAddress, uint256 burnAmount){\r\n        if (!proxyContract.isProxyLegit(msg.sender)){                                        // Check if proxy is legit\r\n            return (false, 0, 0, 0, 0, 0);\r\n        }\r\n\r\n        uint256 goldFee = dataContract.goldFee();\r\n\r\n        if (balances[_source] >= _amount &&                                     // Check if the sender has enough\r\n            balances[_to] + _amount > balances[_to] &&                          // Check for overflows\r\n            _amount > goldFee &&                                                // Check if there is something left after burning fee\r\n            !lockdown &&                                                        // Check if coin is on lockdown\r\n            lockedAccounts[_source] <= block.number) {                          // Check if the account is locked\r\n            \r\n            balances[_source] -= _amount;                                       // Subtract from the sender minus the fee\r\n            balances[_to] += (_amount - goldFee );                              // Add the same to the recipient\r\n            Transfer(_source, _to, ( _amount - goldFee ));                    // Notify anyone listening that this transfer took place\r\n            doBurn(_source, goldFee, BurningType.TxtFee);                         // Notify anyone listening that this burn took place\r\n        \r\n            return (true, _source, _to, (_amount - goldFee), burningAdress, goldFee);\r\n        } else {\r\n            return (false, 0, 0, 0, 0, 0);\r\n        }\r\n    }\r\n    \r\n    /* a contract attempts to get the coins and sends them via proxy */\r\n    function transferFromViaProxy(address _source, address _from, address _to, uint256 _amount) returns (bool status, address sendFrom, address sentTo, uint256 sentToAmount, address burnAddress, uint256 burnAmount) {\r\n        if (!proxyContract.isProxyLegit(msg.sender)){                                            // Check if proxy is legit\r\n            return (false, 0, 0, 0, 0, 0);\r\n        }\r\n\r\n        uint256 goldFee = dataContract.goldFee();\r\n\r\n        if (balances[_from] >= _amount &&                                       // Check if the sender has enough\r\n            balances[_to] + _amount > balances[_to] &&                          // Check for overflows\r\n            _amount > goldFee &&                                                // Check if there is something left after burning fee\r\n            !lockdown &&                                                        // Check if coin is on lockdown\r\n            lockedAccounts[_from] <= block.number) {                            // Check if the account is locked\r\n\r\n            if (_amount > allowed[_from][_source]){                             // Check allowance\r\n                return (false, 0, 0, 0, 0, 0); \r\n            }               \r\n\r\n            balances[_from] -= _amount;                                         // Subtract from the sender minus the fee\r\n            balances[_to] += ( _amount - goldFee );                             // Add the same to the recipient\r\n            Transfer(_from, _to, ( _amount - goldFee ));                        // Notify anyone listening that this transfer took place\r\n            doBurn(_from, goldFee, BurningType.TxtFee);\r\n            allowed[_from][_source] -= _amount;                                 // Update allowance\r\n            return (true, _from, _to, (_amount - goldFee), burningAdress, goldFee);\r\n        } else {\r\n            return (false, 0, 0, 0, 0, 0);\r\n        }\r\n    }\r\n    \r\n     function approveFromProxy(address _source, address _spender, uint256 _value) returns (bool success) {\r\n        if (!proxyContract.isProxyLegit(msg.sender)){                                        // Check if proxy is legit\r\n            return false;\r\n        }\r\n        allowed[_source][_spender] = _value;\r\n        Approval(_source, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowanceFromProxy(address _source, address _owner, address _spender) constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n    \r\n    /* -----------------------------------------------------------------------*/\r\n    \r\n    /* Lock account for X amount of blocks */\r\n    function lockAccount(uint _block) returns (bool answer){\r\n        if (lockedAccounts[msg.sender] < block.number + _block){\r\n            lockedAccounts[msg.sender] = block.number + _block;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function isAccountLocked(address _accountAddress) returns (bool){\r\n        if (lockedAccounts[_accountAddress] > block.number){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    ///\r\n    /// Xaur for gas region\r\n    ///\r\n\r\n    /* user get small amout of wei for a small amout of Xaur */\r\n    function getGasForXau(address _to) returns (bool sucess){\r\n        uint256 xaurForGasLimit = dataContract.xaurForGasLimit();\r\n        uint256 weiForXau = dataContract.weiForXau();\r\n\r\n        if (balances[msg.sender] > xaurForGasLimit && \r\n            balances[xaurForGasCurrator] < balances[xaurForGasCurrator]  + xaurForGasLimit &&\r\n            this.balance > dataContract.weiForXau()) {\r\n            if (_to.send(dataContract.weiForXau())){\r\n                balances[msg.sender] -= xaurForGasLimit;\r\n                balances[xaurForGasCurrator] += xaurForGasLimit;\r\n                return true;\r\n            }\r\n        } \r\n        return false;\r\n    }\r\n    \r\n    /* Currator fills eth through this function */\r\n    function fillGas(){\r\n        if (msg.sender != xaurForGasCurrator) { \r\n            throw; \r\n        }\r\n    }\r\n\r\n    ///\r\n    /// Melting region\r\n    ///\r\n\r\n    function doMelt(uint256 _xaurAmount, uint256 _goldAmount) returns (bool){\r\n        if (msg.sender == address(meltingContract)){\r\n            totalSupply -= _xaurAmount;\r\n            totalGoldSupply -= _goldAmount;\r\n            Melt(_xaurAmount, _goldAmount);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    ///\r\n    /// Proxy region\r\n    ///\r\n\r\n    \r\n\r\n    ///\r\n    /// Coinage region\r\n    ///\r\n    function doCoinage(address[] _coinageAddresses, uint256[] _coinageAmounts, uint256 _usdAmount, uint256 _xaurCoined, uint256 _goldBought) returns (bool){\r\n        if (msg.sender == address(coinageContract) && \r\n            _coinageAddresses.length == _coinageAmounts.length){\r\n            \r\n            totalSupply += _xaurCoined;\r\n            totalGoldSupply += _goldBought;\r\n            numberOfCoinages += 1;\r\n            Coinage(numberOfCoinages, _usdAmount, _xaurCoined, _goldBought, totalGoldSupply, totalSupply);\r\n            for (uint256 cnt = 0; cnt < _coinageAddresses.length; cnt++){\r\n                balances[_coinageAddresses[cnt]] += _coinageAmounts[cnt]; \r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    ///\r\n    /// Burining region\r\n    ///\r\n    function doBurn(address _from, uint256 _amountToBurn, BurningType _burningType) internal {\r\n        balances[burningAdress] += _amountToBurn;                              // Burn the fee\r\n        totalSupply -= _amountToBurn;                                          // Edit total supply\r\n        Burn(_from, _amountToBurn, _burningType);                              // Notify anyone listening that this burn took place\r\n    }\r\n\r\n    function doBurnFromContract(address _from, uint256 _amount) returns (bool){\r\n        if (msg.sender == address(alliesContract)){\r\n            balances[_from] -= _amount;\r\n            doBurn(_from, _amount, BurningType.AllyDonation);\r\n            return true;\r\n        }\r\n        else if(msg.sender == address(coinageContract)){\r\n            balances[_from] -= _amount;\r\n            doBurn(_from, _amount, BurningType.ServiceFee);\r\n            return true;\r\n        }\r\n        else{\r\n            return false;\r\n        }\r\n\r\n    }\r\n\r\n    /* This unnamed function is called whenever someone tries to send ether to it */\r\n    function () {\r\n        throw;     // Prevents accidental sending of ether\r\n    }\r\n}\r\n\r\ncontract XaurumMeltingContract {}\r\n\r\ncontract XaurumAlliesContract {}\r\n\r\ncontract XaurumCoinageContract {}\r\n\r\ncontract XaurmProxyContract{\r\n\r\n    address public owner;\r\n    address public curator;\r\n    address public dev;\r\n\r\n    function XaurmProxyContract(){\r\n        dev = msg.sender;\r\n    }\r\n\r\n    function setProxyCurrator(address _newCurratorAdress) returns (bool){\r\n        if (msg.sender == owner || msg.sender == dev){        \r\n            curator = _newCurratorAdress;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function setOwner(address _newOwnerAdress) returns (bool){\r\n        if ( msg.sender == dev ){        \r\n            owner = _newOwnerAdress;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /* Proxy Contract */\r\n    \r\n    address[] approvedProxys; \r\n    mapping (address => bool) proxyList;\r\n    \r\n    /* Adds new proxy to proxy lists and grants him the permission to use transferViaProxy */\r\n    function addNewProxy(address _proxyAdress){\r\n        if(msg.sender == curator){\r\n            proxyList[_proxyAdress] = true;\r\n            approvedProxys.push(_proxyAdress);\r\n        }\r\n    }\r\n\r\n    function isProxyLegit(address _proxyAddress) returns (bool){\r\n        return proxyList[_proxyAddress];\r\n    }\r\n    \r\n    function getApprovedProxys() returns (address[] proxys){\r\n        return approvedProxys;\r\n    }\r\n\r\n    function () {\r\n        throw;\r\n    }\r\n}\r\n\r\ncontract XaurumDataContract {\r\n\r\n    /* Minting data */\r\n    uint256 public xauToEur;\r\n    uint256 public goldToEur;\r\n    uint256 public mintingDataUpdatedAtBlock;\r\n\r\n    /* Gas for xaur data */\r\n    uint256 public xaurForGasLimit;\r\n    uint256 public weiForXau;\r\n    uint256 public gasForXaurDataUpdateAtBlock;\r\n\r\n    /* Other data */\r\n    uint256 public goldFee;\r\n    uint256 public goldFeeDataUpdatedAtBlock;\r\n\r\n    address public owner;\r\n    address public curator;\r\n    address public dev;\r\n\r\n    function XaurumDataContract(){\r\n        xaurForGasLimit = 100000000;\r\n        weiForXau = 100000000000000000;\r\n        goldFee = 50000000;\r\n       // dev = _dev;\r\n\t   dev = msg.sender;\r\n    }\r\n\r\n    function setProxyCurrator(address _newCurratorAdress) returns (bool){\r\n        if (msg.sender == owner || msg.sender == dev){        \r\n            curator = _newCurratorAdress;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function setOwner(address _newOwnerAdress) returns (bool){\r\n        if ( msg.sender == dev ){        \r\n            owner = _newOwnerAdress;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function updateMintingData(uint256 _xauToEur, uint256 _goldToEur) returns (bool status){\r\n        if (msg.sender == curator || msg.sender == dev){\r\n            xauToEur = _xauToEur;\r\n            goldToEur = _goldToEur;\r\n            mintingDataUpdatedAtBlock = block.number;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function updateGasForXaurData(uint256 _xaurForGasLimit, uint256 _weiForXau) returns (bool status){\r\n        if (msg.sender == curator || msg.sender == dev){\r\n            xaurForGasLimit = _xaurForGasLimit;\r\n            weiForXau = _weiForXau;\r\n            gasForXaurDataUpdateAtBlock = block.number;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function updateGoldFeeData(uint256 _goldFee) returns (bool status){\r\n        if (msg.sender == curator || msg.sender == dev){\r\n            goldFee = _goldFee;\r\n            goldFeeDataUpdatedAtBlock = block.number;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function () {\r\n        throw;\r\n    }\r\n}", "OptimizationUsed": "1", "ContractName": "XaurumToken", "ByteCode": ""}