{"Runs": "200", "SwarmSource": "bzzr://3a747b7138bbec1852c73fa0a86d993a67b8eee8a327faef0e8b853b2076471a", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"removeTokenFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"mintWithTokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintingFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.25+commit.59dbf8f1", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000007476f70686572730000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024747000000000000000000000000000000000000000000000000000000000000", "SourceCode": "pragma solidity ^0.4.24;\r\n\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n    function add(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        role.bearer[account] = true;\r\n    }\r\n    function remove(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        role.bearer[account] = false;\r\n    }\r\n    function has(Role storage role, address account)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        require(account != address(0));\r\n        return role.bearer[account];\r\n    }\r\n}\r\ncontract MinterRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event MinterAdded(address indexed account);\r\n    event MinterRemoved(address indexed account);\r\n\r\n    Roles.Role private minters;\r\n\r\n    constructor() public {\r\n        minters.add(msg.sender);\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(isMinter(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isMinter(address account) public view returns (bool) {\r\n        return minters.has(account);\r\n    }\r\n\r\n    function addMinter(address account) public onlyMinter {\r\n        minters.add(account);\r\n        emit MinterAdded(account);\r\n    }\r\n\r\n    function renounceMinter() public {\r\n        minters.remove(msg.sender);\r\n    }\r\n\r\n    function _removeMinter(address account) internal {\r\n        minters.remove(account);\r\n        emit MinterRemoved(account);\r\n    }\r\n}\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n        return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n    \r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\ninterface IERC165 {\r\n    function supportsInterface(bytes4 interfaceId)\r\n        external\r\n        view\r\n        returns (bool);\r\n}\r\ncontract ERC165 is IERC165 {\r\n    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\r\n    mapping(bytes4 => bool) internal _supportedInterfaces;\r\n    constructor()\r\n        public\r\n    {\r\n        _registerInterface(_InterfaceId_ERC165);\r\n    }\r\n    function supportsInterface(bytes4 interfaceId)\r\n        external\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _supportedInterfaces[interfaceId];\r\n    }\r\n    function _registerInterface(bytes4 interfaceId)\r\n        internal\r\n    {\r\n        require(interfaceId != 0xffffffff);\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n}\r\ncontract IERC721 is IERC165 {\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 indexed tokenId\r\n    );\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed approved,\r\n        uint256 indexed tokenId\r\n    );\r\n    event ApprovalForAll(\r\n        address indexed owner,\r\n        address indexed operator,\r\n        bool approved\r\n    );\r\n\r\n    function balanceOf(address owner) public view returns (uint256 balance);\r\n    function ownerOf(uint256 tokenId) public view returns (address owner);\r\n\r\n    function approve(address to, uint256 tokenId) public;\r\n    function getApproved(uint256 tokenId)\r\n        public view returns (address operator);\r\n\r\n    function setApprovalForAll(address operator, bool _approved) public;\r\n    function isApprovedForAll(address owner, address operator)\r\n        public view returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 tokenId) public;\r\n    function safeTransferFrom(address from, address to, uint256 tokenId)\r\n        public;\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes data\r\n    )\r\n        public;\r\n}\r\ncontract IERC721Enumerable is IERC721 {\r\n    function totalSupply() public view returns (uint256);\r\n    function tokenOfOwnerByIndex(\r\n        address owner,\r\n        uint256 index\r\n    )\r\n        public\r\n        view\r\n        returns (uint256 tokenId);\r\n\r\n    function tokenByIndex(uint256 index) public view returns (uint256);\r\n}\r\ncontract IERC721Metadata is IERC721 {\r\n    function name() external view returns (string);\r\n    function symbol() external view returns (string);\r\n    function tokenURI(uint256 tokenId) public view returns (string);\r\n}\r\ncontract IERC721Receiver {\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes data\r\n    )\r\n        public\r\n        returns(bytes4);\r\n}\r\ncontract IERC721Full is IERC721, IERC721Enumerable, IERC721Metadata {\r\n}\r\ncontract ERC721 is ERC165, IERC721 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\r\n\r\n    mapping (uint256 => address) private _tokenOwner;\r\n\r\n    mapping (uint256 => address) private _tokenApprovals;\r\n\r\n    mapping (address => uint256) private _ownedTokensCount;\r\n\r\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\r\n\r\n    bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\r\n\r\n    constructor()\r\n        public\r\n    {\r\n        _registerInterface(_InterfaceId_ERC721);\r\n    }\r\n\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        require(owner != address(0));\r\n        return _ownedTokensCount[owner];\r\n    }\r\n\r\n    function ownerOf(uint256 tokenId) public view returns (address) {\r\n        address owner = _tokenOwner[tokenId];\r\n        require(owner != address(0));\r\n        return owner;\r\n    }\r\n\r\n    function approve(address to, uint256 tokenId) public {\r\n        address owner = ownerOf(tokenId);\r\n        require(to != owner);\r\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(owner, to, tokenId);\r\n    }\r\n\r\n    function getApproved(uint256 tokenId) public view returns (address) {\r\n        require(_exists(tokenId));\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    function setApprovalForAll(address to, bool approved) public {\r\n        require(to != msg.sender);\r\n        _operatorApprovals[msg.sender][to] = approved;\r\n        emit ApprovalForAll(msg.sender, to, approved);\r\n    }\r\n\r\n    function isApprovedForAll(\r\n        address owner,\r\n        address operator\r\n    )\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    )\r\n        public\r\n    {\r\n        require(_isApprovedOrOwner(msg.sender, tokenId));\r\n        require(to != address(0));\r\n\r\n        _clearApproval(from, tokenId);\r\n        _removeTokenFrom(from, tokenId);\r\n        _addTokenTo(to, tokenId);\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    )\r\n        public\r\n    {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes _data\r\n    )\r\n        public\r\n    {\r\n        transferFrom(from, to, tokenId);\r\n        require(_checkAndCallSafeTransfer(from, to, tokenId, _data));\r\n    }\r\n\r\n    function _exists(uint256 tokenId) internal view returns (bool) {\r\n        address owner = _tokenOwner[tokenId];\r\n        return owner != address(0);\r\n    }\r\n\r\n    function _isApprovedOrOwner(\r\n        address spender,\r\n        uint256 tokenId\r\n    )\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        address owner = ownerOf(tokenId);\r\n        return (\r\n        spender == owner ||\r\n        getApproved(tokenId) == spender ||\r\n        isApprovedForAll(owner, spender)\r\n        );\r\n    }\r\n\r\n    function _mint(address to, uint256 tokenId) internal {\r\n        require(to != address(0));\r\n        _addTokenTo(to, tokenId);\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    function _burn(address owner, uint256 tokenId) internal {\r\n        _clearApproval(owner, tokenId);\r\n        _removeTokenFrom(owner, tokenId);\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    function _clearApproval(address owner, uint256 tokenId) internal {\r\n        require(ownerOf(tokenId) == owner);\r\n        if (_tokenApprovals[tokenId] != address(0)) {\r\n        _tokenApprovals[tokenId] = address(0);\r\n        }\r\n    }\r\n\r\n    function _addTokenTo(address to, uint256 tokenId) internal {\r\n        require(_tokenOwner[tokenId] == address(0));\r\n        _tokenOwner[tokenId] = to;\r\n        _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\r\n    }\r\n\r\n    function _removeTokenFrom(address from, uint256 tokenId) internal {\r\n        require(ownerOf(tokenId) == from);\r\n        _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\r\n        _tokenOwner[tokenId] = address(0);\r\n    }\r\n\r\n    function _checkAndCallSafeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes _data\r\n    )\r\n        internal\r\n        returns (bool)\r\n    {\r\n        if (!to.isContract()) {\r\n        return true;\r\n        }\r\n        bytes4 retval = IERC721Receiver(to).onERC721Received(\r\n        msg.sender, from, tokenId, _data);\r\n        return (retval == _ERC721_RECEIVED);\r\n    }\r\n}\r\ncontract ERC721Metadata is ERC165, ERC721, IERC721Metadata {\r\n    string internal _name;\r\n\r\n    string internal _symbol;\r\n\r\n    mapping(uint256 => string) private _tokenURIs;\r\n\r\n    bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\r\n\r\n    constructor(string name, string symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n\r\n        _registerInterface(InterfaceId_ERC721Metadata);\r\n    }\r\n\r\n    function name() external view returns (string) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() external view returns (string) {\r\n        return _symbol;\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId) public view returns (string) {\r\n        require(_exists(tokenId));\r\n        return _tokenURIs[tokenId];\r\n    }\r\n\r\n    function _setTokenURI(uint256 tokenId, string uri) internal {\r\n        require(_exists(tokenId));\r\n        _tokenURIs[tokenId] = uri;\r\n    }\r\n\r\n    function _burn(address owner, uint256 tokenId) internal {\r\n        super._burn(owner, tokenId);\r\n\r\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\r\n        delete _tokenURIs[tokenId];\r\n        }\r\n    }\r\n}\r\ncontract ERC721Enumerable is ERC165, ERC721, IERC721Enumerable {\r\n    mapping(address => uint256[]) private _ownedTokens;\r\n\r\n    mapping(uint256 => uint256) private _ownedTokensIndex;\r\n\r\n    uint256[] private _allTokens;\r\n\r\n    mapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n    bytes4 private constant _InterfaceId_ERC721Enumerable = 0x780e9d63;\r\n\r\n    constructor() public {\r\n        _registerInterface(_InterfaceId_ERC721Enumerable);\r\n    }\r\n\r\n    function tokenOfOwnerByIndex(\r\n        address owner,\r\n        uint256 index\r\n    )\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(index < balanceOf(owner));\r\n        return _ownedTokens[owner][index];\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _allTokens.length;\r\n    }\r\n\r\n    function tokenByIndex(uint256 index) public view returns (uint256) {\r\n        require(index < totalSupply());\r\n        return _allTokens[index];\r\n    }\r\n\r\n    function _addTokenTo(address to, uint256 tokenId) internal {\r\n        super._addTokenTo(to, tokenId);\r\n        uint256 length = _ownedTokens[to].length;\r\n        _ownedTokens[to].push(tokenId);\r\n        _ownedTokensIndex[tokenId] = length;\r\n    }\r\n\r\n    function _removeTokenFrom(address from, uint256 tokenId) internal {\r\n        super._removeTokenFrom(from, tokenId);\r\n\r\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n        uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\r\n        uint256 lastToken = _ownedTokens[from][lastTokenIndex];\r\n\r\n        _ownedTokens[from][tokenIndex] = lastToken;\r\n        _ownedTokens[from].length--;\r\n\r\n        _ownedTokensIndex[tokenId] = 0;\r\n        _ownedTokensIndex[lastToken] = tokenIndex;\r\n    }\r\n\r\n    function _mint(address to, uint256 tokenId) internal {\r\n        super._mint(to, tokenId);\r\n\r\n        _allTokensIndex[tokenId] = _allTokens.length;\r\n        _allTokens.push(tokenId);\r\n    }\r\n\r\n    function _burn(address owner, uint256 tokenId) internal {\r\n        super._burn(owner, tokenId);\r\n\r\n        uint256 tokenIndex = _allTokensIndex[tokenId];\r\n        uint256 lastTokenIndex = _allTokens.length.sub(1);\r\n        uint256 lastToken = _allTokens[lastTokenIndex];\r\n\r\n        _allTokens[tokenIndex] = lastToken;\r\n        _allTokens[lastTokenIndex] = 0;\r\n\r\n        _allTokens.length--;\r\n        _allTokensIndex[tokenId] = 0;\r\n        _allTokensIndex[lastToken] = tokenIndex;\r\n    }\r\n}\r\ncontract ERC721Full is ERC721, ERC721Enumerable, ERC721Metadata {\r\n    constructor(string name, string symbol) ERC721Metadata(name, symbol)\r\n        public\r\n    {\r\n    }\r\n}\r\ncontract ERC721Mintable is ERC721Full, MinterRole {\r\n    event MintingFinished();\r\n\r\n    bool private _mintingFinished = false;\r\n\r\n    modifier onlyBeforeMintingFinished() {\r\n        require(!_mintingFinished);\r\n        _;\r\n    }\r\n\r\n    function mintingFinished() public view returns(bool) {\r\n        return _mintingFinished;\r\n    }\r\n\r\n    function mint(\r\n        address to,\r\n        uint256 tokenId\r\n    )\r\n        public\r\n        onlyMinter\r\n        onlyBeforeMintingFinished\r\n        returns (bool)\r\n    {\r\n        _mint(to, tokenId);\r\n        return true;\r\n    }\r\n\r\n    function mintWithTokenURI(\r\n        address to,\r\n        uint256 tokenId,\r\n        string tokenURI\r\n    )\r\n        public\r\n        onlyMinter\r\n        onlyBeforeMintingFinished\r\n        returns (bool)\r\n    {\r\n        mint(to, tokenId);\r\n        _setTokenURI(tokenId, tokenURI);\r\n        return true;\r\n    }\r\n\r\n    function finishMinting()\r\n        public\r\n        onlyMinter\r\n        onlyBeforeMintingFinished\r\n        returns (bool)\r\n    {\r\n        _mintingFinished = true;\r\n        emit MintingFinished();\r\n        return true;\r\n    }\r\n}\r\ncontract ERC721Burnable is ERC721 {\r\n    function burn(uint256 tokenId)\r\n        public\r\n    {\r\n        require(_isApprovedOrOwner(msg.sender, tokenId));\r\n        _burn(ownerOf(tokenId), tokenId);\r\n    }\r\n}\r\ncontract ERC721Contract is ERC721Full, ERC721Mintable, ERC721Burnable {\r\n    constructor(string name, string symbol) public\r\n        ERC721Mintable()\r\n        ERC721Full(name, symbol)\r\n    {}\r\n\r\n    function exists(uint256 tokenId) public view returns (bool) {\r\n        return _exists(tokenId);\r\n    }\r\n\r\n    function setTokenURI(uint256 tokenId, string uri) public {\r\n        _setTokenURI(tokenId, uri);\r\n    }\r\n\r\n    function removeTokenFrom(address from, uint256 tokenId) public {\r\n        _removeTokenFrom(from, tokenId);\r\n    }\r\n}\r\ncontract ERC721Constructor {\r\n    event newERC721(address contractAddress, string name, string symbol, address owner);\r\n\r\n    function CreateAdminERC721(string name, string symbol, address owner) public {\r\n        ERC721Contract ERC721Construct = new ERC721Contract(name, symbol);\r\n        ERC721Construct.addMinter(owner);\r\n        ERC721Construct.renounceMinter();\r\n        emit newERC721(address(ERC721Construct), name, symbol, owner);\r\n    }\r\n}", "OptimizationUsed": "0", "ContractName": "ERC721Contract", "ByteCode": "0x60806040526004361061015f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806301ffc9a71461016457806305d2035b146101c857806306fdde03146101f7578063081812fc14610287578063095ea7b3146102f4578063162094c41461034157806318160ddd146103b45780631c1f6a3f146103df57806323b872dd1461042c5780632f745c591461049957806340c10f19146104fa57806342842e0e1461055f57806342966c68146105cc5780634f558e79146105f95780634f6ccce71461063e57806350bb4e7f1461067f5780636352211e1461072a57806370a08231146107975780637d64bcb4146107ee57806395d89b411461081d578063983b2d56146108ad57806398650275146108f0578063a22cb46514610907578063aa271e1a14610956578063b88d4fde146109b1578063c87b56dd14610a64578063e985e9c514610b0a575b600080fd5b34801561017057600080fd5b506101ae60048036038101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050610b85565b604051808215151515815260200191505060405180910390f35b3480156101d457600080fd5b506101dd610bec565b604051808215151515815260200191505060405180910390f35b34801561020357600080fd5b5061020c610c03565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561024c578082015181840152602081019050610231565b50505050905090810190601f1680156102795780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561029357600080fd5b506102b260048036038101908080359060200190929190505050610ca5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561030057600080fd5b5061033f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610cf6565b005b34801561034d57600080fd5b506103b260048036038101908080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610e3b565b005b3480156103c057600080fd5b506103c9610e49565b6040518082815260200191505060405180910390f35b3480156103eb57600080fd5b5061042a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e56565b005b34801561043857600080fd5b50610497600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e64565b005b3480156104a557600080fd5b506104e4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610f33565b6040518082815260200191505060405180910390f35b34801561050657600080fd5b50610545600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610faa565b604051808215151515815260200191505060405180910390f35b34801561056b57600080fd5b506105ca600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610ff0565b005b3480156105d857600080fd5b506105f760048036038101908080359060200190929190505050611011565b005b34801561060557600080fd5b506106246004803603810190808035906020019092919050505061103b565b604051808215151515815260200191505060405180910390f35b34801561064a57600080fd5b506106696004803603810190808035906020019092919050505061104d565b6040518082815260200191505060405180910390f35b34801561068b57600080fd5b50610710600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611085565b604051808215151515815260200191505060405180910390f35b34801561073657600080fd5b50610755600480360381019080803590602001909291905050506110d7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156107a357600080fd5b506107d8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611155565b6040518082815260200191505060405180910390f35b3480156107fa57600080fd5b506108036111d9565b604051808215151515815260200191505060405180910390f35b34801561082957600080fd5b50610832611259565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610872578082015181840152602081019050610857565b50505050905090810190601f16801561089f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156108b957600080fd5b506108ee600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506112fb565b005b3480156108fc57600080fd5b50610905611369565b005b34801561091357600080fd5b50610954600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080351515906020019092919050505061137f565b005b34801561096257600080fd5b50610997600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114bb565b604051808215151515815260200191505060405180910390f35b3480156109bd57600080fd5b50610a62600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506114d8565b005b348015610a7057600080fd5b50610a8f60048036038101908080359060200190929190505050611500565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610acf578082015181840152602081019050610ab4565b50505050905090810190601f168015610afc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610b1657600080fd5b50610b6b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506115c9565b604051808215151515815260200191505060405180910390f35b6000806000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b6000600d60009054906101000a900460ff16905090565b606060098054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c9b5780601f10610c7057610100808354040283529160200191610c9b565b820191906000526020600020905b815481529060010190602001808311610c7e57829003601f168201915b5050505050905090565b6000610cb08261165d565b1515610cbb57600080fd5b6002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610d01826110d7565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610d3e57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610d7e5750610d7d81336115c9565b5b1515610d8957600080fd5b826002600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b610e4582826116cf565b5050565b6000600780549050905090565b610e60828261170f565b5050565b610e6e33826118cb565b1515610e7957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610eb557600080fd5b610ebf8382611960565b610ec9838261170f565b610ed38282611a63565b808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6000610f3e83611155565b82101515610f4b57600080fd5b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481101515610f9757fe5b9060005260206000200154905092915050565b6000610fb5336114bb565b1515610fc057600080fd5b600d60009054906101000a900460ff16151515610fdc57600080fd5b610fe68383611b3a565b6001905092915050565b61100c83838360206040519081016040528060008152506114d8565b505050565b61101b33826118cb565b151561102657600080fd5b611038611032826110d7565b82611b91565b50565b60006110468261165d565b9050919050565b6000611057610e49565b8210151561106457600080fd5b60078281548110151561107357fe5b90600052602060002001549050919050565b6000611090336114bb565b151561109b57600080fd5b600d60009054906101000a900460ff161515156110b757600080fd5b6110c18484610faa565b506110cc83836116cf565b600190509392505050565b6000806001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561114c57600080fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561119257600080fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60006111e4336114bb565b15156111ef57600080fd5b600d60009054906101000a900460ff1615151561120b57600080fd5b6001600d60006101000a81548160ff0219169083151502179055507fb828d9b5c78095deeeeff2eca2e5d4fe046ce3feb4c99702624a3fd384ad2dbc60405160405180910390a16001905090565b6060600a8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112f15780601f106112c6576101008083540402835291602001916112f1565b820191906000526020600020905b8154815290600101906020018083116112d457829003601f168201915b5050505050905090565b611304336114bb565b151561130f57600080fd5b61132381600c611bf090919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f660405160405180910390a250565b61137d33600c611c8a90919063ffffffff16565b565b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156113ba57600080fd5b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051808215151515815260200191505060405180910390a35050565b60006114d182600c611d2490919063ffffffff16565b9050919050565b6114e3848484610e64565b6114ef84848484611db8565b15156114fa57600080fd5b50505050565b606061150b8261165d565b151561151657600080fd5b600b60008381526020019081526020016000208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115bd5780601f10611592576101008083540402835291602001916115bd565b820191906000526020600020905b8154815290600101906020018083116115a057829003601f168201915b50505050509050919050565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000806001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415915050919050565b6116d88261165d565b15156116e357600080fd5b80600b6000848152602001908152602001600020908051906020019061170a9291906124b9565b505050565b600080600061171e8585611fda565b6006600085815260200190815260200160002054925061178a6001600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905061210990919063ffffffff16565b9150600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811015156117d857fe5b9060005260206000200154905080600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208481548110151561183257fe5b9060005260206000200181905550600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054809190600190036118929190612539565b50600060066000868152602001908152602001600020819055508260066000838152602001908152602001600020819055505050505050565b6000806118d7836110d7565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061194657508373ffffffffffffffffffffffffffffffffffffffff1661192e84610ca5565b73ffffffffffffffffffffffffffffffffffffffff16145b80611957575061195681856115c9565b5b91505092915050565b8173ffffffffffffffffffffffffffffffffffffffff16611980826110d7565b73ffffffffffffffffffffffffffffffffffffffff161415156119a257600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611a5f5760006002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5050565b6000611a6f838361212a565b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020829080600181540180825580915050906001820390600052602060002001600090919290919091505550806006600084815260200190815260200160002081905550505050565b611b448282612284565b600780549050600860008381526020019081526020016000208190555060078190806001815401808255809150509060018203906000526020600020016000909192909190915055505050565b611b9b828261232a565b6000600b6000838152602001908152602001600020805460018160011615610100020316600290049050141515611bec57600b60008281526020019081526020016000206000611beb9190612565565b5b5050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611c2c57600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611cc657600080fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515611d6157600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600080611dda8573ffffffffffffffffffffffffffffffffffffffff16612411565b1515611de95760019150611fd1565b8473ffffffffffffffffffffffffffffffffffffffff1663150b7a02338887876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611ede578082015181840152602081019050611ec3565b50505050905090810190601f168015611f0b5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015611f2d57600080fd5b505af1158015611f41573d6000803e3d6000fd5b505050506040513d6020811015611f5757600080fd5b8101908080519060200190929190505050905063150b7a027c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505b50949350505050565b8173ffffffffffffffffffffffffffffffffffffffff16611ffa826110d7565b73ffffffffffffffffffffffffffffffffffffffff1614151561201c57600080fd5b61206f6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461210990919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060006001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60008083831115151561211b57600080fd5b82840390508091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561219857600080fd5b816001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061223d6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461242490919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156122c057600080fd5b6122ca8282611a63565b808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b60008060006123398585612445565b60086000858152602001908152602001600020549250612368600160078054905061210990919063ffffffff16565b915060078281548110151561237957fe5b906000526020600020015490508060078481548110151561239657fe5b906000526020600020018190555060006007838154811015156123b557fe5b906000526020600020018190555060078054809190600190036123d89190612539565b50600060086000868152602001908152602001600020819055508260086000838152602001908152602001600020819055505050505050565b600080823b905060008111915050919050565b600080828401905083811015151561243b57600080fd5b8091505092915050565b61244f8282611960565b612459828261170f565b80600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106124fa57805160ff1916838001178555612528565b82800160010185558215612528579182015b8281111561252757825182559160200191906001019061250c565b5b50905061253591906125ad565b5090565b8154818355818111156125605781836000526020600020918201910161255f91906125ad565b5b505050565b50805460018160011615610100020316600290046000825580601f1061258b57506125aa565b601f0160209004906000526020600020908101906125a991906125ad565b5b50565b6125cf91905b808211156125cb5760008160009055506001016125b3565b5090565b905600a165627a7a723058203a747b7138bbec1852c73fa0a86d993a67b8eee8a327faef0e8b853b2076471a0029"}