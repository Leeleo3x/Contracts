{"Runs": "200", "SwarmSource": "bzzr://b4a99a2a785bbee21d568cfde5c1505a91e7de0c0b6d80210a5da64f8996bd41", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isValidAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setHoldAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"checkAvailableAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_TOTAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferHoldFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"changeHoldByAddressIndex\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnMintFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockCountingFromTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getAvailableBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"getHoldAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getHoldAmountAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getTotalHoldAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeHoldByAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"countHoldAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"removeHoldByAddressIndex\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.24+commit.e67f0147", "ConstructorArguments": "", "SourceCode": "pragma solidity 0.4.24;\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    uint256 totalSupply_;\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != 0);\r\n        require(amount <= balances[account]);\r\n\r\n        totalSupply_ = totalSupply().sub(amount);\r\n        balances[account] = balances[account].sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        require(amount <= allowed[account][msg.sender]);\r\n\r\n        allowed[account][msg.sender] = allowed[account][msg.sender].sub(amount);\r\n        _burn(account, amount);\r\n    }\r\n\r\n}\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintFinished();\r\n\r\n    bool public isMinting = true;\r\n    uint256 public lockCountingFromTime = 0;\r\n\r\n    modifier canMint() {\r\n        require(isMinting);\r\n        _;\r\n    }\r\n\r\n    function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool) {\r\n        totalSupply_ = totalSupply_.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Mint(_to, _amount);\r\n        emit Transfer(address(0), _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function finishMinting() public onlyOwner canMint returns (bool) {\r\n        isMinting = false;\r\n        lockCountingFromTime = now;\r\n        emit MintFinished();\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract BurnableToken is StandardToken {\r\n\r\n  function burn(uint256 value) public {\r\n    _burn(msg.sender, value);\r\n  }\r\n\r\n  function burnFrom(address from, uint256 value) public {\r\n    _burnFrom(from, value);\r\n  }\r\n\r\n  function _burn(address who, uint256 value) internal {\r\n    super._burn(who, value);\r\n  }\r\n}\r\n\r\ncontract OSAToken is MintableToken, BurnableToken {\r\n    using SafeMath for uint256;\r\n\r\n    string public name = \"OSAToken\";\r\n    string public symbol = \"OSA\";\r\n    uint8 constant public decimals = 18;\r\n\r\n    uint256 constant public MAX_TOTAL_SUPPLY = 5777999888 * (10 ** uint256(decimals));\r\n\r\n    struct LockParams {\r\n        uint256 TIME;\r\n        uint256 AMOUNT;\r\n    }\r\n\r\n    mapping(address => LockParams[]) private holdAmounts;\r\n    address[] private holdAmountAccounts;\r\n\r\n    function isValidAddress(address _address) public view returns (bool) {\r\n        return (_address != 0x0 && _address != address(0) && _address != 0 && _address != address(this));\r\n    }\r\n\r\n    modifier validAddress(address _address) {\r\n        require(isValidAddress(_address));\r\n        _;\r\n    }\r\n\r\n    function mint(address _to, uint256 _amount) public validAddress(_to) onlyOwner canMint returns (bool) {\r\n        if (totalSupply_.add(_amount) > MAX_TOTAL_SUPPLY) {\r\n            return false;\r\n        }\r\n        return super.mint(_to, _amount);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public validAddress(_to) returns (bool) {\r\n        require(checkAvailableAmount(msg.sender, _value));\r\n    \r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public validAddress(_to) returns (bool) {\r\n        require(checkAvailableAmount(_from, _value));\r\n\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n    function setHoldAmount(address _address, uint256 _amount, uint256 _time) public onlyOwner {\r\n        require(getAvailableBalance(_address) >= _amount);\r\n        _setHold(_address, _amount, _time);\r\n    }\r\n\r\n    function _setHold(address _address, uint256 _amount, uint256 _time) internal {\r\n        LockParams memory lockdata;\r\n        if (lockCountingFromTime == 0) {\r\n            lockdata.TIME = _time;\r\n        } else {\r\n            lockdata.TIME = now.sub(lockCountingFromTime).add(_time);\r\n        }\r\n        lockdata.AMOUNT = _amount;\r\n\r\n        holdAmounts[_address].push(lockdata);\r\n        holdAmountAccounts.push(_address) - 1;\r\n    }\r\n\r\n    function getTotalHoldAmount(address _address) public view returns(uint256) {\r\n        uint256 totalHold = 0;\r\n        LockParams[] storage locks = holdAmounts[_address];\r\n        for (uint i = 0; i < locks.length; i++) {\r\n            if (lockCountingFromTime == 0 || lockCountingFromTime.add(locks[i].TIME) >= now) {\r\n                totalHold = totalHold.add(locks[i].AMOUNT);\r\n            }\r\n        }\r\n        return totalHold;\r\n    }\r\n\r\n    function getAvailableBalance(address _address) public view returns(uint256) {\r\n        return balanceOf(_address).sub(getTotalHoldAmount(_address));\r\n    }\r\n\r\n    function checkAvailableAmount(address _address, uint256 _amount) public view returns (bool) {\r\n        return _amount <= getAvailableBalance(_address);\r\n    }\r\n\r\n    function removeHoldByAddress(address _address) public onlyOwner {\r\n        delete holdAmounts[_address];\r\n    }\r\n\r\n    function removeHoldByAddressIndex(address _address, uint256 _index) public onlyOwner {\r\n        delete holdAmounts[_address][_index];\r\n    }\r\n\r\n    function changeHoldByAddressIndex(\r\n        address _address, uint256 _index, uint256 _amount, uint256 _time\r\n    ) public onlyOwner {\r\n        if (_amount > 0) {\r\n            holdAmounts[_address][_index].AMOUNT = _amount;\r\n        }\r\n        if (_time > 0) {\r\n            if (lockCountingFromTime == 0) {\r\n                holdAmounts[_address][_index].TIME = _time;\r\n            } else {\r\n                holdAmounts[_address][_index].TIME = now.sub(lockCountingFromTime).add(_time);\r\n            }\r\n        }\r\n    }\r\n\r\n    function getHoldAmountAccounts() public view onlyOwner returns (address[]) {\r\n        return holdAmountAccounts;\r\n    }\r\n\r\n    function countHoldAmount(address _address) public view onlyOwner returns (uint256) {\r\n        require(_address != 0x0 && _address != address(0));\r\n        return holdAmounts[_address].length;\r\n    }\r\n\r\n    function getHoldAmount(address _address, uint256 _idx) public view onlyOwner returns (uint256, uint256) {\r\n        require(_address != 0x0);\r\n        require(holdAmounts[_address].length>0);\r\n\r\n        return (holdAmounts[_address][_idx].TIME, holdAmounts[_address][_idx].AMOUNT);\r\n    }\r\n\r\n    function transferHoldFrom(\r\n        address _from, address _to, uint256 _value\r\n    ) public onlyOwner returns (bool) {\r\n        require(_to != address(0));\r\n        require(getTotalHoldAmount(_from) >= _value);\r\n        require(_value <= allowed[_from][tx.origin]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][tx.origin] = allowed[_from][tx.origin].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n\r\n        uint256 lockedSourceAmount = 0;\r\n        uint lockedSourceAmountCount = 0;\r\n\r\n        LockParams[] storage locks = holdAmounts[_from];\r\n\r\n        for (uint i = 0; i < locks.length; i++) {\r\n            if (lockCountingFromTime == 0 || lockCountingFromTime.add(locks[i].TIME) >= now) {\r\n            \tlockedSourceAmount = lockedSourceAmount.add(locks[i].AMOUNT);\r\n                lockedSourceAmountCount++;\r\n            }\r\n        }\r\n\r\n        uint256 tosend = 0;\r\n        uint256 acc = 0;\r\n        uint j = 0;\r\n\r\n        for (i = 0; i < locks.length; i++) {\r\n            if (lockCountingFromTime == 0 || lockCountingFromTime.add(locks[i].TIME) >= now) {\r\n            \tif (j < lockedSourceAmountCount - 1) {\r\n    \t            tosend = locks[i].AMOUNT.mul(_value).div(lockedSourceAmount);\r\n    \t        } else {\r\n        \t        tosend = _value.sub(acc);\r\n    \t        }\r\n    \t        locks[i].AMOUNT = locks[i].AMOUNT.sub(tosend);\r\n    \t        acc = acc.add(tosend);\r\n    \t        _setHold(_to, tosend, locks[i].TIME);\r\n    \t        j++;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function burnMintFrom(address _from, uint256 _amount) public onlyOwner canMint {\r\n        require(checkAvailableAmount(_from, _amount));\r\n        super._burn(_from, _amount);\r\n    }\r\n\r\n    function burnFrom(address from, uint256 value) public {\r\n        require(!isMinting);\r\n        require(checkAvailableAmount(from, value));\r\n        super.burnFrom(from, value);\r\n    }\r\n\r\n    function burn(uint256 value) public {\r\n        require(!isMinting);\r\n        require(checkAvailableAmount(msg.sender, value));\r\n        super.burn(value);\r\n    }\r\n\r\n}", "OptimizationUsed": "0", "ContractName": "OSAToken", "ByteCode": "0x6080604052600436106101a0576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680623f07fa146101a557806306fdde0314610200578063095ea7b31461029057806318160ddd146102f55780631f2ec9c91461032057806323b872dd14610377578063254747a5146103fc5780632a8092df14610461578063313ce5671461049057806333039d3d146104c157806340c10f19146104ec57806342966c6814610551578063595d03921461057e5780635c006f75146106035780635da6c41814610664578063646f7834146106b157806366188463146106dc5780636c24a76f1461074157806370a082311461079857806370d94ed0146107ef57806379cc6790146108575780637d64bcb4146108a457806384c3edf9146108d357806384dd95911461093f5780638da5cb5b1461099657806395d89b41146109ed578063a9059cbb14610a7d578063b66aae6514610ae2578063d73dd62314610b25578063dd62ed3e14610b8a578063e66d1b8414610c01578063efbe31d514610c58578063f2fde38b14610ca5575b600080fd5b3480156101b157600080fd5b506101e6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ce8565b604051808215151515815260200191505060405180910390f35b34801561020c57600080fd5b50610215610d9f565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561025557808201518184015260208101905061023a565b50505050905090810190601f1680156102825780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561029c57600080fd5b506102db600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e3d565b604051808215151515815260200191505060405180910390f35b34801561030157600080fd5b5061030a610e51565b6040518082815260200191505060405180910390f35b34801561032c57600080fd5b50610375600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050610e5b565b005b34801561038357600080fd5b506103e2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610ede565b604051808215151515815260200191505060405180910390f35b34801561040857600080fd5b50610447600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610f1f565b604051808215151515815260200191505060405180910390f35b34801561046d57600080fd5b50610476610f35565b604051808215151515815260200191505060405180910390f35b34801561049c57600080fd5b506104a5610f48565b604051808260ff1660ff16815260200191505060405180910390f35b3480156104cd57600080fd5b506104d6610f4d565b6040518082815260200191505060405180910390f35b3480156104f857600080fd5b50610537600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610f5f565b604051808215151515815260200191505060405180910390f35b34801561055d57600080fd5b5061057c60048036038101908080359060200190929190505050611034565b005b34801561058a57600080fd5b506105e9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611071565b604051808215151515815260200191505060405180910390f35b34801561060f57600080fd5b50610662600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803590602001909291905050506116cc565b005b34801561067057600080fd5b506106af600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061189f565b005b3480156106bd57600080fd5b506106c6611939565b6040518082815260200191505060405180910390f35b3480156106e857600080fd5b50610727600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061193f565b604051808215151515815260200191505060405180910390f35b34801561074d57600080fd5b50610782600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611bd0565b6040518082815260200191505060405180910390f35b3480156107a457600080fd5b506107d9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611bfc565b6040518082815260200191505060405180910390f35b3480156107fb57600080fd5b5061083a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611c44565b604051808381526020018281526020019250505060405180910390f35b34801561086357600080fd5b506108a2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611de1565b005b3480156108b057600080fd5b506108b9611e20565b604051808215151515815260200191505060405180910390f35b3480156108df57600080fd5b506108e8611eee565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561092b578082015181840152602081019050610910565b505050509050019250505060405180910390f35b34801561094b57600080fd5b50610980600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611fd8565b6040518082815260200191505060405180910390f35b3480156109a257600080fd5b506109ab6120ca565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156109f957600080fd5b50610a026120f0565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610a42578082015181840152602081019050610a27565b50505050905090810190601f168015610a6f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610a8957600080fd5b50610ac8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061218e565b604051808215151515815260200191505060405180910390f35b348015610aee57600080fd5b50610b23600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506121cd565b005b348015610b3157600080fd5b50610b70600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612277565b604051808215151515815260200191505060405180910390f35b348015610b9657600080fd5b50610beb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612473565b6040518082815260200191505060405180910390f35b348015610c0d57600080fd5b50610c42600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506124fa565b6040518082815260200191505060405180910390f35b348015610c6457600080fd5b50610ca3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612601565b005b348015610cb157600080fd5b50610ce6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506126ce565b005b6000808273ffffffffffffffffffffffffffffffffffffffff1614158015610d3d5750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b8015610d60575060008273ffffffffffffffffffffffffffffffffffffffff1614155b8015610d9857503073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b9050919050565b60058054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e355780601f10610e0a57610100808354040283529160200191610e35565b820191906000526020600020905b815481529060010190602001808311610e1857829003601f168201915b505050505081565b6000610e498383612826565b905092915050565b6000600154905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610eb757600080fd5b81610ec184611bd0565b10151515610ece57600080fd5b610ed9838383612918565b505050565b600082610eea81610ce8565b1515610ef557600080fd5b610eff8584610f1f565b1515610f0a57600080fd5b610f15858585612a66565b9150509392505050565b6000610f2a83611bd0565b821115905092915050565b600360149054906101000a900460ff1681565b601281565b601260ff16600a0a6401586548100281565b600082610f6b81610ce8565b1515610f7657600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610fd257600080fd5b600360149054906101000a900460ff161515610fed57600080fd5b601260ff16600a0a6401586548100261101184600154612e2090919063ffffffff16565b1115611020576000915061102d565b61102a8484612e3c565b91505b5092915050565b600360149054906101000a900460ff1615151561105057600080fd5b61105a3382610f1f565b151561106557600080fd5b61106e81613021565b50565b600080600080600080600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110d957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff161415151561111557600080fd5b8861111f8c611fd8565b1015151561112c57600080fd5b600260008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205489111515156111b757600080fd5b611208896000808e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461302e90919063ffffffff16565b6000808d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061129b896000808d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612e2090919063ffffffff16565b6000808c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061136c89600260008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461302e90919063ffffffff16565b600260008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508973ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8b6040518082815260200191505060405180910390a36000965060009550600760008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209450600093505b848054905084101561153e57600060045414806114ef5750426114ec86868154811015156114c957fe5b906000526020600020906002020160000154600454612e2090919063ffffffff16565b10155b1561153157611526858581548110151561150557fe5b90600052602060002090600202016001015488612e2090919063ffffffff16565b965085806001019650505b838060010194505061149f565b600092506000915060009050600093505b84805490508410156116ba576000600454148061159f57504261159c868681548110151561157957fe5b906000526020600020906002020160000154600454612e2090919063ffffffff16565b10155b156116ad57600186038110156115fa576115f3876115e58b88888154811015156115c557fe5b90600052602060002090600202016001015461304790919063ffffffff16565b61307f90919063ffffffff16565b9250611610565b61160d828a61302e90919063ffffffff16565b92505b61164283868681548110151561162257fe5b90600052602060002090600202016001015461302e90919063ffffffff16565b858581548110151561165057fe5b9060005260206000209060020201600101819055506116788383612e2090919063ffffffff16565b91506116a48a84878781548110151561168d57fe5b906000526020600020906002020160000154612918565b80806001019150505b838060010194505061154f565b60019750505050505050509392505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561172857600080fd5b60008211156117945781600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208481548110151561177e57fe5b9060005260206000209060020201600101819055505b6000811115611899576000600454141561180f5780600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020848154811015156117f557fe5b906000526020600020906002020160000181905550611898565b611836816118286004544261302e90919063ffffffff16565b612e2090919063ffffffff16565b600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208481548110151561188257fe5b9060005260206000209060020201600001819055505b5b50505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156118fb57600080fd5b600360149054906101000a900460ff16151561191657600080fd5b6119208282610f1f565b151561192b57600080fd5b6119358282613095565b5050565b60045481565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115611a50576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611ae4565b611a63838261302e90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b6000611bf5611bde83611fd8565b611be784611bfc565b61302e90919063ffffffff16565b9050919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611ca357600080fd5b60008473ffffffffffffffffffffffffffffffffffffffff1614151515611cc957600080fd5b6000600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050111515611d1a57600080fd5b600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083815481101515611d6657fe5b906000526020600020906002020160000154600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002084815481101515611dc457fe5b906000526020600020906002020160010154915091509250929050565b600360149054906101000a900460ff16151515611dfd57600080fd5b611e078282610f1f565b1515611e1257600080fd5b611e1c82826130a3565b5050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611e7e57600080fd5b600360149054906101000a900460ff161515611e9957600080fd5b6000600360146101000a81548160ff021916908315150217905550426004819055507fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a16001905090565b6060600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611f4c57600080fd5b6008805480602002602001604051908101604052809291908181526020018280548015611fce57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611f84575b5050505050905090565b60008060008060009250600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209150600090505b81805490508110156120bf5760006004541480612078575042612075838381548110151561205257fe5b906000526020600020906002020160000154600454612e2090919063ffffffff16565b10155b156120b2576120af828281548110151561208e57fe5b90600052602060002090600202016001015484612e2090919063ffffffff16565b92505b8080600101915050612028565b829350505050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156121865780601f1061215b57610100808354040283529160200191612186565b820191906000526020600020905b81548152906001019060200180831161216957829003601f168201915b505050505081565b60008261219a81610ce8565b15156121a557600080fd5b6121af3384610f1f565b15156121ba57600080fd5b6121c484846130b1565b91505092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561222957600080fd5b600760008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006122749190613608565b50565b600061230882600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612e2090919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561255857600080fd5b60008273ffffffffffffffffffffffffffffffffffffffff16141580156125ac5750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b15156125b757600080fd5b600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561265d57600080fd5b600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020818154811015156126a957fe5b9060005260206000209060020201600080820160009055600182016000905550505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561272a57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561276657600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b61292061362c565b6000600454141561293a578181600001818152505061296b565b612961826129536004544261302e90919063ffffffff16565b612e2090919063ffffffff16565b8160000181815250505b82816020018181525050600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081908060018154018082558091505090600182039060005260206000209060020201600090919290919091506000820151816000015560208201518160010155505050600160088590806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515612aa357600080fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515612af057600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515612b7b57600080fd5b612bcc826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461302e90919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612c5f826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612e2090919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612d3082600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461302e90919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b60008183019050828110151515612e3357fe5b80905092915050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612e9a57600080fd5b600360149054906101000a900460ff161515612eb557600080fd5b612eca82600154612e2090919063ffffffff16565b600181905550612f21826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612e2090919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885836040518082815260200191505060405180910390a28273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b61302b3382613095565b50565b600082821115151561303c57fe5b818303905092915050565b60008083141561305a5760009050613079565b818302905081838281151561306b57fe5b0414151561307557fe5b8090505b92915050565b6000818381151561308c57fe5b04905092915050565b61309f82826132d0565b5050565b6130ad8282613460565b5050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156130ee57600080fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561313b57600080fd5b61318c826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461302e90919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061321f826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612e2090919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b60008273ffffffffffffffffffffffffffffffffffffffff16141515156132f657600080fd5b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811115151561334357600080fd5b61335d8161334f610e51565b61302e90919063ffffffff16565b6001819055506133b4816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461302e90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481111515156134eb57600080fd5b61357a81600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461302e90919063ffffffff16565b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506136048282613095565b5050565b50805460008255600202906000526020600020908101906136299190613646565b50565b604080519081016040528060008152602001600081525090565b61367291905b8082111561366e5760008082016000905560018201600090555060020161364c565b5090565b905600a165627a7a72305820b4a99a2a785bbee21d568cfde5c1505a91e7de0c0b6d80210a5da64f8996bd410029"}