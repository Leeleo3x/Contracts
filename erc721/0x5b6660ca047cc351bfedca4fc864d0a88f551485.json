{"Runs": "200", "SwarmSource": "bzzr://bc09aa234b6968a7b9aaec9dc5594ac3fb51a626c8a2d04d71baf7aa0345e617", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"settings\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_jingleId\",\"type\":\"uint256\"}],\"name\":\"getSamplesForJingle\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_jingleId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_marketplace\",\"type\":\"address\"}],\"name\":\"setMarketplaceContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numOfJingles\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_jingleId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cryptoJingles\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"soundEffects\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getAllJingles\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_jingleId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_jingleId\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approveAndSell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_jingleId\",\"type\":\"uint256\"}],\"name\":\"getMetaInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_jingleId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_jingleId\",\"type\":\"uint256\"},{\"name\":\"_effectParams\",\"type\":\"uint8[]\"}],\"name\":\"addSoundEffect\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"jinglesInfo\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"author\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cryptoJingles\",\"type\":\"address\"}],\"name\":\"setCryptoJinglesContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"jingles\",\"type\":\"uint32[5]\"},{\"name\":\"jingleTypes\",\"type\":\"uint32[5]\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"author\",\"type\":\"string\"},{\"name\":\"_settings\",\"type\":\"uint8[20]\"}],\"name\":\"composeJingle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"uniqueJingles\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketplaceContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"jingleId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"effectParams\",\"type\":\"uint8[]\"}],\"name\":\"EffectAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"jingleId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"samples\",\"type\":\"uint32[5]\"},{\"indexed\":false,\"name\":\"jingleTypes\",\"type\":\"uint32[5]\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"author\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"settings\",\"type\":\"uint8[20]\"}],\"name\":\"Composed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.19+commit.c4cbbb05", "ConstructorArguments": "", "SourceCode": "pragma solidity ^0.4.18;\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract ERC721 {\r\n    function implementsERC721() public pure returns (bool);\r\n    function totalSupply() public view returns (uint256 total);\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function ownerOf(uint256 _tokenId) public view returns (address owner);\r\n    function approve(address _to, uint256 _tokenId) public;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n    function transfer(address _to, uint256 _tokenId) public;\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n}\r\n\r\ncontract SampleStorage is Ownable {\r\n    \r\n    struct Sample {\r\n        string ipfsHash;\r\n        uint rarity;\r\n    }\r\n    \r\n    mapping (uint32 => Sample) public sampleTypes;\r\n    \r\n    uint32 public numOfSampleTypes;\r\n    \r\n    uint32 public numOfCommon;\r\n    uint32 public numOfRare;\r\n    uint32 public numOfLegendary;\r\n\r\n    // The mythical sample is a type common that appears only once in a 1000\r\n    function addNewSampleType(string _ipfsHash, uint _rarityType) public onlyOwner {\r\n        \r\n        if (_rarityType == 0) {\r\n            numOfCommon++;\r\n        } else if (_rarityType == 1) {\r\n            numOfRare++;\r\n        } else if(_rarityType == 2) {\r\n            numOfLegendary++;\r\n        } else if(_rarityType == 3) {\r\n            numOfCommon++;\r\n        }\r\n        \r\n        sampleTypes[numOfSampleTypes] = Sample({\r\n           ipfsHash: _ipfsHash,\r\n           rarity: _rarityType\r\n        });\r\n        \r\n        numOfSampleTypes++;\r\n    }\r\n    \r\n    function getType(uint _randomNum) public view returns (uint32) {\r\n        uint32 range = 0;\r\n        \r\n        if (_randomNum > 0 && _randomNum < 600) {\r\n            range = 600 / numOfCommon;\r\n            return uint32(_randomNum) / range;\r\n            \r\n        } else if(_randomNum >= 600 && _randomNum < 900) {\r\n            range = 300 / numOfRare;\r\n            return uint32(_randomNum) / range;\r\n        } else {\r\n            range = 100 / numOfLegendary;\r\n            return uint32(_randomNum) / range;\r\n        }\r\n    }\r\n    \r\n}\r\n\r\ncontract Jingle is Ownable, ERC721 {\r\n    \r\n    struct MetaInfo {\r\n        string name;\r\n        string author;\r\n    }\r\n    \r\n    mapping (uint => address) internal tokensForOwner;\r\n    mapping (uint => address) internal tokensForApproved;\r\n    mapping (address => uint[]) internal tokensOwned;\r\n    mapping (uint => uint) internal tokenPosInArr;\r\n    \r\n    mapping(uint => uint[]) internal samplesInJingle;\r\n    mapping(uint => MetaInfo) public jinglesInfo;\r\n    \r\n    mapping(bytes32 => bool) public uniqueJingles;\r\n    \r\n    mapping(uint => uint8[]) public soundEffects;\r\n    mapping(uint => uint8[20]) public settings;\r\n    \r\n    uint public numOfJingles;\r\n    \r\n    address public cryptoJingles;\r\n    Marketplace public marketplaceContract;\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event EffectAdded(uint indexed jingleId, uint8[] effectParams);\r\n    event Composed(uint indexed jingleId, address indexed owner, uint32[5] samples, uint32[5] jingleTypes,\r\n            string name, string author, uint8[20] settings);\r\n    \r\n    modifier onlyCryptoJingles() {\r\n        require(msg.sender == cryptoJingles);\r\n        _;\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _jingleId) public {\r\n        require(tokensForOwner[_jingleId] != 0x0);\r\n        require(tokensForOwner[_jingleId] == msg.sender);\r\n        \r\n        tokensForApproved[_jingleId] = 0x0;\r\n        \r\n        removeJingle(msg.sender, _jingleId);\r\n        addJingle(_to, _jingleId);\r\n        \r\n        Approval(msg.sender, 0, _jingleId);\r\n        Transfer(msg.sender, _to, _jingleId);\r\n    }\r\n    \r\n    \r\n    function approve(address _to, uint256 _jingleId) public {\r\n        require(tokensForOwner[_jingleId] != 0x0);\r\n        require(ownerOf(_jingleId) == msg.sender);\r\n        require(_to != msg.sender);\r\n        \r\n        if (_getApproved(_jingleId) != 0x0 || _to != 0x0) {\r\n            tokensForApproved[_jingleId] = _to;\r\n            Approval(msg.sender, _to, _jingleId);\r\n        }\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _jingleId) public {\r\n        require(tokensForOwner[_jingleId] != 0x0);\r\n        require(_getApproved(_jingleId) == msg.sender);\r\n        require(ownerOf(_jingleId) == _from);\r\n        require(_to != 0x0);\r\n        \r\n        tokensForApproved[_jingleId] = 0x0;\r\n        \r\n        removeJingle(_from, _jingleId);\r\n        addJingle(_to, _jingleId);\r\n        \r\n        Approval(_from, 0, _jingleId);\r\n        Transfer(_from, _to, _jingleId);\r\n        \r\n    }\r\n    \r\n    function approveAndSell(uint _jingleId, uint _amount) public {\r\n        approve(address(marketplaceContract), _jingleId);\r\n        \r\n        marketplaceContract.sell(msg.sender, _jingleId, _amount);\r\n    }\r\n    \r\n    function composeJingle(address _owner, uint32[5] jingles, \r\n    uint32[5] jingleTypes, string name, string author, uint8[20] _settings) public onlyCryptoJingles {\r\n        \r\n        uint _jingleId = numOfJingles;\r\n        \r\n        uniqueJingles[keccak256(jingles)] = true;\r\n        \r\n        tokensForOwner[_jingleId] = _owner;\r\n        \r\n        tokensOwned[_owner].push(_jingleId);\r\n        \r\n        samplesInJingle[_jingleId] = jingles;\r\n        settings[_jingleId] = _settings;\r\n        \r\n        tokenPosInArr[_jingleId] = tokensOwned[_owner].length - 1;\r\n        \r\n        if (bytes(author).length == 0) {\r\n            author = \"Soundtoshi Nakajingles\";\r\n        }\r\n        \r\n        jinglesInfo[numOfJingles] = MetaInfo({\r\n            name: name,\r\n            author: author\r\n        });\r\n        \r\n        Composed(numOfJingles, _owner, jingles, jingleTypes, \r\n        name, author, _settings);\r\n        \r\n        numOfJingles++;\r\n    }\r\n    \r\n    function addSoundEffect(uint _jingleId, uint8[] _effectParams) external {\r\n        require(msg.sender == ownerOf(_jingleId));\r\n        \r\n        soundEffects[_jingleId] = _effectParams;\r\n        \r\n        EffectAdded(_jingleId, _effectParams);\r\n    }\r\n    \r\n    function implementsERC721() public pure returns (bool) {\r\n        return true;\r\n    }\r\n    \r\n    function totalSupply() public view returns (uint256) {\r\n        return numOfJingles;\r\n    }\r\n    \r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return tokensOwned[_owner].length;\r\n    }\r\n    \r\n    function ownerOf(uint256 _jingleId) public view returns (address) {\r\n        return tokensForOwner[_jingleId];\r\n    }\r\n    \r\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\r\n        return tokensOwned[_owner][_index];\r\n    }\r\n    \r\n    function getSamplesForJingle(uint _jingleId) external view returns(uint[]) {\r\n        return samplesInJingle[_jingleId];\r\n    }\r\n    \r\n    function getAllJingles(address _owner) external view returns(uint[]) {\r\n        return tokensOwned[_owner];\r\n    }\r\n    \r\n    function getMetaInfo(uint _jingleId) external view returns(string, string) {\r\n        return (jinglesInfo[_jingleId].name, jinglesInfo[_jingleId].author);\r\n    }\r\n    \r\n    function _getApproved(uint _jingleId) internal view returns (address) {\r\n        return tokensForApproved[_jingleId];\r\n    }\r\n    \r\n     // Internal functions of the contract\r\n    \r\n    function addJingle(address _owner, uint _jingleId) internal {\r\n        tokensForOwner[_jingleId] = _owner;\r\n        \r\n        tokensOwned[_owner].push(_jingleId);\r\n        \r\n        tokenPosInArr[_jingleId] = tokensOwned[_owner].length - 1;\r\n    }\r\n    \r\n    // find who owns that jingle and at what position is it in the owners arr \r\n    // Swap that token with the last one in arr and delete the end of arr\r\n    function removeJingle(address _owner, uint _jingleId) internal {\r\n        uint length = tokensOwned[_owner].length;\r\n        uint index = tokenPosInArr[_jingleId];\r\n        uint swapToken = tokensOwned[_owner][length - 1];\r\n\r\n        tokensOwned[_owner][index] = swapToken;\r\n        tokenPosInArr[swapToken] = index;\r\n\r\n        delete tokensOwned[_owner][length - 1];\r\n        tokensOwned[_owner].length--;\r\n    }\r\n    \r\n    // Owner functions \r\n    function setCryptoJinglesContract(address _cryptoJingles) public onlyOwner {\r\n        require(cryptoJingles == 0x0);\r\n        \r\n        cryptoJingles = _cryptoJingles;\r\n    }\r\n    \r\n    function setMarketplaceContract(address _marketplace) public onlyOwner {\r\n        require(address(marketplaceContract) == 0x0);\r\n        \r\n        marketplaceContract = Marketplace(_marketplace);\r\n    }\r\n}\r\n\r\ncontract Sample is Ownable {\r\n    \r\n    mapping (uint => address) internal tokensForOwner;\r\n    mapping (address => uint[]) internal tokensOwned;\r\n    mapping (uint => uint) internal tokenPosInArr;\r\n    \r\n    mapping (uint => uint32) public tokenType;\r\n    \r\n    uint public numOfSamples;\r\n    \r\n    address public cryptoJingles;\r\n    address public sampleRegistry;\r\n\r\n\r\n    SampleStorage public sampleStorage;\r\n    \r\n    event Mint(address indexed _to, uint256 indexed _tokenId);\r\n    \r\n    modifier onlyCryptoJingles() {\r\n        require(msg.sender == cryptoJingles);\r\n        _;\r\n    }\r\n    \r\n    function Sample(address _sampleStorage) public {\r\n        sampleStorage = SampleStorage(_sampleStorage);\r\n    }\r\n    \r\n    function mint(address _owner, uint _randomNum) public onlyCryptoJingles {\r\n        \r\n        uint32 sampleType = sampleStorage.getType(_randomNum);\r\n        \r\n        addSample(_owner, sampleType, numOfSamples);\r\n        \r\n        Mint(_owner, numOfSamples);\r\n        \r\n        numOfSamples++;\r\n    }\r\n    \r\n    function mintForSampleRegitry(address _owner, uint32 _type) public {\r\n        require(msg.sender == sampleRegistry);\r\n        \r\n        addSample(_owner, _type, numOfSamples);\r\n        \r\n        Mint(_owner, numOfSamples);\r\n        \r\n        numOfSamples++;\r\n    }\r\n    \r\n    function removeSample(address _owner, uint _sampleId) public onlyCryptoJingles {\r\n        uint length = tokensOwned[_owner].length;\r\n        uint index = tokenPosInArr[_sampleId];\r\n        uint swapToken = tokensOwned[_owner][length - 1];\r\n\r\n        tokensOwned[_owner][index] = swapToken;\r\n        tokenPosInArr[swapToken] = index;\r\n\r\n        delete tokensOwned[_owner][length - 1];\r\n        tokensOwned[_owner].length--;\r\n        \r\n        tokensForOwner[_sampleId] = 0x0;\r\n        \r\n    }\r\n    \r\n    function getSamplesForOwner(address _owner) public constant returns (uint[]) {\r\n        return tokensOwned[_owner];\r\n    }\r\n    \r\n    function getTokenType(uint _sampleId) public constant returns (uint) {\r\n        return tokenType[_sampleId];\r\n    }\r\n    \r\n    function isTokenOwner(uint _tokenId, address _user) public constant returns(bool) {\r\n        return tokensForOwner[_tokenId] == _user;\r\n    }\r\n    \r\n    function getAllSamplesForOwner(address _owner) public constant returns(uint[]) {\r\n        uint[] memory samples = tokensOwned[_owner];\r\n        \r\n        uint[] memory usersSamples = new uint[](samples.length * 2);\r\n        \r\n        uint j = 0;\r\n        \r\n        for(uint i = 0; i < samples.length; ++i) {\r\n            usersSamples[j] = samples[i];\r\n            usersSamples[j + 1] = tokenType[samples[i]];\r\n            j += 2;\r\n        }\r\n        \r\n        return usersSamples;\r\n    }\r\n    \r\n    // Internal functions of the contract\r\n    \r\n    function addSample(address _owner, uint32 _sampleType, uint _sampleId) internal {\r\n        tokensForOwner[_sampleId] = _owner;\r\n        \r\n        tokensOwned[_owner].push(_sampleId);\r\n        \r\n        tokenType[_sampleId] = _sampleType;\r\n        \r\n        tokenPosInArr[_sampleId] = tokensOwned[_owner].length - 1;\r\n    }\r\n    \r\n     // Owner functions \r\n    // Set the crypto jingles contract can \r\n    function setCryptoJinglesContract(address _cryptoJingles) public onlyOwner {\r\n        require(cryptoJingles == 0x0);\r\n        \r\n        cryptoJingles = _cryptoJingles;\r\n    }\r\n    \r\n    function setSampleRegistry(address _sampleRegistry) public onlyOwner {\r\n        sampleRegistry = _sampleRegistry;\r\n    }\r\n}\r\n\r\ncontract CryptoJingles is Ownable {\r\n    \r\n    struct Purchase {\r\n        address user;\r\n        uint blockNumber;\r\n        bool revealed;\r\n        uint numSamples;\r\n        bool exists;\r\n    }\r\n    \r\n    event Purchased(address indexed user, uint blockNumber, uint numJingles, uint numOfPurchases);\r\n    event JinglesOpened(address byWhom, address jingleOwner, uint currBlockNumber);\r\n    \r\n    mapping (uint => bool) public isAlreadyUsed;\r\n    \r\n    mapping(address => string) public authors;\r\n\r\n    uint numOfPurchases;\r\n    \r\n    uint MAX_SAMPLES_PER_PURCHASE = 15;\r\n    uint SAMPLE_PRICE = 10 ** 15;\r\n    uint SAMPLES_PER_JINGLE = 5;\r\n    uint NUM_SAMPLE_RANGE = 1000;\r\n    \r\n    Sample public sampleContract;\r\n    Jingle public jingleContract;\r\n    \r\n    function CryptoJingles(address _sample, address _jingle) public {\r\n        numOfPurchases = 0;\r\n        sampleContract = Sample(_sample);\r\n        jingleContract = Jingle(_jingle);\r\n    }\r\n    \r\n    function buySamples(uint _numSamples, address _to) public payable {\r\n        require(_numSamples <= MAX_SAMPLES_PER_PURCHASE);\r\n        require(msg.value >= (SAMPLE_PRICE * _numSamples));\r\n        require(_to != 0x0);\r\n        \r\n         for (uint i = 0; i < _numSamples; ++i) {\r\n            \r\n            bytes32 blockHash = block.blockhash(block.number - 1);\r\n            \r\n            uint randomNum = randomGen(blockHash, i);\r\n            sampleContract.mint(_to, randomNum);\r\n        }\r\n        \r\n        Purchased(_to, block.number, _numSamples, numOfPurchases);\r\n        \r\n        numOfPurchases++;\r\n    }\r\n    \r\n    function composeJingle(string name, uint32[5] samples, uint8[20] settings) public {\r\n        require(jingleContract.uniqueJingles(keccak256(samples)) == false);\r\n        \r\n        uint32[5] memory sampleTypes;\r\n        \r\n        //check if you own all the 5 samples \r\n        for (uint i = 0; i < SAMPLES_PER_JINGLE; ++i) {\r\n            bool isOwner = sampleContract.isTokenOwner(samples[i], msg.sender);\r\n            \r\n            require(isOwner == true && isAlreadyUsed[samples[i]] == false);\r\n            \r\n            isAlreadyUsed[samples[i]] = true;\r\n            \r\n            sampleTypes[i] = sampleContract.tokenType(samples[i]);\r\n            sampleContract.removeSample(msg.sender, samples[i]);\r\n        }\r\n        \r\n        //create a new jingle containing those 5 samples\r\n        jingleContract.composeJingle(msg.sender, samples, sampleTypes, name,\r\n                            authors[msg.sender], settings);\r\n    }\r\n    \r\n    // Addresses can set their name when composing jingles\r\n    function setAuthorName(string _name) public {\r\n        authors[msg.sender] = _name;\r\n    }\r\n    \r\n    function randomGen(bytes32 blockHash, uint seed) constant public returns (uint randomNumber) {\r\n        return (uint(keccak256(blockHash, block.timestamp, numOfPurchases, seed )) % NUM_SAMPLE_RANGE);\r\n    }\r\n    \r\n    // The only ether kept on this contract are owner money for samples\r\n    function withdraw(uint _amount) public onlyOwner {\r\n        require(_amount <= this.balance);\r\n        \r\n        msg.sender.transfer(_amount);\r\n    }\r\n    \r\n}\r\n\r\ncontract Marketplace is Ownable {\r\n    \r\n    modifier onlyJingle() {\r\n        require(msg.sender == address(jingleContract));\r\n        _;\r\n    }\r\n    \r\n    struct Order {\r\n        uint price;\r\n        address seller;\r\n        uint timestamp;\r\n        bool exists;\r\n    }\r\n    \r\n    event SellOrder(address owner, uint jingleId, uint price);\r\n    event Bought(uint jingleId, address buyer, uint price);\r\n    event Canceled(address owner, uint jingleId);\r\n    \r\n    uint public numOrders;\r\n    uint public ownerBalance;\r\n    \r\n    uint OWNERS_CUT = 3; // 3 percent of every sale goes to owner\r\n    \r\n    mapping (uint => Order) public sellOrders;\r\n    mapping(uint => uint) public positionOfJingle;\r\n    \r\n    uint[] public jinglesOnSale;\r\n    \r\n    Jingle public jingleContract;\r\n    \r\n    function Marketplace(address _jingle) public {\r\n        jingleContract = Jingle(_jingle);\r\n        ownerBalance = 0;\r\n    }\r\n\r\n    function sell(address _owner, uint _jingleId, uint _amount) public onlyJingle {\r\n        require(_amount > 100);\r\n        require(sellOrders[_jingleId].exists == false);\r\n        \r\n        sellOrders[_jingleId] = Order({\r\n           price: _amount,\r\n           seller: _owner,\r\n           timestamp: now,\r\n           exists: true\r\n        });\r\n        \r\n        numOrders++;\r\n        \r\n        // set for iterating\r\n        jinglesOnSale.push(_jingleId);\r\n        positionOfJingle[_jingleId] = jinglesOnSale.length - 1;\r\n        \r\n        //transfer ownership \r\n        jingleContract.transferFrom(_owner, this, _jingleId);\r\n        \r\n        //Fire an sell event\r\n        SellOrder(_owner, _jingleId, _amount);\r\n    }\r\n    \r\n    function buy(uint _jingleId) public payable {\r\n        require(sellOrders[_jingleId].exists == true);\r\n        require(msg.value >= sellOrders[_jingleId].price);\r\n        \r\n        sellOrders[_jingleId].exists = false;\r\n        \r\n        numOrders--;\r\n        \r\n        //delete stuff for iterating \r\n        removeOrder(_jingleId);\r\n        \r\n        //transfer ownership \r\n        jingleContract.transfer(msg.sender, _jingleId);\r\n        \r\n        // transfer money to seller\r\n        uint price = sellOrders[_jingleId].price;\r\n        \r\n        uint threePercent = (price / 100) * OWNERS_CUT;\r\n        \r\n        sellOrders[_jingleId].seller.transfer(price - threePercent);\r\n        \r\n        ownerBalance += threePercent;\r\n        \r\n        //fire and event\r\n        Bought(_jingleId, msg.sender, msg.value);\r\n    }\r\n    \r\n    function cancel(uint _jingleId) public {\r\n        require(sellOrders[_jingleId].exists == true);\r\n        require(sellOrders[_jingleId].seller == msg.sender);\r\n        \r\n        sellOrders[_jingleId].exists = false;\r\n        \r\n        numOrders--;\r\n        \r\n        //delete stuff for iterating \r\n        removeOrder(_jingleId);\r\n        \r\n        jingleContract.transfer(msg.sender, _jingleId);\r\n        \r\n        //fire and event\r\n        Canceled(msg.sender, _jingleId);\r\n    }\r\n    \r\n    function removeOrder(uint _jingleId) internal {\r\n        uint length = jinglesOnSale.length;\r\n        uint index = positionOfJingle[_jingleId];\r\n        uint lastOne = jinglesOnSale[length - 1];\r\n\r\n        jinglesOnSale[index] = lastOne;\r\n        positionOfJingle[lastOne] = index;\r\n\r\n        delete jinglesOnSale[length - 1];\r\n        jinglesOnSale.length--;\r\n    }\r\n    \r\n    function getAllJinglesOnSale() public view returns(uint[]) {\r\n        return jinglesOnSale;\r\n    }\r\n    \r\n    //Owners functions \r\n    function withdraw(uint _amount) public onlyOwner {\r\n        require(_amount <= ownerBalance);\r\n        \r\n        msg.sender.transfer(_amount);\r\n    }\r\n    \r\n}", "OptimizationUsed": "0", "ContractName": "Jingle", "ByteCode": "0x606060405260043610610149576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806301fe45e11461014e578063085bcb3414610194578063095ea7b31461020c5780631051db341461024e5780631102610e1461027b57806318160ddd146102b4578063210ab6af146102dd57806323b872dd146103065780632535b150146103675780632f745c59146103bc57806342e296d31461041257806349ee2ae1146104585780636352211e146104e65780636f2feb0a1461054957806370a082311461057557806378533046146105c25780638da5cb5b146106ca578063a9059cbb1461071f578063b1aac62914610761578063b78e4bfd14610798578063ba1803c1146108da578063bea40bad14610913578063cfac228014610a57578063d1bb5cf114610a96578063f2fde38b14610aeb575b600080fd5b341561015957600080fd5b6101786004808035906020019091908035906020019091905050610b24565b604051808260ff1660ff16815260200191505060405180910390f35b341561019f57600080fd5b6101b56004808035906020019091905050610b5c565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156101f85780820151818401526020810190506101dd565b505050509050019250505060405180910390f35b341561021757600080fd5b61024c600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610bcd565b005b341561025957600080fd5b610261610d9f565b604051808215151515815260200191505060405180910390f35b341561028657600080fd5b6102b2600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610da8565b005b34156102bf57600080fd5b6102c7610e8e565b6040518082815260200191505060405180910390f35b34156102e857600080fd5b6102f0610e98565b6040518082815260200191505060405180910390f35b341561031157600080fd5b610365600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610e9e565b005b341561037257600080fd5b61037a6110ae565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156103c757600080fd5b6103fc600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506110d4565b6040518082815260200191505060405180910390f35b341561041d57600080fd5b61043c6004808035906020019091908035906020019091905050611136565b604051808260ff1660ff16815260200191505060405180910390f35b341561046357600080fd5b61048f600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611178565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156104d25780820151818401526020810190506104b7565b505050509050019250505060405180910390f35b34156104f157600080fd5b6105076004808035906020019091905050611215565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561055457600080fd5b6105736004808035906020019091908035906020019091905050611252565b005b341561058057600080fd5b6105ac600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611362565b6040518082815260200191505060405180910390f35b34156105cd57600080fd5b6105e360048080359060200190919050506113ae565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b8381101561062757808201518184015260208101905061060c565b50505050905090810190601f1680156106545780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b8381101561068d578082015181840152602081019050610672565b50505050905090810190601f1680156106ba5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b34156106d557600080fd5b6106dd61152b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561072a57600080fd5b61075f600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611550565b005b341561076c57600080fd5b61079660048080359060200190919080359060200190820180359060200191909192905050611722565b005b34156107a357600080fd5b6107b960048080359060200190919050506117e1565b6040518080602001806020018381038352858181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156108465780601f1061081b57610100808354040283529160200191610846565b820191906000526020600020905b81548152906001019060200180831161082957829003601f168201915b50508381038252848181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156108c95780601f1061089e576101008083540402835291602001916108c9565b820191906000526020600020905b8154815290600101906020018083116108ac57829003601f168201915b505094505050505060405180910390f35b34156108e557600080fd5b610911600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611803565b005b341561091e57600080fd5b610a55600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908060a001906005806020026040519081016040528092919082600560200280828437820191505050505091908060a00190600580602002604051908101604052809291908260056020028082843782019150505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080610280019060148060200260405190810160405280929190826014602002808284378201915050505050919050506118e9565b005b3415610a6257600080fd5b610a7c600480803560001916906020019091905050611d90565b604051808215151515815260200191505060405180910390f35b3415610aa157600080fd5b610aa9611db0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610af657600080fd5b610b22600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611dd6565b005b600960205281600052604060002081601481101515610b3f57fe5b60209182820401919006915091509054906101000a900460ff1681565b610b6461226a565b60056000838152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610bc157602002820191906000526020600020905b815481526020019060010190808311610bad575b50505050509050919050565b60006001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515610c2657600080fd5b3373ffffffffffffffffffffffffffffffffffffffff16610c4682611215565b73ffffffffffffffffffffffffffffffffffffffff16141515610c6857600080fd5b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610ca357600080fd5b6000610cae82611f2b565b73ffffffffffffffffffffffffffffffffffffffff16141580610ce8575060008273ffffffffffffffffffffffffffffffffffffffff1614155b15610d9b57816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b5050565b60006001905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e0357600080fd5b6000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610e4a57600080fd5b80600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600a54905090565b600a5481565b60006001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515610ef757600080fd5b3373ffffffffffffffffffffffffffffffffffffffff16610f1782611f2b565b73ffffffffffffffffffffffffffffffffffffffff16141515610f3957600080fd5b8273ffffffffffffffffffffffffffffffffffffffff16610f5982611215565b73ffffffffffffffffffffffffffffffffffffffff16141515610f7b57600080fd5b60008273ffffffffffffffffffffffffffffffffffffffff1614151515610fa157600080fd5b60006002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610ffe8382611f68565b6110088282612151565b8060008473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110151561112257fe5b906000526020600020900154905092915050565b60086020528160005260406000208181548110151561115157fe5b9060005260206000209060209182820401919006915091509054906101000a900460ff1681565b61118061226a565b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561120957602002820191906000526020600020905b8154815260200190600101908083116111f5575b50505050509050919050565b60006001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b61127e600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683610bcd565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636a2724623384846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281526020019350505050600060405180830381600087803b151561134a57600080fd5b6102c65a03f1151561135b57600080fd5b5050505050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b6113b661227e565b6113be61227e565b6006600084815260200190815260200160002060000160066000858152602001908152602001600020600101818054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561147f5780601f106114545761010080835404028352916020019161147f565b820191906000526020600020905b81548152906001019060200180831161146257829003601f168201915b50505050509150808054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561151b5780601f106114f05761010080835404028352916020019161151b565b820191906000526020600020905b8154815290600101906020018083116114fe57829003601f168201915b5050505050905091509150915091565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156115a957600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561161657600080fd5b60006002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506116733382611f68565b61167d8282612151565b8060003373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4808273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b61172b83611215565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561176457600080fd5b8181600860008681526020019081526020016000209190611786929190612292565b50827f502e3b46aad530247f3dd21f612065d4b18ab1cfb1937f7ea71c899c469dd3088383604051808060200182810382528484828181526020019250602002808284378201915050935050505060405180910390a2505050565b6006602052806000526040600020600091509050806000019080600101905082565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561185e57600080fd5b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156118a557600080fd5b80600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561194757600080fd5b600a549050600160076000886040518082600560200280838360005b8381101561197e578082015181840152602081019050611963565b5050505090500191505060405180910390206000191660001916815260200190815260200160002060006101000a81548160ff021916908315150217905550866001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806001018281611a60919061233c565b9160005260206000209001600083909190915055508560056000838152602001908152602001600020906005611a97929190612368565b508160096000838152602001908152602001600020906014611aba9291906123bd565b506001600360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050036004600083815260200190815260200160002081905550600083511415611b5b576040805190810160405280601681526020017f536f756e64746f736869204e616b616a696e676c65730000000000000000000081525092505b60408051908101604052808581526020018481525060066000600a5481526020019081526020016000206000820151816000019080519060200190611ba1929190612457565b506020820151816001019080519060200190611bbe929190612457565b509050508673ffffffffffffffffffffffffffffffffffffffff16600a547f41266ae823e673e05c8eeaa4f6547cae3e46bb3aca61f70f82f8c374a567911a88888888886040518086600560200280838360005b83811015611c2d578082015181840152602081019050611c12565b5050505090500185600560200280838360005b83811015611c5b578082015181840152602081019050611c40565b50505050905001806020018060200184601460200280838360005b83811015611c91578082015181840152602081019050611c76565b50505050905001838103835286818151815260200191508051906020019080838360005b83811015611cd0578082015181840152602081019050611cb5565b50505050905090810190601f168015611cfd5780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b83811015611d36578082015181840152602081019050611d1b565b50505050905090810190601f168015611d635780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390a3600a6000815480929190600101919050555050505050505050565b60076020528060005260406000206000915054906101000a900460ff1681565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611e3157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611e6d57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806000600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050925060046000858152602001908152602001600020549150600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001840381548110151561201757fe5b906000526020600020900154905080600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208381548110151561207257fe5b906000526020600020900181905550816004600083815260200190815260200160002081905550600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600184038154811015156120e857fe5b906000526020600020900160009055600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548091906001900361214991906124d7565b505050505050565b816001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060010182816121f4919061233c565b9160005260206000209001600083909190915055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490500360046000838152602001908152602001600020819055505050565b602060405190810160405280600081525090565b602060405190810160405280600081525090565b82805482825590600052602060002090601f0160209004810192821561232b5791602002820160005b838211156122fc57833560ff1683826101000a81548160ff021916908360ff16021790555092602001926001016020816000010492830192600103026122bb565b80156123295782816101000a81549060ff02191690556001016020816000010492830192600103026122fc565b505b5090506123389190612503565b5090565b815481835581811511612363578183600052602060002091820191016123629190612533565b5b505050565b8280548282559060005260206000209081019282156123ac579160200282015b828111156123ab578251829063ffffffff16905591602001919060010190612388565b5b5090506123b99190612533565b5090565b826014601f016020900481019282156124465791602002820160005b8382111561241757835183826101000a81548160ff021916908360ff16021790555092602001926001016020816000010492830192600103026123d9565b80156124445782816101000a81549060ff0219169055600101602081600001049283019260010302612417565b505b5090506124539190612503565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061249857805160ff19168380011785556124c6565b828001600101855582156124c6579182015b828111156124c55782518255916020019190600101906124aa565b5b5090506124d39190612533565b5090565b8154818355818115116124fe578183600052602060002091820191016124fd9190612533565b5b505050565b61253091905b8082111561252c57600081816101000a81549060ff021916905550600101612509565b5090565b90565b61255591905b80821115612551576000816000905550600101612539565b5090565b905600a165627a7a72305820bc09aa234b6968a7b9aaec9dc5594ac3fb51a626c8a2d04d71baf7aa0345e6170029"}