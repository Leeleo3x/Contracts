{"Runs": "200", "SwarmSource": "bzzr://c32847606890f8601e3d113d8514b17db7321b7fb222d18fb157af42a76bfbc7", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"log_recast\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_total_supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"key\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"get_contract\",\"outputs\":[{\"name\":\"_contract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"log_move_fees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"log_demurrage_fees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"log_recast_fees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"log_approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"log_mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes32\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"log_transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_resolver\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.19+commit.c4cbbb05", "ConstructorArguments": "000000000000000000000000db2ddb220b8a55e0e4412130e6ae74d136c04ba2", "SourceCode": "pragma solidity ^0.4.19;\r\n\r\n/// @title Contract Resolver Interface\r\n/// @author Digix Holdings Pte Ltd\r\n\r\ncontract ResolverClient {\r\n\r\n  /// The address of the resolver contract for this project\r\n  address public resolver;\r\n  /// The key to identify this contract\r\n  bytes32 public key;\r\n\r\n  /// Make our own address available to us as a constant\r\n  address public CONTRACT_ADDRESS;\r\n\r\n  /// Function modifier to check if msg.sender corresponds to the resolved address of a given key\r\n  /// @param _contract The resolver key\r\n  modifier if_sender_is(bytes32 _contract) {\r\n    require(msg.sender == ContractResolver(resolver).get_contract(_contract));\r\n    _;\r\n  }\r\n\r\n  /// Function modifier to check resolver's locking status.\r\n  modifier unless_resolver_is_locked() {\r\n    require(is_locked() == false);\r\n    _;\r\n  }\r\n\r\n  /// @dev Initialize new contract\r\n  /// @param _key the resolver key for this contract\r\n  /// @return _success if the initialization is successful\r\n  function init(bytes32 _key, address _resolver)\r\n           internal\r\n           returns (bool _success)\r\n  {\r\n    bool _is_locked = ContractResolver(_resolver).locked();\r\n    if (_is_locked == false) {\r\n      CONTRACT_ADDRESS = address(this);\r\n      resolver = _resolver;\r\n      key = _key;\r\n      require(ContractResolver(resolver).init_register_contract(key, CONTRACT_ADDRESS));\r\n      _success = true;\r\n    }  else {\r\n      _success = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Destroy the contract and unregister self from the ContractResolver\r\n  /// @dev Can only be called by the owner of ContractResolver\r\n  function destroy()\r\n           public\r\n           returns (bool _success)\r\n  {\r\n    bool _is_locked = ContractResolver(resolver).locked();\r\n    require(!_is_locked);\r\n\r\n    address _owner_of_contract_resolver = ContractResolver(resolver).owner();\r\n    require(msg.sender == _owner_of_contract_resolver);\r\n\r\n    _success = ContractResolver(resolver).unregister_contract(key);\r\n    require(_success);\r\n\r\n    selfdestruct(_owner_of_contract_resolver);\r\n  }\r\n\r\n  /// @dev Check if resolver is locked\r\n  /// @return _locked if the resolver is currently locked\r\n  function is_locked()\r\n           private\r\n           constant\r\n           returns (bool _locked)\r\n  {\r\n    _locked = ContractResolver(resolver).locked();\r\n  }\r\n\r\n  /// @dev Get the address of a contract\r\n  /// @param _key the resolver key to look up\r\n  /// @return _contract the address of the contract\r\n  function get_contract(bytes32 _key)\r\n           public\r\n           constant\r\n           returns (address _contract)\r\n  {\r\n    _contract = ContractResolver(resolver).get_contract(_key);\r\n  }\r\n}\r\n\r\ncontract ContractResolver {\r\n  address public owner;\r\n  bool public locked;\r\n  function init_register_contract(bytes32 _key, address _contract_address)\r\n           public\r\n           returns (bool _success) {}\r\n\r\n  /// @dev Unregister a contract.  This can only be called from the contract with the key itself\r\n  /// @param _key the bytestring of the contract name\r\n  /// @return _success if the operation is successful\r\n  function unregister_contract(bytes32 _key)\r\n           public\r\n           returns (bool _success) {}\r\n\r\n  /// @dev Get address of a contract\r\n  /// @param _key the bytestring name of the contract to look up\r\n  /// @return _contract the address of the contract\r\n  function get_contract(bytes32 _key)\r\n           public\r\n           constant\r\n           returns (address _contract) {}\r\n}\r\n\r\ncontract DigixConstants {\r\n    /// general constants\r\n    uint256 constant SECONDS_IN_A_DAY = 24 * 60 * 60;\r\n\r\n    /// asset events\r\n    uint256 constant ASSET_EVENT_CREATED_VENDOR_ORDER = 1;\r\n    uint256 constant ASSET_EVENT_CREATED_TRANSFER_ORDER = 2;\r\n    uint256 constant ASSET_EVENT_CREATED_REPLACEMENT_ORDER = 3;\r\n    uint256 constant ASSET_EVENT_FULFILLED_VENDOR_ORDER = 4;\r\n    uint256 constant ASSET_EVENT_FULFILLED_TRANSFER_ORDER = 5;\r\n    uint256 constant ASSET_EVENT_FULFILLED_REPLACEMENT_ORDER = 6;\r\n    uint256 constant ASSET_EVENT_MINTED = 7;\r\n    uint256 constant ASSET_EVENT_MINTED_REPLACEMENT = 8;\r\n    uint256 constant ASSET_EVENT_RECASTED = 9;\r\n    uint256 constant ASSET_EVENT_REDEEMED = 10;\r\n    uint256 constant ASSET_EVENT_FAILED_AUDIT = 11;\r\n    uint256 constant ASSET_EVENT_ADMIN_FAILED = 12;\r\n    uint256 constant ASSET_EVENT_REMINTED = 13;\r\n\r\n    /// roles\r\n    uint256 constant ROLE_ZERO_ANYONE = 0;\r\n    uint256 constant ROLE_ROOT = 1;\r\n    uint256 constant ROLE_VENDOR = 2;\r\n    uint256 constant ROLE_XFERAUTH = 3;\r\n    uint256 constant ROLE_POPADMIN = 4;\r\n    uint256 constant ROLE_CUSTODIAN = 5;\r\n    uint256 constant ROLE_AUDITOR = 6;\r\n    uint256 constant ROLE_MARKETPLACE_ADMIN = 7;\r\n    uint256 constant ROLE_KYC_ADMIN = 8;\r\n    uint256 constant ROLE_FEES_ADMIN = 9;\r\n    uint256 constant ROLE_DOCS_UPLOADER = 10;\r\n    uint256 constant ROLE_KYC_RECASTER = 11;\r\n    uint256 constant ROLE_FEES_DISTRIBUTION_ADMIN = 12;\r\n\r\n    /// states\r\n    uint256 constant STATE_ZERO_UNDEFINED = 0;\r\n    uint256 constant STATE_CREATED = 1;\r\n    uint256 constant STATE_VENDOR_ORDER = 2;\r\n    uint256 constant STATE_TRANSFER = 3;\r\n    uint256 constant STATE_CUSTODIAN_DELIVERY = 4;\r\n    uint256 constant STATE_MINTED = 5;\r\n    uint256 constant STATE_AUDIT_FAILURE = 6;\r\n    uint256 constant STATE_REPLACEMENT_ORDER = 7;\r\n    uint256 constant STATE_REPLACEMENT_DELIVERY = 8;\r\n    uint256 constant STATE_RECASTED = 9;\r\n    uint256 constant STATE_REDEEMED = 10;\r\n    uint256 constant STATE_ADMIN_FAILURE = 11;\r\n\r\n\r\n\r\n    /// interactive contracts\r\n    bytes32 constant CONTRACT_INTERACTIVE_ASSETS_EXPLORER = \"i:asset:explorer\";\r\n    bytes32 constant CONTRACT_INTERACTIVE_DIGIX_DIRECTORY = \"i:directory\";\r\n    bytes32 constant CONTRACT_INTERACTIVE_MARKETPLACE = \"i:mp\";\r\n    bytes32 constant CONTRACT_INTERACTIVE_MARKETPLACE_ADMIN = \"i:mpadmin\";\r\n    bytes32 constant CONTRACT_INTERACTIVE_POPADMIN = \"i:popadmin\";\r\n    bytes32 constant CONTRACT_INTERACTIVE_PRODUCTS_LIST = \"i:products\";\r\n    bytes32 constant CONTRACT_INTERACTIVE_TOKEN = \"i:token\";\r\n    bytes32 constant CONTRACT_INTERACTIVE_BULK_WRAPPER = \"i:bulk-wrapper\";\r\n    bytes32 constant CONTRACT_INTERACTIVE_TOKEN_CONFIG = \"i:token:config\";\r\n    bytes32 constant CONTRACT_INTERACTIVE_TOKEN_INFORMATION = \"i:token:information\";\r\n    bytes32 constant CONTRACT_INTERACTIVE_MARKETPLACE_INFORMATION = \"i:mp:information\";\r\n    bytes32 constant CONTRACT_INTERACTIVE_IDENTITY = \"i:identity\";\r\n\r\n\r\n    /// controller contracts\r\n    bytes32 constant CONTRACT_CONTROLLER_ASSETS = \"c:asset\";\r\n    bytes32 constant CONTRACT_CONTROLLER_ASSETS_RECAST = \"c:asset:recast\";\r\n    bytes32 constant CONTRACT_CONTROLLER_ASSETS_EXPLORER = \"c:explorer\";\r\n    bytes32 constant CONTRACT_CONTROLLER_DIGIX_DIRECTORY = \"c:directory\";\r\n    bytes32 constant CONTRACT_CONTROLLER_MARKETPLACE = \"c:mp\";\r\n    bytes32 constant CONTRACT_CONTROLLER_MARKETPLACE_ADMIN = \"c:mpadmin\";\r\n    bytes32 constant CONTRACT_CONTROLLER_PRODUCTS_LIST = \"c:products\";\r\n\r\n    bytes32 constant CONTRACT_CONTROLLER_TOKEN_APPROVAL = \"c:token:approval\";\r\n    bytes32 constant CONTRACT_CONTROLLER_TOKEN_CONFIG = \"c:token:config\";\r\n    bytes32 constant CONTRACT_CONTROLLER_TOKEN_INFO = \"c:token:info\";\r\n    bytes32 constant CONTRACT_CONTROLLER_TOKEN_TRANSFER = \"c:token:transfer\";\r\n\r\n    bytes32 constant CONTRACT_CONTROLLER_JOB_ID = \"c:jobid\";\r\n    bytes32 constant CONTRACT_CONTROLLER_IDENTITY = \"c:identity\";\r\n\r\n    /// storage contracts\r\n    bytes32 constant CONTRACT_STORAGE_ASSETS = \"s:asset\";\r\n    bytes32 constant CONTRACT_STORAGE_ASSET_EVENTS = \"s:asset:events\";\r\n    bytes32 constant CONTRACT_STORAGE_DIGIX_DIRECTORY = \"s:directory\";\r\n    bytes32 constant CONTRACT_STORAGE_MARKETPLACE = \"s:mp\";\r\n    bytes32 constant CONTRACT_STORAGE_PRODUCTS_LIST = \"s:products\";\r\n    bytes32 constant CONTRACT_STORAGE_GOLD_TOKEN = \"s:goldtoken\";\r\n    bytes32 constant CONTRACT_STORAGE_JOB_ID = \"s:jobid\";\r\n    bytes32 constant CONTRACT_STORAGE_IDENTITY = \"s:identity\";\r\n\r\n    /// service contracts\r\n    bytes32 constant CONTRACT_SERVICE_TOKEN_DEMURRAGE = \"sv:tdemurrage\";\r\n    bytes32 constant CONTRACT_SERVICE_MARKETPLACE = \"sv:mp\";\r\n    bytes32 constant CONTRACT_SERVICE_DIRECTORY = \"sv:directory\";\r\n\r\n    /// fees distributors\r\n    bytes32 constant CONTRACT_DEMURRAGE_FEES_DISTRIBUTOR = \"fees:distributor:demurrage\";\r\n    bytes32 constant CONTRACT_RECAST_FEES_DISTRIBUTOR = \"fees:distributor:recast\";\r\n    bytes32 constant CONTRACT_TRANSFER_FEES_DISTRIBUTOR = \"fees:distributor:transfer\";\r\n\r\n}\r\n\r\ncontract TokenLoggerCallback is ResolverClient, DigixConstants {\r\n\r\n  event Transfer(address indexed _from,  address indexed _to,  uint256 _value);\r\n  event Approval(address indexed _owner,  address indexed _spender,  uint256 _value);\r\n\r\n  function log_mint(address _to, uint256 _value)\r\n           if_sender_is(CONTRACT_CONTROLLER_ASSETS)\r\n           public\r\n  {\r\n    Transfer(address(0x0), _to, _value);\r\n  }\r\n\r\n  function log_recast_fees(address _from, address _to, uint256 _value)\r\n           if_sender_is(CONTRACT_CONTROLLER_ASSETS_RECAST)\r\n           public\r\n  {\r\n    Transfer(_from, _to, _value);\r\n  }\r\n\r\n  function log_recast(address _from, uint256 _value)\r\n           if_sender_is(CONTRACT_CONTROLLER_ASSETS_RECAST)\r\n           public\r\n  {\r\n    Transfer(_from, address(0x0), _value);\r\n  }\r\n\r\n  function log_demurrage_fees(address _from, address _to, uint256 _value)\r\n           if_sender_is(CONTRACT_SERVICE_TOKEN_DEMURRAGE)\r\n           public\r\n  {\r\n    Transfer(_from, _to, _value);\r\n  }\r\n\r\n  function log_move_fees(address _from, address _to, uint256 _value)\r\n           if_sender_is(CONTRACT_CONTROLLER_TOKEN_CONFIG)\r\n           public\r\n  {\r\n    Transfer(_from, _to, _value);\r\n  }\r\n\r\n  function log_transfer(address _from, address _to, uint256 _value)\r\n           if_sender_is(CONTRACT_CONTROLLER_TOKEN_TRANSFER)\r\n           public\r\n  {\r\n    Transfer(_from, _to, _value);\r\n  }\r\n\r\n  function log_approve(address _owner, address _spender, uint256 _value)\r\n           if_sender_is(CONTRACT_CONTROLLER_TOKEN_APPROVAL)\r\n           public\r\n  {\r\n    Approval(_owner, _spender, _value);\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract TokenInfoController {\r\n  function get_total_supply() constant public returns (uint256 _total_supply){}\r\n  function get_allowance(address _account, address _spender) constant public returns (uint256 _allowance){}\r\n  function get_balance(address _user) constant public returns (uint256 _actual_balance){}\r\n}\r\n\r\ncontract TokenTransferController {\r\n  function put_transfer(address _sender, address _recipient, address _spender, uint256 _amount, bool _transfer_from) public returns (bool _success){}\r\n}\r\n\r\ncontract TokenApprovalController {\r\n  function approve(address _account, address _spender, uint256 _amount) public returns (bool _success){}\r\n}\r\n\r\n/// The interface of a contract that can receive tokens from transferAndCall()\r\ncontract TokenReceiver {\r\n  function tokenFallback(address from, uint256 amount, bytes32 data) public returns (bool success);\r\n}\r\n\r\n/// @title DGX2.0 ERC-20 Token. ERC-677 is also implemented https://github.com/ethereum/EIPs/issues/677\r\n/// @author Digix Holdings Pte Ltd\r\ncontract Token is TokenLoggerCallback {\r\n\r\n  string public constant name = \"Digix Gold Token\";\r\n  string public constant symbol = \"DGX\";\r\n  uint8 public constant decimals = 9;\r\n\r\n  function Token(address _resolver) public\r\n  {\r\n    require(init(CONTRACT_INTERACTIVE_TOKEN, _resolver));\r\n  }\r\n\r\n  /// @notice show the total supply of gold tokens\r\n  /// @return {\r\n  ///    \"totalSupply\": \"total number of tokens\"\r\n  /// }\r\n  function totalSupply()\r\n           constant\r\n           public\r\n           returns (uint256 _total_supply)\r\n  {\r\n    _total_supply = TokenInfoController(get_contract(CONTRACT_CONTROLLER_TOKEN_INFO)).get_total_supply();\r\n  }\r\n\r\n  /// @notice display balance of given account\r\n  /// @param _owner the account to query\r\n  /// @return {\r\n  ///    \"balance\": \"balance of the given account in nanograms\"\r\n  /// }\r\n  function balanceOf(address _owner)\r\n           constant\r\n           public\r\n           returns (uint256 balance)\r\n  {\r\n    balance = TokenInfoController(get_contract(CONTRACT_CONTROLLER_TOKEN_INFO)).get_balance(_owner);\r\n  }\r\n\r\n  /// @notice transfer amount to account\r\n  /// @param _to account to send to\r\n  /// @param _value the amount in nanograms to send\r\n  /// @return {\r\n  ///    \"success\": \"returns true if successful\"\r\n  /// }\r\n  function transfer(address _to, uint256 _value)\r\n           public\r\n           returns (bool success)\r\n  {\r\n    success =\r\n      TokenTransferController(get_contract(CONTRACT_CONTROLLER_TOKEN_TRANSFER)).put_transfer(msg.sender, _to, 0x0, _value, false);\r\n  }\r\n\r\n  /// @notice transfer amount to account from account deducting from spender allowance\r\n  /// @param _to account to send to\r\n  /// @param _from account to send from\r\n  /// @param _value the amount in nanograms to send\r\n  /// @return {\r\n  ///    \"success\": \"returns true if successful\"\r\n  /// }\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n           public\r\n           returns (bool success)\r\n  {\r\n    success =\r\n      TokenTransferController(get_contract(CONTRACT_CONTROLLER_TOKEN_TRANSFER)).put_transfer(_from, _to, msg.sender,\r\n                                                                             _value, true);\r\n  }\r\n\r\n  /// @notice implements transferAndCall() of ERC677\r\n  /// @param _receiver the contract to receive the token\r\n  /// @param _amount the amount of tokens to be transfered\r\n  /// @param _data the data to be passed to the tokenFallback function of the receiving contract\r\n  /// @return {\r\n  ///    \"success\": \"returns true if successful\"\r\n  /// }\r\n  function transferAndCall(address _receiver, uint256 _amount, bytes32 _data)\r\n           public\r\n           returns (bool success)\r\n  {\r\n    transfer(_receiver, _amount);\r\n    success = TokenReceiver(_receiver).tokenFallback(msg.sender, _amount, _data);\r\n    require(success);\r\n  }\r\n\r\n  /// @notice approve given spender to transfer given amount this will set allowance to 0 if current value is non-zero\r\n  /// @param _spender the account that is given an allowance\r\n  /// @param _value the amount in nanograms to approve\r\n  /// @return {\r\n  ///   \"success\": \"returns true if successful\"\r\n  /// }\r\n  function approve(address _spender, uint256 _value)\r\n           public\r\n           returns (bool success)\r\n  {\r\n    success = TokenApprovalController(get_contract(CONTRACT_CONTROLLER_TOKEN_APPROVAL)).approve(msg.sender, _spender, _value);\r\n  }\r\n\r\n  /// @notice check the spending allowance of a given user from a given account\r\n  /// @param _owner the account to spend from\r\n  /// @param _spender the spender\r\n  /// @return {\r\n  ///    \"remaining\": \"the remaining allowance in nanograms\"\r\n  /// }\r\n  function allowance(address _owner, address _spender)\r\n           constant\r\n           public\r\n           returns (uint256 remaining)\r\n  {\r\n    remaining = TokenInfoController(get_contract(CONTRACT_CONTROLLER_TOKEN_INFO)).get_allowance(_owner, _spender);\r\n  }\r\n\r\n}", "OptimizationUsed": "0", "ContractName": "Token", "ByteCode": "0x606060405260043610610128576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806304f3bcec1461012d57806306fdde0314610182578063095ea7b3146102105780630eebd59b1461026a57806318160ddd146102ac57806323b872dd146102d5578063313ce5671461034e5780633943380c1461037d5780633f83acff146103ae57806355e9caa11461041557806370a082311461047657806379f0b427146104c357806383197ef014610524578063843584f11461055157806388e114cc146105b2578063916635c61461061357806395d89b4114610655578063a9059cbb146106e3578063b9570c011461073d578063db4ecbc1146107a4578063dd62ed3e146107f9578063ef11e18b14610865575b600080fd5b341561013857600080fd5b6101406108c6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561018d57600080fd5b6101956108eb565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101d55780820151818401526020810190506101ba565b50505050905090810190601f1680156102025780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561021b57600080fd5b610250600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610924565b604051808215151515815260200191505060405180910390f35b341561027557600080fd5b6102aa600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610a50565b005b34156102b757600080fd5b6102bf610bd0565b6040518082815260200191505060405180910390f35b34156102e057600080fd5b610334600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610c86565b604051808215151515815260200191505060405180910390f35b341561035957600080fd5b610361610df4565b604051808260ff1660ff16815260200191505060405180910390f35b341561038857600080fd5b610390610df9565b60405180826000191660001916815260200191505060405180910390f35b34156103b957600080fd5b6103d3600480803560001916906020019091905050610dff565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561042057600080fd5b610474600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610ec3565b005b341561048157600080fd5b6104ad600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611043565b6040518082815260200191505060405180910390f35b34156104ce57600080fd5b610522600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611132565b005b341561052f57600080fd5b6105376112b2565b604051808215151515815260200191505060405180910390f35b341561055c57600080fd5b6105b0600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611536565b005b34156105bd57600080fd5b610611600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506116b6565b005b341561061e57600080fd5b610653600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611836565b005b341561066057600080fd5b6106686119b6565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156106a857808201518184015260208101905061068d565b50505050905090810190601f1680156106d55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156106ee57600080fd5b610723600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506119ef565b604051808215151515815260200191505060405180910390f35b341561074857600080fd5b61078a600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803560001916906020019091905050611b46565b604051808215151515815260200191505060405180910390f35b34156107af57600080fd5b6107b7611c3e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561080457600080fd5b61084f600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611c64565b6040518082815260200191505060405180910390f35b341561087057600080fd5b6108c4600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611d88565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280601081526020017f446967697820476f6c6420546f6b656e0000000000000000000000000000000081525081565b600061094f7f633a746f6b656e3a617070726f76616c00000000000000000000000000000000610dff565b73ffffffffffffffffffffffffffffffffffffffff1663e1f21c673385856000604051602001526040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b1515610a2d57600080fd5b6102c65a03f11515610a3e57600080fd5b50505060405180519050905092915050565b7f633a61737365743a7265636173740000000000000000000000000000000000006000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633f83acff826000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b1515610b1157600080fd5b6102c65a03f11515610b2257600080fd5b5050506040518051905073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b6557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3505050565b6000610bfb7f633a746f6b656e3a696e666f0000000000000000000000000000000000000000610dff565b73ffffffffffffffffffffffffffffffffffffffff1663f923058c6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1515610c6657600080fd5b6102c65a03f11515610c7757600080fd5b50505060405180519050905090565b6000610cb17f633a746f6b656e3a7472616e7366657200000000000000000000000000000000610dff565b73ffffffffffffffffffffffffffffffffffffffff166392846ab68585338660016000604051602001526040518663ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018215151515815260200195505050505050602060405180830381600087803b1515610dd057600080fd5b6102c65a03f11515610de157600080fd5b5050506040518051905090509392505050565b600981565b60015481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633f83acff836000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b1515610ea157600080fd5b6102c65a03f11515610eb257600080fd5b505050604051805190509050919050565b7f633a746f6b656e3a636f6e6669670000000000000000000000000000000000006000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633f83acff826000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b1515610f8457600080fd5b6102c65a03f11515610f9557600080fd5b5050506040518051905073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610fd857600080fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a350505050565b600061106e7f633a746f6b656e3a696e666f0000000000000000000000000000000000000000610dff565b73ffffffffffffffffffffffffffffffffffffffff16631e279a37836000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561111057600080fd5b6102c65a03f1151561112157600080fd5b505050604051805190509050919050565b7f73763a7464656d757272616765000000000000000000000000000000000000006000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633f83acff826000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b15156111f357600080fd5b6102c65a03f1151561120457600080fd5b5050506040518051905073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561124757600080fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a350505050565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cf3090126000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b151561134457600080fd5b6102c65a03f1151561135557600080fd5b5050506040518051905091508115151561136e57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15156113fb57600080fd5b6102c65a03f1151561140c57600080fd5b5050506040518051905090508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561145257600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c8b56bda6001546000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b15156114f457600080fd5b6102c65a03f1151561150557600080fd5b50505060405180519050925082151561151d57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16ff5b7f633a61737365743a7265636173740000000000000000000000000000000000006000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633f83acff826000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b15156115f757600080fd5b6102c65a03f1151561160857600080fd5b5050506040518051905073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561164b57600080fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a350505050565b7f633a746f6b656e3a617070726f76616c000000000000000000000000000000006000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633f83acff826000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b151561177757600080fd5b6102c65a03f1151561178857600080fd5b5050506040518051905073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156117cb57600080fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a350505050565b7f633a6173736574000000000000000000000000000000000000000000000000006000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633f83acff826000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b15156118f757600080fd5b6102c65a03f1151561190857600080fd5b5050506040518051905073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561194b57600080fd5b8273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3505050565b6040805190810160405280600381526020017f444758000000000000000000000000000000000000000000000000000000000081525081565b6000611a1a7f633a746f6b656e3a7472616e7366657200000000000000000000000000000000610dff565b73ffffffffffffffffffffffffffffffffffffffff166392846ab63385600086600080604051602001526040518663ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018215151515815260200195505050505050602060405180830381600087803b1515611b2357600080fd5b6102c65a03f11515611b3457600080fd5b50505060405180519050905092915050565b6000611b5284846119ef565b508373ffffffffffffffffffffffffffffffffffffffff16638397cc943385856000604051602001526040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182600019166000191681526020019350505050602060405180830381600087803b1515611c0e57600080fd5b6102c65a03f11515611c1f57600080fd5b505050604051805190509050801515611c3757600080fd5b9392505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000611c8f7f633a746f6b656e3a696e666f0000000000000000000000000000000000000000610dff565b73ffffffffffffffffffffffffffffffffffffffff16631883699484846000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b1515611d6557600080fd5b6102c65a03f11515611d7657600080fd5b50505060405180519050905092915050565b7f633a746f6b656e3a7472616e73666572000000000000000000000000000000006000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633f83acff826000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b1515611e4957600080fd5b6102c65a03f11515611e5a57600080fd5b5050506040518051905073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611e9d57600080fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663cf3090126000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1515611f7757600080fd5b6102c65a03f11515611f8857600080fd5b5050506040518051905090506000151581151514156121545730600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600181600019169055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c0f6ef4a600154600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000604051602001526040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600019166000191681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b151561212557600080fd5b6102c65a03f1151561213657600080fd5b50505060405180519050151561214b57600080fd5b60019150612159565b600091505b50929150505600a165627a7a72305820c32847606890f8601e3d113d8514b17db7321b7fb222d18fb157af42a76bfbc70029"}