{"Runs": "200", "SwarmSource": "bzzr://d78442629678404b5e168d4e0dd214f8d287d7ca04eaf1b8d4f3fe3c9eb6b489", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getFreezing\",\"outputs\":[{\"name\":\"_release\",\"type\":\"uint64\"},{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_until\",\"type\":\"uint64\"}],\"name\":\"mintAndFreeze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"actualBalanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_until\",\"type\":\"uint64\"}],\"name\":\"freezeTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseAll\",\"outputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseOnce\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"freezingCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"freezingBalanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"release\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Freezed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Released\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.20+commit.3155dd80", "ConstructorArguments": "", "SourceCode": "/*\r\n * This file was generated by MyWish Platform (https://mywish.io/)\r\n * The complete code could be found at https://github.com/MyWishPlatform/\r\n * Copyright (C) 2018 MyWish\r\n *\r\n * This program is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\npragma solidity ^0.4.20;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n\r\ncontract FreezableToken is StandardToken {\r\n    // freezing chains\r\n    mapping (bytes32 => uint64) internal chains;\r\n    // freezing amounts for each chain\r\n    mapping (bytes32 => uint) internal freezings;\r\n    // total freezing balance per address\r\n    mapping (address => uint) internal freezingBalance;\r\n\r\n    event Freezed(address indexed to, uint64 release, uint amount);\r\n    event Released(address indexed owner, uint amount);\r\n\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address include freezing tokens.\r\n     * @param _owner The address to query the the balance of.\r\n     * @return An uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return super.balanceOf(_owner) + freezingBalance[_owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address without freezing tokens.\r\n     * @param _owner The address to query the the balance of.\r\n     * @return An uint256 representing the amount owned by the passed address.\r\n     */\r\n    function actualBalanceOf(address _owner) public view returns (uint256 balance) {\r\n        return super.balanceOf(_owner);\r\n    }\r\n\r\n    function freezingBalanceOf(address _owner) public view returns (uint256 balance) {\r\n        return freezingBalance[_owner];\r\n    }\r\n\r\n    /**\r\n     * @dev gets freezing count\r\n     * @param _addr Address of freeze tokens owner.\r\n     */\r\n    function freezingCount(address _addr) public view returns (uint count) {\r\n        uint64 release = chains[toKey(_addr, 0)];\r\n        while (release != 0) {\r\n            count ++;\r\n            release = chains[toKey(_addr, release)];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev gets freezing end date and freezing balance for the freezing portion specified by index.\r\n     * @param _addr Address of freeze tokens owner.\r\n     * @param _index Freezing portion index. It ordered by release date descending.\r\n     */\r\n    function getFreezing(address _addr, uint _index) public view returns (uint64 _release, uint _balance) {\r\n        for (uint i = 0; i < _index + 1; i ++) {\r\n            _release = chains[toKey(_addr, _release)];\r\n            if (_release == 0) {\r\n                return;\r\n            }\r\n        }\r\n        _balance = freezings[toKey(_addr, _release)];\r\n    }\r\n\r\n    /**\r\n     * @dev freeze your tokens to the specified address.\r\n     *      Be careful, gas usage is not deterministic,\r\n     *      and depends on how many freezes _to address already has.\r\n     * @param _to Address to which token will be freeze.\r\n     * @param _amount Amount of token to freeze.\r\n     * @param _until Release date, must be in future.\r\n     */\r\n    function freezeTo(address _to, uint _amount, uint64 _until) public {\r\n        require(_to != address(0));\r\n        require(_amount <= balances[msg.sender]);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n\r\n        bytes32 currentKey = toKey(_to, _until);\r\n        freezings[currentKey] = freezings[currentKey].add(_amount);\r\n        freezingBalance[_to] = freezingBalance[_to].add(_amount);\r\n\r\n        freeze(_to, _until);\r\n        Freezed(_to, _until, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev release first available freezing tokens.\r\n     */\r\n    function releaseOnce() public {\r\n        bytes32 headKey = toKey(msg.sender, 0);\r\n        uint64 head = chains[headKey];\r\n        require(head != 0);\r\n        require(uint64(block.timestamp) > head);\r\n        bytes32 currentKey = toKey(msg.sender, head);\r\n\r\n        uint64 next = chains[currentKey];\r\n\r\n        uint amount = freezings[currentKey];\r\n        delete freezings[currentKey];\r\n\r\n        balances[msg.sender] = balances[msg.sender].add(amount);\r\n        freezingBalance[msg.sender] = freezingBalance[msg.sender].sub(amount);\r\n\r\n        if (next == 0) {\r\n            delete chains[headKey];\r\n        }\r\n        else {\r\n            chains[headKey] = next;\r\n            delete chains[currentKey];\r\n        }\r\n        Released(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev release all available for release freezing tokens. Gas usage is not deterministic!\r\n     * @return how many tokens was released\r\n     */\r\n    function releaseAll() public returns (uint tokens) {\r\n        uint release;\r\n        uint balance;\r\n        (release, balance) = getFreezing(msg.sender, 0);\r\n        while (release != 0 && block.timestamp > release) {\r\n            releaseOnce();\r\n            tokens += balance;\r\n            (release, balance) = getFreezing(msg.sender, 0);\r\n        }\r\n    }\r\n\r\n    function toKey(address _addr, uint _release) internal pure returns (bytes32 result) {\r\n        // WISH masc to increase entropy\r\n        result = 0x5749534800000000000000000000000000000000000000000000000000000000;\r\n        assembly {\r\n            result := or(result, mul(_addr, 0x10000000000000000))\r\n            result := or(result, _release)\r\n        }\r\n    }\r\n\r\n    function freeze(address _to, uint64 _until) internal {\r\n        require(_until > block.timestamp);\r\n        bytes32 key = toKey(_to, _until);\r\n        bytes32 parentKey = toKey(_to, uint64(0));\r\n        uint64 next = chains[parentKey];\r\n\r\n        if (next == 0) {\r\n            chains[parentKey] = _until;\r\n            return;\r\n        }\r\n\r\n        bytes32 nextKey = toKey(_to, next);\r\n        uint parent;\r\n\r\n        while (next != 0 && _until > next) {\r\n            parent = next;\r\n            parentKey = nextKey;\r\n\r\n            next = chains[nextKey];\r\n            nextKey = toKey(_to, next);\r\n        }\r\n\r\n        if (_until == next) {\r\n            return;\r\n        }\r\n\r\n        if (next != 0) {\r\n            chains[key] = next;\r\n        }\r\n\r\n        chains[parentKey] = _until;\r\n    }\r\n}\r\n\r\n/**\r\n* @title Contract that will work with ERC223 tokens.\r\n*/\r\n\r\ncontract ERC223Receiver {\r\n    /**\r\n     * @dev Standard ERC223 function that will handle incoming token transfers.\r\n     *\r\n     * @param _from  Token sender address.\r\n     * @param _value Amount of tokens.\r\n     * @param _data  Transaction metadata.\r\n     */\r\n    function tokenFallback(address _from, uint _value, bytes _data) public;\r\n}\r\n\r\ncontract ERC223Basic is ERC20Basic {\r\n    function transfer(address to, uint value, bytes data) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value, bytes data);\r\n}\r\n\r\n\r\ncontract SuccessfulERC223Receiver is ERC223Receiver {\r\n    event Invoked(address from, uint value, bytes data);\r\n\r\n    function tokenFallback(address _from, uint _value, bytes _data) public {\r\n        Invoked(_from, _value, _data);\r\n    }\r\n}\r\n\r\ncontract FailingERC223Receiver is ERC223Receiver {\r\n    function tokenFallback(address, uint, bytes) public {\r\n        revert();\r\n    }\r\n}\r\n\r\ncontract ERC223ReceiverWithoutTokenFallback {\r\n}\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is StandardToken {\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 _value) public {\r\n        require(_value > 0);\r\n        require(_value <= balances[msg.sender]);\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        Burn(burner, _value);\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n\r\n\r\ncontract FreezableMintableToken is FreezableToken, MintableToken {\r\n    /**\r\n     * @dev Mint the specified amount of token to the specified address and freeze it until the specified date.\r\n     *      Be careful, gas usage is not deterministic,\r\n     *      and depends on how many freezes _to address already has.\r\n     * @param _to Address to which token will be freeze.\r\n     * @param _amount Amount of token to mint and freeze.\r\n     * @param _until Release date, must be in future.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mintAndFreeze(address _to, uint _amount, uint64 _until) onlyOwner canMint public returns (bool) {\r\n        totalSupply = totalSupply.add(_amount);\r\n\r\n        bytes32 currentKey = toKey(_to, _until);\r\n        freezings[currentKey] = freezings[currentKey].add(_amount);\r\n        freezingBalance[_to] = freezingBalance[_to].add(_amount);\r\n\r\n        freeze(_to, _until);\r\n        Mint(_to, _amount);\r\n        Freezed(_to, _until, _amount);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract Consts {\r\n    uint constant TOKEN_DECIMALS = 18;\r\n    uint8 constant TOKEN_DECIMALS_UINT8 = 18;\r\n    uint constant TOKEN_DECIMAL_MULTIPLIER = 10 ** TOKEN_DECIMALS;\r\n\r\n    string constant TOKEN_NAME = \"Block-Chain.com Token\";\r\n    string constant TOKEN_SYMBOL = \"BC\";\r\n    bool constant PAUSED = false;\r\n    address constant TARGET_USER = 0x39e1ABc4440A59a54790b7A729812981BbEA4295;\r\n    \r\n    bool constant CONTINUE_MINTING = false;\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Reference implementation of the ERC223 standard token.\r\n */\r\ncontract ERC223Token is ERC223Basic, BasicToken, FailingERC223Receiver {\r\n    using SafeMath for uint;\r\n\r\n    /**\r\n     * @dev Transfer the specified amount of tokens to the specified address.\r\n     *      Invokes the `tokenFallback` function if the recipient is a contract.\r\n     *      The token transfer fails if the recipient is a contract\r\n     *      but does not implement the `tokenFallback` function\r\n     *      or the fallback function to receive funds.\r\n     *\r\n     * @param _to    Receiver address.\r\n     * @param _value Amount of tokens that will be transferred.\r\n     * @param _data  Transaction metadata.\r\n     */\r\n    function transfer(address _to, uint _value, bytes _data) public returns (bool) {\r\n        // Standard function transfer similar to ERC20 transfer with no _data .\r\n        // Added due to backwards compatibility reasons .\r\n        uint codeLength;\r\n\r\n        assembly {\r\n            // Retrieve the size of the code on target address, this needs assembly.\r\n            codeLength := extcodesize(_to)\r\n        }\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        if(codeLength > 0) {\r\n            ERC223Receiver receiver = ERC223Receiver(_to);\r\n            receiver.tokenFallback(msg.sender, _value, _data);\r\n        }\r\n        Transfer(msg.sender, _to, _value, _data);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer the specified amount of tokens to the specified address.\r\n     *      This function works the same with the previous one\r\n     *      but doesn't contain `_data` param.\r\n     *      Added due to backwards compatibility reasons.\r\n     *\r\n     * @param _to    Receiver address.\r\n     * @param _value Amount of tokens that will be transferred.\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        bytes memory empty;\r\n        return transfer(_to, _value, empty);\r\n    }\r\n}\r\n\r\n\r\ncontract MainToken is Consts, FreezableMintableToken, BurnableToken, Pausable\r\n    \r\n{\r\n    \r\n    event Initialized();\r\n    bool public initialized = false;\r\n\r\n    function MainToken() public {\r\n        init();\r\n        transferOwnership(TARGET_USER);\r\n    }\r\n\r\n    function init() private {\r\n        require(!initialized);\r\n        initialized = true;\r\n\r\n        if (PAUSED) {\r\n            pause();\r\n        }\r\n\r\n        \r\n        address[3] memory addresses = [address(0x93abee979b9094f16082f71c01f60f51e52c78e3),address(0x9daf89767751c56fccaa711cea1bd7d6589cec08),address(0xca9d01465be0fa4b7f5540556283244f49532f8d)];\r\n        uint[3] memory amounts = [uint(200000000000000000000000000),uint(30000000000000000000000000),uint(17000000000000000000000000)];\r\n        uint64[3] memory freezes = [uint64(0),uint64(1546290002),uint64(1523480401)];\r\n\r\n        for (uint i = 0; i < addresses.length; i++) {\r\n            if (freezes[i] == 0) {\r\n                mint(addresses[i], amounts[i]);\r\n            } else {\r\n                mintAndFreeze(addresses[i], amounts[i], freezes[i]);\r\n            }\r\n        }\r\n        \r\n\r\n        if (!CONTINUE_MINTING) {\r\n            finishMinting();\r\n        }\r\n\r\n        Initialized();\r\n    }\r\n    \r\n\r\n    function name() pure public returns (string _name) {\r\n        return TOKEN_NAME;\r\n    }\r\n\r\n    function symbol() pure public returns (string _symbol) {\r\n        return TOKEN_SYMBOL;\r\n    }\r\n\r\n    function decimals() pure public returns (uint8 _decimals) {\r\n        return TOKEN_DECIMALS_UINT8;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool _success) {\r\n        require(!paused);\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool _success) {\r\n        require(!paused);\r\n        return super.transfer(_to, _value);\r\n    }\r\n}", "OptimizationUsed": "1", "ContractName": "MainToken", "ByteCode": "0x6060604052600436106101745763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166302d6f730811461017957806305d2035b146101be57806306fdde03146101e5578063095ea7b31461026f5780630bb2cd6b14610291578063158ef93e146102c057806317a950ac146102d357806318160ddd1461030457806323b872dd14610317578063313ce5671461033f5780633be1e952146103685780633f4ba83a1461039957806340c10f19146103ac57806342966c68146103ce5780635be7fde8146103e45780635c975abb146103f7578063661884631461040a57806366a92cda1461042c57806370a082311461043f5780637d64bcb41461045e5780638456cb59146104715780638da5cb5b1461048457806395d89b41146104b3578063a9059cbb146104c6578063ca63b5b8146104e8578063d73dd62314610507578063d8aeedf514610529578063dd62ed3e14610548578063f2fde38b1461056d575b600080fd5b341561018457600080fd5b61019b600160a060020a036004351660243561058c565b60405167ffffffffffffffff909216825260208201526040908101905180910390f35b34156101c957600080fd5b6101d1610619565b604051901515815260200160405180910390f35b34156101f057600080fd5b6101f8610629565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561023457808201518382015260200161021c565b50505050905090810190601f1680156102615780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561027a57600080fd5b6101d1600160a060020a036004351660243561066a565b341561029c57600080fd5b6101d1600160a060020a036004351660243567ffffffffffffffff604435166106d6565b34156102cb57600080fd5b6101d161084a565b34156102de57600080fd5b6102f2600160a060020a036004351661086d565b60405190815260200160405180910390f35b341561030f57600080fd5b6102f261087e565b341561032257600080fd5b6101d1600160a060020a0360043581169060243516604435610884565b341561034a57600080fd5b6103526108b1565b60405160ff909116815260200160405180910390f35b341561037357600080fd5b610397600160a060020a036004351660243567ffffffffffffffff604435166108b6565b005b34156103a457600080fd5b610397610a19565b34156103b757600080fd5b6101d1600160a060020a0360043516602435610a99565b34156103d957600080fd5b610397600435610ba6565b34156103ef57600080fd5b6102f2610c6f565b341561040257600080fd5b6101d1610cd4565b341561041557600080fd5b6101d1600160a060020a0360043516602435610ce4565b341561043757600080fd5b610397610dde565b341561044a57600080fd5b6102f2600160a060020a0360043516610fa6565b341561046957600080fd5b6101d1610fcf565b341561047c57600080fd5b61039761105a565b341561048f57600080fd5b6104976110df565b604051600160a060020a03909116815260200160405180910390f35b34156104be57600080fd5b6101f86110ee565b34156104d157600080fd5b6101d1600160a060020a036004351660243561112f565b34156104f357600080fd5b6102f2600160a060020a036004351661115a565b341561051257600080fd5b6101d1600160a060020a03600435166024356111e0565b341561053457600080fd5b6102f2600160a060020a0360043516611284565b341561055357600080fd5b6102f2600160a060020a036004358116906024351661129f565b341561057857600080fd5b610397600160a060020a03600435166112ca565b600080805b836001018110156105e557600360006105b4878667ffffffffffffffff16611365565b815260208101919091526040016000205467ffffffffffffffff1692508215156105dd57610611565b600101610591565b600460006105fd878667ffffffffffffffff16611365565b815260208101919091526040016000205491505b509250929050565b60065460a060020a900460ff1681565b6106316117ec565b60408051908101604052601581527f426c6f636b2d436861696e2e636f6d20546f6b656e00000000000000000000006020820152905090565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b600654600090819033600160a060020a039081169116146106f657600080fd5b60065460a060020a900460ff161561070d57600080fd5b600054610720908563ffffffff61139916565b6000556107378567ffffffffffffffff8516611365565b600081815260046020526040902054909150610759908563ffffffff61139916565b600082815260046020908152604080832093909355600160a060020a0388168252600590522054610790908563ffffffff61139916565b600160a060020a0386166000908152600560205260409020556107b385846113a8565b84600160a060020a03167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968858560405190815260200160405180910390a284600160a060020a03167f2ecd071e4d10ed2221b04636ed0724cce66a873aa98c1a31b4bb0e6846d3aab4848660405167ffffffffffffffff909216825260208201526040908101905180910390a2506001949350505050565b600654760100000000000000000000000000000000000000000000900460ff1681565b600061087882611542565b92915050565b60005481565b60065460009060a860020a900460ff161561089e57600080fd5b6108a984848461155d565b949350505050565b601290565b6000600160a060020a03841615156108cd57600080fd5b600160a060020a0333166000908152600160205260409020548311156108f257600080fd5b600160a060020a03331660009081526001602052604090205461091b908463ffffffff6116df16565b600160a060020a0333166000908152600160205260409020556109488467ffffffffffffffff8416611365565b60008181526004602052604090205490915061096a908463ffffffff61139916565b600082815260046020908152604080832093909355600160a060020a03871682526005905220546109a1908463ffffffff61139916565b600160a060020a0385166000908152600560205260409020556109c484836113a8565b83600160a060020a03167f2ecd071e4d10ed2221b04636ed0724cce66a873aa98c1a31b4bb0e6846d3aab4838560405167ffffffffffffffff909216825260208201526040908101905180910390a250505050565b60065433600160a060020a03908116911614610a3457600080fd5b60065460a860020a900460ff161515610a4c57600080fd5b6006805475ff000000000000000000000000000000000000000000191690557f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b60065460009033600160a060020a03908116911614610ab757600080fd5b60065460a060020a900460ff1615610ace57600080fd5b600054610ae1908363ffffffff61139916565b6000908155600160a060020a038416815260016020526040902054610b0c908363ffffffff61139916565b600160a060020a0384166000818152600160205260409081902092909255907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859084905190815260200160405180910390a2600160a060020a03831660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a350600192915050565b6000808211610bb457600080fd5b600160a060020a033316600090815260016020526040902054821115610bd957600080fd5b5033600160a060020a038116600090815260016020526040902054610bfe90836116df565b600160a060020a03821660009081526001602052604081209190915554610c2b908363ffffffff6116df16565b600055600160a060020a0381167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58360405190815260200160405180910390a25050565b6000806000610c7f33600061058c565b67ffffffffffffffff909116925090505b8115801590610c9e57508142115b15610ccf57610cab610dde565b91820191610cba33600061058c565b67ffffffffffffffff90911692509050610c90565b505090565b60065460a860020a900460ff1681565b600160a060020a03338116600090815260026020908152604080832093861683529290529081205480831115610d4157600160a060020a033381166000908152600260209081526040808320938816835292905290812055610d78565b610d51818463ffffffff6116df16565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b6000806000806000610df1336000611365565b60008181526003602052604090205490955067ffffffffffffffff169350831515610e1b57600080fd5b8367ffffffffffffffff164267ffffffffffffffff16111515610e3d57600080fd5b610e51338567ffffffffffffffff16611365565b60008181526003602090815260408083205460048352818420805490859055600160a060020a0333168552600190935292205492955067ffffffffffffffff90911693509150610ea7908263ffffffff61139916565b600160a060020a033316600090815260016020908152604080832093909355600590522054610edc908263ffffffff6116df16565b600160a060020a03331660009081526005602052604090205567ffffffffffffffff82161515610f28576000858152600360205260409020805467ffffffffffffffff19169055610f62565b600085815260036020526040808220805467ffffffffffffffff861667ffffffffffffffff19918216179091558583529120805490911690555b33600160a060020a03167fb21fb52d5749b80f3182f8c6992236b5e5576681880914484d7f4c9b062e619e8260405190815260200160405180910390a25050505050565b600160a060020a038116600090815260056020526040812054610fc883611542565b0192915050565b60065460009033600160a060020a03908116911614610fed57600080fd5b60065460a060020a900460ff161561100457600080fd5b6006805474ff0000000000000000000000000000000000000000191660a060020a1790557fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a150600190565b60065433600160a060020a0390811691161461107557600080fd5b60065460a860020a900460ff161561108c57600080fd5b6006805475ff000000000000000000000000000000000000000000191660a860020a1790557f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b600654600160a060020a031681565b6110f66117ec565b60408051908101604052600281527f42430000000000000000000000000000000000000000000000000000000000006020820152905090565b60065460009060a860020a900460ff161561114957600080fd5b61115383836116f1565b9392505050565b6000806003600061116c856000611365565b815260208101919091526040016000205467ffffffffffffffff1690505b67ffffffffffffffff8116156111da57600190910190600360006111b88567ffffffffffffffff8516611365565b815260208101919091526040016000205467ffffffffffffffff16905061118a565b50919050565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054611218908363ffffffff61139916565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600160a060020a031660009081526005602052604090205490565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60065433600160a060020a039081169116146112e557600080fd5b600160a060020a03811615156112fa57600080fd5b600654600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36006805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6801000000000000000091909102177f57495348000000000000000000000000000000000000000000000000000000001790565b60008282018381101561115357fe5b6000808080804267ffffffffffffffff8716116113c457600080fd5b6113d8878767ffffffffffffffff16611365565b94506113e5876000611365565b60008181526003602052604090205490945067ffffffffffffffff169250821515611438576000848152600360205260409020805467ffffffffffffffff191667ffffffffffffffff8816179055611539565b61144c878467ffffffffffffffff16611365565b91505b67ffffffffffffffff83161580159061147b57508267ffffffffffffffff168667ffffffffffffffff16115b156114b4575060008181526003602052604090205490925067ffffffffffffffff908116918391166114ad8784611365565b915061144f565b8267ffffffffffffffff168667ffffffffffffffff1614156114d557611539565b67ffffffffffffffff83161561150f576000858152600360205260409020805467ffffffffffffffff191667ffffffffffffffff85161790555b6000848152600360205260409020805467ffffffffffffffff191667ffffffffffffffff88161790555b50505050505050565b600160a060020a031660009081526001602052604090205490565b6000600160a060020a038316151561157457600080fd5b600160a060020a03841660009081526001602052604090205482111561159957600080fd5b600160a060020a03808516600090815260026020908152604080832033909416835292905220548211156115cc57600080fd5b600160a060020a0384166000908152600160205260409020546115f5908363ffffffff6116df16565b600160a060020a03808616600090815260016020526040808220939093559085168152205461162a908363ffffffff61139916565b600160a060020a03808516600090815260016020908152604080832094909455878316825260028152838220339093168252919091522054611672908363ffffffff6116df16565b600160a060020a03808616600081815260026020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b6000828211156116eb57fe5b50900390565b6000600160a060020a038316151561170857600080fd5b600160a060020a03331660009081526001602052604090205482111561172d57600080fd5b600160a060020a033316600090815260016020526040902054611756908363ffffffff6116df16565b600160a060020a03338116600090815260016020526040808220939093559085168152205461178b908363ffffffff61139916565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b60206040519081016040526000815290565b611806611a1c565b61180e611a44565b611816611a1c565b600654600090760100000000000000000000000000000000000000000000900460ff161561184357600080fd5b6006805476ff000000000000000000000000000000000000000000001916760100000000000000000000000000000000000000000000179055606060405190810160409081527393abee979b9094f16082f71c01f60f51e52c78e38252739daf89767751c56fccaa711cea1bd7d6589cec08602083015273ca9d01465be0fa4b7f5540556283244f49532f8d8183015290945060609051908101604052806aa56fa5b99019a5c800000081526020016a18d0bf423c03d8de00000081526020016a0e0fe3d8bb9bc7b10000008152509250606060405190810160409081526000808352635c2a83526020840152635ace77519183019190915290925090505b60038110156119e15781816003811061195757fe5b602002015167ffffffffffffffff16151561199c5761199684826003811061197b57fe5b602002015184836003811061198c57fe5b6020020151610a99565b506119d9565b6119d78482600381106119ab57fe5b60200201518483600381106119bc57fe5b60200201518484600381106119cd57fe5b60200201516106d6565b505b600101611942565b6119e9610fcf565b507f5daa87a0e9463431830481fd4b6e3403442dfb9a12b9c07597e9f61d50b633c860405160405180910390a150505050565b60606040519081016040526003815b600081526000199091019060200181611a2b5790505090565b60606040519081016040526003815b6000815260200190600190039081611a5357905050905600a165627a7a72305820d78442629678404b5e168d4e0dd214f8d287d7ca04eaf1b8d4f3fe3c9eb6b4890029"}