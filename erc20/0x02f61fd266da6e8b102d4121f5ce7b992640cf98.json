{"Runs": "200", "SwarmSource": "bzzr://583e63131c69634a105afe74a4fe54a51bd14cef1b276b625479352438c5125a", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"supply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mintForCreatorsPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"signatureOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sigCheckerAddr\",\"type\":\"address\"}],\"name\":\"setSignatureChecker\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowDelegate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unlockTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"removeTransferAndCallWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_maxReward\",\"type\":\"uint256\"},{\"name\":\"_claimedReward\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"transferDelegated\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"freezeSignatureChecker\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mintForContributorPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contributorPoolAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_poolAddrs\",\"type\":\"address[]\"},{\"name\":\"_mintLimit\",\"type\":\"uint256\"}],\"name\":\"registerCreatorsPools\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"creatorsPoolAddrs\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creatorsPoolMintQuota\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addrs\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"transferMultiple\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_maxReward\",\"type\":\"uint256\"},{\"name\":\"_claimedReward\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"transferAndCallDelegated\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"transferAndCallWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferAndLock\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"addTransferAndCallWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_crowdsaleAddr\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_privateFundUnlockTime\",\"type\":\"uint256\"}],\"name\":\"registerCrowdsales\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contributorPoolMintQuota\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_addrs\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"},{\"name\":\"_maxReward\",\"type\":\"uint256\"},{\"name\":\"_claimedReward\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"transferMultipleDelegated\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"signatureCheckerFreezed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"switchDelegate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contributorPoolAddr\",\"type\":\"address\"},{\"name\":\"_mintLimit\",\"type\":\"uint256\"}],\"name\":\"registerContributorPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"signatureChecker\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"usedNonce\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_initialSupply\",\"type\":\"uint256\"},{\"name\":\"_signatureOwner\",\"type\":\"address\"},{\"name\":\"_sigCheckerAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_newSignatureChecker\",\"type\":\"address\"}],\"name\":\"SignatureCheckerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.19+commit.c4cbbb05", "ConstructorArguments": "000000000000000000000000000000000000000000a56fa5b99019a5c800000000000000000000000000000017edbb01d14a8d8d2ae035b35af797c7242117ef0000000000000000000000008e35ba9ff8c5cda92a6a056d8d87d4b76001dc0f", "SourceCode": "pragma solidity ^0.4.13;\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract Claimable is Ownable {\r\n  address public pendingOwner;\r\n\r\n  /**\r\n   * @dev Modifier throws if called by any account other than the pendingOwner.\r\n   */\r\n  modifier onlyPendingOwner() {\r\n    require(msg.sender == pendingOwner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to set the pendingOwner address.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    pendingOwner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the pendingOwner address to finalize the transfer.\r\n   */\r\n  function claimOwnership() onlyPendingOwner public {\r\n    OwnershipTransferred(owner, pendingOwner);\r\n    owner = pendingOwner;\r\n    pendingOwner = address(0);\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract HasOperator is Claimable {\r\n    address public operator;\r\n\r\n    function setOperator(address _operator) onlyOwner public {\r\n        operator = _operator;\r\n    }\r\n\r\n    modifier ownerOrOperator {\r\n        require(msg.sender == owner || msg.sender == operator);\r\n        _;\r\n    }\r\n}\r\n\r\ncontract LikeCoin is ERC20, HasOperator {\r\n    using SafeMath for uint256;\r\n\r\n    string constant public name = \"LikeCoin\";\r\n    string constant public symbol = \"LIKE\";\r\n\r\n    // Synchronized to Ether -> Wei ratio, which is important\r\n    uint8 constant public decimals = 18;\r\n\r\n    uint256 public supply = 0;\r\n    mapping(address => uint256) public balances;\r\n    mapping(address => mapping(address => uint256)) public allowed;\r\n\r\n    address public crowdsaleAddr = 0x0;\r\n    address public contributorPoolAddr = 0x0;\r\n    uint256 public contributorPoolMintQuota = 0;\r\n    address[] public creatorsPoolAddrs;\r\n    mapping(address => bool) isCreatorsPool;\r\n    uint256 public creatorsPoolMintQuota = 0;\r\n    mapping(address => uint256) public lockedBalances;\r\n    uint public unlockTime = 0;\r\n    SignatureChecker public signatureChecker = SignatureChecker(0x0);\r\n    bool public signatureCheckerFreezed = false;\r\n    address public signatureOwner = 0x0;\r\n    bool public allowDelegate = true;\r\n    mapping (address => mapping (uint256 => bool)) public usedNonce;\r\n    mapping (address => bool) public transferAndCallWhitelist;\r\n\r\n    event Lock(address indexed _addr, uint256 _value);\r\n    event SignatureCheckerChanged(address _newSignatureChecker);\r\n\r\n    function LikeCoin(uint256 _initialSupply, address _signatureOwner, address _sigCheckerAddr) public {\r\n        supply = _initialSupply;\r\n        balances[owner] = _initialSupply;\r\n        signatureOwner = _signatureOwner;\r\n        signatureChecker = SignatureChecker(_sigCheckerAddr);\r\n        Transfer(0x0, owner, _initialSupply);\r\n    }\r\n\r\n    function totalSupply() public constant returns (uint256) {\r\n        return supply;\r\n    }\r\n\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return balances[_owner] + lockedBalances[_owner];\r\n    }\r\n\r\n    function _tryUnlockBalance(address _from) internal {\r\n        if (unlockTime != 0 && now >= unlockTime && lockedBalances[_from] > 0) {\r\n            balances[_from] = balances[_from].add(lockedBalances[_from]);\r\n            delete lockedBalances[_from];\r\n        }\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint256 _value) internal returns (bool success) {\r\n        _tryUnlockBalance(_from);\r\n        require(_from != 0x0);\r\n        require(_to != 0x0);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        return _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    function transferAndLock(address _to, uint256 _value) public returns (bool success) {\r\n        require(msg.sender != 0x0);\r\n        require(_to != 0x0);\r\n        require(now < unlockTime);\r\n        require(msg.sender == crowdsaleAddr || msg.sender == owner || msg.sender == operator);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        lockedBalances[_to] = lockedBalances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        Lock(_to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function _transferMultiple(address _from, address[] _addrs, uint256[] _values) internal returns (bool success) {\r\n        require(_from != 0x0);\r\n        require(_addrs.length > 0);\r\n        require(_values.length == _addrs.length);\r\n        _tryUnlockBalance(_from);\r\n        uint256 total = 0;\r\n        for (uint i = 0; i < _addrs.length; ++i) {\r\n            address addr = _addrs[i];\r\n            require(addr != 0x0);\r\n            uint256 value = _values[i];\r\n            balances[addr] = balances[addr].add(value);\r\n            total = total.add(value);\r\n            Transfer(_from, addr, value);\r\n        }\r\n        balances[_from] = balances[_from].sub(total);\r\n        return true;\r\n    }\r\n\r\n    function transferMultiple(address[] _addrs, uint256[] _values) public returns (bool success) {\r\n        return _transferMultiple(msg.sender, _addrs, _values);\r\n    }\r\n\r\n    function _isContract(address _addr) internal constant returns (bool) {\r\n        uint256 length;\r\n        assembly {\r\n            length := extcodesize(_addr)\r\n        }\r\n        return (length > 0);\r\n    }\r\n\r\n    function _transferAndCall(address _from, address _to, uint256 _value, bytes _data) internal returns (bool success) {\r\n        require(_isContract(_to));\r\n        require(transferAndCallWhitelist[_to]);\r\n        require(_transfer(_from, _to, _value));\r\n        TransferAndCallReceiver(_to).tokenCallback(_from, _value, _data);\r\n        return true;\r\n    }\r\n\r\n    function transferAndCall(address _to, uint256 _value, bytes _data) public returns (bool success) {\r\n        return _transferAndCall(msg.sender, _to, _value, _data);\r\n    }\r\n\r\n    function setSignatureChecker(address _sigCheckerAddr) public {\r\n        require(msg.sender == signatureOwner);\r\n        require(!signatureCheckerFreezed);\r\n        require(signatureChecker != _sigCheckerAddr);\r\n        signatureChecker = SignatureChecker(_sigCheckerAddr);\r\n        SignatureCheckerChanged(_sigCheckerAddr);\r\n    }\r\n\r\n    function freezeSignatureChecker() public {\r\n        require(msg.sender == signatureOwner);\r\n        require(!signatureCheckerFreezed);\r\n        signatureCheckerFreezed = true;\r\n    }\r\n\r\n    modifier isDelegated(address _from, uint256 _maxReward, uint256 _claimedReward, uint256 _nonce) {\r\n        require(allowDelegate);\r\n        require(_from != 0x0);\r\n        require(_claimedReward <= _maxReward);\r\n        require(!usedNonce[_from][_nonce]);\r\n        usedNonce[_from][_nonce] = true;\r\n        require(_transfer(_from, msg.sender, _claimedReward));\r\n        _;\r\n    }\r\n\r\n    function transferDelegated(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value,\r\n        uint256 _maxReward,\r\n        uint256 _claimedReward,\r\n        uint256 _nonce,\r\n        bytes _signature\r\n    ) isDelegated(_from, _maxReward, _claimedReward, _nonce) public returns (bool success) {\r\n        require(signatureChecker.checkTransferDelegated(_from, _to, _value, _maxReward, _nonce, _signature));\r\n        return _transfer(_from, _to, _value);\r\n    }\r\n\r\n    function transferAndCallDelegated(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value,\r\n        bytes _data,\r\n        uint256 _maxReward,\r\n        uint256 _claimedReward,\r\n        uint256 _nonce,\r\n        bytes _signature\r\n    ) isDelegated(_from, _maxReward, _claimedReward, _nonce) public returns (bool success) {\r\n        require(signatureChecker.checkTransferAndCallDelegated(_from, _to, _value, _data, _maxReward, _nonce, _signature));\r\n        return _transferAndCall(_from, _to, _value, _data);\r\n    }\r\n\r\n    function transferMultipleDelegated(\r\n        address _from,\r\n        address[] _addrs,\r\n        uint256[] _values,\r\n        uint256 _maxReward,\r\n        uint256 _claimedReward,\r\n        uint256 _nonce,\r\n        bytes _signature\r\n    ) isDelegated(_from, _maxReward, _claimedReward, _nonce) public returns (bool success) {\r\n        require(signatureChecker.checkTransferMultipleDelegated(_from, _addrs, _values, _maxReward, _nonce, _signature));\r\n        return _transferMultiple(_from, _addrs, _values);\r\n    }\r\n\r\n    function switchDelegate(bool _allowed) ownerOrOperator public {\r\n        require(allowDelegate != _allowed);\r\n        allowDelegate = _allowed;\r\n    }\r\n\r\n    function addTransferAndCallWhitelist(address _contract) ownerOrOperator public {\r\n        require(_isContract(_contract));\r\n        require(!transferAndCallWhitelist[_contract]);\r\n        transferAndCallWhitelist[_contract] = true;\r\n    }\r\n\r\n    function removeTransferAndCallWhitelist(address _contract) ownerOrOperator public {\r\n        require(transferAndCallWhitelist[_contract]);\r\n        delete transferAndCallWhitelist[_contract];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        require(_value == 0 || allowed[msg.sender][_spender] == 0);\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function burn(uint256 _value) public {\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        supply = supply.sub(_value);\r\n        Transfer(msg.sender, 0x0, _value);\r\n    }\r\n\r\n    function registerCrowdsales(address _crowdsaleAddr, uint256 _value, uint256 _privateFundUnlockTime) onlyOwner public {\r\n        require(crowdsaleAddr == 0x0);\r\n        require(_crowdsaleAddr != 0x0);\r\n        require(_isContract(_crowdsaleAddr));\r\n        require(_privateFundUnlockTime > now);\r\n        require(_value != 0);\r\n        unlockTime = _privateFundUnlockTime;\r\n        crowdsaleAddr = _crowdsaleAddr;\r\n        supply = supply.add(_value);\r\n        balances[_crowdsaleAddr] = balances[_crowdsaleAddr].add(_value);\r\n        Transfer(0x0, crowdsaleAddr, _value);\r\n    }\r\n\r\n    function registerContributorPool(address _contributorPoolAddr, uint256 _mintLimit) onlyOwner public {\r\n        require(contributorPoolAddr == 0x0);\r\n        require(_contributorPoolAddr != 0x0);\r\n        require(_isContract(_contributorPoolAddr));\r\n        require(_mintLimit != 0);\r\n        contributorPoolAddr = _contributorPoolAddr;\r\n        contributorPoolMintQuota = _mintLimit;\r\n    }\r\n\r\n    function mintForContributorPool(uint256 _value) public {\r\n        require(msg.sender == contributorPoolAddr);\r\n        require(_value != 0);\r\n        contributorPoolMintQuota = contributorPoolMintQuota.sub(_value);\r\n        supply = supply.add(_value);\r\n        balances[msg.sender] = balances[msg.sender].add(_value);\r\n        Transfer(0x0, msg.sender, _value);\r\n    }\r\n\r\n    function registerCreatorsPools(address[] _poolAddrs, uint256 _mintLimit) onlyOwner public {\r\n        require(creatorsPoolAddrs.length == 0);\r\n        require(_poolAddrs.length > 0);\r\n        require(_mintLimit > 0);\r\n        for (uint i = 0; i < _poolAddrs.length; ++i) {\r\n            require(_isContract(_poolAddrs[i]));\r\n            creatorsPoolAddrs.push(_poolAddrs[i]);\r\n            isCreatorsPool[_poolAddrs[i]] = true;\r\n        }\r\n        creatorsPoolMintQuota = _mintLimit;\r\n    }\r\n\r\n    function mintForCreatorsPool(uint256 _value) public {\r\n        require(isCreatorsPool[msg.sender]);\r\n        require(_value != 0);\r\n        creatorsPoolMintQuota = creatorsPoolMintQuota.sub(_value);\r\n        supply = supply.add(_value);\r\n        balances[msg.sender] = balances[msg.sender].add(_value);\r\n        Transfer(0x0, msg.sender, _value);\r\n    }\r\n}\r\n\r\ncontract SignatureChecker {\r\n    function checkTransferDelegated(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value,\r\n        uint256 _maxReward,\r\n        uint256 _nonce,\r\n        bytes _signature\r\n    ) public constant returns (bool);\r\n\r\n    function checkTransferAndCallDelegated(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value,\r\n        bytes _data,\r\n        uint256 _maxReward,\r\n        uint256 _nonce,\r\n        bytes _signature\r\n    ) public constant returns (bool);\r\n\r\n    function checkTransferMultipleDelegated(\r\n        address _from,\r\n        address[] _addrs,\r\n        uint256[] _values,\r\n        uint256 _maxReward,\r\n        uint256 _nonce,\r\n        bytes _signature\r\n    ) public constant returns (bool);\r\n}\r\n\r\ncontract TransferAndCallReceiver {\r\n    function tokenCallback(address _from, uint256 _value, bytes _data) public;\r\n}", "OptimizationUsed": "1", "ContractName": "LikeCoin", "ByteCode": "0x60606040526004361061022c5763ffffffff60e060020a600035041663047fc9aa81146102315780630483a7f614610256578063068026131461027557806306fdde031461028d578063095ea7b3146103175780631087452c1461034d578063111998721461037c5780631693b85d1461039b57806318160ddd146103ae57806323b872dd146103c1578063251c1aa3146103e957806327e235e3146103fc578063313ce5671461041b5780634000aea01461044457806342966c68146104a95780634aec6416146104bf5780634e71e0c8146104de57806350114925146104f1578063570ca7351461056a5780635c6581651461057d578063686790e5146105a257806369dd312f146105b557806370a08231146105cb5780637b146f6f146105ea5780638a6c0b26146105fd5780638b2d4ed11461064e5780638da5cb5b146106645780638fda5c8e1461067757806395d89b411461068a578063a05fccef1461069d578063a9059cbb1461072c578063aaf044711461074e578063b3ab15fb1461080c578063b673a75c1461082b578063b77a284c1461083e578063bd50b3b41461085d578063ccd159211461087f578063d15e06a01461089e578063dd62ed3e146108c3578063e2c8a8ad146108e8578063e2d45f7b146108fb578063e30c3978146109ea578063eb886568146109fd578063ec8861e714610a10578063ed7510a014610a28578063efb2bfd314610a4a578063f2fde38b14610a5d578063f90a2f3014610a7c575b600080fd5b341561023c57600080fd5b610244610a9e565b60405190815260200160405180910390f35b341561026157600080fd5b610244600160a060020a0360043516610aa4565b341561028057600080fd5b61028b600435610ab6565b005b341561029857600080fd5b6102a0610b81565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156102dc5780820151838201526020016102c4565b50505050905090810190601f1680156103095780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561032257600080fd5b610339600160a060020a0360043516602435610bb8565b604051901515815260200160405180910390f35b341561035857600080fd5b610360610c5e565b604051600160a060020a03909116815260200160405180910390f35b341561038757600080fd5b61028b600160a060020a0360043516610c6d565b34156103a657600080fd5b610339610d15565b34156103b957600080fd5b610244610d25565b34156103cc57600080fd5b610339600160a060020a0360043581169060243516604435610d2c565b34156103f457600080fd5b610244610da2565b341561040757600080fd5b610244600160a060020a0360043516610da8565b341561042657600080fd5b61042e610dba565b60405160ff909116815260200160405180910390f35b341561044f57600080fd5b61033960048035600160a060020a03169060248035919060649060443590810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650610dbf95505050505050565b34156104b457600080fd5b61028b600435610dd5565b34156104ca57600080fd5b61028b600160a060020a0360043516610e5d565b34156104e957600080fd5b61028b610edb565b34156104fc57600080fd5b610339600160a060020a0360048035821691602480359091169160443591606435916084359160a435919060e49060c43590810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650610f5c95505050505050565b341561057557600080fd5b610360611156565b341561058857600080fd5b610244600160a060020a0360043581169060243516611165565b34156105ad57600080fd5b61028b611182565b34156105c057600080fd5b61028b6004356111da565b34156105d657600080fd5b610244600160a060020a036004351661122a565b34156105f557600080fd5b610360611252565b341561060857600080fd5b61028b6004602481358181019083013580602081810201604051908101604052809392919081815260200183836020028082843750949650509335935061126192505050565b341561065957600080fd5b61036060043561138a565b341561066f57600080fd5b6103606113b2565b341561068257600080fd5b6102446113c1565b341561069557600080fd5b6102a06113c7565b34156106a857600080fd5b6103396004602481358181019083013580602081810201604051908101604052809392919081815260200183836020028082843782019150505050505091908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437509496506113fe95505050505050565b341561073757600080fd5b610339600160a060020a0360043516602435611412565b341561075957600080fd5b610339600160a060020a036004803582169160248035909116916044359160849060643590810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496863596602080820135975060408083013597509295506080820194506060909101358501808201935035918291601f83018190048102019051908101604052818152929190602084018383808284375094965061141f95505050505050565b341561081757600080fd5b61028b600160a060020a0360043516611685565b341561083657600080fd5b6103606116c2565b341561084957600080fd5b610339600160a060020a03600435166116d1565b341561086857600080fd5b610339600160a060020a03600435166024356116e6565b341561088a57600080fd5b61028b600160a060020a0360043516611860565b34156108a957600080fd5b61028b600160a060020a03600435166024356044356118f4565b34156108ce57600080fd5b610244600160a060020a0360043581169060243516611a0a565b34156108f357600080fd5b610244611a35565b341561090657600080fd5b61033960048035600160a060020a0316906044602480359081019083013580602080820201604051908101604052809392919081815260200183836020028082843782019150505050505091908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437509496863596602080820135975060408083013597509295506080820194506060909101358501808201935035918291601f830181900481020190519081016040528181529291906020840183838082843750949650611a3b95505050505050565b34156109f557600080fd5b610360611c8f565b3415610a0857600080fd5b610339611c9e565b3415610a1b57600080fd5b61028b6004351515611cae565b3415610a3357600080fd5b61028b600160a060020a0360043516602435611d31565b3415610a5557600080fd5b610360611dbd565b3415610a6857600080fd5b61028b600160a060020a0360043516611dcc565b3415610a8757600080fd5b610339600160a060020a0360043516602435611e09565b60035481565b600c6020526000908152604090205481565b600160a060020a0333166000908152600a602052604090205460ff161515610add57600080fd5b801515610ae957600080fd5b600b54610afc908263ffffffff611e2916565b600b55600354610b12908263ffffffff611e3b16565b600355600160a060020a033316600090815260046020526040902054610b3e908263ffffffff611e3b16565b600160a060020a0333166000818152600460205260408082209390935590916000805160206122d08339815191529084905190815260200160405180910390a350565b60408051908101604052600881527f4c696b65436f696e000000000000000000000000000000000000000000000000602082015281565b6000811580610bea5750600160a060020a03338116600090815260056020908152604080832093871683529290522054155b1515610bf557600080fd5b600160a060020a03338116600081815260056020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b600f54600160a060020a031681565b600f5433600160a060020a03908116911614610c8857600080fd5b600e5460a060020a900460ff1615610c9f57600080fd5b600e54600160a060020a0382811691161415610cba57600080fd5b600e8054600160a060020a031916600160a060020a0383161790557f5c87e40f07a8d7749fb793f07d399220d984e3a7fbe343857f59e666a3cbdcf881604051600160a060020a03909116815260200160405180910390a150565b600f5460a060020a900460ff1681565b6003545b90565b600160a060020a03808416600090815260056020908152604080832033909416835292905290812054610d65908363ffffffff611e2916565b600160a060020a0380861660009081526005602090815260408083203390941683529290522055610d97848484611e4a565b506001949350505050565b600d5481565b60046020526000908152604090205481565b601281565b6000610dcd33858585611f2c565b949350505050565b600160a060020a033316600090815260046020526040902054610dfe908263ffffffff611e2916565b600160a060020a033316600090815260046020526040902055600354610e2a908263ffffffff611e2916565b6003556000600160a060020a0333166000805160206122d08339815191528360405190815260200160405180910390a350565b60005433600160a060020a0390811691161480610e88575060025433600160a060020a039081169116145b1515610e9357600080fd5b600160a060020a03811660009081526011602052604090205460ff161515610eba57600080fd5b600160a060020a03166000908152601160205260409020805460ff19169055565b60015433600160a060020a03908116911614610ef657600080fd5b600154600054600160a060020a0391821691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36001805460008054600160a060020a0319908116600160a060020a03841617909155169055565b600087858585600f60149054906101000a900460ff161515610f7d57600080fd5b600160a060020a0384161515610f9257600080fd5b82821115610f9f57600080fd5b600160a060020a038416600090815260106020908152604080832084845290915290205460ff1615610fd057600080fd5b600160a060020a03841660009081526010602090815260408083208484529091529020805460ff19166001179055611009843384611e4a565b151561101457600080fd5b600e54600160a060020a03166327a696448d8d8d8d8c8c6000604051602001526040518763ffffffff1660e060020a0281526004018087600160a060020a0316600160a060020a0316815260200186600160a060020a0316600160a060020a0316815260200185815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156110c55780820151838201526020016110ad565b50505050905090810190601f1680156110f25780820380516001836020036101000a031916815260200191505b50975050505050505050602060405180830381600087803b151561111557600080fd5b6102c65a03f1151561112657600080fd5b50505060405180519050151561113b57600080fd5b6111468c8c8c611e4a565b9c9b505050505050505050505050565b600254600160a060020a031681565b600560209081526000928352604080842090915290825290205481565b600f5433600160a060020a0390811691161461119d57600080fd5b600e5460a060020a900460ff16156111b457600080fd5b600e805474ff0000000000000000000000000000000000000000191660a060020a179055565b60075433600160a060020a039081169116146111f557600080fd5b80151561120157600080fd5b600854611214908263ffffffff611e2916565b600855600354610b12908263ffffffff611e3b16565b600160a060020a03166000908152600c60209081526040808320546004909252909120540190565b600754600160a060020a031681565b6000805433600160a060020a0390811691161461127d57600080fd5b6009541561128a57600080fd5b600083511161129857600080fd5b600082116112a557600080fd5b5060005b8251811015611383576112d08382815181106112c157fe5b9060200190602002015161206a565b15156112db57600080fd5b60098054600181016112ed8382612288565b9160005260206000209001600085848151811061130657fe5b90602001906020020151909190916101000a815481600160a060020a030219169083600160a060020a03160217905550506001600a600085848151811061134957fe5b90602001906020020151600160a060020a031681526020810191909152604001600020805460ff19169115159190911790556001016112a9565b50600b5550565b600980548290811061139857fe5b600091825260209091200154600160a060020a0316905081565b600054600160a060020a031681565b600b5481565b60408051908101604052600481527f4c494b4500000000000000000000000000000000000000000000000000000000602082015281565b600061140b338484612072565b9392505050565b600061140b338484611e4a565b600088858585600f60149054906101000a900460ff16151561144057600080fd5b600160a060020a038416151561145557600080fd5b8282111561146257600080fd5b600160a060020a038416600090815260106020908152604080832084845290915290205460ff161561149357600080fd5b600160a060020a03841660009081526010602090815260408083208484529091529020805460ff191660011790556114cc843384611e4a565b15156114d757600080fd5b600e54600160a060020a031663923de8e28e8e8e8e8e8d8d6000604051602001526040518863ffffffff1660e060020a0281526004018088600160a060020a0316600160a060020a0316815260200187600160a060020a0316600160a060020a031681526020018681526020018060200185815260200184815260200180602001838103835287818151815260200191508051906020019080838360005b8381101561158d578082015183820152602001611575565b50505050905090810190601f1680156115ba5780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b838110156115f05780820151838201526020016115d8565b50505050905090810190601f16801561161d5780820380516001836020036101000a031916815260200191505b509950505050505050505050602060405180830381600087803b151561164257600080fd5b6102c65a03f1151561165357600080fd5b50505060405180519050151561166857600080fd5b6116748d8d8d8d611f2c565b9d9c50505050505050505050505050565b60005433600160a060020a039081169116146116a057600080fd5b60028054600160a060020a031916600160a060020a0392909216919091179055565b600654600160a060020a031681565b60116020526000908152604090205460ff1681565b6000600160a060020a03331615156116fd57600080fd5b600160a060020a038316151561171257600080fd5b600d54421061172057600080fd5b60065433600160a060020a039081169116148061174b575060005433600160a060020a039081169116145b80611764575060025433600160a060020a039081169116145b151561176f57600080fd5b600160a060020a033316600090815260046020526040902054611798908363ffffffff611e2916565b600160a060020a033381166000908152600460209081526040808320949094559186168152600c90915220546117d4908363ffffffff611e3b16565b600160a060020a038085166000818152600c602052604090819020939093559133909116906000805160206122d08339815191529085905190815260200160405180910390a382600160a060020a03167f625fed9875dada8643f2418b838ae0bc78d9a148a18eee4ee1979ff0f3f5d4278360405190815260200160405180910390a250600192915050565b60005433600160a060020a039081169116148061188b575060025433600160a060020a039081169116145b151561189657600080fd5b61189f8161206a565b15156118aa57600080fd5b600160a060020a03811660009081526011602052604090205460ff16156118d057600080fd5b600160a060020a03166000908152601160205260409020805460ff19166001179055565b60005433600160a060020a0390811691161461190f57600080fd5b600654600160a060020a03161561192557600080fd5b600160a060020a038316151561193a57600080fd5b6119438361206a565b151561194e57600080fd5b42811161195a57600080fd5b81151561196657600080fd5b600d81905560068054600160a060020a031916600160a060020a0385161790556003546119939083611e3b565b600355600160a060020a0383166000908152600460205260409020546119bf908363ffffffff611e3b16565b600160a060020a0380851660009081526004602052604080822093909355600654909116916000805160206122d08339815191529085905190815260200160405180910390a3505050565b600160a060020a03918216600090815260056020908152604080832093909416825291909152205490565b60085481565b600087858585600f60149054906101000a900460ff161515611a5c57600080fd5b600160a060020a0384161515611a7157600080fd5b82821115611a7e57600080fd5b600160a060020a038416600090815260106020908152604080832084845290915290205460ff1615611aaf57600080fd5b600160a060020a03841660009081526010602090815260408083208484529091529020805460ff19166001179055611ae8843384611e4a565b1515611af357600080fd5b600e54600160a060020a0316634a1ad5388d8d8d8d8c8c6000604051602001526040518763ffffffff1660e060020a0281526004018087600160a060020a0316600160a060020a03168152602001806020018060200186815260200185815260200180602001848103845289818151815260200191508051906020019060200280838360005b83811015611b91578082015183820152602001611b79565b50505050905001848103835288818151815260200191508051906020019060200280838360005b83811015611bd0578082015183820152602001611bb8565b50505050905001848103825285818151815260200191508051906020019080838360005b83811015611c0c578082015183820152602001611bf4565b50505050905090810190601f168015611c395780820380516001836020036101000a031916815260200191505b509950505050505050505050602060405180830381600087803b1515611c5e57600080fd5b6102c65a03f11515611c6f57600080fd5b505050604051805190501515611c8457600080fd5b6111468c8c8c612072565b600154600160a060020a031681565b600e5460a060020a900460ff1681565b60005433600160a060020a0390811691161480611cd9575060025433600160a060020a039081169116145b1515611ce457600080fd5b600f5460ff60a060020a9091041615158115151415611d0257600080fd5b600f805491151560a060020a0274ff000000000000000000000000000000000000000019909216919091179055565b60005433600160a060020a03908116911614611d4c57600080fd5b600754600160a060020a031615611d6257600080fd5b600160a060020a0382161515611d7757600080fd5b611d808261206a565b1515611d8b57600080fd5b801515611d9757600080fd5b60078054600160a060020a031916600160a060020a039390931692909217909155600855565b600e54600160a060020a031681565b60005433600160a060020a03908116911614611de757600080fd5b60018054600160a060020a031916600160a060020a0392909216919091179055565b601060209081526000928352604080842090915290825290205460ff1681565b600082821115611e3557fe5b50900390565b60008282018381101561140b57fe5b6000611e55846121ef565b600160a060020a0384161515611e6a57600080fd5b600160a060020a0383161515611e7f57600080fd5b600160a060020a038416600090815260046020526040902054611ea8908363ffffffff611e2916565b600160a060020a038086166000908152600460205260408082209390935590851681522054611edd908363ffffffff611e3b16565b600160a060020a03808516600081815260046020526040908190209390935591908616906000805160206122d08339815191529085905190815260200160405180910390a35060019392505050565b6000611f378461206a565b1515611f4257600080fd5b600160a060020a03841660009081526011602052604090205460ff161515611f6957600080fd5b611f74858585611e4a565b1515611f7f57600080fd5b83600160a060020a0316636be32e738685856040518463ffffffff1660e060020a0281526004018084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611ffe578082015183820152602001611fe6565b50505050905090810190601f16801561202b5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b151561204b57600080fd5b6102c65a03f1151561205c57600080fd5b506001979650505050505050565b6000903b1190565b600080808080600160a060020a038816151561208d57600080fd5b600087511161209b57600080fd5b86518651146120a957600080fd5b6120b2886121ef565b60009350600092505b865183101561219e578683815181106120d057fe5b906020019060200201519150600160a060020a03821615156120f157600080fd5b8583815181106120fd57fe5b90602001906020020151600160a060020a038316600090815260046020526040902054909150612133908263ffffffff611e3b16565b600160a060020a03831660009081526004602052604090205561215c848263ffffffff611e3b16565b935081600160a060020a031688600160a060020a03166000805160206122d08339815191528360405190815260200160405180910390a38260010192506120bb565b600160a060020a0388166000908152600460205260409020546121c7908563ffffffff611e2916565b600160a060020a03891660009081526004602052604090205560019450505050509392505050565b600d54158015906122025750600d544210155b80156122245750600160a060020a0381166000908152600c6020526040812054115b1561228557600160a060020a0381166000908152600c602090815260408083205460049092529091205461225d9163ffffffff611e3b16565b600160a060020a038216600090815260046020908152604080832093909355600c9052908120555b50565b8154818355818115116122ac576000838152602090206122ac9181019083016122b1565b505050565b610d2991905b808211156122cb57600081556001016122b7565b50905600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820583e63131c69634a105afe74a4fe54a51bd14cef1b276b625479352438c5125a0029"}