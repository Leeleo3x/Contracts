{"Runs": "200", "SwarmSource": "bzzr://2c3fef4f318c4d21118cb8da1dc2a43553f2523c017903b7be6fcd7552fe41a1", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"dismantleCubegon\",\"outputs\":[{\"name\":\"mId1\",\"type\":\"uint256\"},{\"name\":\"amount1\",\"type\":\"uint256\"},{\"name\":\"mId2\",\"type\":\"uint256\"},{\"name\":\"amount2\",\"type\":\"uint256\"},{\"name\":\"mId3\",\"type\":\"uint256\"},{\"name\":\"amount3\",\"type\":\"uint256\"},{\"name\":\"mId4\",\"type\":\"uint256\"},{\"name\":\"amount4\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_approved\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"moderators\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_energyLimit\",\"type\":\"uint256\"}],\"name\":\"updateCubegon\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isMaintaining\",\"type\":\"bool\"}],\"name\":\"UpdateMaintaining\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalModerators\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_ch\",\"type\":\"bytes32\"},{\"name\":\"_mId1\",\"type\":\"uint256\"},{\"name\":\"_amount1\",\"type\":\"uint256\"},{\"name\":\"_mId2\",\"type\":\"uint256\"},{\"name\":\"_amount2\",\"type\":\"uint256\"},{\"name\":\"_mId3\",\"type\":\"uint256\"},{\"name\":\"_amount3\",\"type\":\"uint256\"},{\"name\":\"_mId4\",\"type\":\"uint256\"},{\"name\":\"_amount4\",\"type\":\"uint256\"},{\"name\":\"_energyLimit\",\"type\":\"uint256\"}],\"name\":\"mineCubegon\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newModerator\",\"type\":\"address\"}],\"name\":\"AddModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalCubegon\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"hashCubegons\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cubegons\",\"outputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"mId1\",\"type\":\"uint256\"},{\"name\":\"amount1\",\"type\":\"uint256\"},{\"name\":\"mId2\",\"type\":\"uint256\"},{\"name\":\"amount2\",\"type\":\"uint256\"},{\"name\":\"mId3\",\"type\":\"uint256\"},{\"name\":\"amount3\",\"type\":\"uint256\"},{\"name\":\"mId4\",\"type\":\"uint256\"},{\"name\":\"amount4\",\"type\":\"uint256\"},{\"name\":\"energyLimit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getCubegonHashById\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getCubegonDataById\",\"outputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"mId1\",\"type\":\"uint256\"},{\"name\":\"amount1\",\"type\":\"uint256\"},{\"name\":\"mId2\",\"type\":\"uint256\"},{\"name\":\"amount2\",\"type\":\"uint256\"},{\"name\":\"mId3\",\"type\":\"uint256\"},{\"name\":\"amount3\",\"type\":\"uint256\"},{\"name\":\"mId4\",\"type\":\"uint256\"},{\"name\":\"amount4\",\"type\":\"uint256\"},{\"name\":\"energyLimit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"getCubegonIdByHash\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldModerator\",\"type\":\"address\"}],\"name\":\"RemoveModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"getCubegonByHash\",\"outputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"mId1\",\"type\":\"uint256\"},{\"name\":\"amount1\",\"type\":\"uint256\"},{\"name\":\"mId2\",\"type\":\"uint256\"},{\"name\":\"amount2\",\"type\":\"uint256\"},{\"name\":\"mId3\",\"type\":\"uint256\"},{\"name\":\"amount3\",\"type\":\"uint256\"},{\"name\":\"mId4\",\"type\":\"uint256\"},{\"name\":\"amount4\",\"type\":\"uint256\"},{\"name\":\"energyLimit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMaintaining\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"ChangeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"UpdateCubegon\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.25+commit.59dbf8f1", "ConstructorArguments": "", "SourceCode": "pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   *  as the code is not actually created until after the constructor finishes.\r\n   * @param addr address to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address addr) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(addr) }\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\ninterface ERC165 {\r\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool);\r\n}\r\n\r\ncontract SupportsInterface is ERC165 {\r\n    \r\n    mapping(bytes4 => bool) internal supportedInterfaces;\r\n\r\n    constructor() public {\r\n        supportedInterfaces[0x01ffc9a7] = true; // ERC165\r\n    }\r\n\r\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool) {\r\n        return supportedInterfaces[_interfaceID];\r\n    }\r\n}\r\n\r\ninterface ERC721 {\r\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n    \r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    function ownerOf(uint256 _tokenId) external view returns (address);\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) external;\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\r\n    function transfer(address _to, uint256 _tokenId) external;\r\n    function approve(address _approved, uint256 _tokenId) external;\r\n    function setApprovalForAll(address _operator, bool _approved) external;\r\n    \r\n    function getApproved(uint256 _tokenId) external view returns (address);\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\r\n}\r\n\r\ninterface ERC721Enumerable {\r\n    function totalSupply() external view returns (uint256);\r\n    function tokenByIndex(uint256 _index) external view returns (uint256);\r\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256);\r\n}\r\n\r\ninterface ERC721Metadata {\r\n    function name() external view returns (string _name);\r\n    function symbol() external view returns (string _symbol);\r\n    function tokenURI(uint256 _tokenId) external view returns (string);\r\n}\r\n\r\ninterface ERC721TokenReceiver {\r\n  function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes _data) external returns(bytes4);\r\n}\r\n\r\ncontract NFToken is ERC721, SupportsInterface {\r\n\r\n    using SafeMath for uint256;\r\n    using AddressUtils for address;\r\n    \r\n    // A mapping from NFT ID to the address that owns it.\r\n    mapping (uint256 => address) internal idToOwner;\r\n    \r\n    // Mapping from NFT ID to approved address.\r\n    mapping (uint256 => address) internal idToApprovals;\r\n    \r\n    // Mapping from owner address to count of his tokens.\r\n    mapping (address => uint256) internal ownerToNFTokenCount;\r\n    \r\n    // Mapping from owner address to mapping of operator addresses.\r\n    mapping (address => mapping (address => bool)) internal ownerToOperators;\r\n    \r\n    /**\r\n    * @dev Magic value of a smart contract that can recieve NFT.\r\n    * Equal to: bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\")).\r\n    */\r\n    bytes4 constant MAGIC_ON_ERC721_RECEIVED = 0x150b7a02;\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n    modifier canOperate(uint256 _tokenId) {\r\n        address tokenOwner = idToOwner[_tokenId];\r\n        require(tokenOwner == msg.sender || ownerToOperators[tokenOwner][msg.sender]);\r\n        _;\r\n    }\r\n\r\n\r\n    modifier canTransfer(uint256 _tokenId) {\r\n        address tokenOwner = idToOwner[_tokenId];\r\n        require(tokenOwner == msg.sender || getApproved(_tokenId) == msg.sender || ownerToOperators[tokenOwner][msg.sender]);\r\n        _;\r\n    }\r\n\r\n    modifier validNFToken(uint256 _tokenId) {\r\n        require(idToOwner[_tokenId] != address(0));\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        supportedInterfaces[0x80ac58cd] = true; // ERC721\r\n    }\r\n\r\n\r\n    function balanceOf(address _owner) external view returns (uint256) {\r\n        require(_owner != address(0));\r\n        return ownerToNFTokenCount[_owner];\r\n    }\r\n\r\n    function ownerOf(uint256 _tokenId) external view returns (address _owner) {\r\n        _owner = idToOwner[_tokenId];\r\n        require(_owner != address(0));\r\n    }\r\n\r\n\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) external {\r\n        _safeTransferFrom(_from, _to, _tokenId, _data);\r\n    }\r\n\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external {\r\n        _safeTransferFrom(_from, _to, _tokenId, \"\");\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external canTransfer(_tokenId) validNFToken(_tokenId) {\r\n        address tokenOwner = idToOwner[_tokenId];\r\n        require(tokenOwner == _from);\r\n        require(_to != address(0));\r\n        _transfer(_to, _tokenId);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _tokenId) external canTransfer(_tokenId) validNFToken(_tokenId) {\r\n        address tokenOwner = idToOwner[_tokenId];\r\n        require(tokenOwner == msg.sender);\r\n        require(_to != address(0));\r\n        _transfer(_to, _tokenId);\r\n    }\r\n\r\n    function approve(address _approved, uint256 _tokenId) external canOperate(_tokenId) validNFToken(_tokenId) {\r\n        address tokenOwner = idToOwner[_tokenId];\r\n        require(_approved != tokenOwner);\r\n\r\n        idToApprovals[_tokenId] = _approved;\r\n        emit Approval(tokenOwner, _approved, _tokenId);\r\n    }\r\n\r\n    function setApprovalForAll(address _operator, bool _approved) external {\r\n        require(_operator != address(0));\r\n        ownerToOperators[msg.sender][_operator] = _approved;\r\n        emit ApprovalForAll(msg.sender, _operator, _approved);\r\n    }\r\n\r\n    function getApproved(uint256 _tokenId) public view validNFToken(_tokenId) returns (address) {\r\n        return idToApprovals[_tokenId];\r\n    }\r\n\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool) {\r\n        require(_owner != address(0));\r\n        require(_operator != address(0));\r\n        return ownerToOperators[_owner][_operator];\r\n    }\r\n\r\n    function _safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) internal canTransfer(_tokenId) validNFToken(_tokenId) {\r\n        address tokenOwner = idToOwner[_tokenId];\r\n        require(tokenOwner == _from);\r\n        require(_to != address(0));\r\n\r\n        _transfer(_to, _tokenId);\r\n\r\n        if (_to.isContract()) {\r\n            bytes4 retval = ERC721TokenReceiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data);\r\n            require(retval == MAGIC_ON_ERC721_RECEIVED);\r\n        }\r\n    }\r\n\r\n    function _transfer(address _to, uint256 _tokenId) private {\r\n        address from = idToOwner[_tokenId];\r\n        clearApproval(_tokenId);\r\n        removeNFToken(from, _tokenId);\r\n        addNFToken(_to, _tokenId);\r\n        emit Transfer(from, _to, _tokenId);\r\n    }\r\n   \r\n\r\n    function _mint(address _to, uint256 _tokenId) internal {\r\n        require(_to != address(0));\r\n        require(_tokenId != 0);\r\n        require(idToOwner[_tokenId] == address(0));\r\n\r\n        addNFToken(_to, _tokenId);\r\n\r\n        emit Transfer(address(0), _to, _tokenId);\r\n    }\r\n\r\n    function _burn(address _owner, uint256 _tokenId) validNFToken(_tokenId) internal { \r\n        clearApproval(_tokenId);\r\n        removeNFToken(_owner, _tokenId);\r\n        emit Transfer(_owner, address(0), _tokenId);\r\n    }\r\n\r\n    function clearApproval(uint256 _tokenId) private {\r\n        if(idToApprovals[_tokenId] != 0) {\r\n            delete idToApprovals[_tokenId];\r\n        }\r\n    }\r\n\r\n    function removeNFToken(address _from, uint256 _tokenId) internal {\r\n        require(idToOwner[_tokenId] == _from);\r\n        assert(ownerToNFTokenCount[_from] > 0);\r\n        ownerToNFTokenCount[_from] = ownerToNFTokenCount[_from] - 1;\r\n        delete idToOwner[_tokenId];\r\n    }\r\n\r\n    function addNFToken(address _to, uint256 _tokenId) internal {\r\n        require(idToOwner[_tokenId] == address(0));\r\n\r\n        idToOwner[_tokenId] = _to;\r\n        ownerToNFTokenCount[_to] = ownerToNFTokenCount[_to].add(1);\r\n    }\r\n}\r\n\r\n\r\ncontract NFTokenEnumerable is NFToken, ERC721Enumerable {\r\n\r\n    // Array of all NFT IDs.\r\n    uint256[] internal tokens;\r\n\r\n    // Mapping from token ID its index in global tokens array.\r\n    mapping(uint256 => uint256) internal idToIndex;\r\n\r\n    // Mapping from owner to list of owned NFT IDs.\r\n    mapping(address => uint256[]) internal ownerToIds;\r\n\r\n    // Mapping from NFT ID to its index in the owner tokens list.\r\n    mapping(uint256 => uint256) internal idToOwnerIndex;\r\n\r\n    constructor() public {\r\n        supportedInterfaces[0x780e9d63] = true; // ERC721Enumerable\r\n    }\r\n\r\n    function _mint(address _to, uint256 _tokenId) internal {\r\n        super._mint(_to, _tokenId);\r\n        uint256 length = tokens.push(_tokenId);\r\n        idToIndex[_tokenId] = length - 1;\r\n    }\r\n\r\n    function _burn(address _owner, uint256 _tokenId) internal {\r\n        super._burn(_owner, _tokenId);\r\n        assert(tokens.length > 0);\r\n\r\n        uint256 tokenIndex = idToIndex[_tokenId];\r\n        // Sanity check. This could be removed in the future.\r\n        assert(tokens[tokenIndex] == _tokenId);\r\n        uint256 lastTokenIndex = tokens.length - 1;\r\n        uint256 lastToken = tokens[lastTokenIndex];\r\n\r\n        tokens[tokenIndex] = lastToken;\r\n\r\n        tokens.length--;\r\n        // Consider adding a conditional check for the last token in order to save GAS.\r\n        idToIndex[lastToken] = tokenIndex;\r\n        idToIndex[_tokenId] = 0;\r\n    }\r\n\r\n    function removeNFToken(address _from, uint256 _tokenId) internal\r\n    {\r\n        super.removeNFToken(_from, _tokenId);\r\n        assert(ownerToIds[_from].length > 0);\r\n\r\n        uint256 tokenToRemoveIndex = idToOwnerIndex[_tokenId];\r\n        uint256 lastTokenIndex = ownerToIds[_from].length - 1;\r\n        uint256 lastToken = ownerToIds[_from][lastTokenIndex];\r\n\r\n        ownerToIds[_from][tokenToRemoveIndex] = lastToken;\r\n\r\n        ownerToIds[_from].length--;\r\n        // Consider adding a conditional check for the last token in order to save GAS.\r\n        idToOwnerIndex[lastToken] = tokenToRemoveIndex;\r\n        idToOwnerIndex[_tokenId] = 0;\r\n    }\r\n\r\n    function addNFToken(address _to, uint256 _tokenId) internal {\r\n        super.addNFToken(_to, _tokenId);\r\n\r\n        uint256 length = ownerToIds[_to].push(_tokenId);\r\n        idToOwnerIndex[_tokenId] = length - 1;\r\n    }\r\n\r\n    function totalSupply() external view returns (uint256) {\r\n        return tokens.length;\r\n    }\r\n\r\n    function tokenByIndex(uint256 _index) external view returns (uint256) {\r\n        require(_index < tokens.length);\r\n        // Sanity check. This could be removed in the future.\r\n        assert(idToIndex[tokens[_index]] == _index);\r\n        return tokens[_index];\r\n    }\r\n\r\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\r\n        require(_index < ownerToIds[_owner].length);\r\n        return ownerToIds[_owner][_index];\r\n    }\r\n\r\n}\r\n\r\ncontract NFTStandard is NFTokenEnumerable, ERC721Metadata {\r\n    string internal nftName;\r\n    string internal nftSymbol;\r\n    \r\n    mapping (uint256 => string) internal idToUri;\r\n    \r\n    constructor(string _name, string _symbol) public {\r\n        nftName = _name;\r\n        nftSymbol = _symbol;\r\n        supportedInterfaces[0x5b5e139f] = true; // ERC721Metadata\r\n    }\r\n    \r\n    function _burn(address _owner, uint256 _tokenId) internal {\r\n        super._burn(_owner, _tokenId);\r\n        if (bytes(idToUri[_tokenId]).length != 0) {\r\n        delete idToUri[_tokenId];\r\n        }\r\n    }\r\n    \r\n    function _setTokenUri(uint256 _tokenId, string _uri) validNFToken(_tokenId) internal {\r\n        idToUri[_tokenId] = _uri;\r\n    }\r\n    \r\n    function name() external view returns (string _name) {\r\n        _name = nftName;\r\n    }\r\n    \r\n    function symbol() external view returns (string _symbol) {\r\n        _symbol = nftSymbol;\r\n    }\r\n    \r\n    function tokenURI(uint256 _tokenId) validNFToken(_tokenId) external view returns (string) {\r\n        return idToUri[_tokenId];\r\n    }\r\n}\r\n\r\ncontract BasicAccessControl {\r\n    address public owner;\r\n    // address[] public moderators;\r\n    uint16 public totalModerators = 0;\r\n    mapping (address => bool) public moderators;\r\n    bool public isMaintaining = false;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyModerators() {\r\n        require(msg.sender == owner || moderators[msg.sender] == true);\r\n        _;\r\n    }\r\n\r\n    modifier isActive {\r\n        require(!isMaintaining);\r\n        _;\r\n    }\r\n\r\n    function ChangeOwner(address _newOwner) onlyOwner public {\r\n        if (_newOwner != address(0)) {\r\n            owner = _newOwner;\r\n        }\r\n    }\r\n\r\n\r\n    function AddModerator(address _newModerator) onlyOwner public {\r\n        if (moderators[_newModerator] == false) {\r\n            moderators[_newModerator] = true;\r\n            totalModerators += 1;\r\n        }\r\n    }\r\n    \r\n    function RemoveModerator(address _oldModerator) onlyOwner public {\r\n        if (moderators[_oldModerator] == true) {\r\n            moderators[_oldModerator] = false;\r\n            totalModerators -= 1;\r\n        }\r\n    }\r\n\r\n    function UpdateMaintaining(bool _isMaintaining) onlyOwner public {\r\n        isMaintaining = _isMaintaining;\r\n    }\r\n}\r\n\r\ncontract CubegonNFT is NFTStandard(\"Cubegon\", \"CUBEGON\"), BasicAccessControl {\r\n    struct CubegonData {\r\n        bytes32 hash;\r\n        uint mId1;\r\n        uint amount1;\r\n        uint mId2;\r\n        uint amount2;\r\n        uint mId3;\r\n        uint amount3;\r\n        uint mId4;\r\n        uint amount4;\r\n        uint energyLimit;\r\n    }\r\n    mapping (uint => CubegonData) public cubegons;\r\n    mapping (bytes32 => uint) public hashCubegons;\r\n    uint public totalCubegon = 0;\r\n    \r\n    event UpdateCubegon(address indexed _from, uint256 indexed _tokenId);\r\n    \r\n    function setTokenURI(uint256 _tokenId, string _uri) onlyModerators external {\r\n        _setTokenUri(_tokenId, _uri);\r\n    }\r\n    \r\n    function mineCubegon(address _owner, bytes32 _ch, uint _mId1, uint _amount1, uint _mId2, uint _amount2, \r\n        uint _mId3, uint _amount3, uint _mId4, uint _amount4, uint _energyLimit) onlyModerators external returns(uint) {\r\n        if (hashCubegons[_ch] > 0) revert();\r\n        \r\n        totalCubegon += 1;\r\n        hashCubegons[_ch] = totalCubegon;\r\n        CubegonData storage cubegon = cubegons[totalCubegon];\r\n        cubegon.hash = _ch;\r\n        cubegon.mId1 = _mId1;\r\n        cubegon.amount1 = _amount1;\r\n        cubegon.mId2 = _mId2;\r\n        cubegon.amount2 = _amount2;\r\n        cubegon.mId3 = _mId3;\r\n        cubegon.amount3 = _amount3;\r\n        cubegon.mId4 = _mId4;\r\n        cubegon.amount4 = _amount4;\r\n        cubegon.energyLimit = _energyLimit;\r\n        _mint(_owner, totalCubegon);\r\n        return totalCubegon;\r\n    }\r\n    \r\n    function updateCubegon(address _owner, uint _tokenId, uint _energyLimit) onlyModerators external {\r\n        if (_tokenId == 0 || idToOwner[_tokenId] != _owner) revert();\r\n        CubegonData storage cubegon = cubegons[_tokenId];\r\n        if (cubegon.energyLimit == 0) revert();\r\n        cubegon.energyLimit = _energyLimit;\r\n    }\r\n    \r\n    function dismantleCubegon(address _owner, uint _tokenId) onlyModerators external returns(uint mId1, uint amount1, uint mId2, uint amount2,\r\n        uint mId3, uint amount3, uint mId4, uint amount4) {\r\n        if (_tokenId == 0 || idToOwner[_tokenId] != _owner) revert();\r\n        \r\n        CubegonData storage cubegon = cubegons[_tokenId];\r\n        cubegon.energyLimit = 0;\r\n        hashCubegons[cubegon.hash] = 0;\r\n        \r\n        _burn(_owner, _tokenId);\r\n        \r\n        return (cubegon.mId1, cubegon.amount1, cubegon.mId2, cubegon.amount2, cubegon.mId3, cubegon.amount3, cubegon.mId4, cubegon.amount4);\r\n    }\r\n    \r\n    // public\r\n    function getCubegonDataById(uint _tokenId) constant external returns(bytes32 hash, uint mId1, uint amount1, uint mId2, uint amount2,\r\n        uint mId3, uint amount3, uint mId4, uint amount4, uint energyLimit) {\r\n        CubegonData storage cubegon = cubegons[_tokenId];\r\n        hash = cubegon.hash;\r\n        mId1 = cubegon.mId1;\r\n        amount1 = cubegon.amount1;\r\n        mId2 = cubegon.mId2;\r\n        amount2 = cubegon.amount2;\r\n        mId3 = cubegon.mId3;\r\n        amount3 = cubegon.amount3;\r\n        mId4 = cubegon.mId4;\r\n        amount4 = cubegon.amount4;\r\n        energyLimit = cubegon.energyLimit;\r\n    }\r\n    \r\n    function getCubegonByHash(bytes32 _hash) constant external returns(uint tokenId, uint mId1, uint amount1, uint mId2, uint amount2,\r\n        uint mId3, uint amount3, uint mId4, uint amount4, uint energyLimit) {\r\n        tokenId = hashCubegons[_hash];\r\n        CubegonData storage cubegon = cubegons[tokenId];\r\n        mId1 = cubegon.mId1;\r\n        amount1 = cubegon.amount1;\r\n        mId2 = cubegon.mId2;\r\n        amount2 = cubegon.amount2;\r\n        mId3 = cubegon.mId3;\r\n        amount3 = cubegon.amount3;\r\n        mId4 = cubegon.mId4;\r\n        amount4 = cubegon.amount4;\r\n        energyLimit = cubegon.energyLimit;\r\n    }\r\n    \r\n    function getCubegonIdByHash(bytes32 _hash) constant external returns(uint) {\r\n        return hashCubegons[_hash];\r\n    }\r\n    \r\n    function getCubegonHashById(uint _tokenId) constant external returns(bytes32) {\r\n        if (idToOwner[_tokenId] == address(0))\r\n            return 0;\r\n        return cubegons[_tokenId].hash;\r\n    }\r\n}", "OptimizationUsed": "1", "ContractName": "CubegonNFT", "ByteCode": "0x6080604052600436106101c15763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301ffc9a781146101c657806306fdde031461021157806307d6573a1461029b578063081812fc14610300578063095ea7b31461033457806314d0f1ba1461035a578063162094c41461037b57806318160ddd1461039f5780631fd1ad22146103c657806323b872dd146103ed5780632f745c591461041757806342842e0e1461043b57806348ef5aa8146104655780634efb023e1461047f5780634f6ccce7146104ab57806359d54222146104c35780636352211e146105055780636c81fd6d1461051d57806370a082311461053e57806389bf1fa41461055f5780638da5cb5b1461057457806391d7befc146105895780639300eefe146105a157806395d89b4114610609578063971d26db1461061e5780639ea8cb8b146106365780639ed9f3841461064e578063a22cb46514610666578063a9059cbb1461068c578063b85d6275146106b0578063b88d4fde146106d1578063c87b56dd1461070a578063db86610714610722578063e985e9c51461073a578063ee4e441614610761578063f285329214610776575b600080fd5b3480156101d257600080fd5b506101fd7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1960043516610797565b604080519115158252519081900360200190f35b34801561021d57600080fd5b506102266107cf565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610260578181015183820152602001610248565b50505050905090810190601f16801561028d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102a757600080fd5b506102bf600160a060020a0360043516602435610865565b604080519889526020890197909752878701959095526060870193909352608086019190915260a085015260c084015260e083015251908190036101000190f35b34801561030c57600080fd5b50610318600435610970565b60408051600160a060020a039092168252519081900360200190f35b34801561034057600080fd5b50610358600160a060020a03600435166024356109b2565b005b34801561036657600080fd5b506101fd600160a060020a0360043516610ac3565b34801561038757600080fd5b50610358600480359060248035908101910135610ad8565b3480156103ab57600080fd5b506103b4610b4f565b60408051918252519081900360200190f35b3480156103d257600080fd5b50610358600160a060020a0360043516602435604435610b56565b3480156103f957600080fd5b50610358600160a060020a0360043581169060243516604435610be9565b34801561042357600080fd5b506103b4600160a060020a0360043516602435610cd0565b34801561044757600080fd5b50610358600160a060020a0360043581169060243516604435610d2b565b34801561047157600080fd5b506103586004351515610d47565b34801561048b57600080fd5b50610494610d71565b6040805161ffff9092168252519081900360200190f35b3480156104b757600080fd5b506103b4600435610d93565b3480156104cf57600080fd5b506103b4600160a060020a036004351660243560443560643560843560a43560c43560e435610104356101243561014435610dfb565b34801561051157600080fd5b50610318600435610edd565b34801561052957600080fd5b50610358600160a060020a0360043516610f01565b34801561054a57600080fd5b506103b4600160a060020a0360043516610fae565b34801561056b57600080fd5b506103b4610fe1565b34801561058057600080fd5b50610318610fe7565b34801561059557600080fd5b506103b4600435610ff6565b3480156105ad57600080fd5b506105b9600435611008565b604080519a8b5260208b0199909952898901979097526060890195909552608088019390935260a087019190915260c086015260e085015261010084015261012083015251908190036101400190f35b34801561061557600080fd5b5061022661105c565b34801561062a57600080fd5b506103b46004356110bd565b34801561064257600080fd5b506105b96004356110f6565b34801561065a57600080fd5b506103b4600435611148565b34801561067257600080fd5b50610358600160a060020a0360043516602435151561115a565b34801561069857600080fd5b50610358600160a060020a03600435166024356111dd565b3480156106bc57600080fd5b50610358600160a060020a03600435166112c0565b3480156106dd57600080fd5b50610358600160a060020a0360048035821691602480359091169160443591606435908101910135611367565b34801561071657600080fd5b506102266004356113aa565b34801561072e57600080fd5b506105b9600435611472565b34801561074657600080fd5b506101fd600160a060020a03600435811690602435166114d0565b34801561076d57600080fd5b506101fd61152b565b34801561078257600080fd5b50610358600160a060020a0360043516611534565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19811660009081526020819052604090205460ff165b919050565b60098054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561085b5780601f106108305761010080835404028352916020019161085b565b820191906000526020600020905b81548152906001019060200180831161083e57829003601f168201915b5050505050905090565b6000806000806000806000806000600c60009054906101000a9004600160a060020a0316600160a060020a031633600160a060020a031614806108bc5750336000908152600d602052604090205460ff1615156001145b15156108c757600080fd5b8915806108ee575060008a815260016020526040902054600160a060020a038c8116911614155b156108f857600080fd5b506000898152600f602090815260408083206009810184905580548452601090925282209190915561092a8b8b611587565b8060010154816002015482600301548360040154846005015485600601548660070154876008015498509850985098509850985098509850509295985092959890939650565b6000818152600160205260408120548290600160a060020a0316151561099557600080fd5b5050600090815260026020526040902054600160a060020a031690565b6000818152600160205260408120548290600160a060020a0316338114806109fd5750600160a060020a038116600090815260046020908152604080832033845290915290205460ff165b1515610a0857600080fd5b6000848152600160205260409020548490600160a060020a03161515610a2d57600080fd5b600085815260016020526040902054600160a060020a0390811694508616841415610a5757600080fd5b600085815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038a811691821790925591518893918816917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050505050565b600d6020526000908152604090205460ff1681565b600c54600160a060020a0316331480610b055750336000908152600d602052604090205460ff1615156001145b1515610b1057600080fd5b610b4a8383838080601f016020809104026020016040519081016040528093929190818152602001838380828437506115d3945050505050565b505050565b6005545b90565b600c54600090600160a060020a0316331480610b865750336000908152600d602052604090205460ff1615156001145b1515610b9157600080fd5b821580610bb85750600083815260016020526040902054600160a060020a03858116911614155b15610bc257600080fd5b506000828152600f6020526040902060098101541515610be157600080fd5b600901555050565b6000818152600160205260408120548290600160a060020a031633811480610c21575033610c1683610970565b600160a060020a0316145b80610c4f5750600160a060020a038116600090815260046020908152604080832033845290915290205460ff165b1515610c5a57600080fd5b6000848152600160205260409020548490600160a060020a03161515610c7f57600080fd5b600085815260016020526040902054600160a060020a03908116945087168414610ca857600080fd5b600160a060020a0386161515610cbd57600080fd5b610cc7868661161d565b50505050505050565b600160a060020a0382166000908152600760205260408120548210610cf457600080fd5b600160a060020a0383166000908152600760205260409020805483908110610d1857fe5b9060005260206000200154905092915050565b610b4a8383836020604051908101604052806000815250611698565b600c54600160a060020a03163314610d5e57600080fd5b600e805460ff1916911515919091179055565b600c5474010000000000000000000000000000000000000000900461ffff1681565b6005546000908210610da457600080fd5b8160066000600585815481101515610db857fe5b9060005260206000200154815260200190815260200160002054141515610ddb57fe5b6005805483908110610de957fe5b90600052602060002001549050919050565b600c546000908190600160a060020a0316331480610e2d5750336000908152600d602052604090205460ff1615156001145b1515610e3857600080fd5b60008c8152601060205260408120541115610e5257600080fd5b5060118054600190810180835560008e8152601060209081526040808320849055928252600f9052208d81559081018c9055600281018b9055600381018a90556004810189905560058101889055600681018790556007810186905560088101859055600981018490559054610ec9908e906118f5565b50506011549b9a5050505050505050505050565b600081815260016020526040902054600160a060020a03168015156107ca57600080fd5b600c54600160a060020a03163314610f1857600080fd5b600160a060020a0381166000908152600d602052604090205460ff161515610fab57600160a060020a0381166000908152600d60205260409020805460ff19166001908117909155600c805461ffff7401000000000000000000000000000000000000000080830482169094011690920275ffff0000000000000000000000000000000000000000199092169190911790555b50565b6000600160a060020a0382161515610fc557600080fd5b50600160a060020a031660009081526003602052604090205490565b60115481565b600c54600160a060020a031681565b60106020526000908152604090205481565b600f602052806000526040600020600091509050806000015490806001015490806002015490806003015490806004015490806005015490806006015490806007015490806008015490806009015490508a565b600a8054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561085b5780601f106108305761010080835404028352916020019161085b565b600081815260016020526040812054600160a060020a031615156110e3575060006107ca565b506000908152600f602052604090205490565b6000908152600f60205260409020805460018201546002830154600384015460048501546005860154600687015460078801546008890154600990990154979996989597949693959294919390929190565b60009081526010602052604090205490565b600160a060020a038216151561116f57600080fd5b336000818152600460209081526040808320600160a060020a03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b6000818152600160205260408120548290600160a060020a03163381148061121557503361120a83610970565b600160a060020a0316145b806112435750600160a060020a038116600090815260046020908152604080832033845290915290205460ff165b151561124e57600080fd5b6000848152600160205260409020548490600160a060020a0316151561127357600080fd5b600085815260016020526040902054600160a060020a0316935033841461129957600080fd5b600160a060020a03861615156112ae57600080fd5b6112b8868661161d565b505050505050565b600c54600160a060020a031633146112d757600080fd5b600160a060020a0381166000908152600d602052604090205460ff16151560011415610fab57600160a060020a03166000908152600d60205260409020805460ff19169055600c805475ffff0000000000000000000000000000000000000000198116740100000000000000000000000000000000000000009182900461ffff9081166000190116909102179055565b6113a385858585858080601f01602080910402602001604051908101604052809392919081815260200183838082843750611698945050505050565b5050505050565b6000818152600160205260409020546060908290600160a060020a031615156113d257600080fd5b6000838152600b602090815260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845290918301828280156114655780601f1061143a57610100808354040283529160200191611465565b820191906000526020600020905b81548152906001019060200180831161144857829003601f168201915b5050505050915050919050565b600090815260106020908152604080832054808452600f909252909120600181015460028201546003830154600484015460058501546006860154600787015460088801546009909801549899969895979496939592949193909290565b6000600160a060020a03831615156114e757600080fd5b600160a060020a03821615156114fc57600080fd5b50600160a060020a03918216600090815260046020908152604080832093909416825291909152205460ff1690565b600e5460ff1681565b600c54600160a060020a0316331461154b57600080fd5b600160a060020a03811615610fab57600c8054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff1990911617905550565b6115918282611946565b6000818152600b602052604090205460026000196101006001841615020190911604156115cf576000818152600b602052604081206115cf91611dd0565b5050565b6000828152600160205260409020548290600160a060020a031615156115f857600080fd5b6000838152600b60209081526040909120835161161792850190611e14565b50505050565b600081815260016020526040902054600160a060020a031661163e82611a06565b6116488183611a4e565b6116528383611b4f565b8183600160a060020a031682600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b60008281526001602052604081205481908490600160a060020a0316338114806116d25750336116c783610970565b600160a060020a0316145b806117005750600160a060020a038116600090815260046020908152604080832033845290915290205460ff165b151561170b57600080fd5b6000868152600160205260409020548690600160a060020a0316151561173057600080fd5b600087815260016020526040902054600160a060020a0390811695508916851461175957600080fd5b600160a060020a038816151561176e57600080fd5b611778888861161d565b61178a88600160a060020a0316611b98565b156118ea576040517f150b7a020000000000000000000000000000000000000000000000000000000081523360048201818152600160a060020a038c81166024850152604484018b90526080606485019081528a5160848601528a51918d169463150b7a0294938f938e938e93909160a490910190602085019080838360005b8381101561182257818101518382015260200161180a565b50505050905090810190601f16801561184f5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561187157600080fd5b505af1158015611885573d6000803e3d6000fd5b505050506040513d602081101561189b57600080fd5b505193507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1984167f150b7a0200000000000000000000000000000000000000000000000000000000146118ea57600080fd5b505050505050505050565b60006119018383611ba0565b5060058054600181019091557f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db081018290556000918252600660205260409091205550565b60008060006119558585611c29565b60055460001061196157fe5b6000848152600660205260409020546005805491945085918590811061198357fe5b906000526020600020015414151561199757fe5b6005805460001981019350839081106119ac57fe5b90600052602060002001549050806005848154811015156119c957fe5b60009182526020909120015560058054906119e8906000198301611e92565b50600090815260066020526040808220939093559283525081205550565b600081815260026020526040902054600160a060020a031615610fab576000908152600260205260409020805473ffffffffffffffffffffffffffffffffffffffff19169055565b6000806000611a5d8585611c9e565b600160a060020a03851660009081526007602052604081205411611a7d57fe5b600084815260086020908152604080832054600160a060020a038916845260079092529091208054919450600019820193509083908110611aba57fe5b90600052602060002001549050806007600087600160a060020a0316600160a060020a0316815260200190815260200160002084815481101515611afa57fe5b6000918252602080832090910192909255600160a060020a0387168152600790915260409020805490611b31906000198301611e92565b50600090815260086020526040808220939093559283525081205550565b6000611b5b8383611d2d565b50600160a060020a039091166000908152600760209081526040808320805460018101825590845282842081018590559383526008909152902055565b6000903b1190565b600160a060020a0382161515611bb557600080fd5b801515611bc157600080fd5b600081815260016020526040902054600160a060020a031615611be357600080fd5b611bed8282611b4f565b6040518190600160a060020a038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000818152600160205260409020548190600160a060020a03161515611c4e57600080fd5b611c5782611a06565b611c618383611a4e565b6040518290600090600160a060020a038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a4505050565b600081815260016020526040902054600160a060020a03838116911614611cc457600080fd5b600160a060020a03821660009081526003602052604081205411611ce457fe5b600160a060020a03909116600090815260036020908152604080832080546000190190559282526001905220805473ffffffffffffffffffffffffffffffffffffffff19169055565b600081815260016020526040902054600160a060020a031615611d4f57600080fd5b6000818152600160208181526040808420805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0388169081179091558452600390915290912054611d9d91611dbd565b600160a060020a0390921660009081526003602052604090209190915550565b81810182811015611dca57fe5b92915050565b50805460018160011615610100020316600290046000825580601f10611df65750610fab565b601f016020900490600052602060002090810190610fab9190611eb2565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611e5557805160ff1916838001178555611e82565b82800160010185558215611e82579182015b82811115611e82578251825591602001919060010190611e67565b50611e8e929150611eb2565b5090565b815481835581811115610b4a57600083815260209020610b4a9181019083015b610b5391905b80821115611e8e5760008155600101611eb85600a165627a7a723058202c3fef4f318c4d21118cb8da1dc2a43553f2523c017903b7be6fcd7552fe41a10029"}