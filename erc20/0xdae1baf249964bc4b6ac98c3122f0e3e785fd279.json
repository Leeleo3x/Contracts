{"Runs": "200", "SwarmSource": "bzzr://a42cb227fe2cf3fe040328d82cfca2da20681ad9fed247c16317302466dffd1c", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HARD_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BASE_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"issueTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"issueIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timelockContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_tokens\",\"type\":\"uint256[]\"}],\"name\":\"issueTokensMulti\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"purchaseTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSaleClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKENS_SALE_HARD_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"issueIndex\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"Issue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.18+commit.9cf6e910", "ConstructorArguments": "", "SourceCode": "pragma solidity 0.4.18;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        require(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) public balances;\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n        assert(token.transfer(to, value));\r\n    }\r\n\r\n    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n        assert(token.transferFrom(from, to, value));\r\n    }\r\n\r\n    function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n        assert(token.approve(spender, value));\r\n    }\r\n}\r\n\r\n/**\r\n * @title TokenTimelock\r\n * @dev TokenTimelock is a token holder contract that will allow a\r\n * beneficiary to extract the tokens after a given release time\r\n */\r\ncontract TokenTimelock {\r\n    using SafeERC20 for ERC20Basic;\r\n\r\n    // ERC20 basic token contract being held\r\n    ERC20Basic public token;\r\n\r\n    // beneficiary of tokens after they are released\r\n    address public beneficiary;\r\n\r\n    // timestamp when token release is enabled\r\n    uint64 public releaseTime;\r\n\r\n    function TokenTimelock(ERC20Basic _token, address _beneficiary, uint64 _releaseTime) public {\r\n        require(_releaseTime > uint64(block.timestamp));\r\n        token = _token;\r\n        beneficiary = _beneficiary;\r\n        releaseTime = _releaseTime;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers tokens held by timelock to beneficiary.\r\n     */\r\n    function release() public {\r\n        require(uint64(block.timestamp) >= releaseTime);\r\n\r\n        uint256 amount = token.balanceOf(this);\r\n        require(amount > 0);\r\n\r\n        token.safeTransfer(beneficiary, amount);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     */\r\n    function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\ncontract Owned {\r\n    address public owner;\r\n\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n}\r\n\r\ncontract TokiaToken is StandardToken, Owned {\r\n    string public constant name = \"TokiaToken\";\r\n    string public constant symbol = \"TKA\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    /// Maximum tokens to be allocated.\r\n    uint256 public constant HARD_CAP = 62500000 * 10**uint256(decimals);\r\n\r\n    /// Maximum tokens to be allocated on the sale (75% of the hard cap)\r\n    uint256 public constant TOKENS_SALE_HARD_CAP = 50000000 * 10**uint256(decimals);\r\n\r\n    /// Base exchange rate is set to 1 ETH = 714 TKA.\r\n    uint256 public constant BASE_RATE = 714;\r\n\r\n    /// seconds since 01.01.1970 to 04.12.2017 (both 00:00:00 o'clock UTC)\r\n    /// presale start time\r\n    uint64 private constant date04Dec2017 = 1512345600;\r\n\r\n    /// presale end time; round 1 start time\r\n    uint64 private constant date01Jan2018 = 1514764800;\r\n\r\n    /// round 1 end time; round 2 start time\r\n    uint64 private constant date01Feb2018 = 1517443200;\r\n\r\n    /// round 2 end time; round 3 start time\r\n    uint64 private constant date15Feb2018 = 1518652800;\r\n\r\n    /// round 3 end time; round 4 start time\r\n    uint64 private constant date01Mar2018 = 1519862400;\r\n\r\n    /// round 4 end time; closing token sale\r\n    uint64 private constant date15Mar2018 = 1521072000;\r\n\r\n    /// team tokens are locked until this date (01.01.2019)\r\n    uint64 private constant date01Jan2019 = 1546300800;\r\n\r\n    /// token trading opening time (01.05.2018)\r\n    uint64 private constant date01May2018 = 1525219199;\r\n\r\n    /// no tokens can be ever issued when this is set to \"true\"\r\n    bool public tokenSaleClosed = false;\r\n\r\n    /// contract to be called to release the Tokia team tokens\r\n    address public timelockContractAddress;\r\n\r\n    /// Issue event index starting from 0.\r\n    uint64 public issueIndex = 0;\r\n\r\n    /// Emitted for each sucuessful token purchase.\r\n    event Issue(uint64 issueIndex, address addr, uint256 tokenAmount);\r\n\r\n    modifier inProgress {\r\n        require(totalSupply < TOKENS_SALE_HARD_CAP\r\n            && !tokenSaleClosed);\r\n        _;\r\n    }\r\n\r\n    /// Allow the closing to happen only once\r\n    modifier beforeEnd {\r\n        require(!tokenSaleClosed);\r\n        _;\r\n    }\r\n\r\n    /// Require that the end of the sale has passed (time is 01 May 2018 or later)\r\n    modifier tradingOpen {\r\n        require(uint64(block.timestamp) > date01May2018);\r\n        _;\r\n    }\r\n\r\n    function TokiaToken() public {\r\n    }\r\n\r\n    /// @dev This default function allows token to be purchased by directly\r\n    /// sending ether to this smart contract.\r\n    function () public payable {\r\n        purchaseTokens(msg.sender);\r\n    }\r\n\r\n    /// @dev Issue token based on Ether received.\r\n    /// @param _beneficiary Address that newly issued token will be sent to.\r\n    function purchaseTokens(address _beneficiary) public payable inProgress {\r\n        // only accept a minimum amount of ETH?\r\n        require(msg.value >= 0.01 ether);\r\n\r\n        uint256 tokens = computeTokenAmount(msg.value);\r\n        doIssueTokens(_beneficiary, tokens);\r\n\r\n        /// forward the raised funds to the contract creator\r\n        owner.transfer(this.balance);\r\n    }\r\n\r\n    /// @dev Batch issue tokens on the presale\r\n    /// @param _addresses addresses that the presale tokens will be sent to.\r\n    /// @param _addresses the amounts of tokens, with decimals expanded (full).\r\n    function issueTokensMulti(address[] _addresses, uint256[] _tokens) public onlyOwner inProgress {\r\n        require(_addresses.length == _tokens.length);\r\n        require(_addresses.length <= 100);\r\n\r\n        for (uint256 i = 0; i < _tokens.length; i = i.add(1)) {\r\n            doIssueTokens(_addresses[i], _tokens[i].mul(10**uint256(decimals)));\r\n        }\r\n    }\r\n\r\n    /// @dev Issue tokens for a single buyer on the presale\r\n    /// @param _beneficiary addresses that the presale tokens will be sent to.\r\n    /// @param _tokens the amount of tokens, with decimals expanded (full).\r\n    function issueTokens(address _beneficiary, uint256 _tokens) public onlyOwner inProgress {\r\n        doIssueTokens(_beneficiary, _tokens.mul(10**uint256(decimals)));\r\n    }\r\n\r\n    /// @dev issue tokens for a single buyer\r\n    /// @param _beneficiary addresses that the tokens will be sent to.\r\n    /// @param _tokens the amount of tokens, with decimals expanded (full).\r\n    function doIssueTokens(address _beneficiary, uint256 _tokens) internal {\r\n        require(_beneficiary != address(0));\r\n\r\n        // compute without actually increasing it\r\n        uint256 increasedTotalSupply = totalSupply.add(_tokens);\r\n        // roll back if hard cap reached\r\n        require(increasedTotalSupply <= TOKENS_SALE_HARD_CAP);\r\n\r\n        // increase token total supply\r\n        totalSupply = increasedTotalSupply;\r\n        // update the beneficiary balance to number of tokens sent\r\n        balances[_beneficiary] = balances[_beneficiary].add(_tokens);\r\n\r\n        // event is fired when tokens issued\r\n        Issue(\r\n            issueIndex++,\r\n            _beneficiary,\r\n            _tokens\r\n        );\r\n    }\r\n\r\n    /// @dev Returns the current price.\r\n    function price() public view returns (uint256 tokens) {\r\n        return computeTokenAmount(1 ether);\r\n    }\r\n\r\n    /// @dev Compute the amount of TKA token that can be purchased.\r\n    /// @param ethAmount Amount of Ether to purchase TKA.\r\n    /// @return Amount of TKA token to purchase\r\n    function computeTokenAmount(uint256 ethAmount) internal view returns (uint256 tokens) {\r\n        uint256 tokenBase = ethAmount.mul(BASE_RATE);\r\n        uint8[5] memory roundDiscountPercentages = [47, 35, 25, 15, 5];\r\n\r\n        uint8 roundDiscountPercentage = roundDiscountPercentages[currentRoundIndex()];\r\n        uint8 amountDiscountPercentage = getAmountDiscountPercentage(tokenBase);\r\n\r\n        tokens = tokenBase.mul(100).div(100 - (roundDiscountPercentage + amountDiscountPercentage));\r\n    }\r\n\r\n    /// @dev Compute the additional discount for the purchaed amount of TKA\r\n    /// @param tokenBase the base tokens amount computed only against the base rate\r\n    /// @return integer representing the percentage discount\r\n    function getAmountDiscountPercentage(uint256 tokenBase) internal pure returns (uint8) {\r\n        if(tokenBase >= 1500 * 10**uint256(decimals)) return 9;\r\n        if(tokenBase >= 1000 * 10**uint256(decimals)) return 5;\r\n        if(tokenBase >= 500 * 10**uint256(decimals)) return 3;\r\n        return 0;\r\n    }\r\n\r\n    /// @dev Determine the current sale round\r\n    /// @return integer representing the index of the current sale round\r\n    function currentRoundIndex() internal view returns (uint8 roundNum) {\r\n        roundNum = currentRoundIndexByDate();\r\n\r\n        /// token caps for each round\r\n        uint256[5] memory roundCaps = [\r\n            10000000 * 10**uint256(decimals),\r\n            22500000 * 10**uint256(decimals), // + round 1\r\n            35000000 * 10**uint256(decimals), // + round 2\r\n            40000000 * 10**uint256(decimals), // + round 3\r\n            50000000 * 10**uint256(decimals)  // + round 4\r\n        ];\r\n\r\n        /// round determined by conjunction of both time and total sold tokens\r\n        while(roundNum < 4 && totalSupply > roundCaps[roundNum]) {\r\n            roundNum++;\r\n        }\r\n    }\r\n\r\n    /// @dev Determine the current sale tier.\r\n    /// @return the index of the current sale tier by date.\r\n    function currentRoundIndexByDate() internal view returns (uint8 roundNum) {\r\n        uint64 _now = uint64(block.timestamp);\r\n        require(_now <= date15Mar2018);\r\n\r\n        roundNum = 0;\r\n        if(_now > date01Mar2018) roundNum = 4;\r\n        if(_now > date15Feb2018) roundNum = 3;\r\n        if(_now > date01Feb2018) roundNum = 2;\r\n        if(_now > date01Jan2018) roundNum = 1;\r\n        return roundNum;\r\n    }\r\n\r\n    /// @dev Closes the sale, issues the team tokens and burns the unsold\r\n    function close() public onlyOwner beforeEnd {\r\n        /// team tokens are equal to 25% of the sold tokens\r\n        uint256 teamTokens = totalSupply.mul(25).div(100);\r\n\r\n        /// check for rounding errors when cap is reached\r\n        if(totalSupply.add(teamTokens) > HARD_CAP) {\r\n            teamTokens = HARD_CAP.sub(totalSupply);\r\n        }\r\n\r\n        /// team tokens are locked until this date (01.01.2019)\r\n        TokenTimelock lockedTeamTokens = new TokenTimelock(this, owner, date01Jan2019);\r\n        timelockContractAddress = address(lockedTeamTokens);\r\n        balances[timelockContractAddress] = balances[timelockContractAddress].add(teamTokens);\r\n        /// increase token total supply\r\n        totalSupply = totalSupply.add(teamTokens);\r\n        /// fire event when tokens issued\r\n        Issue(\r\n            issueIndex++,\r\n            timelockContractAddress,\r\n            teamTokens\r\n        );\r\n\r\n        /// burn the unallocated tokens - no more tokens can be issued after this line\r\n        tokenSaleClosed = true;\r\n\r\n        /// forward the raised funds to the contract creator\r\n        owner.transfer(this.balance);\r\n    }\r\n\r\n    /// Transfer limited by the tradingOpen modifier (time is 01 May 2018 or later)\r\n    function transferFrom(address _from, address _to, uint256 _value) public tradingOpen returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    /// Transfer limited by the tradingOpen modifier (time is 01 May 2018 or later)\r\n    function transfer(address _to, uint256 _value) public tradingOpen returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n}", "OptimizationUsed": "1", "ContractName": "TokiaToken", "ByteCode": ""}