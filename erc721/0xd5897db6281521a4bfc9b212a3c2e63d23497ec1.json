{"Runs": "200", "SwarmSource": "bzzr://ed3c957568b5381cba4680c4f03315a52816bc484e4ebd5243c54b424cca21b8", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_HALVING_ERA\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"rewardedBoostsOf\",\"outputs\":[{\"name\":\"boosts\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"boostsUntilNextHalving\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HALVING_WEI\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"InterfaceId_ERC165\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"claimableBoostsOf\",\"outputs\":[{\"name\":\"boosts\",\"type\":\"uint256\"},{\"name\":\"newRewardEra\",\"type\":\"uint256\"},{\"name\":\"newWeiUntilNextHalving\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_slug\",\"type\":\"string\"}],\"name\":\"toTokenId\",\"outputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardEra\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"saleOf\",\"outputs\":[{\"name\":\"sale\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardedBoosts\",\"outputs\":[{\"name\":\"boosts\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"claimBoostsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"claimableBoosts\",\"outputs\":[{\"name\":\"boosts\",\"type\":\"uint256\"},{\"name\":\"newRewardEra\",\"type\":\"uint256\"},{\"name\":\"newWeiUntilNextHalving\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimBoosts\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"boost\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_slug\",\"type\":\"string\"},{\"name\":\"_template\",\"type\":\"address\"},{\"name\":\"_bytecode\",\"type\":\"bytes\"},{\"name\":\"_args\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"slugOf\",\"outputs\":[{\"name\":\"slug\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_boost\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.24+commit.e67f0147", "ConstructorArguments": "0000000000000000000000007c9ca19a8197b0f2147872dbd1cd4321082218a6", "SourceCode": "pragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title ERC165\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n */\r\ninterface ERC165 {\r\n\r\n  /**\r\n   * @notice Query if a contract implements an interface\r\n   * @param _interfaceId The interface identifier, as specified in ERC-165\r\n   * @dev Interface identification is specified in ERC-165. This function\r\n   * uses less than 30,000 gas.\r\n   */\r\n  function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool);\r\n}\r\n\r\n\r\ncontract Activatable {\r\n    bool public activated;\r\n\r\n    modifier whenActivated {\r\n        require(activated);\r\n        _;\r\n    }\r\n\r\n    modifier whenNotActivated {\r\n        require(!activated);\r\n        _;\r\n    }\r\n\r\n    function activate() public returns (bool) {\r\n        activated = true;\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SupportsInterfaceWithLookup\r\n * @author Matt Condon (@shrugs)\r\n * @dev Implements ERC165 using a lookup table.\r\n */\r\ncontract SupportsInterfaceWithLookup is ERC165 {\r\n\r\n  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\r\n  /**\r\n   * 0x01ffc9a7 ===\r\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\r\n   */\r\n\r\n  /**\r\n   * @dev a mapping of interface id to whether or not it's supported\r\n   */\r\n  mapping(bytes4 => bool) internal supportedInterfaces;\r\n\r\n  /**\r\n   * @dev A contract implementing SupportsInterfaceWithLookup\r\n   * implement ERC165 itself\r\n   */\r\n  constructor()\r\n    public\r\n  {\r\n    _registerInterface(InterfaceId_ERC165);\r\n  }\r\n\r\n  /**\r\n   * @dev implement supportsInterface(bytes4) using a lookup table\r\n   */\r\n  function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool)\r\n  {\r\n    return supportedInterfaces[_interfaceId];\r\n  }\r\n\r\n  /**\r\n   * @dev private method for registering an interface\r\n   */\r\n  function _registerInterface(bytes4 _interfaceId)\r\n    internal\r\n  {\r\n    require(_interfaceId != 0xffffffff);\r\n    supportedInterfaces[_interfaceId] = true;\r\n  }\r\n}\r\n\r\n\r\ncontract Contract is Ownable, SupportsInterfaceWithLookup {\r\n    /**\r\n     * @notice this.owner.selector ^ this.renounceOwnership.selector ^ this.transferOwnership.selector\r\n        ^ this.template.selector\r\n     */\r\n    bytes4 public constant InterfaceId_Contract = 0x6125ede5;\r\n\r\n    Template public template;\r\n\r\n    constructor(address _owner) public {\r\n        require(_owner != address(0));\r\n\r\n        template = Template(msg.sender);\r\n        owner = _owner;\r\n\r\n        _registerInterface(InterfaceId_Contract);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Strategy is Contract, Activatable {\r\n    /**\r\n     * @notice this.owner.selector ^ this.renounceOwnership.selector ^ this.transferOwnership.selector\r\n        ^ this.template.selector ^ this.activate.selector\r\n     */\r\n    bytes4 public constant InterfaceId_Strategy = 0x6e301925;\r\n\r\n    constructor(address _owner) public Contract(_owner) {\r\n        _registerInterface(InterfaceId_Strategy);\r\n    }\r\n\r\n    function activate() onlyOwner public returns (bool) {\r\n        return super.activate();\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract SaleStrategy is Strategy {\r\n    /**\r\n     * @notice this.owner.selector ^ this.renounceOwnership.selector ^ this.transferOwnership.selector\r\n        ^ this.template.selector ^ this.activate.selector ^ this.deactivate.selector\r\n        ^ this.started.selector ^ this.successful.selector ^ this.finished.selector\r\n     */\r\n    bytes4 public constant InterfaceId_SaleStrategy = 0x04c8123d;\r\n\r\n    Sale public sale;\r\n\r\n    constructor(address _owner, Sale _sale) public Strategy(_owner) {\r\n        sale = _sale;\r\n\r\n        _registerInterface(InterfaceId_SaleStrategy);\r\n    }\r\n\r\n    modifier whenSaleActivated {\r\n        require(sale.activated());\r\n        _;\r\n    }\r\n\r\n    modifier whenSaleNotActivated {\r\n        require(!sale.activated());\r\n        _;\r\n    }\r\n\r\n    function activate() whenSaleNotActivated public returns (bool) {\r\n        return super.activate();\r\n    }\r\n\r\n    function deactivate() onlyOwner whenSaleNotActivated public returns (bool) {\r\n        activated = false;\r\n        return true;\r\n    }\r\n\r\n    function started() public view returns (bool);\r\n\r\n    function successful() public view returns (bool);\r\n\r\n    function finished() public view returns (bool);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic interface\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Basic is ERC165 {\r\n\r\n  bytes4 internal constant InterfaceId_ERC721 = 0x80ac58cd;\r\n  /*\r\n   * 0x80ac58cd ===\r\n   *   bytes4(keccak256('balanceOf(address)')) ^\r\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\r\n   *   bytes4(keccak256('approve(address,uint256)')) ^\r\n   *   bytes4(keccak256('getApproved(uint256)')) ^\r\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\r\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\r\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\r\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\r\n   */\r\n\r\n  bytes4 internal constant InterfaceId_ERC721Exists = 0x4f558e79;\r\n  /*\r\n   * 0x4f558e79 ===\r\n   *   bytes4(keccak256('exists(uint256)'))\r\n   */\r\n\r\n  bytes4 internal constant InterfaceId_ERC721Enumerable = 0x780e9d63;\r\n  /**\r\n   * 0x780e9d63 ===\r\n   *   bytes4(keccak256('totalSupply()')) ^\r\n   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\r\n   *   bytes4(keccak256('tokenByIndex(uint256)'))\r\n   */\r\n\r\n  bytes4 internal constant InterfaceId_ERC721Metadata = 0x5b5e139f;\r\n  /**\r\n   * 0x5b5e139f ===\r\n   *   bytes4(keccak256('name()')) ^\r\n   *   bytes4(keccak256('symbol()')) ^\r\n   *   bytes4(keccak256('tokenURI(uint256)'))\r\n   */\r\n\r\n  event Transfer(\r\n    address indexed _from,\r\n    address indexed _to,\r\n    uint256 indexed _tokenId\r\n  );\r\n  event Approval(\r\n    address indexed _owner,\r\n    address indexed _approved,\r\n    uint256 indexed _tokenId\r\n  );\r\n  event ApprovalForAll(\r\n    address indexed _owner,\r\n    address indexed _operator,\r\n    bool _approved\r\n  );\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 _balance);\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n  function exists(uint256 _tokenId) public view returns (bool _exists);\r\n\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function getApproved(uint256 _tokenId)\r\n    public view returns (address _operator);\r\n\r\n  function setApprovalForAll(address _operator, bool _approved) public;\r\n  function isApprovedForAll(address _owner, address _operator)\r\n    public view returns (bool);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId)\r\n    public;\r\n\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Enumerable is ERC721Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function tokenOfOwnerByIndex(\r\n    address _owner,\r\n    uint256 _index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256 _tokenId);\r\n\r\n  function tokenByIndex(uint256 _index) public view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Metadata is ERC721Basic {\r\n  function name() external view returns (string _name);\r\n  function symbol() external view returns (string _symbol);\r\n  function tokenURI(uint256 _tokenId) public view returns (string);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ncontract ERC721Receiver {\r\n  /**\r\n   * @dev Magic value to be returned upon successful reception of an NFT\r\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`,\r\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n   */\r\n  bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n  /**\r\n   * @notice Handle the receipt of an NFT\r\n   * @dev The ERC721 smart contract calls this function on the recipient\r\n   * after a `safetransfer`. This function MAY throw to revert and reject the\r\n   * transfer. Return of other than the magic value MUST result in the\r\n   * transaction being reverted.\r\n   * Note: the contract address is always the message sender.\r\n   * @param _operator The address which called `safeTransferFrom` function\r\n   * @param _from The address which previously owned the token\r\n   * @param _tokenId The NFT identifier which is being transferred\r\n   * @param _data Additional data with no specified format\r\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n   */\r\n  function onERC721Received(\r\n    address _operator,\r\n    address _from,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n    returns(bytes4);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   * as the code is not actually created until after the constructor finishes.\r\n   * @param _addr address to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address _addr) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(_addr) }\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic implementation\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721BasicToken is SupportsInterfaceWithLookup, ERC721Basic {\r\n\r\n  using SafeMath for uint256;\r\n  using AddressUtils for address;\r\n\r\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n  bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n  // Mapping from token ID to owner\r\n  mapping (uint256 => address) internal tokenOwner;\r\n\r\n  // Mapping from token ID to approved address\r\n  mapping (uint256 => address) internal tokenApprovals;\r\n\r\n  // Mapping from owner to number of owned token\r\n  mapping (address => uint256) internal ownedTokensCount;\r\n\r\n  // Mapping from owner to operator approvals\r\n  mapping (address => mapping (address => bool)) internal operatorApprovals;\r\n\r\n  constructor()\r\n    public\r\n  {\r\n    // register the supported interfaces to conform to ERC721 via ERC165\r\n    _registerInterface(InterfaceId_ERC721);\r\n    _registerInterface(InterfaceId_ERC721Exists);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the balance of the specified address\r\n   * @param _owner address to query the balance of\r\n   * @return uint256 representing the amount owned by the passed address\r\n   */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    require(_owner != address(0));\r\n    return ownedTokensCount[_owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the owner of the specified token ID\r\n   * @param _tokenId uint256 ID of the token to query the owner of\r\n   * @return owner address currently marked as the owner of the given token ID\r\n   */\r\n  function ownerOf(uint256 _tokenId) public view returns (address) {\r\n    address owner = tokenOwner[_tokenId];\r\n    require(owner != address(0));\r\n    return owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the specified token exists\r\n   * @param _tokenId uint256 ID of the token to query the existence of\r\n   * @return whether the token exists\r\n   */\r\n  function exists(uint256 _tokenId) public view returns (bool) {\r\n    address owner = tokenOwner[_tokenId];\r\n    return owner != address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Approves another address to transfer the given token ID\r\n   * The zero address indicates there is no approved address.\r\n   * There can only be one approved address per token at a given time.\r\n   * Can only be called by the token owner or an approved operator.\r\n   * @param _to address to be approved for the given token ID\r\n   * @param _tokenId uint256 ID of the token to be approved\r\n   */\r\n  function approve(address _to, uint256 _tokenId) public {\r\n    address owner = ownerOf(_tokenId);\r\n    require(_to != owner);\r\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n    tokenApprovals[_tokenId] = _to;\r\n    emit Approval(owner, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the approved address for a token ID, or zero if no address set\r\n   * @param _tokenId uint256 ID of the token to query the approval of\r\n   * @return address currently approved for the given token ID\r\n   */\r\n  function getApproved(uint256 _tokenId) public view returns (address) {\r\n    return tokenApprovals[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Sets or unsets the approval of a given operator\r\n   * An operator is allowed to transfer all tokens of the sender on their behalf\r\n   * @param _to operator address to set the approval\r\n   * @param _approved representing the status of the approval to be set\r\n   */\r\n  function setApprovalForAll(address _to, bool _approved) public {\r\n    require(_to != msg.sender);\r\n    operatorApprovals[msg.sender][_to] = _approved;\r\n    emit ApprovalForAll(msg.sender, _to, _approved);\r\n  }\r\n\r\n  /**\r\n   * @dev Tells whether an operator is approved by a given owner\r\n   * @param _owner owner address which you want to query the approval of\r\n   * @param _operator operator address which you want to query the approval of\r\n   * @return bool whether the given operator is approved by the given owner\r\n   */\r\n  function isApprovedForAll(\r\n    address _owner,\r\n    address _operator\r\n  )\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return operatorApprovals[_owner][_operator];\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers the ownership of a given token ID to another address\r\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n  {\r\n    require(isApprovedOrOwner(msg.sender, _tokenId));\r\n    require(_from != address(0));\r\n    require(_to != address(0));\r\n\r\n    clearApproval(_from, _tokenId);\r\n    removeTokenFrom(_from, _tokenId);\r\n    addTokenTo(_to, _tokenId);\r\n\r\n    emit Transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * If the target address is a contract, it must implement `onERC721Received`,\r\n   * which is called upon a safe transfer, and return the magic value\r\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n   * the transfer is reverted.\r\n   *\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n  {\r\n    // solium-disable-next-line arg-overflow\r\n    safeTransferFrom(_from, _to, _tokenId, \"\");\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * If the target address is a contract, it must implement `onERC721Received`,\r\n   * which is called upon a safe transfer, and return the magic value\r\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n   * the transfer is reverted.\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes data to send along with a safe transfer check\r\n   */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n  {\r\n    transferFrom(_from, _to, _tokenId);\r\n    // solium-disable-next-line arg-overflow\r\n    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the given spender can transfer a given token ID\r\n   * @param _spender address of the spender to query\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @return bool whether the msg.sender is approved for the given token ID,\r\n   *  is an operator of the owner, or is the owner of the token\r\n   */\r\n  function isApprovedOrOwner(\r\n    address _spender,\r\n    uint256 _tokenId\r\n  )\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    address owner = ownerOf(_tokenId);\r\n    // Disable solium check because of\r\n    // https://github.com/duaraghav8/Solium/issues/175\r\n    // solium-disable-next-line operator-whitespace\r\n    return (\r\n      _spender == owner ||\r\n      getApproved(_tokenId) == _spender ||\r\n      isApprovedForAll(owner, _spender)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * Reverts if the given token ID already exists\r\n   * @param _to The address that will own the minted token\r\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    require(_to != address(0));\r\n    addTokenTo(_to, _tokenId);\r\n    emit Transfer(address(0), _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * Reverts if the token does not exist\r\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    clearApproval(_owner, _tokenId);\r\n    removeTokenFrom(_owner, _tokenId);\r\n    emit Transfer(_owner, address(0), _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to clear current approval of a given token ID\r\n   * Reverts if the given address is not indeed the owner of the token\r\n   * @param _owner owner of the token\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   */\r\n  function clearApproval(address _owner, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _owner);\r\n    if (tokenApprovals[_tokenId] != address(0)) {\r\n      tokenApprovals[_tokenId] = address(0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * @param _to address representing the new owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    require(tokenOwner[_tokenId] == address(0));\r\n    tokenOwner[_tokenId] = _to;\r\n    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _from);\r\n    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\r\n    tokenOwner[_tokenId] = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to invoke `onERC721Received` on a target address\r\n   * The call is not executed if the target address is not a contract\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _to target address that will receive the tokens\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes optional data to send along with the call\r\n   * @return whether the call correctly returned the expected magic value\r\n   */\r\n  function checkAndCallSafeTransfer(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    internal\r\n    returns (bool)\r\n  {\r\n    if (!_to.isContract()) {\r\n      return true;\r\n    }\r\n    bytes4 retval = ERC721Receiver(_to).onERC721Received(\r\n      msg.sender, _from, _tokenId, _data);\r\n    return (retval == ERC721_RECEIVED);\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Full ERC721 Token\r\n * This implementation includes all the required and some optional functionality of the ERC721 standard\r\n * Moreover, it includes approve all functionality using operator terminology\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Token is SupportsInterfaceWithLookup, ERC721BasicToken, ERC721 {\r\n\r\n  // Token name\r\n  string internal name_;\r\n\r\n  // Token symbol\r\n  string internal symbol_;\r\n\r\n  // Mapping from owner to list of owned token IDs\r\n  mapping(address => uint256[]) internal ownedTokens;\r\n\r\n  // Mapping from token ID to index of the owner tokens list\r\n  mapping(uint256 => uint256) internal ownedTokensIndex;\r\n\r\n  // Array with all token ids, used for enumeration\r\n  uint256[] internal allTokens;\r\n\r\n  // Mapping from token id to position in the allTokens array\r\n  mapping(uint256 => uint256) internal allTokensIndex;\r\n\r\n  // Optional mapping for token URIs\r\n  mapping(uint256 => string) internal tokenURIs;\r\n\r\n  /**\r\n   * @dev Constructor function\r\n   */\r\n  constructor(string _name, string _symbol) public {\r\n    name_ = _name;\r\n    symbol_ = _symbol;\r\n\r\n    // register the supported interfaces to conform to ERC721 via ERC165\r\n    _registerInterface(InterfaceId_ERC721Enumerable);\r\n    _registerInterface(InterfaceId_ERC721Metadata);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token name\r\n   * @return string representing the token name\r\n   */\r\n  function name() external view returns (string) {\r\n    return name_;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token symbol\r\n   * @return string representing the token symbol\r\n   */\r\n  function symbol() external view returns (string) {\r\n    return symbol_;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns an URI for a given token ID\r\n   * Throws if the token ID does not exist. May return an empty string.\r\n   * @param _tokenId uint256 ID of the token to query\r\n   */\r\n  function tokenURI(uint256 _tokenId) public view returns (string) {\r\n    require(exists(_tokenId));\r\n    return tokenURIs[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\r\n   * @param _owner address owning the tokens list to be accessed\r\n   * @param _index uint256 representing the index to be accessed of the requested tokens list\r\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\r\n   */\r\n  function tokenOfOwnerByIndex(\r\n    address _owner,\r\n    uint256 _index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    require(_index < balanceOf(_owner));\r\n    return ownedTokens[_owner][_index];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the total amount of tokens stored by the contract\r\n   * @return uint256 representing the total amount of tokens\r\n   */\r\n  function totalSupply() public view returns (uint256) {\r\n    return allTokens.length;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of all the tokens in this contract\r\n   * Reverts if the index is greater or equal to the total number of tokens\r\n   * @param _index uint256 representing the index to be accessed of the tokens list\r\n   * @return uint256 token ID at the given index of the tokens list\r\n   */\r\n  function tokenByIndex(uint256 _index) public view returns (uint256) {\r\n    require(_index < totalSupply());\r\n    return allTokens[_index];\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to set the token URI for a given token\r\n   * Reverts if the token ID does not exist\r\n   * @param _tokenId uint256 ID of the token to set its URI\r\n   * @param _uri string URI to assign\r\n   */\r\n  function _setTokenURI(uint256 _tokenId, string _uri) internal {\r\n    require(exists(_tokenId));\r\n    tokenURIs[_tokenId] = _uri;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * @param _to address representing the new owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    super.addTokenTo(_to, _tokenId);\r\n    uint256 length = ownedTokens[_to].length;\r\n    ownedTokens[_to].push(_tokenId);\r\n    ownedTokensIndex[_tokenId] = length;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    super.removeTokenFrom(_from, _tokenId);\r\n\r\n    // To prevent a gap in the array, we store the last token in the index of the token to delete, and\r\n    // then delete the last slot.\r\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\r\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\r\n\r\n    ownedTokens[_from][tokenIndex] = lastToken;\r\n    // This also deletes the contents at the last position of the array\r\n    ownedTokens[_from].length--;\r\n\r\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\r\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\r\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\r\n\r\n    ownedTokensIndex[_tokenId] = 0;\r\n    ownedTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * Reverts if the given token ID already exists\r\n   * @param _to address the beneficiary that will own the minted token\r\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    super._mint(_to, _tokenId);\r\n\r\n    allTokensIndex[_tokenId] = allTokens.length;\r\n    allTokens.push(_tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * Reverts if the token does not exist\r\n   * @param _owner owner of the token to burn\r\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    super._burn(_owner, _tokenId);\r\n\r\n    // Clear metadata (if any)\r\n    if (bytes(tokenURIs[_tokenId]).length != 0) {\r\n      delete tokenURIs[_tokenId];\r\n    }\r\n\r\n    // Reorg all tokens array\r\n    uint256 tokenIndex = allTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = allTokens.length.sub(1);\r\n    uint256 lastToken = allTokens[lastTokenIndex];\r\n\r\n    allTokens[tokenIndex] = lastToken;\r\n    allTokens[lastTokenIndex] = 0;\r\n\r\n    allTokens.length--;\r\n    allTokensIndex[_tokenId] = 0;\r\n    allTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) internal balances;\r\n\r\n  uint256 internal totalSupply_;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_value <= balances[msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/issues/20\r\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint256 _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint256 _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue >= oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  modifier hasMintPermission() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(\r\n    address _to,\r\n    uint256 _amount\r\n  )\r\n    public\r\n    hasMintPermission\r\n    canMint\r\n    returns (bool)\r\n  {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() public onlyOwner canMint returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title DetailedERC20 token\r\n * @dev The decimals are only for visualization purposes.\r\n * All the operations are done using the smallest and indivisible token unit,\r\n * just as on Ethereum all the operations are done in wei.\r\n */\r\ncontract DetailedERC20 is ERC20 {\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals;\r\n\r\n  constructor(string _name, string _symbol, uint8 _decimals) public {\r\n    name = _name;\r\n    symbol = _symbol;\r\n    decimals = _decimals;\r\n  }\r\n}\r\n\r\n\r\ncontract Boost is MintableToken, DetailedERC20(\"Boost\", \"BST\", 18) {\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Template\r\n * @notice Template instantiates `Contract`s of the same form.\r\n */\r\ncontract Template is Ownable, SupportsInterfaceWithLookup {\r\n    /**\r\n     * @notice this.owner.selector ^ this.renounceOwnership.selector ^ this.transferOwnership.selector\r\n        ^ this.bytecodeHash.selector ^ this.price.selector ^ this.beneficiary.selector\r\n        ^ this.name.selector ^ this.description.selector ^ this.setNameAndDescription.selector\r\n        ^ this.instantiate.selector\r\n     */\r\n    bytes4 public constant InterfaceId_Template = 0xd48445ff;\r\n\r\n    mapping(string => string) nameOfLocale;\r\n    mapping(string => string) descriptionOfLocale;\r\n    /**\r\n     * @notice Hash of EVM bytecode to be instantiated.\r\n     */\r\n    bytes32 public bytecodeHash;\r\n    /**\r\n     * @notice Price to pay when instantiating\r\n     */\r\n    uint public price;\r\n    /**\r\n     * @notice Address to receive payment\r\n     */\r\n    address public beneficiary;\r\n\r\n    /**\r\n     * @notice Logged when a new `Contract` instantiated.\r\n     */\r\n    event Instantiated(address indexed creator, address indexed contractAddress);\r\n\r\n    /**\r\n     * @param _bytecodeHash Hash of EVM bytecode\r\n     * @param _price Price of instantiating in wei\r\n     * @param _beneficiary Address to transfer _price when instantiating\r\n     */\r\n    constructor(\r\n        bytes32 _bytecodeHash,\r\n        uint _price,\r\n        address _beneficiary\r\n    ) public {\r\n        bytecodeHash = _bytecodeHash;\r\n        price = _price;\r\n        beneficiary = _beneficiary;\r\n        if (price > 0) {\r\n            require(beneficiary != address(0));\r\n        }\r\n\r\n        _registerInterface(InterfaceId_Template);\r\n    }\r\n\r\n    /**\r\n     * @param _locale IETF language tag(https://en.wikipedia.org/wiki/IETF_language_tag)\r\n     * @return Name in `_locale`.\r\n     */\r\n    function name(string _locale) public view returns (string) {\r\n        return nameOfLocale[_locale];\r\n    }\r\n\r\n    /**\r\n     * @param _locale IETF language tag(https://en.wikipedia.org/wiki/IETF_language_tag)\r\n     * @return Description in `_locale`.\r\n     */\r\n    function description(string _locale) public view returns (string) {\r\n        return descriptionOfLocale[_locale];\r\n    }\r\n\r\n    /**\r\n     * @param _locale IETF language tag(https://en.wikipedia.org/wiki/IETF_language_tag)\r\n     * @param _name Name to set\r\n     * @param _description Description to set\r\n     */\r\n    function setNameAndDescription(string _locale, string _name, string _description) public onlyOwner {\r\n        nameOfLocale[_locale] = _name;\r\n        descriptionOfLocale[_locale] = _description;\r\n    }\r\n\r\n    /**\r\n     * @notice `msg.sender` is passed as first argument for the newly created `Contract`.\r\n     * @param _bytecode Bytecode corresponding to `bytecodeHash`\r\n     * @param _args If arguments where passed to this function, those will be appended to the arguments for `Contract`.\r\n     * @return Newly created contract account's address\r\n     */\r\n    function instantiate(bytes _bytecode, bytes _args) public payable returns (address contractAddress) {\r\n        require(bytecodeHash == keccak256(_bytecode));\r\n        bytes memory calldata = abi.encodePacked(_bytecode, _args);\r\n        assembly {\r\n            contractAddress := create(0, add(calldata, 0x20), mload(calldata))\r\n        }\r\n        if (contractAddress == address(0)) {\r\n            revert(\"Cannot instantiate contract\");\r\n        } else {\r\n            Contract c = Contract(contractAddress);\r\n            // InterfaceId_ERC165\r\n            require(c.supportsInterface(0x01ffc9a7));\r\n            // InterfaceId_Contract\r\n            require(c.supportsInterface(0x6125ede5));\r\n\r\n            if (price > 0) {\r\n                require(msg.value == price);\r\n                beneficiary.transfer(msg.value);\r\n            }\r\n            emit Instantiated(msg.sender, contractAddress);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract StrategyTemplate is Template {\r\n    constructor(\r\n        bytes32 _bytecodeHash,\r\n        uint _price,\r\n        address _beneficiary\r\n    ) public\r\n    Template(\r\n        _bytecodeHash,\r\n        _price,\r\n        _beneficiary\r\n    ) {\r\n    }\r\n\r\n    function instantiate(bytes _bytecode, bytes _args) public payable returns (address contractAddress) {\r\n        Strategy strategy = Strategy(super.instantiate(_bytecode, _args));\r\n        // InterfaceId_Strategy\r\n        require(strategy.supportsInterface(0x6e301925));\r\n        return strategy;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract SaleStrategyTemplate is StrategyTemplate {\r\n    constructor(\r\n        bytes32 _bytecodeHash,\r\n        uint _price,\r\n        address _beneficiary\r\n    ) public\r\n    StrategyTemplate(\r\n        _bytecodeHash,\r\n        _price,\r\n        _beneficiary\r\n    ) {\r\n    }\r\n\r\n    function instantiate(bytes _bytecode, bytes _args) public payable returns (address contractAddress) {\r\n        SaleStrategy strategy = SaleStrategy(super.instantiate(_bytecode, _args));\r\n        // InterfaceId_SaleStrategy\r\n        require(strategy.supportsInterface(0x04c8123d));\r\n        return strategy;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract Sale is Contract, Activatable {\r\n    using SafeMath for uint;\r\n\r\n    /**\r\n     * @notice this.owner.selector ^ this.renounceOwnership.selector ^ this.transferOwnership.selector\r\n        ^ this.template.selector ^ this.activate.selector\r\n        ^ this.projectName.selector ^ this.projectSummary.selector ^ this.projectDescription.selector\r\n        ^ this.logoUrl.selector ^ this.coverImageUrl.selector ^ this.websiteUrl.selector ^ this.whitepaperUrl.selector\r\n        ^ this.name.selector ^ this.weiRaised.selector ^ this.withdrawn.selector ^ this.ready.selector\r\n        ^ this.started.selector ^ this.successful.selector ^ this.finished.selector ^ this.paymentOf.selector\r\n        ^ this.update.selector ^ this.addStrategy.selector ^ this.numberOfStrategies.selector ^ this.strategyAt.selector\r\n        ^ this.numberOfActivatedStrategies.selector ^ this.activatedStrategyAt.selector\r\n        ^ this.withdraw.selector ^ this.claimRefund.selector\r\n     */\r\n    bytes4 public constant InterfaceId_Sale = 0x8139792d;\r\n\r\n    string public projectName;\r\n    string public projectSummary;\r\n    string public projectDescription;\r\n    string public logoUrl;\r\n    string public coverImageUrl;\r\n    string public websiteUrl;\r\n    string public whitepaperUrl;\r\n    string public name;\r\n\r\n    uint256 public weiRaised;\r\n    bool public withdrawn;\r\n\r\n    SaleStrategy[] strategies;\r\n    SaleStrategy[] activatedStrategies;\r\n    mapping(address => uint256) paymentOfPurchaser;\r\n\r\n    constructor(\r\n        address _owner,\r\n        string _projectName,\r\n        string _name\r\n    ) public Contract(_owner) {\r\n        projectName = _projectName;\r\n        name = _name;\r\n\r\n        _registerInterface(InterfaceId_Sale);\r\n    }\r\n\r\n    function update(\r\n        string _projectName,\r\n        string _projectSummary,\r\n        string _projectDescription,\r\n        string _logoUrl,\r\n        string _coverImageUrl,\r\n        string _websiteUrl,\r\n        string _whitepaperUrl,\r\n        string _name\r\n    ) public onlyOwner whenNotActivated {\r\n        projectName = _projectName;\r\n        projectSummary = _projectSummary;\r\n        projectDescription = _projectDescription;\r\n        logoUrl = _logoUrl;\r\n        coverImageUrl = _coverImageUrl;\r\n        websiteUrl = _websiteUrl;\r\n        whitepaperUrl = _whitepaperUrl;\r\n        name = _name;\r\n    }\r\n\r\n    function addStrategy(SaleStrategyTemplate _template, bytes _bytecode) onlyOwner whenNotActivated public payable {\r\n        // InterfaceId_ERC165\r\n        require(_template.supportsInterface(0x01ffc9a7));\r\n        // InterfaceId_Template\r\n        require(_template.supportsInterface(0xd48445ff));\r\n\r\n        require(_isUniqueStrategy(_template));\r\n\r\n        bytes memory args = abi.encode(msg.sender, address(this));\r\n        SaleStrategy strategy = SaleStrategy(_template.instantiate.value(msg.value)(_bytecode, args));\r\n        strategies.push(strategy);\r\n    }\r\n\r\n    function _isUniqueStrategy(SaleStrategyTemplate _template) private view returns (bool) {\r\n        for (uint i = 0; i < strategies.length; i++) {\r\n            SaleStrategy strategy = strategies[i];\r\n            if (address(strategy.template()) == address(_template)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function numberOfStrategies() public view returns (uint256) {\r\n        return strategies.length;\r\n    }\r\n\r\n    function strategyAt(uint256 index) public view returns (address) {\r\n        return strategies[index];\r\n    }\r\n\r\n    function numberOfActivatedStrategies() public view returns (uint256) {\r\n        return activatedStrategies.length;\r\n    }\r\n\r\n    function activatedStrategyAt(uint256 index) public view returns (address) {\r\n        return activatedStrategies[index];\r\n    }\r\n\r\n    function activate() onlyOwner public returns (bool) {\r\n        for (uint i = 0; i < strategies.length; i++) {\r\n            SaleStrategy strategy = strategies[i];\r\n            if (strategy.activated()) {\r\n                activatedStrategies.push(strategy);\r\n            }\r\n        }\r\n        return super.activate();\r\n    }\r\n\r\n    function started() public view returns (bool) {\r\n        if (!activated) return false;\r\n\r\n        bool s = false;\r\n        for (uint i = 0; i < activatedStrategies.length; i++) {\r\n            s = s || activatedStrategies[i].started();\r\n        }\r\n        return s;\r\n    }\r\n\r\n    function successful() public view returns (bool){\r\n        if (!started()) return false;\r\n\r\n        bool s = false;\r\n        for (uint i = 0; i < activatedStrategies.length; i++) {\r\n            s = s || activatedStrategies[i].successful();\r\n        }\r\n        return s;\r\n    }\r\n\r\n    function finished() public view returns (bool){\r\n        if (!started()) return false;\r\n\r\n        bool f = false;\r\n        for (uint i = 0; i < activatedStrategies.length; i++) {\r\n            f = f || activatedStrategies[i].finished();\r\n        }\r\n        return f;\r\n    }\r\n\r\n    function() external payable;\r\n\r\n    function increasePaymentOf(address _purchaser, uint256 _weiAmount) internal {\r\n        require(!finished());\r\n        require(started());\r\n\r\n        paymentOfPurchaser[_purchaser] = paymentOfPurchaser[_purchaser].add(_weiAmount);\r\n        weiRaised = weiRaised.add(_weiAmount);\r\n    }\r\n\r\n    function paymentOf(address _purchaser) public view returns (uint256 weiAmount) {\r\n        return paymentOfPurchaser[_purchaser];\r\n    }\r\n\r\n    function withdraw() onlyOwner whenActivated public returns (bool) {\r\n        require(!withdrawn);\r\n        require(finished());\r\n        require(successful());\r\n\r\n        withdrawn = true;\r\n        msg.sender.transfer(weiRaised);\r\n\r\n        return true;\r\n    }\r\n\r\n    function claimRefund() whenActivated public returns (bool) {\r\n        require(finished());\r\n        require(!successful());\r\n\r\n        uint256 amount = paymentOfPurchaser[msg.sender];\r\n        require(amount > 0);\r\n\r\n        paymentOfPurchaser[msg.sender] = 0;\r\n        msg.sender.transfer(amount);\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract SaleTemplate is Template {\r\n    constructor(\r\n        bytes32 _bytecodeHash,\r\n        uint _price,\r\n        address _beneficiary\r\n    ) public\r\n    Template(\r\n        _bytecodeHash,\r\n        _price,\r\n        _beneficiary\r\n    ) {\r\n    }\r\n\r\n    function instantiate(bytes _bytecode, bytes _args) public payable returns (address contractAddress) {\r\n        Sale sale = Sale(super.instantiate(_bytecode, _args));\r\n        // InterfaceId_Sale\r\n        require(sale.supportsInterface(0x8139792d));\r\n        return sale;\r\n    }\r\n}\r\n\r\n\r\ncontract Raiser is ERC721Token(\"Raiser\", \"RAI\"), Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    event Mint(address indexed to, uint256 tokenId);\r\n\r\n    uint256 public constant HALVING_WEI = 21000000 * (10 ** 18);\r\n    uint256 public constant MAX_HALVING_ERA = 20;\r\n\r\n    Boost public boost;\r\n    uint256 public rewardEra = 0;\r\n\r\n    uint256 weiUntilNextHalving = HALVING_WEI;\r\n    mapping(uint256 => Sale) saleOfTokenId;\r\n    mapping(uint256 => string) slugOfTokenId;\r\n    mapping(uint256 => mapping(address => uint256)) rewardedBoostsOfSomeoneOfTokenId;\r\n\r\n    constructor(Boost _boost) public {\r\n        boost = _boost;\r\n    }\r\n\r\n    function mint(string _slug, SaleTemplate _template, bytes _bytecode, bytes _args) public payable {\r\n        // InterfaceId_ERC165\r\n        require(_template.supportsInterface(0x01ffc9a7));\r\n        // InterfaceId_Template\r\n        require(_template.supportsInterface(0xd48445ff));\r\n\r\n        uint256 tokenId = toTokenId(_slug);\r\n        require(address(saleOfTokenId[tokenId]) == address(0));\r\n\r\n        Sale sale = Sale(_template.instantiate.value(msg.value)(_bytecode, _args));\r\n        saleOfTokenId[tokenId] = sale;\r\n        slugOfTokenId[tokenId] = _slug;\r\n\r\n        _mint(msg.sender, tokenId);\r\n        emit Mint(msg.sender, tokenId);\r\n    }\r\n\r\n    function toTokenId(string _slug) public pure returns (uint256 tokenId) {\r\n        bytes memory chars = bytes(_slug);\r\n        require(chars.length > 0, \"String is empty.\");\r\n        for (uint i = 0; i < _min(chars.length, 32); i++) {\r\n            uint c = uint(chars[i]);\r\n            require(0x61 <= c && c <= 0x7a || c == 0x2d, \"String must contain only lowercase alphabets or hyphens.\");\r\n        }\r\n        assembly {\r\n            tokenId := mload(add(chars, 32))\r\n        }\r\n    }\r\n\r\n    function slugOf(uint256 _tokenId) public view returns (string slug) {\r\n        return slugOfTokenId[_tokenId];\r\n    }\r\n\r\n    function saleOf(uint256 _tokenId) public view returns (Sale sale) {\r\n        return saleOfTokenId[_tokenId];\r\n    }\r\n\r\n    function claimableBoostsOf(uint256 _tokenId) public view returns (uint256 boosts, uint256 newRewardEra, uint256 newWeiUntilNextHalving) {\r\n        if (rewardedBoostsOfSomeoneOfTokenId[_tokenId][msg.sender] > 0) {\r\n            return (0, rewardEra, weiUntilNextHalving);\r\n        }\r\n\r\n        Sale sale = saleOfTokenId[_tokenId];\r\n        require(address(sale) != address(0));\r\n        require(sale.finished());\r\n\r\n        uint256 weiAmount = sale.paymentOf(msg.sender);\r\n        if (sale.owner() == msg.sender) {\r\n            weiAmount = weiAmount.add(sale.weiRaised());\r\n        }\r\n        return _weiToBoosts(weiAmount);\r\n    }\r\n\r\n    function claimBoostsOf(uint256 _tokenId) public returns (bool) {\r\n        (uint256 boosts, uint256 newRewardEra, uint256 newWeiUntilNextHalving) = claimableBoostsOf(_tokenId);\r\n        rewardEra = newRewardEra;\r\n        weiUntilNextHalving = newWeiUntilNextHalving;\r\n        if (boosts > 0) {\r\n            boost.mint(msg.sender, boosts);\r\n        }\r\n        rewardedBoostsOfSomeoneOfTokenId[_tokenId][msg.sender] = boosts;\r\n        return true;\r\n    }\r\n\r\n    function rewardedBoostsOf(uint256 _tokenId) public view returns (uint256 boosts) {\r\n        return rewardedBoostsOfSomeoneOfTokenId[_tokenId][msg.sender];\r\n    }\r\n\r\n    function claimableBoosts() public view returns (uint256 boosts, uint256 newRewardEra, uint256 newWeiUntilNextHalving) {\r\n        for (uint i = 0; i < totalSupply(); i++) {\r\n            uint256 tokenId = tokenByIndex(i);\r\n            (uint256 b, uint256 r, uint256 w) = claimableBoostsOf(tokenId);\r\n            boosts = boosts.add(b);\r\n            newRewardEra = r;\r\n            newWeiUntilNextHalving = w;\r\n        }\r\n    }\r\n\r\n    function claimBoosts() public returns (bool) {\r\n        for (uint i = 0; i < totalSupply(); i++) {\r\n            uint256 tokenId = tokenByIndex(i);\r\n            claimBoostsOf(tokenId);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function rewardedBoosts() public view returns (uint256 boosts) {\r\n        for (uint i = 0; i < totalSupply(); i++) {\r\n            uint256 tokenId = tokenByIndex(i);\r\n            boosts = boosts.add(rewardedBoostsOf(tokenId));\r\n        }\r\n    }\r\n\r\n    function boostsUntilNextHalving() public view returns (uint256) {\r\n        (uint256 boosts,,) = _weiToBoosts(weiUntilNextHalving);\r\n        return boosts;\r\n    }\r\n\r\n    function _weiToBoosts(uint256 _weiAmount) private view returns (uint256 boosts, uint256 newRewardEra, uint256 newWeiUntilNextHalving) {\r\n        if (rewardEra > MAX_HALVING_ERA) {\r\n            return (0, rewardEra, weiUntilNextHalving);\r\n        }\r\n        uint256 amount = _weiAmount;\r\n        boosts = 0;\r\n        newRewardEra = rewardEra;\r\n        newWeiUntilNextHalving = weiUntilNextHalving;\r\n        while (amount > 0) {\r\n            uint256 a = _min(amount, weiUntilNextHalving);\r\n            boosts = boosts.add(a.mul(2 ** (MAX_HALVING_ERA.sub(newRewardEra)).div(1000)));\r\n            amount = amount.sub(a);\r\n            newWeiUntilNextHalving = newWeiUntilNextHalving.sub(a);\r\n            if (newWeiUntilNextHalving == 0) {\r\n                newWeiUntilNextHalving = HALVING_WEI;\r\n                newRewardEra += 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _min(uint256 _a, uint256 _b) private pure returns (uint256) {\r\n        return _a < _b ? _a : _b;\r\n    }\r\n}", "OptimizationUsed": "1", "ContractName": "Raiser", "ByteCode": "0x6080604052600436106101a85763ffffffff60e060020a60003504166301ffc9a781146101ad57806303948e47146101e357806306fdde031461020a578063081812fc14610294578063095ea7b3146102c85780630c972b09146102ee57806311bae04f1461030657806318076e4f1461031b57806318160ddd1461033057806319fa8f50146103455780632213719b1461037757806323b872dd146103ad57806326eed3b5146103d75780632d38bf7a146104305780632f745c591461044557806342842e0e146104695780634f558e79146104935780634f6ccce7146104ab578063550a778b146104c357806356935e8e146104db57806361db2445146104f05780636352211e1461050857806370a0823114610520578063715018a61461054157806373edf1891461055657806385449c091461056b5780638da5cb5b1461058057806395d89b4114610595578063a22cb465146105aa578063a66f42c0146105d0578063aeef6719146105e5578063b88d4fde146106bc578063c87b56dd1461072b578063dfdab20d14610743578063e985e9c51461075b578063f2fde38b14610782575b600080fd5b3480156101b957600080fd5b506101cf600160e060020a0319600435166107a3565b604080519115158252519081900360200190f35b3480156101ef57600080fd5b506101f86107c2565b60408051918252519081900360200190f35b34801561021657600080fd5b5061021f6107c7565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610259578181015183820152602001610241565b50505050905090810190601f1680156102865780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102a057600080fd5b506102ac60043561085e565b60408051600160a060020a039092168252519081900360200190f35b3480156102d457600080fd5b506102ec600160a060020a0360043516602435610879565b005b3480156102fa57600080fd5b506101f8600435610922565b34801561031257600080fd5b506101f861093f565b34801561032757600080fd5b506101f8610959565b34801561033c57600080fd5b506101f8610968565b34801561035157600080fd5b5061035a61096e565b60408051600160e060020a03199092168252519081900360200190f35b34801561038357600080fd5b5061038f600435610992565b60408051938452602084019290925282820152519081900360600190f35b3480156103b957600080fd5b506102ec600160a060020a0360043581169060243516604435610c28565b3480156103e357600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101f8943694929360249392840191908190840183828082843750949750610ccb9650505050505050565b34801561043c57600080fd5b506101f8610e50565b34801561045157600080fd5b506101f8600160a060020a0360043516602435610e56565b34801561047557600080fd5b506102ec600160a060020a0360043581169060243516604435610ea4565b34801561049f57600080fd5b506101cf600435610ec5565b3480156104b757600080fd5b506101f8600435610ee2565b3480156104cf57600080fd5b506102ac600435610f17565b3480156104e757600080fd5b506101f8610f32565b3480156104fc57600080fd5b506101cf600435610f7c565b34801561051457600080fd5b506102ac600435611065565b34801561052c57600080fd5b506101f8600160a060020a0360043516611089565b34801561054d57600080fd5b506102ec6110bc565b34801561056257600080fd5b5061038f61111d565b34801561057757600080fd5b506101cf61117f565b34801561058c57600080fd5b506102ac6111bc565b3480156105a157600080fd5b5061021f6111cb565b3480156105b657600080fd5b506102ec600160a060020a0360043516602435151561122c565b3480156105dc57600080fd5b506102ac6112b0565b6040805160206004803580820135601f81018490048402850184019095528484526102ec94369492936024939284019190819084018382808284375050604080516020601f818a01358b0180359182018390048302840183018552818452989b600160a060020a038b35169b909a90999401975091955091820193509150819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506112bf9650505050505050565b3480156106c857600080fd5b50604080516020601f6064356004818101359283018490048402850184019095528184526102ec94600160a060020a03813581169560248035909216956044359536956084940191819084018382808284375094975061160d9650505050505050565b34801561073757600080fd5b5061021f600435611635565b34801561074f57600080fd5b5061021f6004356116ea565b34801561076757600080fd5b506101cf600160a060020a0360043581169060243516611754565b34801561078e57600080fd5b506102ec600160a060020a0360043516611782565b600160e060020a03191660009081526020819052604090205460ff1690565b601481565b60058054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156108535780601f1061082857610100808354040283529160200191610853565b820191906000526020600020905b81548152906001019060200180831161083657829003601f168201915b505050505090505b90565b600090815260026020526040902054600160a060020a031690565b600061088482611065565b9050600160a060020a03838116908216141561089f57600080fd5b33600160a060020a03821614806108bb57506108bb8133611754565b15156108c657600080fd5b6000828152600260205260408082208054600160a060020a031916600160a060020a0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b600090815260126020908152604080832033845290915290205490565b60008061094d600f546117a5565b505090508091505b5090565b6a115eec47f6cf7e3500000081565b60095490565b7f01ffc9a70000000000000000000000000000000000000000000000000000000081565b600081815260126020908152604080832033845290915281205481908190819081908110156109cf57600e54600f54600096509094509250610c1f565b600086815260106020526040902054600160a060020a031691508115156109f557600080fd5b81600160a060020a031663bef4876b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610a3357600080fd5b505af1158015610a47573d6000803e3d6000fd5b505050506040513d6020811015610a5d57600080fd5b50511515610a6a57600080fd5b604080517fcf7c2b310000000000000000000000000000000000000000000000000000000081523360048201529051600160a060020a0384169163cf7c2b319160248083019260209291908290030181600087803b158015610acb57600080fd5b505af1158015610adf573d6000803e3d6000fd5b505050506040513d6020811015610af557600080fd5b5051604080517f8da5cb5b00000000000000000000000000000000000000000000000000000000815290519192503391600160a060020a03851691638da5cb5b9160048083019260209291908290030181600087803b158015610b5757600080fd5b505af1158015610b6b573d6000803e3d6000fd5b505050506040513d6020811015610b8157600080fd5b5051600160a060020a03161415610c0f57610c0c82600160a060020a0316634042b66f6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610bd357600080fd5b505af1158015610be7573d6000803e3d6000fd5b505050506040513d6020811015610bfd57600080fd5b5051829063ffffffff61188216565b90505b610c18816117a5565b9450945094505b50509193909250565b610c32338261188f565b1515610c3d57600080fd5b600160a060020a0383161515610c5257600080fd5b600160a060020a0382161515610c6757600080fd5b610c7183826118ee565b610c7b8382611952565b610c858282611a59565b8082600160a060020a031684600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6000606060008084925060008351111515610d4757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f537472696e6720697320656d7074792e00000000000000000000000000000000604482015290519081900360640190fd5b600091505b610d5883516020611aa2565b821015610e44578282815181101515610d6d57fe5b90602001015160f860020a900460f860020a0260f860020a9004905080606111158015610d9b5750607a8111155b80610da6575080602d145b1515610e3957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603860248201527f537472696e67206d75737420636f6e7461696e206f6e6c79206c6f776572636160448201527f736520616c70686162657473206f722068797068656e732e0000000000000000606482015290519081900360840190fd5b600190910190610d4c565b50506020015192915050565b600e5481565b6000610e6183611089565b8210610e6c57600080fd5b600160a060020a0383166000908152600760205260409020805483908110610e9057fe5b906000526020600020015490505b92915050565b610ec0838383602060405190810160405280600081525061160d565b505050565b600090815260016020526040902054600160a060020a0316151590565b6000610eec610968565b8210610ef757600080fd5b6009805483908110610f0557fe5b90600052602060002001549050919050565b600090815260106020526040902054600160a060020a031690565b600080805b610f3f610968565b821015610f7757610f4f82610ee2565b9050610f6a610f5d82610922565b849063ffffffff61188216565b9250600190910190610f37565b505090565b600080600080610f8b85610992565b600e829055600f81905591945092509050600083111561103f57600d54604080517f40c10f19000000000000000000000000000000000000000000000000000000008152336004820152602481018690529051600160a060020a03909216916340c10f19916044808201926020929091908290030181600087803b15801561101257600080fd5b505af1158015611026573d6000803e3d6000fd5b505050506040513d602081101561103c57600080fd5b50505b505060009283526012602090815260408085203386529091529092209190915550600190565b600081815260016020526040812054600160a060020a0316801515610e9e57600080fd5b6000600160a060020a03821615156110a057600080fd5b50600160a060020a031660009081526003602052604090205490565b600c54600160a060020a031633146110d357600080fd5b600c54604051600160a060020a03909116907ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482090600090a2600c8054600160a060020a0319169055565b6000808080808080805b61112f610968565b8510156111755761113f85610ee2565b935061114a84610992565b91945092509050611161888463ffffffff61188216565b975090955093506001909201918484611127565b5050505050909192565b600080805b61118c610968565b8210156111b35761119c82610ee2565b90506111a781610f7c565b50600190910190611184565b60019250505090565b600c54600160a060020a031681565b60068054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156108535780601f1061082857610100808354040283529160200191610853565b600160a060020a03821633141561124257600080fd5b336000818152600460209081526040808320600160a060020a03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b600d54600160a060020a031681565b604080517f01ffc9a700000000000000000000000000000000000000000000000000000000808252600482015290516000918291600160a060020a038716916301ffc9a791602480830192602092919082900301818787803b15801561132457600080fd5b505af1158015611338573d6000803e3d6000fd5b505050506040513d602081101561134e57600080fd5b5051151561135b57600080fd5b604080517f01ffc9a70000000000000000000000000000000000000000000000000000000081527fd48445ff0000000000000000000000000000000000000000000000000000000060048201529051600160a060020a038716916301ffc9a79160248083019260209291908290030181600087803b1580156113dc57600080fd5b505af11580156113f0573d6000803e3d6000fd5b505050506040513d602081101561140657600080fd5b5051151561141357600080fd5b61141c86610ccb565b600081815260106020526040902054909250600160a060020a03161561144157600080fd5b84600160a060020a0316636535b4a53486866040518463ffffffff1660e060020a028152600401808060200180602001838103835285818151815260200191508051906020019080838360005b838110156114a657818101518382015260200161148e565b50505050905090810190601f1680156114d35780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156115065781810151838201526020016114ee565b50505050905090810190601f1680156115335780820380516001836020036101000a031916815260200191505b509450505050506020604051808303818588803b15801561155357600080fd5b505af1158015611567573d6000803e3d6000fd5b50505050506040513d602081101561157e57600080fd5b505160008381526010602090815260408083208054600160a060020a031916600160a060020a0386161790556011825290912088519293506115c4929091890190611ea6565b506115cf3383611aba565b60408051838152905133917f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885919081900360200190a2505050505050565b611618848484610c28565b61162484848484611b09565b151561162f57600080fd5b50505050565b606061164082610ec5565b151561164b57600080fd5b6000828152600b602090815260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845290918301828280156116de5780601f106116b3576101008083540402835291602001916116de565b820191906000526020600020905b8154815290600101906020018083116116c157829003601f168201915b50505050509050919050565b60008181526011602090815260409182902080548351601f60026000196101006001861615020190931692909204918201849004840281018401909452808452606093928301828280156116de5780601f106116b3576101008083540402835291602001916116de565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205460ff1690565b600c54600160a060020a0316331461179957600080fd5b6117a281611c76565b50565b60008060008060006014600e5411156117cc57600e54600f54600096509094509250610c1f565b85915060009450600e549350600f5492505b6000821115610c1f576117f382600f54611aa2565b905061183b61182e61181e6103e861181260148963ffffffff611ce716565b9063ffffffff611cf916565b839060020a63ffffffff611d0e16565b869063ffffffff61188216565b945061184d828263ffffffff611ce716565b915061185f838263ffffffff611ce716565b925082151561187d576a115eec47f6cf7e3500000092506001840193505b6117de565b81810182811015610e9e57fe5b60008061189b83611065565b905080600160a060020a031684600160a060020a031614806118d6575083600160a060020a03166118cb8461085e565b600160a060020a0316145b806118e657506118e68185611754565b949350505050565b81600160a060020a031661190182611065565b600160a060020a03161461191457600080fd5b600081815260026020526040902054600160a060020a03161561194e5760008181526002602052604090208054600160a060020a03191690555b5050565b60008060006119618585611d37565b600084815260086020908152604080832054600160a060020a038916845260079092529091205490935061199c90600163ffffffff611ce716565b600160a060020a0386166000908152600760205260409020805491935090839081106119c457fe5b90600052602060002001549050806007600087600160a060020a0316600160a060020a0316815260200190815260200160002084815481101515611a0457fe5b6000918252602080832090910192909255600160a060020a0387168152600790915260409020805490611a3b906000198301611f20565b50600093845260086020526040808520859055908452909220555050565b6000611a658383611dc0565b50600160a060020a039091166000908152600760209081526040808320805460018101825590845282842081018590559383526008909152902055565b6000818310611ab15781611ab3565b825b9392505050565b611ac48282611e43565b600980546000838152600a60205260408120829055600182018355919091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af015550565b600080611b1e85600160a060020a0316611e9e565b1515611b2d5760019150611c6d565b6040517f150b7a020000000000000000000000000000000000000000000000000000000081523360048201818152600160a060020a03898116602485015260448401889052608060648501908152875160848601528751918a169463150b7a0294938c938b938b93909160a490910190602085019080838360005b83811015611bc0578181015183820152602001611ba8565b50505050905090810190601f168015611bed5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015611c0f57600080fd5b505af1158015611c23573d6000803e3d6000fd5b505050506040513d6020811015611c3957600080fd5b5051600160e060020a031981167f150b7a020000000000000000000000000000000000000000000000000000000014925090505b50949350505050565b600160a060020a0381161515611c8b57600080fd5b600c54604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600c8054600160a060020a031916600160a060020a0392909216919091179055565b600082821115611cf357fe5b50900390565b60008183811515611d0657fe5b049392505050565b6000821515611d1f57506000610e9e565b50818102818382811515611d2f57fe5b0414610e9e57fe5b81600160a060020a0316611d4a82611065565b600160a060020a031614611d5d57600080fd5b600160a060020a038216600090815260036020526040902054611d8790600163ffffffff611ce716565b600160a060020a039092166000908152600360209081526040808320949094559181526001909152208054600160a060020a0319169055565b600081815260016020526040902054600160a060020a031615611de257600080fd5b60008181526001602081815260408084208054600160a060020a031916600160a060020a0388169081179091558452600390915290912054611e2391611882565b600160a060020a0390921660009081526003602052604090209190915550565b600160a060020a0382161515611e5857600080fd5b611e628282611a59565b6040518190600160a060020a038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000903b1190565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611ee757805160ff1916838001178555611f14565b82800160010185558215611f14579182015b82811115611f14578251825591602001919060010190611ef9565b50610955929150611f40565b815481835581811115610ec057600083815260209020610ec09181019083015b61085b91905b808211156109555760008155600101611f465600a165627a7a72305820ed3c957568b5381cba4680c4f03315a52816bc484e4ebd5243c54b424cca21b80029"}