{"Runs": "200", "SwarmSource": "bzzr://b0fcdaa47ec8f5b451fdeace4fbe4cfacf66881a5032e6524fd05619de3d504f", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toExclude\",\"type\":\"address\"}],\"name\":\"addExcluded\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"crowdsaleFinished\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.18+commit.9cf6e910", "ConstructorArguments": "", "SourceCode": "pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ncontract usingMyWishConsts {\r\n    uint constant TOKEN_DECIMALS = 18;\r\n    uint8 constant TOKEN_DECIMALS_UINT8 = 18;\r\n    uint constant TOKEN_DECIMAL_MULTIPLIER = 10 ** TOKEN_DECIMALS;\r\n\r\n    uint constant TEAM_TOKENS =   3161200 * TOKEN_DECIMAL_MULTIPLIER;\r\n    uint constant BOUNTY_TOKENS = 2000000 * TOKEN_DECIMAL_MULTIPLIER;\r\n    uint constant PREICO_TOKENS = 3038800 * TOKEN_DECIMAL_MULTIPLIER;\r\n    uint constant MINIMAL_PURCHASE = 0.05 ether;\r\n\r\n    address constant TEAM_ADDRESS = 0xE4F0Ff4641f3c99de342b06c06414d94A585eFfb;\r\n    address constant BOUNTY_ADDRESS = 0x76d4136d6EE53DB4cc087F2E2990283d5317A5e9;\r\n    address constant PREICO_ADDRESS = 0x195610851A43E9685643A8F3b49F0F8a019204f1;\r\n    address constant COLD_WALLET = 0x80826b5b717aDd3E840343364EC9d971FBa3955C;\r\n\r\n    string constant TOKEN_NAME = \"MyWish Token\";\r\n    bytes32 constant TOKEN_SYMBOL = \"WISH\";\r\n}\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) balances;\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) returns (bool) {\r\n        require(_to != address(0));\r\n\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n        require(_to != address(0));\r\n\r\n        var _allowance = allowed[_from][msg.sender];\r\n\r\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n        // require (_value <= _allowance);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = _allowance.sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     */\r\n    function increaseApproval(address _spender, uint _addedValue) returns (bool success) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) returns (bool success) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        }\r\n        else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n    event Mint(address indexed to, uint256 amount);\r\n\r\n    event MintFinished();\r\n\r\n    bool public mintingFinished = false;\r\n\r\n\r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param _to The address that will receive the minted tokens.\r\n     * @param _amount The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Mint(_to, _amount);\r\n        Transfer(0x0, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to stop minting new tokens.\r\n     * @return True if the operation was successful.\r\n     */\r\n    function finishMinting() onlyOwner returns (bool) {\r\n        mintingFinished = true;\r\n        MintFinished();\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is StandardToken {\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 _value) public {\r\n        require(_value > 0);\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        Burn(burner, _value);\r\n    }\r\n}\r\n\r\ncontract MyWishToken is usingMyWishConsts, MintableToken, BurnableToken {\r\n    /**\r\n     * @dev Pause token transfer. After successfully finished crowdsale it becomes true.\r\n     */\r\n    bool public paused = true;\r\n    /**\r\n     * @dev Accounts who can transfer token even if paused. Works only during crowdsale.\r\n     */\r\n    mapping(address => bool) excluded;\r\n\r\n    function name() constant public returns (string _name) {\r\n        return TOKEN_NAME;\r\n    }\r\n\r\n    function symbol() constant public returns (bytes32 _symbol) {\r\n        return TOKEN_SYMBOL;\r\n    }\r\n\r\n    function decimals() constant public returns (uint8 _decimals) {\r\n        return TOKEN_DECIMALS_UINT8;\r\n    }\r\n\r\n    function crowdsaleFinished() onlyOwner {\r\n        paused = false;\r\n        finishMinting();\r\n    }\r\n\r\n    function addExcluded(address _toExclude) onlyOwner {\r\n        excluded[_toExclude] = true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n        require(!paused || excluded[_from]);\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool) {\r\n        require(!paused || excluded[msg.sender]);\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Burn tokens from the specified address.\r\n     * @param _from     address The address which you want to burn tokens from.\r\n     * @param _value    uint    The amount of tokens to be burned.\r\n     */\r\n    function burnFrom(address _from, uint256 _value) returns (bool) {\r\n        require(_value > 0);\r\n        var allowance = allowed[_from][msg.sender];\r\n        balances[_from] = balances[_from].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        allowed[_from][msg.sender] = allowance.sub(_value);\r\n        Burn(_from, _value);\r\n        return true;\r\n    }\r\n}\r\ncontract MyWishRateProviderI {\r\n    /**\r\n     * @dev Calculate actual rate using the specified parameters.\r\n     * @param buyer     Investor (buyer) address.\r\n     * @param totalSold Amount of sold tokens.\r\n     * @param amountWei Amount of wei to purchase.\r\n     * @return ETH to Token rate.\r\n     */\r\n    function getRate(address buyer, uint totalSold, uint amountWei) public constant returns (uint);\r\n\r\n    /**\r\n     * @dev rate scale (or divider), to support not integer rates.\r\n     * @return Rate divider.\r\n     */\r\n    function getRateScale() public constant returns (uint);\r\n\r\n    /**\r\n     * @return Absolute base rate.\r\n     */\r\n    function getBaseRate() public constant returns (uint);\r\n}\r\n\r\ncontract MyWishRateProvider is usingMyWishConsts, MyWishRateProviderI, Ownable {\r\n    // rate calculate accuracy\r\n    uint constant RATE_SCALE = 10000;\r\n    uint constant STEP_30 = 3200000 * TOKEN_DECIMAL_MULTIPLIER;\r\n    uint constant STEP_20 = 6400000 * TOKEN_DECIMAL_MULTIPLIER;\r\n    uint constant STEP_10 = 9600000 * TOKEN_DECIMAL_MULTIPLIER;\r\n    uint constant RATE_30 = 1950 * RATE_SCALE;\r\n    uint constant RATE_20 = 1800 * RATE_SCALE;\r\n    uint constant RATE_10 = 1650 * RATE_SCALE;\r\n    uint constant BASE_RATE = 1500 * RATE_SCALE;\r\n\r\n    struct ExclusiveRate {\r\n        // be careful, accuracies this about 15 minutes\r\n        uint32 workUntil;\r\n        // exclusive rate or 0\r\n        uint rate;\r\n        // rate bonus percent, which will be divided by 1000 or 0\r\n        uint16 bonusPercent1000;\r\n        // flag to check, that record exists\r\n        bool exists;\r\n    }\r\n\r\n    mapping(address => ExclusiveRate) exclusiveRate;\r\n\r\n    function getRateScale() public constant returns (uint) {\r\n        return RATE_SCALE;\r\n    }\r\n\r\n    function getBaseRate() public constant returns (uint) {\r\n        return BASE_RATE;\r\n    }\r\n\r\n    function getRate(address buyer, uint totalSold, uint amountWei) public constant returns (uint) {\r\n        uint rate;\r\n        // apply sale\r\n        if (totalSold < STEP_30) {\r\n            rate = RATE_30;\r\n        }\r\n        else if (totalSold < STEP_20) {\r\n            rate = RATE_20;\r\n        }\r\n        else if (totalSold < STEP_10) {\r\n            rate = RATE_10;\r\n        }\r\n        else {\r\n            rate = BASE_RATE;\r\n        }\r\n\r\n        // apply bonus for amount\r\n        if (amountWei >= 1000 ether) {\r\n            rate += rate * 13 / 100;\r\n        }\r\n        else if (amountWei >= 500 ether) {\r\n            rate += rate * 10 / 100;\r\n        }\r\n        else if (amountWei >= 100 ether) {\r\n            rate += rate * 7 / 100;\r\n        }\r\n        else if (amountWei >= 50 ether) {\r\n            rate += rate * 5 / 100;\r\n        }\r\n        else if (amountWei >= 30 ether) {\r\n            rate += rate * 4 / 100;\r\n        }\r\n        else if (amountWei >= 10 ether) {\r\n            rate += rate * 25 / 1000;\r\n        }\r\n\r\n        ExclusiveRate memory eRate = exclusiveRate[buyer];\r\n        if (eRate.exists && eRate.workUntil >= now) {\r\n            if (eRate.rate != 0) {\r\n                rate = eRate.rate;\r\n            }\r\n            rate += rate * eRate.bonusPercent1000 / 1000;\r\n        }\r\n        return rate;\r\n    }\r\n\r\n    function setExclusiveRate(address _investor, uint _rate, uint16 _bonusPercent1000, uint32 _workUntil) onlyOwner {\r\n        exclusiveRate[_investor] = ExclusiveRate(_workUntil, _rate, _bonusPercent1000, true);\r\n    }\r\n\r\n    function removeExclusiveRate(address _investor) onlyOwner {\r\n        delete exclusiveRate[_investor];\r\n    }\r\n}\r\n/**\r\n * @title Crowdsale \r\n * @dev Crowdsale is a base contract for managing a token crowdsale.\r\n *\r\n * Crowdsales have a start and end timestamps, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet \r\n * as they arrive.\r\n */\r\ncontract Crowdsale {\r\n    using SafeMath for uint;\r\n\r\n    // The token being sold\r\n    MintableToken public token;\r\n\r\n    // start and end timestamps where investments are allowed (both inclusive)\r\n    uint32 internal startTime;\r\n    uint32 internal endTime;\r\n\r\n    // address where funds are collected\r\n    address public wallet;\r\n\r\n    // amount of raised money in wei\r\n    uint public weiRaised;\r\n\r\n    /**\r\n     * @dev Amount of already sold tokens.\r\n     */\r\n    uint public soldTokens;\r\n\r\n    /**\r\n     * @dev Maximum amount of tokens to mint.\r\n     */\r\n    uint internal hardCap;\r\n\r\n    /**\r\n     * event for token purchase logging\r\n     * @param purchaser who paid for the tokens\r\n     * @param beneficiary who got the tokens\r\n     * @param value weis paid for purchase\r\n     * @param amount amount of tokens purchased\r\n     */\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint value, uint amount);\r\n\r\n    function Crowdsale(uint _startTime, uint _endTime, uint _hardCap, address _wallet) {\r\n        require(_endTime >= _startTime);\r\n        require(_wallet != 0x0);\r\n        require(_hardCap > 0);\r\n\r\n        token = createTokenContract();\r\n        startTime = uint32(_startTime);\r\n        endTime = uint32(_endTime);\r\n        hardCap = _hardCap;\r\n        wallet = _wallet;\r\n    }\r\n\r\n    // creates the token to be sold.\r\n    // override this method to have crowdsale of a specific mintable token.\r\n    function createTokenContract() internal returns (MintableToken) {\r\n        return new MintableToken();\r\n    }\r\n\r\n    /**\r\n     * @dev this method might be overridden for implementing any sale logic.\r\n     * @return Actual rate.\r\n     */\r\n    function getRate(uint amount) internal constant returns (uint);\r\n\r\n    function getBaseRate() internal constant returns (uint);\r\n\r\n    /**\r\n     * @dev rate scale (or divider), to support not integer rates.\r\n     * @return Rate divider.\r\n     */\r\n    function getRateScale() internal constant returns (uint) {\r\n        return 1;\r\n    }\r\n\r\n    // fallback function can be used to buy tokens\r\n    function() payable {\r\n        buyTokens(msg.sender, msg.value);\r\n    }\r\n\r\n    // low level token purchase function\r\n    function buyTokens(address beneficiary, uint amountWei) internal {\r\n        require(beneficiary != 0x0);\r\n\r\n        // total minted tokens\r\n        uint totalSupply = token.totalSupply();\r\n\r\n        // actual token minting rate (with considering bonuses and discounts)\r\n        uint actualRate = getRate(amountWei);\r\n        uint rateScale = getRateScale();\r\n\r\n        require(validPurchase(amountWei, actualRate, totalSupply));\r\n\r\n        // calculate token amount to be created\r\n        uint tokens = amountWei.mul(actualRate).div(rateScale);\r\n\r\n        // update state\r\n        weiRaised = weiRaised.add(amountWei);\r\n        soldTokens = soldTokens.add(tokens);\r\n\r\n        token.mint(beneficiary, tokens);\r\n        TokenPurchase(msg.sender, beneficiary, amountWei, tokens);\r\n\r\n        forwardFunds(amountWei);\r\n    }\r\n\r\n    // send ether to the fund collection wallet\r\n    // override to create custom fund forwarding mechanisms\r\n    function forwardFunds(uint amountWei) internal {\r\n        wallet.transfer(amountWei);\r\n    }\r\n\r\n    /**\r\n     * @dev Check if the specified purchase is valid.\r\n     * @return true if the transaction can buy tokens\r\n     */\r\n    function validPurchase(uint _amountWei, uint _actualRate, uint _totalSupply) internal constant returns (bool) {\r\n        bool withinPeriod = now >= startTime && now <= endTime;\r\n        bool nonZeroPurchase = _amountWei != 0;\r\n        bool hardCapNotReached = _totalSupply <= hardCap;\r\n\r\n        return withinPeriod && nonZeroPurchase && hardCapNotReached;\r\n    }\r\n\r\n    /**\r\n     * @dev Because of discount hasEnded might be true, but validPurchase returns false.\r\n     * @return true if crowdsale event has ended\r\n     */\r\n    function hasEnded() public constant returns (bool) {\r\n        return now > endTime || token.totalSupply() > hardCap;\r\n    }\r\n\r\n    /**\r\n     * @return true if crowdsale event has started\r\n     */\r\n    function hasStarted() public constant returns (bool) {\r\n        return now >= startTime;\r\n    }\r\n}\r\n\r\ncontract FinalizableCrowdsale is Crowdsale, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    bool public isFinalized = false;\r\n\r\n    event Finalized();\r\n\r\n    function FinalizableCrowdsale(uint _startTime, uint _endTime, uint _hardCap, address _wallet)\r\n            Crowdsale(_startTime, _endTime, _hardCap, _wallet) {\r\n    }\r\n\r\n    /**\r\n     * @dev Must be called after crowdsale ends, to do some extra finalization\r\n     * work. Calls the contract's finalization function.\r\n     */\r\n    function finalize() onlyOwner notFinalized {\r\n        require(hasEnded());\r\n\r\n        finalization();\r\n        Finalized();\r\n\r\n        isFinalized = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Can be overriden to add finalization logic. The overriding function\r\n     * should call super.finalization() to ensure the chain of finalization is\r\n     * executed entirely.\r\n     */\r\n    function finalization() internal {\r\n    }\r\n\r\n    modifier notFinalized() {\r\n        require(!isFinalized);\r\n        _;\r\n    }\r\n}\r\n\r\ncontract MyWishCrowdsale is usingMyWishConsts, FinalizableCrowdsale {\r\n    MyWishRateProviderI public rateProvider;\r\n\r\n    function MyWishCrowdsale(\r\n            uint _startTime,\r\n            uint _endTime,\r\n            uint _hardCapTokens\r\n    )\r\n            FinalizableCrowdsale(_startTime, _endTime, _hardCapTokens * TOKEN_DECIMAL_MULTIPLIER, COLD_WALLET) {\r\n\r\n        token.mint(TEAM_ADDRESS, TEAM_TOKENS);\r\n        token.mint(BOUNTY_ADDRESS, BOUNTY_TOKENS);\r\n        token.mint(PREICO_ADDRESS, PREICO_TOKENS);\r\n\r\n        MyWishToken(token).addExcluded(TEAM_ADDRESS);\r\n        MyWishToken(token).addExcluded(BOUNTY_ADDRESS);\r\n        MyWishToken(token).addExcluded(PREICO_ADDRESS);\r\n\r\n        MyWishRateProvider provider = new MyWishRateProvider();\r\n        provider.transferOwnership(owner);\r\n        rateProvider = provider;\r\n    }\r\n\r\n    /**\r\n     * @dev override token creation to integrate with MyWill token.\r\n     */\r\n    function createTokenContract() internal returns (MintableToken) {\r\n        return new MyWishToken();\r\n    }\r\n\r\n    /**\r\n     * @dev override getRate to integrate with rate provider.\r\n     */\r\n    function getRate(uint _value) internal constant returns (uint) {\r\n        return rateProvider.getRate(msg.sender, soldTokens, _value);\r\n    }\r\n\r\n    function getBaseRate() internal constant returns (uint) {\r\n        return rateProvider.getRate(msg.sender, soldTokens, MINIMAL_PURCHASE);\r\n    }\r\n\r\n    /**\r\n     * @dev override getRateScale to integrate with rate provider.\r\n     */\r\n    function getRateScale() internal constant returns (uint) {\r\n        return rateProvider.getRateScale();\r\n    }\r\n\r\n    /**\r\n     * @dev Admin can set new rate provider.\r\n     * @param _rateProviderAddress New rate provider.\r\n     */\r\n    function setRateProvider(address _rateProviderAddress) onlyOwner {\r\n        require(_rateProviderAddress != 0);\r\n        rateProvider = MyWishRateProviderI(_rateProviderAddress);\r\n    }\r\n\r\n    /**\r\n     * @dev Admin can move end time.\r\n     * @param _endTime New end time.\r\n     */\r\n    function setEndTime(uint _endTime) onlyOwner notFinalized {\r\n        require(_endTime > startTime);\r\n        endTime = uint32(_endTime);\r\n    }\r\n\r\n    function setHardCap(uint _hardCapTokens) onlyOwner notFinalized {\r\n        require(_hardCapTokens * TOKEN_DECIMAL_MULTIPLIER > hardCap);\r\n        hardCap = _hardCapTokens * TOKEN_DECIMAL_MULTIPLIER;\r\n    }\r\n\r\n    function setStartTime(uint _startTime) onlyOwner notFinalized {\r\n        require(_startTime < endTime);\r\n        startTime = uint32(_startTime);\r\n    }\r\n\r\n    function addExcluded(address _address) onlyOwner notFinalized {\r\n        MyWishToken(token).addExcluded(_address);\r\n    }\r\n\r\n    function validPurchase(uint _amountWei, uint _actualRate, uint _totalSupply) internal constant returns (bool) {\r\n        if (_amountWei < MINIMAL_PURCHASE) {\r\n            return false;\r\n        }\r\n        return super.validPurchase(_amountWei, _actualRate, _totalSupply);\r\n    }\r\n\r\n    function finalization() internal {\r\n        super.finalization();\r\n        token.finishMinting();\r\n        MyWishToken(token).crowdsaleFinished();\r\n        token.transferOwnership(owner);\r\n    }\r\n}", "OptimizationUsed": "1", "ContractName": "MyWishToken", "ByteCode": "0x60606040526004361061011c5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b811461012157806306fdde0314610148578063095ea7b3146101d257806318160ddd146101f457806323b872dd14610219578063313ce5671461024157806340c10f191461026a57806342966c681461028c5780635c975abb146102a457806366188463146102b757806370a08231146102d957806379cc6790146102f85780637d64bcb41461031a5780638da5cb5b1461032d57806395d89b411461035c578063a9059cbb1461036f578063a932157314610391578063d73dd623146103b0578063dd62ed3e146103d2578063ece84fd5146103f7578063f2fde38b1461040a575b600080fd5b341561012c57600080fd5b610134610429565b604051901515815260200160405180910390f35b341561015357600080fd5b61015b61044a565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561019757808201518382015260200161017f565b50505050905090810190601f1680156101c45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101dd57600080fd5b610134600160a060020a036004351660243561048b565b34156101ff57600080fd5b610207610531565b60405190815260200160405180910390f35b341561022457600080fd5b610134600160a060020a0360043581169060243516604435610537565b341561024c57600080fd5b61025461059b565b60405160ff909116815260200160405180910390f35b341561027557600080fd5b610134600160a060020a03600435166024356105a0565b341561029757600080fd5b6102a26004356106be565b005b34156102af57600080fd5b610134610762565b34156102c257600080fd5b610134600160a060020a0360043516602435610784565b34156102e457600080fd5b610207600160a060020a036004351661087e565b341561030357600080fd5b610134600160a060020a0360043516602435610899565b341561032557600080fd5b610134610997565b341561033857600080fd5b610340610a1c565b604051600160a060020a03909116815260200160405180910390f35b341561036757600080fd5b610207610a2b565b341561037a57600080fd5b610134600160a060020a0360043516602435610a4f565b341561039c57600080fd5b6102a2600160a060020a0360043516610ab1565b34156103bb57600080fd5b610134600160a060020a0360043516602435610af0565b34156103dd57600080fd5b610207600160a060020a0360043581169060243516610b94565b341561040257600080fd5b6102a2610bbf565b341561041557600080fd5b6102a2600160a060020a0360043516610c04565b60035474010000000000000000000000000000000000000000900460ff1681565b610452610ec0565b60408051908101604052600c81527f4d795769736820546f6b656e00000000000000000000000000000000000000006020820152905090565b60008115806104bd5750600160a060020a03338116600090815260026020908152604080832093871683529290522054155b15156104c857600080fd5b600160a060020a03338116600081815260026020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60005481565b6003546000907501000000000000000000000000000000000000000000900460ff16158061057d5750600160a060020a03841660009081526004602052604090205460ff165b151561058857600080fd5b610593848484610c9f565b949350505050565b601290565b60035460009033600160a060020a039081169116146105be57600080fd5b60035474010000000000000000000000000000000000000000900460ff16156105e657600080fd5b6000546105f9908363ffffffff610dc916565b6000908155600160a060020a038416815260016020526040902054610624908363ffffffff610dc916565b600160a060020a0384166000818152600160205260409081902092909255907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859084905190815260200160405180910390a282600160a060020a031660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a350600192915050565b60008082116106cc57600080fd5b5033600160a060020a0381166000908152600160205260409020546106f19083610dd8565b600160a060020a0382166000908152600160205260408120919091555461071e908363ffffffff610dd816565b600055600160a060020a0381167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58360405190815260200160405180910390a25050565b6003547501000000000000000000000000000000000000000000900460ff1681565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054808311156107e157600160a060020a033381166000908152600260209081526040808320938816835292905290812055610818565b6107f1818463ffffffff610dd816565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b600160a060020a031660009081526001602052604090205490565b6000808083116108a857600080fd5b50600160a060020a038084166000818152600260209081526040808320339095168352938152838220549282526001905291909120546108ee908463ffffffff610dd816565b600160a060020a0385166000908152600160205260408120919091555461091b908463ffffffff610dd816565b60005561092e818463ffffffff610dd816565b600160a060020a038086166000818152600260209081526040808320339095168352939052829020929092557fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59085905190815260200160405180910390a25060019392505050565b60035460009033600160a060020a039081169116146109b557600080fd5b6003805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790557fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a150600190565b600354600160a060020a031681565b7f574953480000000000000000000000000000000000000000000000000000000090565b6003546000907501000000000000000000000000000000000000000000900460ff161580610a955750600160a060020a03331660009081526004602052604090205460ff165b1515610aa057600080fd5b610aaa8383610dea565b9392505050565b60035433600160a060020a03908116911614610acc57600080fd5b600160a060020a03166000908152600460205260409020805460ff19166001179055565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054610b28908363ffffffff610dc916565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a03908116911614610bda57600080fd5b6003805475ff00000000000000000000000000000000000000000019169055610c01610997565b50565b60035433600160a060020a03908116911614610c1f57600080fd5b600160a060020a0381161515610c3457600080fd5b600354600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600080600160a060020a0384161515610cb757600080fd5b50600160a060020a03808516600081815260026020908152604080832033909516835293815283822054928252600190529190912054610cfd908463ffffffff610dd816565b600160a060020a038087166000908152600160205260408082209390935590861681522054610d32908463ffffffff610dc916565b600160a060020a038516600090815260016020526040902055610d5b818463ffffffff610dd816565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3506001949350505050565b600082820183811015610aaa57fe5b600082821115610de457fe5b50900390565b6000600160a060020a0383161515610e0157600080fd5b600160a060020a033316600090815260016020526040902054610e2a908363ffffffff610dd816565b600160a060020a033381166000908152600160205260408082209390935590851681522054610e5f908363ffffffff610dc916565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b602060405190810160405260008152905600a165627a7a72305820b0fcdaa47ec8f5b451fdeace4fbe4cfacf66881a5032e6524fd05619de3d504f0029"}