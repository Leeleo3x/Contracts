{"Runs": "200", "SwarmSource": "bzzr://87070590124402b774273f0f3df8450bcf26f6b6fbca17cc2fa63f9b48f6d05a", "ABI": "[{\"constant\":false,\"inputs\":[],\"name\":\"claimPartnerTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"frozen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_entries\",\"type\":\"address[]\"}],\"name\":\"whitelistAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"freeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unfreeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_entries\",\"type\":\"address[]\"}],\"name\":\"blacklistAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"conversionRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_conversionRate\",\"type\":\"uint256\"}],\"name\":\"setConversionRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fabricTokenSafe\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_ethers\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newTotalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_conversionRate\",\"type\":\"uint256\"}],\"name\":\"FundsReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"BeneficiaryChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_conversionRate\",\"type\":\"uint256\"}],\"name\":\"ConversionRateChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_ethers\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.18+commit.9cf6e910", "ConstructorArguments": "0000000000000000000000000d15719e1d47bd37a39dcf30e3725777cf639241", "SourceCode": "pragma solidity ^0.4.18;\r\n\r\n// File: contracts\\configs\\FabricTokenConfig.sol\r\n\r\n/**\r\n * @title FabricTokenConfig\r\n *\r\n * @dev The static configuration for the Fabric Token.\r\n */\r\ncontract FabricTokenConfig {\r\n    // The name of the token.\r\n    string constant NAME = \"Fabric Token\";\r\n\r\n    // The symbol of the token.\r\n    string constant SYMBOL = \"FT\";\r\n\r\n    // The number of decimals for the token.\r\n    uint8 constant DECIMALS = 18;  // Same as ethers.\r\n\r\n    // Decimal factor for multiplication purposes.\r\n    uint constant DECIMALS_FACTOR = 10 ** uint(DECIMALS);\r\n}\r\n\r\n// File: contracts\\interfaces\\ERC20TokenInterface.sol\r\n\r\n/**\r\n * @dev The standard ERC20 Token interface.\r\n */\r\ncontract ERC20TokenInterface {\r\n    uint public totalSupply;  /* shorthand for public function and a property */\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n    function balanceOf(address _owner) public constant returns (uint balance);\r\n    function transfer(address _to, uint _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\r\n    function approve(address _spender, uint _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public constant returns (uint remaining);\r\n}\r\n\r\n// File: contracts\\libraries\\SafeMath.sol\r\n\r\n/**\r\n * @dev Library that helps prevent integer overflows and underflows,\r\n * inspired by https://github.com/OpenZeppelin/zeppelin-solidity\r\n */\r\nlibrary SafeMath {\r\n    function plus(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        assert(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    function minus(uint a, uint b) internal pure returns (uint) {\r\n        assert(b <= a);\r\n\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        \r\n        return c;\r\n    }\r\n\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a / b;\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n// File: contracts\\traits\\ERC20Token.sol\r\n\r\n/**\r\n * @title ERC20Token\r\n *\r\n * @dev Implements the operations declared in the `ERC20TokenInterface`.\r\n */\r\ncontract ERC20Token is ERC20TokenInterface {\r\n    using SafeMath for uint;\r\n\r\n    // Token account balances.\r\n    mapping (address => uint) balances;\r\n\r\n    // Delegated number of tokens to transfer.\r\n    mapping (address => mapping (address => uint)) allowed;\r\n\r\n    /**\r\n     * @dev Checks the balance of a certain address.\r\n     *\r\n     * @param _account The address which's balance will be checked.\r\n     *\r\n     * @return Returns the balance of the `_account` address.\r\n     */\r\n    function balanceOf(address _account) public constant returns (uint balance) {\r\n        return balances[_account];\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers tokens from one address to another.\r\n     *\r\n     * @param _to The target address to which the `_value` number of tokens will be sent.\r\n     * @param _value The number of tokens to send.\r\n     *\r\n     * @return Whether the transfer was successful or not.\r\n     */\r\n    function transfer(address _to, uint _value) public returns (bool success) {\r\n        if (balances[msg.sender] < _value || _value == 0) {\r\n\r\n            return false;\r\n        }\r\n\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] = balances[_to].plus(_value);\r\n\r\n        Transfer(msg.sender, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Send `_value` tokens to `_to` from `_from` if `_from` has approved the process.\r\n     *\r\n     * @param _from The address of the sender.\r\n     * @param _to The address of the recipient.\r\n     * @param _value The number of tokens to be transferred.\r\n     *\r\n     * @return Whether the transfer was successful or not.\r\n     */\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\r\n        if (balances[_from] < _value || allowed[_from][msg.sender] < _value || _value == 0) {\r\n            return false;\r\n        }\r\n\r\n        balances[_to] = balances[_to].plus(_value);\r\n        balances[_from] -= _value;\r\n        allowed[_from][msg.sender] -= _value;\r\n\r\n        Transfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows another contract to spend some tokens on your behalf.\r\n     *\r\n     * @param _spender The address of the account which will be approved for transfer of tokens.\r\n     * @param _value The number of tokens to be approved for transfer.\r\n     *\r\n     * @return Whether the approval was successful or not.\r\n     */\r\n    function approve(address _spender, uint _value) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n\r\n        Approval(msg.sender, _spender, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Shows the number of tokens approved by `_owner` that are allowed to be transferred by `_spender`.\r\n     *\r\n     * @param _owner The account which allowed the transfer.\r\n     * @param _spender The account which will spend the tokens.\r\n     *\r\n     * @return The number of tokens to be transferred.\r\n     */\r\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\r\n        return allowed[_owner][_spender];\r\n    }    \r\n}\r\n\r\n// File: contracts\\traits\\HasOwner.sol\r\n\r\n/**\r\n * @title HasOwner\r\n *\r\n * @dev Allows for exclusive access to certain functionality.\r\n */\r\ncontract HasOwner {\r\n    // Current owner.\r\n    address public owner;\r\n\r\n    // Conditionally the new owner.\r\n    address public newOwner;\r\n\r\n    /**\r\n     * @dev The constructor.\r\n     *\r\n     * @param _owner The address of the owner.\r\n     */\r\n    function HasOwner(address _owner) internal {\r\n        owner = _owner;\r\n    }\r\n\r\n    /** \r\n     * @dev Access control modifier that allows only the current owner to call the function.\r\n     */\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev The event is fired when the current owner is changed.\r\n     *\r\n     * @param _oldOwner The address of the previous owner.\r\n     * @param _newOwner The address of the new owner.\r\n     */\r\n    event OwnershipTransfer(address indexed _oldOwner, address indexed _newOwner);\r\n\r\n    /**\r\n     * @dev Transfering the ownership is a two-step process, as we prepare\r\n     * for the transfer by setting `newOwner` and requiring `newOwner` to accept\r\n     * the transfer. This prevents accidental lock-out if something goes wrong\r\n     * when passing the `newOwner` address.\r\n     *\r\n     * @param _newOwner The address of the proposed new owner.\r\n     */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n \r\n    /**\r\n     * @dev The `newOwner` finishes the ownership transfer process by accepting the\r\n     * ownership.\r\n     */\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n\r\n        OwnershipTransfer(owner, newOwner);\r\n\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts\\traits\\Freezable.sol\r\n\r\n/**\r\n * @title Freezable\r\n * @dev This trait allows to freeze the transactions in a Token\r\n */\r\ncontract Freezable is HasOwner {\r\n  bool public frozen = false;\r\n\r\n  /**\r\n   * @dev Modifier makes methods callable only when the contract is not frozen.\r\n   */\r\n  modifier requireNotFrozen() {\r\n    require(!frozen);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the owner to \"freeze\" the contract.\r\n   */\r\n  function freeze() onlyOwner public {\r\n    frozen = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the owner to \"unfreeze\" the contract.\r\n   */\r\n  function unfreeze() onlyOwner public {\r\n    frozen = false;\r\n  }\r\n}\r\n\r\n// File: contracts\\traits\\FreezableERC20Token.sol\r\n\r\n/**\r\n * @title FreezableERC20Token\r\n *\r\n * @dev Extends ERC20Token and adds ability to freeze all transfers of tokens.\r\n */\r\ncontract FreezableERC20Token is ERC20Token, Freezable {\r\n    /**\r\n     * @dev Overrides the original ERC20Token implementation by adding whenNotFrozen modifier.\r\n     *\r\n     * @param _to The target address to which the `_value` number of tokens will be sent.\r\n     * @param _value The number of tokens to send.\r\n     *\r\n     * @return Whether the transfer was successful or not.\r\n     */\r\n    function transfer(address _to, uint _value) public requireNotFrozen returns (bool success) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Send `_value` tokens to `_to` from `_from` if `_from` has approved the process.\r\n     *\r\n     * @param _from The address of the sender.\r\n     * @param _to The address of the recipient.\r\n     * @param _value The number of tokens to be transferred.\r\n     *\r\n     * @return Whether the transfer was successful or not.\r\n     */\r\n    function transferFrom(address _from, address _to, uint _value) public requireNotFrozen returns (bool success) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows another contract to spend some tokens on your behalf.\r\n     *\r\n     * @param _spender The address of the account which will be approved for transfer of tokens.\r\n     * @param _value The number of tokens to be approved for transfer.\r\n     *\r\n     * @return Whether the approval was successful or not.\r\n     */\r\n    function approve(address _spender, uint _value) public requireNotFrozen returns (bool success) {\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts\\FabricToken.sol\r\n\r\n/**\r\n * @title Fabric Token\r\n *\r\n * @dev A standard token implementation of the ERC20 token standard with added\r\n *      HasOwner trait and initialized using the configuration constants.\r\n */\r\ncontract FabricToken is FabricTokenConfig, HasOwner, FreezableERC20Token {\r\n    // The name of the token.\r\n    string public name;\r\n\r\n    // The symbol for the token.\r\n    string public symbol;\r\n\r\n    // The decimals of the token.\r\n    uint8 public decimals;\r\n\r\n    /**\r\n     * @dev The constructor. Initially sets `totalSupply` and the balance of the\r\n     *      `owner` address according to the initialization parameter.\r\n     */\r\n    function FabricToken(uint _totalSupply) public\r\n        HasOwner(msg.sender)\r\n    {\r\n        name = NAME;\r\n        symbol = SYMBOL;\r\n        decimals = DECIMALS;\r\n        totalSupply = _totalSupply;\r\n        balances[owner] = _totalSupply;\r\n    }\r\n}\r\n\r\n// File: contracts\\configs\\FabricTokenFundraiserConfig.sol\r\n\r\n/**\r\n * @title FabricTokenFundraiserConfig\r\n *\r\n * @dev The static configuration for the Fabric Token fundraiser.\r\n */\r\ncontract FabricTokenFundraiserConfig is FabricTokenConfig {\r\n    // The number of FT per 1 ETH.\r\n    uint constant CONVERSION_RATE = 9000;\r\n\r\n    // The public sale hard cap of the fundraiser.\r\n    uint constant TOKENS_HARD_CAP = 71250 * (10**3) * DECIMALS_FACTOR;\r\n\r\n    // The start date of the fundraiser: Thursday, 2018-02-15 10:00:00 UTC.\r\n    uint constant START_DATE = 1518688800;\r\n\r\n    // The end date of the fundraiser: Sunday, 2018-04-01 10:00:00 UTC (45 days after `START_DATE`).\r\n    uint constant END_DATE = 1522576800;\r\n    \r\n    // Total number of tokens locked for the FT core team.\r\n    uint constant TOKENS_LOCKED_CORE_TEAM = 12 * (10**6) * DECIMALS_FACTOR;\r\n\r\n    // Total number of tokens locked for FT advisors.\r\n    uint constant TOKENS_LOCKED_ADVISORS = 7 * (10**6) * DECIMALS_FACTOR;\r\n\r\n    // The release date for tokens locked for the FT core team.\r\n    uint constant TOKENS_LOCKED_CORE_TEAM_RELEASE_DATE = START_DATE + 1 years;\r\n\r\n    // The release date for tokens locked for FT advisors.\r\n    uint constant TOKENS_LOCKED_ADVISORS_RELEASE_DATE = START_DATE + 180 days;\r\n\r\n    // Total number of tokens locked for bounty program.\r\n    uint constant TOKENS_BOUNTY_PROGRAM = 1 * (10**6) * DECIMALS_FACTOR;\r\n\r\n    // Maximum gas price limit\r\n    uint constant MAX_GAS_PRICE = 50000000000 wei; // 50 gwei/shanon\r\n\r\n    // Minimum individual contribution\r\n    uint constant MIN_CONTRIBUTION =  0.1 ether;\r\n\r\n    // Individual limit in ether\r\n    uint constant INDIVIDUAL_ETHER_LIMIT =  9 ether;\r\n}\r\n\r\n// File: contracts\\traits\\TokenSafe.sol\r\n\r\n/**\r\n * @title TokenSafe\r\n *\r\n * @dev A multi-bundle token safe contract that contains locked tokens released after a date for the specific bundle type.\r\n */\r\ncontract TokenSafe {\r\n    using SafeMath for uint;\r\n\r\n    struct AccountsBundle {\r\n        // The total number of tokens locked.\r\n        uint lockedTokens;\r\n        // The release date for the locked tokens\r\n        // Note: Unix timestamp fits uint32, however block.timestamp is uint\r\n        uint releaseDate;\r\n        // The balances for the FT locked token accounts.\r\n        mapping (address => uint) balances;\r\n    }\r\n\r\n    // The account bundles of locked tokens grouped by release date\r\n    mapping (uint8 => AccountsBundle) public bundles;\r\n\r\n    // The `ERC20TokenInterface` contract.\r\n    ERC20TokenInterface token;\r\n\r\n    /**\r\n     * @dev The constructor.\r\n     *\r\n     * @param _token The address of the Fabric Token (fundraiser) contract.\r\n     */\r\n    function TokenSafe(address _token) public {\r\n        token = ERC20TokenInterface(_token);\r\n    }\r\n\r\n    /**\r\n     * @dev The function initializes the bundle of accounts with a release date.\r\n     *\r\n     * @param _type Bundle type.\r\n     * @param _releaseDate Unix timestamp of the time after which the tokens can be released\r\n     */\r\n    function initBundle(uint8 _type, uint _releaseDate) internal {\r\n        bundles[_type].releaseDate = _releaseDate;\r\n    }\r\n\r\n    /**\r\n     * @dev Add new account with locked token balance to the specified bundle type.\r\n     *\r\n     * @param _type Bundle type.\r\n     * @param _account The address of the account to be added.\r\n     * @param _balance The number of tokens to be locked.\r\n     */\r\n    function addLockedAccount(uint8 _type, address _account, uint _balance) internal {\r\n        var bundle = bundles[_type];\r\n        bundle.balances[_account] = bundle.balances[_account].plus(_balance);\r\n        bundle.lockedTokens = bundle.lockedTokens.plus(_balance);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows an account to be released if it meets the time constraints.\r\n     *\r\n     * @param _type Bundle type.\r\n     * @param _account The address of the account to be released.\r\n     */\r\n    function releaseAccount(uint8 _type, address _account) internal {\r\n        var bundle = bundles[_type];\r\n        require(now >= bundle.releaseDate);\r\n        uint tokens = bundle.balances[_account];\r\n        require(tokens > 0);\r\n        bundle.balances[_account] = 0;\r\n        bundle.lockedTokens = bundle.lockedTokens.minus(tokens);\r\n        if (!token.transfer(_account, tokens)) {\r\n            revert();\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts\\FabricTokenSafe.sol\r\n\r\n/**\r\n * @title FabricTokenSafe\r\n *\r\n * @dev The Fabric Token safe containing all details about locked tokens.\r\n */\r\ncontract FabricTokenSafe is TokenSafe, FabricTokenFundraiserConfig {\r\n    // Bundle type constants\r\n    uint8 constant CORE_TEAM = 0;\r\n    uint8 constant ADVISORS = 1;\r\n\r\n    /**\r\n     * @dev The constructor.\r\n     *\r\n     * @param _token The address of the Fabric Token (fundraiser) contract.\r\n     */\r\n    function FabricTokenSafe(address _token) public\r\n        TokenSafe(_token)\r\n    {\r\n        token = ERC20TokenInterface(_token);\r\n\r\n        /// Core team.\r\n        initBundle(CORE_TEAM,\r\n            TOKENS_LOCKED_CORE_TEAM_RELEASE_DATE\r\n        );\r\n\r\n        // Accounts with tokens locked for the FT core team.\r\n        addLockedAccount(CORE_TEAM, 0xB494096548aA049C066289A083204E923cBf4413, 4 * (10**6) * DECIMALS_FACTOR);\r\n        addLockedAccount(CORE_TEAM, 0xE3506B01Bee377829ee3CffD8bae650e990c5d68, 4 * (10**6) * DECIMALS_FACTOR);\r\n        addLockedAccount(CORE_TEAM, 0x3d13219dc1B8913E019BeCf0772C2a54318e5718, 4 * (10**6) * DECIMALS_FACTOR);\r\n\r\n        // Verify that the tokens add up to the constant in the configuration.\r\n        assert(bundles[CORE_TEAM].lockedTokens == TOKENS_LOCKED_CORE_TEAM);\r\n\r\n        /// Advisors.\r\n        initBundle(ADVISORS,\r\n            TOKENS_LOCKED_ADVISORS_RELEASE_DATE\r\n        );\r\n\r\n        // Accounts with FT tokens locked for advisors.\r\n        addLockedAccount(ADVISORS, 0x4647Da07dAAb17464278B988CDE59A4b911EBe44, 2 * (10**6) * DECIMALS_FACTOR);\r\n        addLockedAccount(ADVISORS, 0x3eA2caac5A0A4a55f9e304AcD09b3CEe6cD4Bc39, 1 * (10**6) * DECIMALS_FACTOR);\r\n        addLockedAccount(ADVISORS, 0xd5f791EC3ED79f79a401b12f7625E1a972382437, 1 * (10**6) * DECIMALS_FACTOR);\r\n        addLockedAccount(ADVISORS, 0xcaeae3CD1a5d3E6E950424C994e14348ac3Ec5dA, 1 * (10**6) * DECIMALS_FACTOR);\r\n        addLockedAccount(ADVISORS, 0xb6EA6193058F3c8A4A413d176891d173D62E00bE, 1 * (10**6) * DECIMALS_FACTOR);\r\n        addLockedAccount(ADVISORS, 0x8b3E184Cf5C3bFDaB1C4D0F30713D30314FcfF7c, 1 * (10**6) * DECIMALS_FACTOR);\r\n\r\n        // Verify that the tokens add up to the constant in the configuration.\r\n        assert(bundles[ADVISORS].lockedTokens == TOKENS_LOCKED_ADVISORS);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the total locked tokens. This function is called by the fundraiser to determine number of tokens to create upon finalization.\r\n     *\r\n     * @return The current total number of locked Fabric Tokens.\r\n     */\r\n    function totalTokensLocked() public constant returns (uint) {\r\n        return bundles[CORE_TEAM].lockedTokens.plus(bundles[ADVISORS].lockedTokens);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows core team account FT tokens to be released.\r\n     */\r\n    function releaseCoreTeamAccount() public {\r\n        releaseAccount(CORE_TEAM, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows advisors account FT tokens to be released.\r\n     */\r\n    function releaseAdvisorsAccount() public {\r\n        releaseAccount(ADVISORS, msg.sender);\r\n    }\r\n}\r\n\r\n// File: contracts\\traits\\Whitelist.sol\r\n\r\ncontract Whitelist is HasOwner\r\n{\r\n    // Whitelist mapping\r\n    mapping(address => bool) public whitelist;\r\n\r\n    /**\r\n     * @dev The constructor.\r\n     */\r\n    function Whitelist(address _owner) public\r\n        HasOwner(_owner)\r\n    {\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Access control modifier that allows only whitelisted address to call the method.\r\n     */\r\n    modifier onlyWhitelisted {\r\n        require(whitelist[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that sets whitelist status in batch.\r\n     *\r\n     * @param _entries An array with the entries to be updated\r\n     * @param _status The new status to apply\r\n     */\r\n    function setWhitelistEntries(address[] _entries, bool _status) internal {\r\n        for (uint32 i = 0; i < _entries.length; ++i) {\r\n            whitelist[_entries[i]] = _status;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Public function that allows the owner to whitelist multiple entries\r\n     *\r\n     * @param _entries An array with the entries to be whitelisted\r\n     */\r\n    function whitelistAddresses(address[] _entries) public onlyOwner {\r\n        setWhitelistEntries(_entries, true);\r\n    }\r\n\r\n    /**\r\n     * @dev Public function that allows the owner to blacklist multiple entries\r\n     *\r\n     * @param _entries An array with the entries to be blacklist\r\n     */\r\n    function blacklistAddresses(address[] _entries) public onlyOwner {\r\n        setWhitelistEntries(_entries, false);\r\n    }\r\n}\r\n\r\n// File: contracts\\FabricTokenFundraiser.sol\r\n\r\n/**\r\n * @title FabricTokenFundraiser\r\n *\r\n * @dev The Fabric Token fundraiser contract.\r\n */\r\ncontract FabricTokenFundraiser is FabricToken, FabricTokenFundraiserConfig, Whitelist {\r\n    // Indicates whether the fundraiser has ended or not.\r\n    bool public finalized = false;\r\n\r\n    // The address of the account which will receive the funds gathered by the fundraiser.\r\n    address public beneficiary;\r\n\r\n    // The number of FT participants will receive per 1 ETH.\r\n    uint public conversionRate;\r\n\r\n    // Fundraiser start date.\r\n    uint public startDate;\r\n\r\n    // Fundraiser end date.\r\n    uint public endDate;\r\n\r\n    // Fundraiser tokens hard cap.\r\n    uint public hardCap;\r\n\r\n    // The `FabricTokenSafe` contract.\r\n    FabricTokenSafe public fabricTokenSafe;\r\n\r\n    // The minimum amount of ether allowed in the public sale\r\n    uint internal minimumContribution;\r\n\r\n    // The maximum amount of ether allowed per address\r\n    uint internal individualLimit;\r\n\r\n    // Number of tokens sold during the fundraiser.\r\n    uint private tokensSold;\r\n\r\n    // Indicates whether the tokens are claimed by the partners\r\n    bool private partnerTokensClaimed = false;\r\n\r\n    /**\r\n     * @dev The event fires every time a new buyer enters the fundraiser.\r\n     *\r\n     * @param _address The address of the buyer.\r\n     * @param _ethers The number of ethers sent.\r\n     * @param _tokens The number of tokens received by the buyer.\r\n     * @param _newTotalSupply The updated total number of tokens currently in circulation.\r\n     * @param _conversionRate The conversion rate at which the tokens were bought.\r\n     */\r\n    event FundsReceived(address indexed _address, uint _ethers, uint _tokens, uint _newTotalSupply, uint _conversionRate);\r\n\r\n    /**\r\n     * @dev The event fires when the beneficiary of the fundraiser is changed.\r\n     *\r\n     * @param _beneficiary The address of the new beneficiary.\r\n     */\r\n    event BeneficiaryChange(address _beneficiary);\r\n\r\n    /**\r\n     * @dev The event fires when the number of FT per 1 ETH is changed.\r\n     *\r\n     * @param _conversionRate The new number of FT per 1 ETH.\r\n     */\r\n    event ConversionRateChange(uint _conversionRate);\r\n\r\n    /**\r\n     * @dev The event fires when the fundraiser is successfully finalized.\r\n     *\r\n     * @param _beneficiary The address of the beneficiary.\r\n     * @param _ethers The number of ethers transfered to the beneficiary.\r\n     * @param _totalSupply The total number of tokens in circulation.\r\n     */\r\n    event Finalized(address _beneficiary, uint _ethers, uint _totalSupply);\r\n\r\n    /**\r\n     * @dev The constructor.\r\n     *\r\n     * @param _beneficiary The address which will receive the funds gathered by the fundraiser.\r\n     */\r\n    function FabricTokenFundraiser(address _beneficiary) public\r\n        FabricToken(0)\r\n        Whitelist(msg.sender)\r\n    {\r\n        require(_beneficiary != 0);\r\n\r\n        beneficiary = _beneficiary;\r\n        conversionRate = CONVERSION_RATE;\r\n        startDate = START_DATE;\r\n        endDate = END_DATE;\r\n        hardCap = TOKENS_HARD_CAP;\r\n        tokensSold = 0;\r\n        minimumContribution = MIN_CONTRIBUTION;\r\n        individualLimit = INDIVIDUAL_ETHER_LIMIT * CONVERSION_RATE;\r\n\r\n        fabricTokenSafe = new FabricTokenSafe(this);\r\n\r\n        // Freeze the transfers for the duration of the fundraiser.\r\n        freeze();\r\n    }\r\n\r\n    /**\r\n     * @dev Changes the beneficiary of the fundraiser.\r\n     *\r\n     * @param _beneficiary The address of the new beneficiary.\r\n     */\r\n    function setBeneficiary(address _beneficiary) public onlyOwner {\r\n        require(_beneficiary != 0);\r\n\r\n        beneficiary = _beneficiary;\r\n\r\n        BeneficiaryChange(_beneficiary);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets converstion rate of 1 ETH to FT. Can only be changed before the fundraiser starts.\r\n     *\r\n     * @param _conversionRate The new number of Fabric Tokens per 1 ETH.\r\n     */\r\n    function setConversionRate(uint _conversionRate) public onlyOwner {\r\n        require(now < startDate);\r\n        require(_conversionRate > 0);\r\n\r\n        conversionRate = _conversionRate;\r\n        individualLimit = INDIVIDUAL_ETHER_LIMIT * _conversionRate;\r\n\r\n        ConversionRateChange(_conversionRate);\r\n    }\r\n\r\n    /**\r\n     * @dev The default function which will fire every time someone sends ethers to this contract's address.\r\n     */\r\n    function() public payable {\r\n        buyTokens();\r\n    }\r\n\r\n    /**\r\n     * @dev Creates new tokens based on the number of ethers sent and the conversion rate.\r\n     */\r\n    function buyTokens() public payable onlyWhitelisted {\r\n        require(!finalized);\r\n        require(now >= startDate);\r\n        require(now <= endDate);\r\n        require(tx.gasprice <= MAX_GAS_PRICE);  // gas price limit\r\n        require(msg.value >= minimumContribution);  // required minimum contribution\r\n        require(tokensSold <= hardCap);\r\n\r\n        // Calculate the number of tokens the buyer will receive.\r\n        uint tokens = msg.value.mul(conversionRate);\r\n        balances[msg.sender] = balances[msg.sender].plus(tokens);\r\n\r\n        // Ensure that the individual contribution limit has not been reached\r\n        require(balances[msg.sender] <= individualLimit);\r\n\r\n        tokensSold = tokensSold.plus(tokens);\r\n        totalSupply = totalSupply.plus(tokens);\r\n\r\n        Transfer(0x0, msg.sender, tokens);\r\n\r\n        FundsReceived(\r\n            msg.sender,\r\n            msg.value, \r\n            tokens, \r\n            totalSupply, \r\n            conversionRate\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Distributes the tokens allocated for the strategic partners.\r\n     */\r\n    function claimPartnerTokens() public {\r\n        require(!partnerTokensClaimed);\r\n        require(now >= startDate);\r\n\r\n        partnerTokensClaimed = true;\r\n\r\n        address partner1 = 0xA6556B9BD0AAbf0d8824374A3C425d315b09b832;\r\n        balances[partner1] = balances[partner1].plus(125 * (10**4) * DECIMALS_FACTOR);\r\n\r\n        address partner2 = 0x783A1cBc37a8ef2F368908490b72BfE801DA1877;\r\n        balances[partner2] = balances[partner2].plus(750 * (10**4) * DECIMALS_FACTOR);\r\n\r\n        totalSupply = totalSupply.plus(875 * (10**4) * DECIMALS_FACTOR);\r\n    }\r\n\r\n    /**\r\n     * @dev Finalize the fundraiser if `endDate` has passed or if `hardCap` is reached.\r\n     */\r\n    function finalize() public onlyOwner {\r\n        require((totalSupply >= hardCap) || (now >= endDate));\r\n        require(!finalized);\r\n\r\n        Finalized(beneficiary, this.balance, totalSupply);\r\n\r\n        /// Send the total number of ETH gathered to the beneficiary.\r\n        beneficiary.transfer(this.balance);\r\n\r\n        /// Allocate locked tokens to the `FabricTokenSafe` contract.\r\n        uint totalTokensLocked = fabricTokenSafe.totalTokensLocked();\r\n        balances[address(fabricTokenSafe)] = balances[address(fabricTokenSafe)].plus(totalTokensLocked);\r\n        totalSupply = totalSupply.plus(totalTokensLocked);\r\n\r\n        // Transfer the funds for the bounty program.\r\n        balances[owner] = balances[owner].plus(TOKENS_BOUNTY_PROGRAM);\r\n        totalSupply = totalSupply.plus(TOKENS_BOUNTY_PROGRAM);\r\n\r\n        /// Finalize the fundraiser. Keep in mind that this cannot be undone.\r\n        finalized = true;\r\n\r\n        // Unfreeze transfers\r\n        unfreeze();\r\n    }\r\n}", "OptimizationUsed": "1", "ContractName": "FabricTokenFundraiser", "ByteCode": "0x60606040526004361061018a5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663049a2dd18114610194578063054f7d9c146101a757806306fdde03146101ce578063095ea7b3146102585780630b97bc861461027a57806318160ddd1461029f5780631c31f710146102b257806323b872dd146102d15780632bf04304146102f9578063313ce5671461034857806338af3eed146103715780634bb278f3146103a057806362a5af3b146103b35780636a28f000146103c657806370a08231146103d957806377a54eb8146103f857806379ba5097146104475780637ffdf53e1461045a5780638da5cb5b1461046d57806395d89b41146104805780639b19251a14610493578063a9059cbb146104b2578063b3f05b97146104d4578063c24a0f8b146104e7578063d0febe4c1461018a578063d2e80494146104fa578063d4ee1d9014610510578063dd62ed3e14610523578063f2fde38b14610548578063f4fa860314610567578063fb86a4041461057a575b61019261058d565b005b341561019f57600080fd5b61019261074a565b34156101b257600080fd5b6101ba610892565b604051901515815260200160405180910390f35b34156101d957600080fd5b6101e16108a2565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561021d578082015183820152602001610205565b50505050905090810190601f16801561024a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561026357600080fd5b6101ba600160a060020a0360043516602435610940565b341561028557600080fd5b61028d61096d565b60405190815260200160405180910390f35b34156102aa57600080fd5b61028d610973565b34156102bd57600080fd5b610192600160a060020a0360043516610979565b34156102dc57600080fd5b6101ba600160a060020a0360043581169060243516604435610a16565b341561030457600080fd5b6101926004602481358181019083013580602081810201604051908101604052809392919081815260200183836020028082843750949650610a4595505050505050565b341561035357600080fd5b61035b610a6e565b60405160ff909116815260200160405180910390f35b341561037c57600080fd5b610384610a77565b604051600160a060020a03909116815260200160405180910390f35b34156103ab57600080fd5b610192610a8b565b34156103be57600080fd5b610192610cf1565b34156103d157600080fd5b610192610d32565b34156103e457600080fd5b61028d600160a060020a0360043516610d6d565b341561040357600080fd5b6101926004602481358181019083013580602081810201604051908101604052809392919081815260200183836020028082843750949650610d8895505050505050565b341561045257600080fd5b610192610dae565b341561046557600080fd5b61028d610e39565b341561047857600080fd5b610384610e3f565b341561048b57600080fd5b6101e1610e4e565b341561049e57600080fd5b6101ba600160a060020a0360043516610eb9565b34156104bd57600080fd5b6101ba600160a060020a0360043516602435610ece565b34156104df57600080fd5b6101ba610ef2565b34156104f257600080fd5b61028d610efb565b341561050557600080fd5b610192600435610f01565b341561051b57600080fd5b610384610f80565b341561052e57600080fd5b61028d600160a060020a0360043581169060243516610f8f565b341561055357600080fd5b610192600160a060020a0360043516610fba565b341561057257600080fd5b610384611004565b341561058557600080fd5b61028d611013565b600160a060020a03331660009081526008602052604081205460ff1615156105b457600080fd5b60095460ff16156105c457600080fd5b600b544210156105d357600080fd5b600c544211156105e257600080fd5b640ba43b74003a11156105f457600080fd5b600f5434101561060357600080fd5b600d54601154111561061457600080fd5b600a5461062890349063ffffffff61101916565b600160a060020a033316600090815260016020526040902054909150610654908263ffffffff61103d16565b600160a060020a033316600090815260016020526040902081905560105490111561067e57600080fd5b601154610691908263ffffffff61103d16565b6011556000546106a7908263ffffffff61103d16565b6000908155600160a060020a033316907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405190815260200160405180910390a333600160a060020a03167f17e507914c1ab4cd822dacbda95ac688e622145eaaf4547021782e4a347837453483600054600a546040518085815260200184815260200183815260200182815260200194505050505060405180910390a250565b601254600090819060ff161561075f57600080fd5b600b5442101561076e57600080fd5b6012805460ff1916600190811790915573a6556b9bd0aabf0d8824374a3c425d315b09b83260008190526020919091527ffa207b1b46c5ac06b3e94761adb7afab09b1b46722bd487dc099202049a6188f549092506107de906a0108b2a2c280290940000063ffffffff61103d16565b600160a060020a03831660009081526001602052604081209190915573783a1cbc37a8ef2f368908490b72bfe801da1877908190527f10d43ec9345f8f08c9bac7a5e73af742daeac0aef3aa01f279eedb48c77c063c54909150610853906a06342fd08f00f63780000063ffffffff61103d16565b600160a060020a0382166000908152600160205260408120919091555461088b906a073ce27351811f40c0000063ffffffff61103d16565b6000555050565b60045460a060020a900460ff1681565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109385780601f1061090d57610100808354040283529160200191610938565b820191906000526020600020905b81548152906001019060200180831161091b57829003601f168201915b505050505081565b60045460009060a060020a900460ff161561095a57600080fd5b610964838361104c565b90505b92915050565b600b5481565b60005481565b60035433600160a060020a0390811691161461099457600080fd5b600160a060020a03811615156109a957600080fd5b6009805474ffffffffffffffffffffffffffffffffffffffff001916610100600160a060020a038416021790557fde18bec64db6456a4810135a56f83d06f0ab5786ebdb21e3bef0893f63dab7fd81604051600160a060020a03909116815260200160405180910390a150565b60045460009060a060020a900460ff1615610a3057600080fd5b610a3b8484846110b8565b90505b9392505050565b60035433600160a060020a03908116911614610a6057600080fd5b610a6b8160016111cc565b50565b60075460ff1681565b6009546101009004600160a060020a031681565b60035460009033600160a060020a03908116911614610aa957600080fd5b600d54600054101580610abe5750600c544210155b1515610ac957600080fd5b60095460ff1615610ad957600080fd5b7f616c9469db50815ae0f1d0a020d9fc9060da7c57f03559afb0d4ebdaa0a3a05e600960019054906101000a9004600160a060020a031630600160a060020a0316316000546040518084600160a060020a0316600160a060020a03168152602001838152602001828152602001935050505060405180910390a1600954600160a060020a0361010090910481169030163180156108fc0290604051600060405180830381858888f193505050501515610b9157600080fd5b600e54600160a060020a031663dc5bf9616000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1515610bf257600080fd5b6102c65a03f11515610c0357600080fd5b5050506040518051600e54600160a060020a0316600090815260016020526040902054909250610c3a91508263ffffffff61103d16565b600e54600160a060020a031660009081526001602052604081209190915554610c69908263ffffffff61103d16565b6000908155600354600160a060020a0316815260016020526040902054610ca09069d3c21bcecceda100000063ffffffff61103d16565b600354600160a060020a031660009081526001602052604081209190915554610cd99069d3c21bcecceda100000063ffffffff61103d16565b6000556009805460ff19166001179055610a6b610d32565b60035433600160a060020a03908116911614610d0c57600080fd5b6004805474ff0000000000000000000000000000000000000000191660a060020a179055565b60035433600160a060020a03908116911614610d4d57600080fd5b6004805474ff000000000000000000000000000000000000000019169055565b600160a060020a031660009081526001602052604090205490565b60035433600160a060020a03908116911614610da357600080fd5b610a6b8160006111cc565b60045433600160a060020a03908116911614610dc957600080fd5b600454600354600160a060020a0391821691167f22500af037c600dd7b720644ab6e358635085601d9ac508ad83eb2d6b2d729ca60405160405180910390a36004546003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03909216919091179055565b600a5481565b600354600160a060020a031681565b60068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109385780601f1061090d57610100808354040283529160200191610938565b60086020526000908152604090205460ff1681565b60045460009060a060020a900460ff1615610ee857600080fd5b6109648383611234565b60095460ff1681565b600c5481565b60035433600160a060020a03908116911614610f1c57600080fd5b600b544210610f2a57600080fd5b60008111610f3757600080fd5b600a819055677ce66c50e284000081026010557fed4f114d5309d23a6f29a047b8e4014ccd43ac8c42087d845ef4d0f1fbf2d8848160405190815260200160405180910390a150565b600454600160a060020a031681565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a03908116911614610fd557600080fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600e54600160a060020a031681565b600d5481565b6000828202831580611035575082848281151561103257fe5b04145b1515610a3e57fe5b600082820183811015610a3e57fe5b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b600160a060020a038316600090815260016020526040812054829010806111055750600160a060020a03808516600090815260026020908152604080832033909416835292905220548290105b8061110e575081155b1561111b57506000610a3e565b600160a060020a038316600090815260016020526040902054611144908363ffffffff61103d16565b600160a060020a03808516600081815260016020908152604080832095909555888416808352858320805489900390556002825285832033909516835293905283902080548690039055917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b60005b82518163ffffffff16101561122f578160086000858463ffffffff16815181106111f557fe5b90602001906020020151600160a060020a031681526020810191909152604001600020805460ff19169115159190911790556001016111cf565b505050565b600160a060020a03331660009081526001602052604081205482901080611259575081155b1561126657506000610967565b600160a060020a03338116600090815260016020526040808220805486900390559185168152205461129e908363ffffffff61103d16565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a3506001929150505600a165627a7a723058204a434c3597397ea37843e3ff0fedd12273951a92474c0bcf18180fcde320e7eb0029"}