{"Runs": "200", "SwarmSource": "bzzr://60b9ba1c386817178a2d02d8abd9eb52d5ade2ceb2046fc65b9e5aaca805c8b6", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"escrowAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"escrowReturn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tgeIssuer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tgeActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_tokensAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_restart\",\"type\":\"bool\"}],\"name\":\"stopTge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tgeIssuer\",\"type\":\"address\"}],\"name\":\"setTgeIssuer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"extendTge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tgeDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_tokensAmount\",\"type\":\"uint256\"}],\"name\":\"reserveTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startTge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_users\",\"type\":\"address[]\"},{\"name\":\"_tokensAmounts\",\"type\":\"uint256[]\"}],\"name\":\"reserveTokensGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_choice\",\"type\":\"bool\"}],\"name\":\"allowEscrow\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_escrow\",\"type\":\"address\"}],\"name\":\"setEscrow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"escrowFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"escrow\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tgeStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.18+commit.9cf6e910", "ConstructorArguments": "", "SourceCode": "pragma solidity ^0.4.18;\r\n\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      if (a == 0) {\r\n        return 0;\r\n      }\r\n      uint256 c = a * b;\r\n      assert(c / a == b);\r\n      return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n      uint256 c = a / b;\r\n      // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n      return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      assert(b <= a);\r\n      return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      uint256 c = a + b;\r\n      assert(c >= a);\r\n      return c;\r\n    }\r\n}\r\n\r\ncontract BETR_TOKEN {\r\n    using SafeMath for uint256;\r\n\r\n    string public constant name = \"Better Betting\";\r\n    string public symbol = \"BETR\";\r\n    uint256 public constant decimals = 18;\r\n\r\n    uint256 public hardCap = 650000000 * (10 ** decimals);\r\n    uint256 public totalSupply;\r\n\r\n    address public escrow; // reference to escrow contract for transaction and authorization\r\n    address public owner; // reference to the contract creator\r\n    address public tgeIssuer = 0xba81ACCC7074B5D9ABDAa25c30DbaD96BF44D660;\r\n\r\n    bool public tgeActive;\r\n    uint256 public tgeDuration = 30 days;\r\n    uint256 public tgeStartTime;\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed; // third party authorisations for token transfering\r\n    mapping (address => bool) public escrowAllowed; // per address switch authorizing the escrow to escrow user tokens\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    function BETR_TOKEN() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyTgeIssuer {\r\n        require(msg.sender == tgeIssuer);\r\n        _;\r\n    }\r\n\r\n    modifier onlyEscrow {\r\n        require(msg.sender == escrow);\r\n        _;\r\n    }\r\n\r\n    modifier tgeRunning {\r\n        require(tgeActive && block.timestamp < tgeStartTime + tgeDuration);\r\n        _;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(\r\n            _to != address(0) &&\r\n            balances[msg.sender] >= _value &&\r\n            balances[_to] + _value > balances[_to]\r\n        );\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require (\r\n          _from != address(0) &&\r\n          _to != address(0) &&\r\n          balances[_from] >= _value &&\r\n          allowed[_from][msg.sender] >= _value &&\r\n          balances[_to] + _value > balances[_to]\r\n        );\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        require(_spender != address(0));\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowEscrow(bool _choice) external returns(bool) {\r\n      escrowAllowed[msg.sender] = _choice;\r\n      return true;\r\n    }\r\n\r\n    function escrowFrom(address _from, uint256 _value) external onlyEscrow returns(bool) {\r\n      require (\r\n        _from != address(0) &&\r\n        balances[_from] >= _value &&\r\n        escrowAllowed[_from] &&\r\n        _value > 0\r\n      );\r\n      balances[_from] = balances[_from].sub(_value);\r\n      balances[escrow] = balances[escrow].add(_value);\r\n      Transfer(_from, escrow, _value);\r\n      return true;\r\n    }\r\n\r\n    function escrowReturn(address _to, uint256 _value, uint256 _fee) external onlyEscrow returns(bool) {\r\n        require(\r\n            _to != address(0) &&\r\n            _value > 0\r\n        );\r\n        if(_fee > 0) {\r\n            require(_fee < totalSupply && _fee < balances[escrow]);\r\n            totalSupply = totalSupply.sub(_fee);\r\n            balances[escrow] = balances[escrow].sub(_fee);\r\n        }\r\n        require(transfer(_to, _value));\r\n        return true;\r\n    }\r\n\r\n    function mint(address _user, uint256 _tokensAmount) public onlyTgeIssuer tgeRunning returns(bool) {\r\n        uint256 newSupply = totalSupply.add(_tokensAmount);\r\n        require(\r\n            _user != address(0) &&\r\n            _tokensAmount > 0 &&\r\n             newSupply < hardCap\r\n        );\r\n        balances[_user] = balances[_user].add(_tokensAmount);\r\n        totalSupply = newSupply;\r\n        Transfer(0x0, _user, _tokensAmount);\r\n        return true;\r\n    }\r\n\r\n    function reserveTokensGroup(address[] _users, uint256[] _tokensAmounts) external onlyOwner {\r\n        require(_users.length == _tokensAmounts.length);\r\n        uint256 newSupply;\r\n        for(uint8 i = 0; i < _users.length; i++){\r\n            newSupply = totalSupply.add(_tokensAmounts[i].mul(10 ** decimals));\r\n            require(\r\n                _users[i] != address(0) &&\r\n                _tokensAmounts[i] > 0 &&\r\n                newSupply < hardCap\r\n            );\r\n            balances[_users[i]] = balances[_users[i]].add(_tokensAmounts[i].mul(10 ** decimals));\r\n            totalSupply = newSupply;\r\n            Transfer(0x0, _users[i], _tokensAmounts[i]);\r\n        }\r\n    }\r\n\r\n    function reserveTokens(address _user, uint256 _tokensAmount) external onlyOwner {\r\n        uint256 newSupply = totalSupply.add(_tokensAmount.mul(10 ** decimals));\r\n        require(\r\n            _user != address(0) &&\r\n            _tokensAmount > 0 &&\r\n            newSupply < hardCap\r\n        );\r\n        balances[_user] = balances[_user].add(_tokensAmount.mul(10 ** decimals));\r\n        totalSupply = newSupply;\r\n        Transfer(0x0, _user, _tokensAmount);\r\n    }\r\n\r\n    function startTge() external onlyOwner {\r\n        tgeActive = true;\r\n        if(tgeStartTime == 0) tgeStartTime = block.timestamp;\r\n    }\r\n\r\n    function stopTge(bool _restart) external onlyOwner {\r\n      tgeActive = false;\r\n      if(_restart) tgeStartTime = 0;\r\n    }\r\n\r\n    function extendTge(uint256 _time) external onlyOwner {\r\n      tgeDuration = tgeDuration.add(_time);\r\n    }\r\n\r\n    function setEscrow(address _escrow) external onlyOwner {\r\n        escrow = _escrow;\r\n    }\r\n\r\n    function setTgeIssuer(address _tgeIssuer) external onlyOwner {\r\n        tgeIssuer = _tgeIssuer;\r\n    }\r\n\r\n    function balanceOf(address _owner) external view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) external view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}", "OptimizationUsed": "1", "ContractName": "BETR_TOKEN", "ByteCode": "0x6060604052600436106101695763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461016e578063095ea7b3146101f85780630f5ed9e91461022e57806318160ddd1461024d5780631a62f6f71461027257806323b872dd146102975780632ba7fc87146102bf578063313ce567146102ee578063385cd0831461030157806340c10f19146103145780634dc133a514610336578063523f52c6146103505780635b73b3321461036f5780636fa583351461038557806370a082311461039857806378cf19e9146103b75780637de06cfc146103d95780638972feba146103ec5780638da5cb5b1461041657806395d89b4114610429578063a4c6fcde1461043c578063a9059cbb14610454578063c10c354614610476578063d38eb9d314610495578063dd62ed3e146104b7578063e2fdcc17146104dc578063f6791858146104ef578063fb86a40414610502575b600080fd5b341561017957600080fd5b610181610515565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101bd5780820151838201526020016101a5565b50505050905090810190601f1680156101ea5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561020357600080fd5b61021a600160a060020a036004351660243561054c565b604051901515815260200160405180910390f35b341561023957600080fd5b61021a600160a060020a03600435166105cc565b341561025857600080fd5b6102606105e1565b60405190815260200160405180910390f35b341561027d57600080fd5b61021a600160a060020a03600435166024356044356105e7565b34156102a257600080fd5b61021a600160a060020a03600435811690602435166044356106e2565b34156102ca57600080fd5b6102d261088d565b604051600160a060020a03909116815260200160405180910390f35b34156102f957600080fd5b61026061089c565b341561030c57600080fd5b61021a6108a1565b341561031f57600080fd5b61021a600160a060020a03600435166024356108c2565b341561034157600080fd5b61034e60043515156109db565b005b341561035b57600080fd5b61034e600160a060020a0360043516610a23565b341561037a57600080fd5b61034e600435610a6d565b341561039057600080fd5b610260610aa1565b34156103a357600080fd5b610260600160a060020a0360043516610aa7565b34156103c257600080fd5b61034e600160a060020a0360043516602435610ac2565b34156103e457600080fd5b61034e610bc6565b34156103f757600080fd5b61034e6024600480358281019290820135918135918201910135610c26565b341561042157600080fd5b6102d2610e19565b341561043457600080fd5b610181610e28565b341561044757600080fd5b61021a6004351515610ec6565b341561045f57600080fd5b61021a600160a060020a0360043516602435610ef2565b341561048157600080fd5b61034e600160a060020a0360043516611002565b34156104a057600080fd5b61021a600160a060020a036004351660243561104c565b34156104c257600080fd5b610260600160a060020a036004358116906024351661118d565b34156104e757600080fd5b6102d26111b8565b34156104fa57600080fd5b6102606111c7565b341561050d57600080fd5b6102606111cd565b60408051908101604052600e81527f4265747465722042657474696e67000000000000000000000000000000000000602082015281565b6000600160a060020a038316151561056357600080fd5b600160a060020a03338116600081815260096020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b600a6020526000908152604090205460ff1681565b60025481565b60035460009033600160a060020a0390811691161461060557600080fd5b600160a060020a0384161580159061061d5750600083115b151561062857600080fd5b60008211156106c3576002548210801561065b5750600354600160a060020a031660009081526008602052604090205482105b151561066657600080fd5b600254610679908363ffffffff6111d316565b600255600354600160a060020a03166000908152600860205260409020546106a7908363ffffffff6111d316565b600354600160a060020a03166000908152600860205260409020555b6106cd8484610ef2565b15156106d857600080fd5b5060019392505050565b6000600160a060020a038416158015906107045750600160a060020a03831615155b80156107295750600160a060020a038416600090815260086020526040902054829010155b801561075c5750600160a060020a0380851660009081526009602090815260408083203390941683529290522054829010155b80156107815750600160a060020a038316600090815260086020526040902054828101115b151561078c57600080fd5b600160a060020a0384166000908152600860205260409020546107b5908363ffffffff6111d316565b600160a060020a0380861660009081526008602052604080822093909355908516815220546107ea908363ffffffff6111e516565b600160a060020a03808516600090815260086020908152604080832094909455878316825260098152838220339093168252919091522054610832908363ffffffff6111d316565b600160a060020a03808616600081815260096020908152604080832033861684529091529081902093909355908516916000805160206112278339815191529085905190815260200160405180910390a35060019392505050565b600554600160a060020a031681565b601281565b60055474010000000000000000000000000000000000000000900460ff1681565b600554600090819033600160a060020a039081169116146108e257600080fd5b60055474010000000000000000000000000000000000000000900460ff16801561091157506006546007540142105b151561091c57600080fd5b60025461092f908463ffffffff6111e516565b9050600160a060020a038416158015906109495750600083115b8015610956575060015481105b151561096157600080fd5b600160a060020a03841660009081526008602052604090205461098a908463ffffffff6111e516565b600160a060020a03851660008181526008602052604080822093909355600284905590916000805160206112278339815191529086905190815260200160405180910390a3600191505b5092915050565b60045433600160a060020a039081169116146109f657600080fd5b6005805474ff0000000000000000000000000000000000000000191690558015610a205760006007555b50565b60045433600160a060020a03908116911614610a3e57600080fd5b6005805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60045433600160a060020a03908116911614610a8857600080fd5b600654610a9b908263ffffffff6111e516565b60065550565b60065481565b600160a060020a031660009081526008602052604090205490565b60045460009033600160a060020a03908116911614610ae057600080fd5b610b0a610afb83670de0b6b3a764000063ffffffff6111fb16565b6002549063ffffffff6111e516565b9050600160a060020a03831615801590610b245750600082115b8015610b31575060015481105b1515610b3c57600080fd5b610b7c610b5783670de0b6b3a764000063ffffffff6111fb16565b600160a060020a0385166000908152600860205260409020549063ffffffff6111e516565b600160a060020a03841660008181526008602052604080822093909355600284905590916000805160206112278339815191529085905190815260200160405180910390a3505050565b60045433600160a060020a03908116911614610be157600080fd5b6005805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790556007541515610c2457426007555b565b600454600090819033600160a060020a03908116911614610c4657600080fd5b848314610c5257600080fd5b5060005b60ff811685901015610e1157610c95610afb670de0b6b3a7640000868660ff8616818110610c8057fe5b905060200201356111fb90919063ffffffff16565b91506000868660ff8416818110610ca857fe5b90506020020135600160a060020a0316600160a060020a031614158015610ce457506000848460ff8416818110610cdb57fe5b90506020020135115b8015610cf1575060015482105b1515610cfc57600080fd5b610d6c610d1a670de0b6b3a7640000868660ff8616818110610c8057fe5b60086000898960ff8716818110610d2d57fe5b90506020020135600160a060020a0316600160a060020a0316600160a060020a03168152602001908152602001600020546111e590919063ffffffff16565b60086000888860ff8616818110610d7f57fe5b60209081029290920135600160a060020a0316835250810191909152604001600020556002829055858560ff8316818110610db657fe5b90506020020135600160a060020a0316600160a060020a0316600060008051602061122783398151915286868560ff168181101515610df157fe5b9050602002013560405190815260200160405180910390a3600101610c56565b505050505050565b600454600160a060020a031681565b60008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ebe5780601f10610e9357610100808354040283529160200191610ebe565b820191906000526020600020905b815481529060010190602001808311610ea157829003601f168201915b505050505081565b33600160a060020a03166000908152600a60205260409020805460ff1916911515919091179055600190565b6000600160a060020a03831615801590610f255750600160a060020a033316600090815260086020526040902054829010155b8015610f4a5750600160a060020a038316600090815260086020526040902054828101115b1515610f5557600080fd5b600160a060020a033316600090815260086020526040902054610f7e908363ffffffff6111d316565b600160a060020a033381166000908152600860205260408082209390935590851681522054610fb3908363ffffffff6111e516565b600160a060020a0380851660008181526008602052604090819020939093559133909116906000805160206112278339815191529085905190815260200160405180910390a350600192915050565b60045433600160a060020a0390811691161461101d57600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60035460009033600160a060020a0390811691161461106a57600080fd5b600160a060020a0383161580159061109b5750600160a060020a038316600090815260086020526040902054829010155b80156110bf5750600160a060020a0383166000908152600a602052604090205460ff165b80156110cb5750600082115b15156110d657600080fd5b600160a060020a0383166000908152600860205260409020546110ff908363ffffffff6111d316565b600160a060020a038085166000908152600860205260408082209390935560035490911681522054611137908363ffffffff6111e516565b60038054600160a060020a0390811660009081526008602052604090819020939093559054811691908516906000805160206112278339815191529085905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260096020908152604080832093909416825291909152205490565b600354600160a060020a031681565b60075481565b60015481565b6000828211156111df57fe5b50900390565b6000828201838110156111f457fe5b9392505050565b60008083151561120e57600091506109d4565b5082820282848281151561121e57fe5b04146111f457fe00ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a7230582060b9ba1c386817178a2d02d8abd9eb52d5ade2ceb2046fc65b9e5aaca805c8b60029"}