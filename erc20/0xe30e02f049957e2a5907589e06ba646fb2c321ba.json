{"Runs": "200", "SwarmSource": "bzzr://f4eaf92fef7f85cf1438f99dec86eb30aa386ce90573bb7e85b4231fa4dd4d3f", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_observer\",\"type\":\"address\"}],\"name\":\"registerObserver\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getOwnerAt\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getObserverAtIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getObserverCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"issue\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"retrieveTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isObserver\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwnerCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_observer\",\"type\":\"address\"}],\"name\":\"unregisterObserver\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.15+commit.bbb8e64f", "ConstructorArguments": "", "SourceCode": "pragma solidity ^0.4.15;\r\n\r\n/**\r\n * @title Input validation\r\n *\r\n * - Validates argument length\r\n *\r\n * #created 01/10/2017\r\n * #author Frank Bonnet\r\n */\r\ncontract InputValidator {\r\n\r\n    /**\r\n     * ERC20 Short Address Attack fix\r\n     */\r\n    modifier safe_arguments(uint _numArgs) {\r\n        assert(msg.data.length == _numArgs * 32 + 4);\r\n        _;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Multi-owned interface\r\n *\r\n * Interface that allows multiple owners\r\n *\r\n * #created 09/10/2017\r\n * #author Frank Bonnet\r\n */\r\ncontract IMultiOwned {\r\n\r\n    /**\r\n     * Returns true if `_account` is an owner\r\n     *\r\n     * @param _account The address to test against\r\n     */\r\n    function isOwner(address _account) constant returns (bool);\r\n\r\n\r\n    /**\r\n     * Returns the amount of owners\r\n     *\r\n     * @return The amount of owners\r\n     */\r\n    function getOwnerCount() constant returns (uint);\r\n\r\n\r\n    /**\r\n     * Gets the owner at `_index`\r\n     *\r\n     * @param _index The index of the owner\r\n     * @return The address of the owner found at `_index`\r\n     */\r\n    function getOwnerAt(uint _index) constant returns (address);\r\n\r\n\r\n     /**\r\n     * Adds `_account` as a new owner\r\n     *\r\n     * @param _account The account to add as an owner\r\n     */\r\n    function addOwner(address _account);\r\n\r\n\r\n    /**\r\n     * Removes `_account` as an owner\r\n     *\r\n     * @param _account The account to remove as an owner\r\n     */\r\n    function removeOwner(address _account);\r\n}\r\n\r\n\r\n/**\r\n * @title Multi-owned\r\n *\r\n * Allows multiple owners\r\n *\r\n * #created 09/10/2017\r\n * #author Frank Bonnet\r\n */\r\ncontract MultiOwned is IMultiOwned {\r\n\r\n    // Owners\r\n    mapping (address => uint) private owners;\r\n    address[] private ownersIndex;\r\n\r\n\r\n     /**\r\n     * Access is restricted to owners only\r\n     */\r\n    modifier only_owner() {\r\n        require(isOwner(msg.sender));\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * The publisher is the initial owner\r\n     */\r\n    function MultiOwned() {\r\n        ownersIndex.push(msg.sender);\r\n        owners[msg.sender] = 0;\r\n    }\r\n\r\n\r\n    /**\r\n     * Returns true if `_account` is the current owner\r\n     *\r\n     * @param _account The address to test against\r\n     */\r\n    function isOwner(address _account) public constant returns (bool) {\r\n        return owners[_account] < ownersIndex.length && _account == ownersIndex[owners[_account]];\r\n    }\r\n\r\n\r\n    /**\r\n     * Returns the amount of owners\r\n     *\r\n     * @return The amount of owners\r\n     */\r\n    function getOwnerCount() public constant returns (uint) {\r\n        return ownersIndex.length;\r\n    }\r\n\r\n\r\n    /**\r\n     * Gets the owner at `_index`\r\n     *\r\n     * @param _index The index of the owner\r\n     * @return The address of the owner found at `_index`\r\n     */\r\n    function getOwnerAt(uint _index) public constant returns (address) {\r\n        return ownersIndex[_index];\r\n    }\r\n\r\n\r\n    /**\r\n     * Adds `_account` as a new owner\r\n     *\r\n     * @param _account The account to add as an owner\r\n     */\r\n    function addOwner(address _account) public only_owner {\r\n        if (!isOwner(_account)) {\r\n            owners[_account] = ownersIndex.push(_account) - 1;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Removes `_account` as an owner\r\n     *\r\n     * @param _account The account to remove as an owner\r\n     */\r\n    function removeOwner(address _account) public only_owner {\r\n        if (isOwner(_account)) {\r\n            uint indexToDelete = owners[_account];\r\n            address keyToMove = ownersIndex[ownersIndex.length - 1];\r\n            ownersIndex[indexToDelete] = keyToMove;\r\n            owners[keyToMove] = indexToDelete; \r\n            ownersIndex.length--;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Token retrieve interface\r\n *\r\n * Allows tokens to be retrieved from a contract\r\n *\r\n * #created 29/09/2017\r\n * #author Frank Bonnet\r\n */\r\ncontract ITokenRetriever {\r\n\r\n    /**\r\n     * Extracts tokens from the contract\r\n     *\r\n     * @param _tokenContract The address of ERC20 compatible token\r\n     */\r\n    function retrieveTokens(address _tokenContract);\r\n}\r\n\r\n\r\n/**\r\n * @title Token retrieve\r\n *\r\n * Allows tokens to be retrieved from a contract\r\n *\r\n * #created 18/10/2017\r\n * #author Frank Bonnet\r\n */\r\ncontract TokenRetriever is ITokenRetriever {\r\n\r\n    /**\r\n     * Extracts tokens from the contract\r\n     *\r\n     * @param _tokenContract The address of ERC20 compatible token\r\n     */\r\n    function retrieveTokens(address _tokenContract) public {\r\n        IToken tokenInstance = IToken(_tokenContract);\r\n        uint tokenBalance = tokenInstance.balanceOf(this);\r\n        if (tokenBalance > 0) {\r\n            tokenInstance.transfer(msg.sender, tokenBalance);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Observable interface\r\n *\r\n * Allows observers to register and unregister with the \r\n * implementing smart-contract that is observable\r\n *\r\n * #created 09/10/2017\r\n * #author Frank Bonnet\r\n */\r\ncontract IObservable {\r\n\r\n    /**\r\n     * Returns true if `_account` is a registered observer\r\n     * \r\n     * @param _account The account to test against\r\n     * @return Whether the account is a registered observer\r\n     */\r\n    function isObserver(address _account) constant returns (bool);\r\n\r\n\r\n    /**\r\n     * Gets the amount of registered observers\r\n     * \r\n     * @return The amount of registered observers\r\n     */\r\n    function getObserverCount() constant returns (uint);\r\n\r\n\r\n    /**\r\n     * Gets the observer at `_index`\r\n     * \r\n     * @param _index The index of the observer\r\n     * @return The observers address\r\n     */\r\n    function getObserverAtIndex(uint _index) constant returns (address);\r\n\r\n\r\n    /**\r\n     * Register `_observer` as an observer\r\n     * \r\n     * @param _observer The account to add as an observer\r\n     */\r\n    function registerObserver(address _observer);\r\n\r\n\r\n    /**\r\n     * Unregister `_observer` as an observer\r\n     * \r\n     * @param _observer The account to remove as an observer\r\n     */\r\n    function unregisterObserver(address _observer);\r\n}\r\n\r\n\r\n/**\r\n * @title Abstract Observable\r\n *\r\n * Allows observers to register and unregister with the the \r\n * implementing smart-contract that is observable\r\n *\r\n * #created 09/10/2017\r\n * #author Frank Bonnet\r\n */\r\ncontract Observable is IObservable {\r\n\r\n    // Observers\r\n    mapping(address => uint) private observers;\r\n    address[] private observerIndex;\r\n\r\n\r\n    /**\r\n     * Returns true if `_account` is a registered observer\r\n     * \r\n     * @param _account The account to test against\r\n     * @return Whether the account is a registered observer\r\n     */\r\n    function isObserver(address _account) public constant returns (bool) {\r\n        return observers[_account] < observerIndex.length && _account == observerIndex[observers[_account]];\r\n    }\r\n\r\n\r\n    /**\r\n     * Gets the amount of registered observers\r\n     * \r\n     * @return The amount of registered observers\r\n     */\r\n    function getObserverCount() public constant returns (uint) {\r\n        return observerIndex.length;\r\n    }\r\n\r\n\r\n    /**\r\n     * Gets the observer at `_index`\r\n     * \r\n     * @param _index The index of the observer\r\n     * @return The observers address\r\n     */\r\n    function getObserverAtIndex(uint _index) public constant returns (address) {\r\n        return observerIndex[_index];\r\n    }\r\n\r\n\r\n    /**\r\n     * Register `_observer` as an observer\r\n     * \r\n     * @param _observer The account to add as an observer\r\n     */\r\n    function registerObserver(address _observer) public {\r\n        require(canRegisterObserver(_observer));\r\n        if (!isObserver(_observer)) {\r\n            observers[_observer] = observerIndex.push(_observer) - 1;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Unregister `_observer` as an observer\r\n     * \r\n     * @param _observer The account to remove as an observer\r\n     */\r\n    function unregisterObserver(address _observer) public {\r\n        require(canUnregisterObserver(_observer));\r\n        if (isObserver(_observer)) {\r\n            uint indexToDelete = observers[_observer];\r\n            address keyToMove = observerIndex[observerIndex.length - 1];\r\n            observerIndex[indexToDelete] = keyToMove;\r\n            observers[keyToMove] = indexToDelete;\r\n            observerIndex.length--;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Returns whether it is allowed to register `_observer` by calling \r\n     * canRegisterObserver() in the implementing smart-contract\r\n     *\r\n     * @param _observer The address to register as an observer\r\n     * @return Whether the sender is allowed or not\r\n     */\r\n    function canRegisterObserver(address _observer) internal constant returns (bool);\r\n\r\n\r\n    /**\r\n     * Returns whether it is allowed to unregister `_observer` by calling \r\n     * canRegisterObserver() in the implementing smart-contract\r\n     *\r\n     * @param _observer The address to unregister as an observer\r\n     * @return Whether the sender is allowed or not\r\n     */\r\n    function canUnregisterObserver(address _observer) internal constant returns (bool);\r\n}\r\n\r\n\r\n/**\r\n * @title Token observer interface\r\n *\r\n * Allows a token smart-contract to notify observers \r\n * when tokens are received\r\n *\r\n * #created 09/10/2017\r\n * #author Frank Bonnet\r\n */\r\ncontract ITokenObserver {\r\n\r\n    /**\r\n     * Called by the observed token smart-contract in order \r\n     * to notify the token observer when tokens are received\r\n     *\r\n     * @param _from The address that the tokens where send from\r\n     * @param _value The amount of tokens that was received\r\n     */\r\n    function notifyTokensReceived(address _from, uint _value);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 compatible token interface\r\n *\r\n * - Implements ERC 20 Token standard\r\n * - Implements short address attack fix\r\n *\r\n * #created 29/09/2017\r\n * #author Frank Bonnet\r\n */\r\ncontract IToken { \r\n\r\n    /** \r\n     * Get the total supply of tokens\r\n     * \r\n     * @return The total supply\r\n     */\r\n    function totalSupply() constant returns (uint);\r\n\r\n\r\n    /** \r\n     * Get balance of `_owner` \r\n     * \r\n     * @param _owner The address from which the balance will be retrieved\r\n     * @return The balance\r\n     */\r\n    function balanceOf(address _owner) constant returns (uint);\r\n\r\n\r\n    /** \r\n     * Send `_value` token to `_to` from `msg.sender`\r\n     * \r\n     * @param _to The address of the recipient\r\n     * @param _value The amount of token to be transferred\r\n     * @return Whether the transfer was successful or not\r\n     */\r\n    function transfer(address _to, uint _value) returns (bool);\r\n\r\n\r\n    /** \r\n     * Send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n     * \r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value The amount of token to be transferred\r\n     * @return Whether the transfer was successful or not\r\n     */\r\n    function transferFrom(address _from, address _to, uint _value) returns (bool);\r\n\r\n\r\n    /** \r\n     * `msg.sender` approves `_spender` to spend `_value` tokens\r\n     * \r\n     * @param _spender The address of the account able to transfer the tokens\r\n     * @param _value The amount of tokens to be approved for transfer\r\n     * @return Whether the approval was successful or not\r\n     */\r\n    function approve(address _spender, uint _value) returns (bool);\r\n\r\n\r\n    /** \r\n     * Get the amount of remaining tokens that `_spender` is allowed to spend from `_owner`\r\n     * \r\n     * @param _owner The address of the account owning tokens\r\n     * @param _spender The address of the account able to transfer the tokens\r\n     * @return Amount of remaining tokens allowed to spent\r\n     */\r\n    function allowance(address _owner, address _spender) constant returns (uint);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 compatible token\r\n *\r\n * - Implements ERC 20 Token standard\r\n * - Implements short address attack fix\r\n *\r\n * #created 29/09/2017\r\n * #author Frank Bonnet\r\n */\r\ncontract Token is IToken, InputValidator {\r\n\r\n    // Ethereum token standard\r\n    string public standard = \"Token 0.3\";\r\n    string public name;        \r\n    string public symbol;\r\n    uint8 public decimals;\r\n\r\n    // Token state\r\n    uint internal totalTokenSupply;\r\n\r\n    // Token balances\r\n    mapping (address => uint) internal balances;\r\n\r\n    // Token allowances\r\n    mapping (address => mapping (address => uint)) internal allowed;\r\n\r\n\r\n    // Events\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n\r\n    /** \r\n     * Construct ERC20 token\r\n     * \r\n     * @param _name The full token name\r\n     * @param _symbol The token symbol (aberration)\r\n     * @param _decimals The token precision\r\n     */\r\n    function Token(string _name, string _symbol, uint8 _decimals) {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n        balances[msg.sender] = 0;\r\n        totalTokenSupply = 0;\r\n    }\r\n\r\n\r\n    /** \r\n     * Get the total token supply\r\n     * \r\n     * @return The total supply\r\n     */\r\n    function totalSupply() public constant returns (uint) {\r\n        return totalTokenSupply;\r\n    }\r\n\r\n\r\n    /** \r\n     * Get balance of `_owner` \r\n     * \r\n     * @param _owner The address from which the balance will be retrieved\r\n     * @return The balance\r\n     */\r\n    function balanceOf(address _owner) public constant returns (uint) {\r\n        return balances[_owner];\r\n    }\r\n\r\n\r\n    /** \r\n     * Send `_value` token to `_to` from `msg.sender`\r\n     * \r\n     * @param _to The address of the recipient\r\n     * @param _value The amount of token to be transferred\r\n     * @return Whether the transfer was successful or not\r\n     */\r\n    function transfer(address _to, uint _value) public safe_arguments(2) returns (bool) {\r\n\r\n        // Check if the sender has enough tokens\r\n        require(balances[msg.sender] >= _value);   \r\n\r\n        // Check for overflows\r\n        require(balances[_to] + _value >= balances[_to]);\r\n\r\n        // Transfer tokens\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n\r\n        // Notify listeners\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    /** \r\n     * Send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n     * \r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value The amount of token to be transferred\r\n     * @return Whether the transfer was successful or not \r\n     */\r\n    function transferFrom(address _from, address _to, uint _value) public safe_arguments(3) returns (bool) {\r\n\r\n        // Check if the sender has enough\r\n        require(balances[_from] >= _value);\r\n\r\n        // Check for overflows\r\n        require(balances[_to] + _value >= balances[_to]);\r\n\r\n        // Check allowance\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        // Transfer tokens\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value;\r\n\r\n        // Update allowance\r\n        allowed[_from][msg.sender] -= _value;\r\n\r\n        // Notify listeners\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    /** \r\n     * `msg.sender` approves `_spender` to spend `_value` tokens\r\n     * \r\n     * @param _spender The address of the account able to transfer the tokens\r\n     * @param _value The amount of tokens to be approved for transfer\r\n     * @return Whether the approval was successful or not\r\n     */\r\n    function approve(address _spender, uint _value) public safe_arguments(2) returns (bool) {\r\n\r\n        // Update allowance\r\n        allowed[msg.sender][_spender] = _value;\r\n\r\n        // Notify listeners\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    /** \r\n     * Get the amount of remaining tokens that `_spender` is allowed to spend from `_owner`\r\n     * \r\n     * @param _owner The address of the account owning tokens\r\n     * @param _spender The address of the account able to transfer the tokens\r\n     * @return Amount of remaining tokens allowed to spent\r\n     */\r\n    function allowance(address _owner, address _spender) public constant returns (uint) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title ManagedToken interface\r\n *\r\n * Adds the following functionality to the basic ERC20 token\r\n * - Locking\r\n * - Issuing\r\n * - Burning \r\n *\r\n * #created 29/09/2017\r\n * #author Frank Bonnet\r\n */\r\ncontract IManagedToken is IToken { \r\n\r\n    /** \r\n     * Returns true if the token is locked\r\n     * \r\n     * @return Whether the token is locked\r\n     */\r\n    function isLocked() constant returns (bool);\r\n\r\n\r\n    /**\r\n     * Locks the token so that the transfering of value is disabled \r\n     *\r\n     * @return Whether the unlocking was successful or not\r\n     */\r\n    function lock() returns (bool);\r\n\r\n\r\n    /**\r\n     * Unlocks the token so that the transfering of value is enabled \r\n     *\r\n     * @return Whether the unlocking was successful or not\r\n     */\r\n    function unlock() returns (bool);\r\n\r\n\r\n    /**\r\n     * Issues `_value` new tokens to `_to`\r\n     *\r\n     * @param _to The address to which the tokens will be issued\r\n     * @param _value The amount of new tokens to issue\r\n     * @return Whether the tokens where sucessfully issued or not\r\n     */\r\n    function issue(address _to, uint _value) returns (bool);\r\n\r\n\r\n    /**\r\n     * Burns `_value` tokens of `_from`\r\n     *\r\n     * @param _from The address that owns the tokens to be burned\r\n     * @param _value The amount of tokens to be burned\r\n     * @return Whether the tokens where sucessfully burned or not \r\n     */\r\n    function burn(address _from, uint _value) returns (bool);\r\n}\r\n\r\n\r\n/**\r\n * @title ManagedToken\r\n *\r\n * Adds the following functionality to the basic ERC20 token\r\n * - Locking\r\n * - Issuing\r\n * - Burning \r\n *\r\n * #created 29/09/2017\r\n * #author Frank Bonnet\r\n */\r\ncontract ManagedToken is IManagedToken, Token, MultiOwned {\r\n\r\n    // Token state\r\n    bool internal locked;\r\n\r\n\r\n    /**\r\n     * Allow access only when not locked\r\n     */\r\n    modifier only_when_unlocked() {\r\n        require(!locked);\r\n        _;\r\n    }\r\n\r\n\r\n    /** \r\n     * Construct managed ERC20 token\r\n     * \r\n     * @param _name The full token name\r\n     * @param _symbol The token symbol (aberration)\r\n     * @param _decimals The token precision\r\n     * @param _locked Whether the token should be locked initially\r\n     */\r\n    function ManagedToken(string _name, string _symbol, uint8 _decimals, bool _locked) \r\n        Token(_name, _symbol, _decimals) {\r\n        locked = _locked;\r\n    }\r\n\r\n\r\n    /** \r\n     * Send `_value` token to `_to` from `msg.sender`\r\n     * \r\n     * @param _to The address of the recipient\r\n     * @param _value The amount of token to be transferred\r\n     * @return Whether the transfer was successful or not\r\n     */\r\n    function transfer(address _to, uint _value) public only_when_unlocked returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n\r\n    /** \r\n     * Send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n     * \r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value The amount of token to be transferred\r\n     * @return Whether the transfer was successful or not\r\n     */\r\n    function transferFrom(address _from, address _to, uint _value) public only_when_unlocked returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n\r\n    /** \r\n     * `msg.sender` approves `_spender` to spend `_value` tokens\r\n     * \r\n     * @param _spender The address of the account able to transfer the tokens\r\n     * @param _value The amount of tokens to be approved for transfer\r\n     * @return Whether the approval was successful or not\r\n     */\r\n    function approve(address _spender, uint _value) public returns (bool) {\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n\r\n    /** \r\n     * Returns true if the token is locked\r\n     * \r\n     * @return Whether the token is locked\r\n     */\r\n    function isLocked() public constant returns (bool) {\r\n        return locked;\r\n    }\r\n\r\n\r\n    /**\r\n     * Locks the token so that the transfering of value is enabled \r\n     *\r\n     * @return Whether the locking was successful or not\r\n     */\r\n    function lock() public only_owner returns (bool)  {\r\n        locked = true;\r\n        return locked;\r\n    }\r\n\r\n\r\n    /**\r\n     * Unlocks the token so that the transfering of value is enabled \r\n     *\r\n     * @return Whether the unlocking was successful or not\r\n     */\r\n    function unlock() public only_owner returns (bool)  {\r\n        locked = false;\r\n        return !locked;\r\n    }\r\n\r\n\r\n    /**\r\n     * Issues `_value` new tokens to `_to`\r\n     *\r\n     * @param _to The address to which the tokens will be issued\r\n     * @param _value The amount of new tokens to issue\r\n     * @return Whether the approval was successful or not\r\n     */\r\n    function issue(address _to, uint _value) public only_owner safe_arguments(2) returns (bool) {\r\n        \r\n        // Check for overflows\r\n        require(balances[_to] + _value >= balances[_to]);\r\n\r\n        // Create tokens\r\n        balances[_to] += _value;\r\n        totalTokenSupply += _value;\r\n\r\n        // Notify listeners \r\n        Transfer(0, this, _value);\r\n        Transfer(this, _to, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * Burns `_value` tokens of `_recipient`\r\n     *\r\n     * @param _from The address that owns the tokens to be burned\r\n     * @param _value The amount of tokens to be burned\r\n     * @return Whether the tokens where sucessfully burned or not\r\n     */\r\n    function burn(address _from, uint _value) public only_owner safe_arguments(2) returns (bool) {\r\n\r\n        // Check if the token owner has enough tokens\r\n        require(balances[_from] >= _value);\r\n\r\n        // Check for overflows\r\n        require(balances[_from] - _value <= balances[_from]);\r\n\r\n        // Burn tokens\r\n        balances[_from] -= _value;\r\n        totalTokenSupply -= _value;\r\n\r\n        // Notify listeners \r\n        Transfer(_from, 0, _value);\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title DRP Utility token (DRPU)\r\n *\r\n * DRPU as indicated by its \u2018U\u2019 designation is Dcorp\u2019s utility token for those who are under strict \r\n * compliance within their country of residence, and does not entitle holders to profit sharing.\r\n *\r\n * https://www.dcorp.it/drpu\r\n *\r\n * #created 01/10/2017\r\n * #author Frank Bonnet\r\n */\r\ncontract DRPUToken is ManagedToken, Observable, TokenRetriever {\r\n\r\n    /**\r\n     * Construct the managed utility token\r\n     */\r\n    function DRPUToken() ManagedToken(\"DRP Utility\", \"DRPU\", 8, false) {}\r\n\r\n\r\n    /**\r\n     * Returns whether sender is allowed to register `_observer`\r\n     *\r\n     * @param _observer The address to register as an observer\r\n     * @return Whether the sender is allowed or not\r\n     */\r\n    function canRegisterObserver(address _observer) internal constant returns (bool) {\r\n        return _observer != address(this) && isOwner(msg.sender);\r\n    }\r\n\r\n\r\n    /**\r\n     * Returns whether sender is allowed to unregister `_observer`\r\n     *\r\n     * @param _observer The address to unregister as an observer\r\n     * @return Whether the sender is allowed or not\r\n     */\r\n    function canUnregisterObserver(address _observer) internal constant returns (bool) {\r\n        return msg.sender == _observer || isOwner(msg.sender);\r\n    }\r\n\r\n\r\n    /** \r\n     * Send `_value` token to `_to` from `msg.sender`\r\n     * - Notifies registered observers when the observer receives tokens\r\n     * \r\n     * @param _to The address of the recipient\r\n     * @param _value The amount of token to be transferred\r\n     * @return Whether the transfer was successful or not\r\n     */\r\n    function transfer(address _to, uint _value) public returns (bool) {\r\n        bool result = super.transfer(_to, _value);\r\n        if (isObserver(_to)) {\r\n            ITokenObserver(_to).notifyTokensReceived(msg.sender, _value);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n\r\n    /** \r\n     * Send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n     * - Notifies registered observers when the observer receives tokens\r\n     * \r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value The amount of token to be transferred\r\n     * @return Whether the transfer was successful or not\r\n     */\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\r\n        bool result = super.transferFrom(_from, _to, _value);\r\n        if (isObserver(_to)) {\r\n            ITokenObserver(_to).notifyTokensReceived(_from, _value);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n\r\n    /**\r\n     * Failsafe mechanism\r\n     * \r\n     * Allows the owner to retrieve tokens from the contract that \r\n     * might have been send there by accident\r\n     *\r\n     * @param _tokenContract The address of ERC20 compatible token\r\n     */\r\n    function retrieveTokens(address _tokenContract) public only_owner {\r\n        super.retrieveTokens(_tokenContract);\r\n    }\r\n\r\n\r\n    /**\r\n     * Prevents the accidental sending of ether\r\n     */\r\n    function () payable {\r\n        revert();\r\n    }\r\n}", "OptimizationUsed": "1", "ContractName": "DRPUToken", "ByteCode": "0x606060405236156101385763ffffffff60e060020a60003504166306fdde038114610140578063095ea7b3146101cb578063173825d91461020157806318160ddd1461022257806323b872dd146102475780632c07398d146102835780632f54bf6e146102a4578063313ce567146102d757806355f28260146103005780635a3b7e4214610332578063601fc832146103bd5780637065cb48146103ef57806370a082311461041057806377215c8d14610441578063867904b41461046657806395d89b411461049c5780639dc29fac14610527578063a4e2d6341461055d578063a69df4b514610584578063a9059cbb146105ab578063ac4ddd9f146105e1578063d9facbe014610602578063dd62ed3e14610635578063ef18374a1461066c578063f83d08ba14610691578063f94d71a0146106b8575b5b600080fd5b005b341561014b57600080fd5b6101536106d9565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101905780820151818401525b602001610177565b50505050905090810190601f1680156101bd5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101d657600080fd5b6101ed600160a060020a0360043516602435610777565b604051901515815260200160405180910390f35b341561020c57600080fd5b61013e600160a060020a036004351661078c565b005b341561022d57600080fd5b61023561086e565b60405190815260200160405180910390f35b341561025257600080fd5b6101ed600160a060020a0360043581169060243516604435610875565b604051901515815260200160405180910390f35b341561028e57600080fd5b61013e600160a060020a0360043516610908565b005b34156102af57600080fd5b6101ed600160a060020a0360043516610988565b604051901515815260200160405180910390f35b34156102e257600080fd5b6102ea610a14565b60405160ff909116815260200160405180910390f35b341561030b57600080fd5b610316600435610a1d565b604051600160a060020a03909116815260200160405180910390f35b341561033d57600080fd5b610153610a56565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101905780820151818401525b602001610177565b50505050905090810190601f1680156101bd5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103c857600080fd5b610316600435610af4565b604051600160a060020a03909116815260200160405180910390f35b34156103fa57600080fd5b61013e600160a060020a0360043516610b2d565b005b341561041b57600080fd5b610235600160a060020a0360043516610bae565b60405190815260200160405180910390f35b341561044c57600080fd5b610235610bcd565b60405190815260200160405180910390f35b341561047157600080fd5b6101ed600160a060020a0360043516602435610bd4565b604051901515815260200160405180910390f35b34156104a757600080fd5b610153610cae565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101905780820151818401525b602001610177565b50505050905090810190601f1680156101bd5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561053257600080fd5b6101ed600160a060020a0360043516602435610d4c565b604051901515815260200160405180910390f35b341561056857600080fd5b6101ed610e16565b604051901515815260200160405180910390f35b341561058f57600080fd5b6101ed610e20565b604051901515815260200160405180910390f35b34156105b657600080fd5b6101ed600160a060020a0360043516602435610e48565b604051901515815260200160405180910390f35b34156105ec57600080fd5b61013e600160a060020a0360043516610ed9565b005b341561060d57600080fd5b6101ed600160a060020a0360043516610efb565b604051901515815260200160405180910390f35b341561064057600080fd5b610235600160a060020a0360043581169060243516610f87565b60405190815260200160405180910390f35b341561067757600080fd5b610235610fb4565b60405190815260200160405180910390f35b341561069c57600080fd5b6101ed610fbb565b604051901515815260200160405180910390f35b34156106c357600080fd5b61013e600160a060020a0360043516610fe9565b005b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561076f5780601f106107445761010080835404028352916020019161076f565b820191906000526020600020905b81548152906001019060200180831161075257829003601f168201915b505050505081565b600061078383836110ca565b90505b92915050565b60008061079833610988565b15156107a357600080fd5b6107ac83610988565b1561086757600160a060020a038316600090815260076020526040902054600880549193509060001981019081106107e057fe5b906000526020600020900160005b9054906101000a9004600160a060020a031690508060088381548110151561081257fe5b906000526020600020900160005b8154600160a060020a039384166101009290920a91820291840219161790558116600090815260076020526040902082905560088054906108659060001983016114bb565b505b5b5b505050565b6004545b90565b600080610883858585611145565b905061088e84610efb565b156108fc5783600160a060020a0316637cf5d66f868560405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b15156108e757600080fd5b6102c65a03f115156108f857600080fd5b5050505b8091505b509392505050565b6109118161116e565b151561091c57600080fd5b61092581610efb565b1515610984576001600b805480600101828161094191906114bb565b916000526020600020900160005b8154600160a060020a038087166101009390930a838102910219909116179091556000908152600a6020526040902091900390555b5b50565b600854600160a060020a038216600090815260076020526040812054909190108015610a0c5750600160a060020a0382166000908152600760205260409020546008805490919081106109d757fe5b906000526020600020900160005b9054906101000a9004600160a060020a0316600160a060020a031682600160a060020a0316145b90505b919050565b60035460ff1681565b6000600882815481101515610a2e57fe5b906000526020600020900160005b9054906101000a9004600160a060020a031690505b919050565b60008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561076f5780601f106107445761010080835404028352916020019161076f565b820191906000526020600020905b81548152906001019060200180831161075257829003601f168201915b505050505081565b6000600b82815481101515610a2e57fe5b906000526020600020900160005b9054906101000a9004600160a060020a031690505b919050565b610b3633610988565b1515610b4157600080fd5b610b4a81610988565b151561098457600160088054806001018281610b6691906114bb565b916000526020600020900160005b8154600160a060020a038087166101009390930a83810291021990911617909155600090815260076020526040902091900390555b5b5b50565b600160a060020a0381166000908152600560205260409020545b919050565b600b545b90565b6000610bdf33610988565b1515610bea57600080fd5b600236604414610bf657fe5b600160a060020a0384166000908152600560205260409020548381011015610c1d57600080fd5b600160a060020a03808516600090815260056020526040808220805487019055600480548701905530909216916000805160206115318339815191529086905190815260200160405180910390a383600160a060020a031630600160a060020a03166000805160206115318339815191528560405190815260200160405180910390a3600191505b5b505b92915050565b60028054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561076f5780601f106107445761010080835404028352916020019161076f565b820191906000526020600020905b81548152906001019060200180831161075257829003601f168201915b505050505081565b6000610d5733610988565b1515610d6257600080fd5b600236604414610d6e57fe5b600160a060020a03841660009081526005602052604090205483901015610d9457600080fd5b600160a060020a0384166000908152600560205260409020548381031115610dbb57600080fd5b600160a060020a038416600081815260056020526040808220805487900390556004805487900390559091906000805160206115318339815191529086905190815260200160405180910390a3600191505b5b505b92915050565b60095460ff165b90565b6000610e2b33610988565b1515610e3657600080fd5b506009805460ff1916905560015b5b90565b600080610e55848461119f565b9050610e6084610efb565b15610ece5783600160a060020a0316637cf5d66f338560405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b1515610eb957600080fd5b6102c65a03f11515610eca57600080fd5b5050505b8091505b5092915050565b610ee233610988565b1515610eed57600080fd5b610984816111c6565b5b5b50565b600b54600160a060020a0382166000908152600a6020526040812054909190108015610a0c5750600160a060020a0382166000908152600a6020526040902054600b805490919081106109d757fe5b906000526020600020900160005b9054906101000a9004600160a060020a0316600160a060020a031682600160a060020a0316145b90505b919050565b600160a060020a038083166000908152600660209081526040808320938516835292905220545b92915050565b6008545b90565b6000610fc633610988565b1515610fd157600080fd5b506009805460ff19166001179081905560ff165b5b90565b600080610ff5836112c3565b151561100057600080fd5b61100983610efb565b1561086757600160a060020a0383166000908152600a6020526040902054600b805491935090600019810190811061103d57fe5b906000526020600020900160005b9054906101000a9004600160a060020a0316905080600b8381548110151561106f57fe5b906000526020600020900160005b8154600160a060020a039384166101009290920a918202918402191617905581166000908152600a60205260409020829055600b8054906108659060001983016114bb565b505b5b505050565b60006002366044146110d857fe5b600160a060020a03338116600081815260066020908152604080832094891680845294909152908190208690557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259086905190815260200160405180910390a3600191505b5b5092915050565b60095460009060ff161561115857600080fd5b6111638484846112f2565b90505b5b9392505050565b600030600160a060020a031682600160a060020a031614158015610a0c5750610a0c33610988565b5b90505b919050565b60095460009060ff16156111b257600080fd5b6107838383611400565b90505b5b92915050565b806000600160a060020a0382166370a0823130836040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561121f57600080fd5b6102c65a03f1151561123057600080fd5b505050604051805191505060008111156108675781600160a060020a031663a9059cbb338360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156112a157600080fd5b6102c65a03f115156112b257600080fd5b505050604051805150505b5b505050565b600081600160a060020a031633600160a060020a03161480610a0c5750610a0c33610988565b5b90505b919050565b600060033660641461130057fe5b600160a060020a0385166000908152600560205260409020548390101561132657600080fd5b600160a060020a038416600090815260056020526040902054838101101561134d57600080fd5b600160a060020a038086166000908152600660209081526040808320339094168352929052205483111561138057600080fd5b600160a060020a03808516600081815260056020908152604080832080548901905589851680845281842080548a90039055600683528184203390961684529490915290819020805487900390559091906000805160206115318339815191529086905190815260200160405180910390a3600191505b5b509392505050565b600060023660441461140e57fe5b600160a060020a0333166000908152600560205260409020548390101561143457600080fd5b600160a060020a038416600090815260056020526040902054838101101561145b57600080fd5b600160a060020a033381166000818152600560205260408082208054889003905592871680825290839020805487019055916000805160206115318339815191529086905190815260200160405180910390a3600191505b5b5092915050565b8154818355818115116108675760008381526020902061086791810190830161150f565b5b505050565b8154818355818115116108675760008381526020902061086791810190830161150f565b5b505050565b61087291905b808211156115295760008155600101611515565b5090565b905600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820f4eaf92fef7f85cf1438f99dec86eb30aa386ce90573bb7e85b4231fa4dd4d3f0029"}