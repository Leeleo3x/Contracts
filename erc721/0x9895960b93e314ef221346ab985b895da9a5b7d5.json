{"Runs": "200", "SwarmSource": "bzzr://2a8cbe845f838b767bef61fa7596a5dd7eb0d4e4118bd09d582eae20eda2dba5", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"createdBy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_approved\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"clearCreator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"InterfaceId_ERC165\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_approved\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_creator\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfCreatorByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"createdAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"InterfaceId_ERC721Enumerable\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"InterfaceId_ERC721TokenReceiver\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"balanceOfCreator\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"InterfaceId_ERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_creator\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerAndCreatorByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"inscription\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"balanceOfOwnerAndCreator\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"InterfaceId_ERC721Metadata\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"msgHash\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"recover\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_inscription\",\"type\":\"uint256\"},{\"name\":\"_isSetCreator\",\"type\":\"bool\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"amountOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_inscription\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"CreatedBy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ClearCreator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ApprovalWithAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TransferWithAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.24+commit.e67f0147", "ConstructorArguments": "", "SourceCode": "pragma solidity ^0.4.23;\r\n\r\n/// @title ERC165\r\n/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\ninterface ERC165Interface {\r\n  /// @notice Query if a contract implements an interface\r\n  /// @param interfaceID The interface identifier, as specified in ERC-165\r\n  /// @dev Interface identification is specified in ERC-165. This function\r\n  ///  uses less than 30,000 gas.\r\n  /// @return `true` if the contract implements `interfaceID` and\r\n  ///  `interfaceID` is not 0xffffffff, `false` otherwise\r\n  function supportsInterface(bytes4 interfaceID) external view returns (bool);\r\n}\r\n\r\ncontract ERC165 is ERC165Interface {\r\n  // 0x01ffc9a7 ===\r\n  // bytes4(keccak256('supportsInterface(bytes4)'))\r\n  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\r\n}\r\n\r\n/// @title ERC-721 Non-Fungible Token Standard\r\n/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n///  Note: the ERC-165 identifier for this interface is 0x80ac58cd\r\ninterface ERC721Interface /* is ERC165 */ {\r\n  /// @dev This emits when ownership of any NFT changes by any mechanism.\r\n  ///  This event emits when NFTs are created (`from` == 0) and destroyed\r\n  ///  (`to` == 0). Exception: during contract creation, any number of NFTs\r\n  ///  may be created and assigned without emitting Transfer. At the time of\r\n  ///  any transfer, the approved address for that NFT (if any) is reset to none.\r\n  event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\r\n\r\n  /// @dev This emits when the approved address for an NFT is changed or\r\n  ///  reaffirmed. The zero address indicates there is no approved address.\r\n  ///  When a Transfer event emits, this also indicates that the approved\r\n  ///  address for that NFT (if any) is reset to none.\r\n  event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\r\n\r\n  /// @dev This emits when an operator is enabled or disabled for an owner.\r\n  ///  The operator can manage all NFTs of the owner.\r\n  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n  /// @notice Count all NFTs assigned to an owner\r\n  /// @dev NFTs assigned to the zero address are considered invalid, and this\r\n  ///  function throws for queries about the zero address.\r\n  /// @param _owner An address for whom to query the balance\r\n  /// @return The number of NFTs owned by `_owner`, possibly zero\r\n  function balanceOf(address _owner) external view returns (uint256);\r\n\r\n  /// @notice Find the owner of an NFT\r\n  /// @dev NFTs assigned to zero address are considered invalid, and queries\r\n  ///  about them do throw.\r\n  /// @param _tokenId The identifier for an NFT\r\n  /// @return The address of the owner of the NFT\r\n  function ownerOf(uint256 _tokenId) external view returns (address);\r\n\r\n  /// @notice Transfers the ownership of an NFT from one address to another address\r\n  /// @dev Throws unless `msg.sender` is the current owner, an authorized\r\n  ///  operator, or the approved address for this NFT. Throws if `_from` is\r\n  ///  not the current owner. Throws if `_to` is the zero address. Throws if\r\n  ///  `_tokenId` is not a valid NFT. When transfer is complete, this function\r\n  ///  checks if `_to` is a smart contract (code size > 0). If so, it calls\r\n  ///  `onERC721Received` on `_to` and throws if the return value is not\r\n  ///  `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.\r\n  /// @param _from The current owner of the NFT\r\n  /// @param _to The new owner\r\n  /// @param _tokenId The NFT to transfer\r\n  /// @param data Additional data with no specified format, sent in call to `_to`\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) external payable;\r\n\r\n  /// @notice Transfers the ownership of an NFT from one address to another address\r\n  /// @dev This works identically to the other function with an extra data parameter,\r\n  ///  except this function just sets data to \"\"\r\n  /// @param _from The current owner of the NFT\r\n  /// @param _to The new owner\r\n  /// @param _tokenId The NFT to transfer\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\r\n\r\n  /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\r\n  ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\r\n  ///  THEY MAY BE PERMANENTLY LOST\r\n  /// @dev Throws unless `msg.sender` is the current owner, an authorized\r\n  ///  operator, or the approved address for this NFT. Throws if `_from` is\r\n  ///  not the current owner. Throws if `_to` is the zero address. Throws if\r\n  ///  `_tokenId` is not a valid NFT.\r\n  /// @param _from The current owner of the NFT\r\n  /// @param _to The new owner\r\n  /// @param _tokenId The NFT to transfer\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\r\n\r\n  /// @notice Set or reaffirm the approved address for an NFT\r\n  /// @dev The zero address indicates there is no approved address.\r\n  /// @dev Throws unless `msg.sender` is the current NFT owner, or an authorized\r\n  ///  operator of the current owner.\r\n  /// @param _approved The new approved NFT controller\r\n  /// @param _tokenId The NFT to approve\r\n  function approve(address _approved, uint256 _tokenId) external payable;\r\n\r\n  /// @notice Enable or disable approval for a third party (\"operator\") to manage\r\n  ///  all of `msg.sender`'s assets.\r\n  /// @dev Emits the ApprovalForAll event. The contract MUST allow\r\n  ///  multiple operators per owner.\r\n  /// @param _operator Address to add to the set of authorized operators.\r\n  /// @param _approved True if the operator is approved, false to revoke approval\r\n  function setApprovalForAll(address _operator, bool _approved) external;\r\n\r\n  /// @notice Get the approved address for a single NFT\r\n  /// @dev Throws if `_tokenId` is not a valid NFT\r\n  /// @param _tokenId The NFT to find the approved address for\r\n  /// @return The approved address for this NFT, or the zero address if there is none\r\n  function getApproved(uint256 _tokenId) external view returns (address);\r\n\r\n  /// @notice Query if an address is an authorized operator for another address\r\n  /// @param _owner The address that owns the NFTs\r\n  /// @param _operator The address that acts on behalf of the owner\r\n  /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\r\n  function isApprovedForAll(address _owner, address _operator) external view returns (bool);\r\n}\r\n\r\ncontract ERC721 is ERC721Interface {\r\n  // 0x80ac58cd ===\r\n  // bytes4(keccak256('balanceOf(address)')) ^\r\n  // bytes4(keccak256('ownerOf(uint256)')) ^\r\n  // bytes4(keccak256('approve(address,uint256)')) ^\r\n  // bytes4(keccak256('getApproved(uint256)')) ^\r\n  // bytes4(keccak256('setApprovalForAll(address,bool)')) ^\r\n  // bytes4(keccak256('isApprovedForAll(address,address)')) ^\r\n  // bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n  // bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\r\n  // bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\r\n  bytes4 public constant InterfaceId_ERC721 = 0x80ac58cd;\r\n}\r\n\r\n/// @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n///  Note: the ERC-165 identifier for this interface is 0x780e9d63.\r\ninterface ERC721EnumerableInterface /* is ERC721 */ {\r\n  /// @notice Count NFTs tracked by this contract\r\n  /// @return A count of valid NFTs tracked by this contract, where each one of\r\n  ///  them has an assigned and queryable owner not equal to the zero address\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /// @notice Enumerate valid NFTs\r\n  /// @dev Throws if `_index` >= `totalSupply()`.\r\n  /// @param _index A counter less than `totalSupply()`\r\n  /// @return The token identifier for the `_index`th NFT,\r\n  ///  (sort order not specified)\r\n  function tokenByIndex(uint256 _index) external view returns (uint256);\r\n\r\n  /// @notice Enumerate NFTs assigned to an owner\r\n  /// @dev Throws if `_index` >= `balanceOf(_owner)` or if\r\n  ///  `_owner` is the zero address, representing invalid NFTs.\r\n  /// @param _owner An address where we are interested in NFTs owned by them\r\n  /// @param _index A counter less than `balanceOf(_owner)`\r\n  /// @return The token identifier for the `_index`th NFT assigned to `_owner`,\r\n  ///   (sort order not specified)\r\n  function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256);\r\n}\r\n\r\ncontract ERC721Enumerable is ERC721EnumerableInterface {\r\n  bytes4 public constant InterfaceId_ERC721Enumerable = 0x780e9d63;\r\n}\r\n\r\n/// @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n///  Note: the ERC-165 identifier for this interface is 0x5b5e139f.\r\ninterface ERC721MetadataInterface /* is ERC721 */ {\r\n  /// @notice A descriptive name for a collection of NFTs in this contract\r\n  function name() external view returns (string _name);\r\n\r\n  /// @notice An abbreviated name for NFTs in this contract\r\n  function symbol() external view returns (string _symbol);\r\n\r\n  /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\r\n  /// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\r\n  ///  3986. The URI may point to a JSON file that conforms to the \"ERC721\r\n  ///  Metadata JSON Schema\".\r\n  function tokenURI(uint256 _tokenId) external view returns (string);\r\n}\r\n\r\ncontract ERC721Metadata is ERC721MetadataInterface {\r\n  bytes4 public constant InterfaceId_ERC721Metadata = 0x5b5e139f;\r\n}\r\n\r\n/// @title ERC-721 Token Receiver\r\n/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n/// @dev Note: the ERC-165 identifier for this interface is 0x150b7a02.\r\ninterface ERC721TokenReceiverInterface {\r\n  /// @notice Handle the receipt of an NFT\r\n  /// @dev The ERC721 smart contract calls this function on the\r\n  /// recipient after a `transfer`. This function MAY throw to revert and reject the transfer. Return\r\n  /// of other than the magic value MUST result in the transaction being reverted.\r\n  /// @notice The contract address is always the message sender.\r\n  /// @param _operator The address which called `safeTransferFrom` function\r\n  /// @param _from The address which previously owned the token\r\n  /// @param _tokenId The NFT identifier which is being transferred\r\n  /// @param _data Additional data with no specified format\r\n  /// @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n  /// unless throwing\r\n  function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes _data) external returns(bytes4);\r\n}\r\n\r\ncontract ERC721TokenReceiver is ERC721TokenReceiverInterface {\r\n  bytes4 public constant InterfaceId_ERC721TokenReceiver = 0x150b7a02;\r\n}\r\n\r\ncontract SixPillars is ERC165, ERC721, ERC721Enumerable, ERC721Metadata, ERC721TokenReceiver {\r\n  /// This emits when minted new token.\r\n  event Mint(\r\n    address indexed _owner,\r\n    address indexed _creator,\r\n    uint256 _inscription,\r\n    uint256 _tokenId\r\n  );\r\n\r\n  /// This emits when burned any token.\r\n  event Burn(\r\n    address indexed _owner,\r\n    address indexed _creator,\r\n    uint256 _tokenId\r\n  );\r\n\r\n  /// This emits when set new creator of any token.\r\n  event CreatedBy(\r\n    address indexed _creator,\r\n    uint256 _tokenId\r\n  );\r\n\r\n  /// This emits when remove creator of any token.\r\n  event ClearCreator(\r\n    uint256 _tokenId\r\n  );\r\n\r\n  /// This emits when the approved amount for an NFT is changed or reaffirmed.\r\n  /// and it emits after `Approval` event.\r\n  event ApprovalWithAmount(\r\n    address indexed _owner,\r\n    address indexed _approved,\r\n    uint256 indexed _tokenId,\r\n    uint256 _amount\r\n  );\r\n\r\n  /// This emits when ownership of any token changes by used amount.\r\n  /// and it emits after `Transfer` event.\r\n  event TransferWithAmount(\r\n    address indexed _from,\r\n    address indexed _to,\r\n    uint256 indexed _tokenId,\r\n    uint256 _amount\r\n  );\r\n\r\n  struct Token {\r\n    uint256 id;\r\n    uint256 inscription;\r\n    uint256 amount;\r\n    uint256 ownerIndex; // ownerToTokensIndex[_owner][ownerIndex]\r\n    uint256 createdAt; // block number at created\r\n    address owner;\r\n    address creator;\r\n    address approved;\r\n    string uri;\r\n  }\r\n\r\n  Token[] internal tokens;\r\n  mapping(uint256 => uint256) internal tokenIdToIndex; // tokenId -> tokens index\r\n  uint256 internal tokenIdSeed;\r\n  uint256 internal lastMintBlockNumber;\r\n\r\n  mapping(address => uint256[]) internal ownerToTokensIndex; // owner address -> tokens index array\r\n  mapping(address => mapping(address => bool)) internal operatorApprovals; // approved address -> approve address flag mapping\r\n\r\n  mapping(bytes4 => bool) internal supportedInterfaces;\r\n\r\n  /**\r\n   * ERC165\r\n  ***/\r\n\r\n  // @override\r\n  function supportsInterface(bytes4 _interfaceId) external view returns (bool) {\r\n    return supportedInterfaces[_interfaceId];\r\n  }\r\n\r\n  function _registerInterface(bytes4 _interfaceId) internal {\r\n    require(_interfaceId != 0xffffffff);\r\n    supportedInterfaces[_interfaceId] = true;\r\n  }\r\n\r\n  /**\r\n   * ERC721Enumerable\r\n  ***/\r\n\r\n  // @override\r\n  function totalSupply() external view returns (uint256) {\r\n    return tokens.length;\r\n  }\r\n\r\n  // @override\r\n  function tokenByIndex(uint256 _index) external view returns (uint256) {\r\n    return tokenIdByIndex(_index);\r\n  }\r\n\r\n  // @override\r\n  function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\r\n    require(_index < ownerToTokensIndex[_owner].length);\r\n    uint256 index = ownerToTokensIndex[_owner][_index];\r\n    return tokens[index].id;\r\n  }\r\n\r\n  function tokenIdByIndex(uint256 _index) internal view returns (uint256) {\r\n    require(_index < tokens.length);\r\n    return tokens[_index].id;\r\n  }\r\n\r\n  function indexByTokenId(uint256 _tokenId) internal view returns (uint256) {\r\n    uint index = tokenIdToIndex[_tokenId];\r\n    require(index < tokens.length);\r\n    require(tokens[index].id == _tokenId);\r\n    return index;\r\n  }\r\n\r\n  /**\r\n   * ERC721Metadata\r\n  ***/\r\n\r\n  // @override\r\n  function name() public view returns (string) {\r\n    return \"SixPillars\";\r\n  }\r\n\r\n  // @override\r\n  function symbol() public view returns (string) {\r\n    return \"SPT\";\r\n  }\r\n\r\n  // @override\r\n  function tokenURI(uint256 _tokenId) external view returns (string) {\r\n    uint index = indexByTokenId(_tokenId);\r\n    return tokens[index].uri;\r\n  }\r\n\r\n  /**\r\n   * ERC721TokenReceiver\r\n  ***/\r\n\r\n  // @override\r\n  function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes _data) external returns(bytes4) {\r\n    return InterfaceId_ERC721TokenReceiver;\r\n  }\r\n\r\n  /**\r\n   * ERC721\r\n  ***/\r\n\r\n  // @override\r\n  function balanceOf(address _owner) external view returns (uint256) {\r\n    require(_owner != address(0));\r\n    return ownerToTokensIndex[_owner].length;\r\n  }\r\n\r\n  // @override\r\n  function ownerOf(uint256 _tokenId) external view returns (address) {\r\n    return internalOwnerOf(_tokenId);\r\n  }\r\n\r\n  // @override\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) external payable {\r\n    uint256 sendAmount = internalSafeTransferFrom(_from, _to, _tokenId, msg.value, _data);\r\n    if (0 < sendAmount) {\r\n      _from.transfer(sendAmount);\r\n      emit TransferWithAmount(_from, _to, _tokenId, sendAmount);\r\n    }\r\n  }\r\n\r\n  // @override\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable {\r\n    uint256 sendAmount = internalSafeTransferFrom(_from, _to, _tokenId, msg.value, \"\");\r\n    if (0 < sendAmount) {\r\n      _from.transfer(sendAmount);\r\n      emit TransferWithAmount(_from, _to, _tokenId, sendAmount);\r\n    }\r\n  }\r\n\r\n  // @override\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) external payable {\r\n    uint256 sendAmount = internalTransferFrom(_from, _to, _tokenId, msg.value);\r\n    if (0 < sendAmount) {\r\n      _from.transfer(sendAmount);\r\n      emit TransferWithAmount(_from, _to, _tokenId, sendAmount);\r\n    }\r\n  }\r\n\r\n  // @override\r\n  function approve(address _approved, uint256 _tokenId) external payable {\r\n    internalApprove(_approved, _tokenId, 0);\r\n  }\r\n\r\n  // @override\r\n  function setApprovalForAll(address _operator, bool _approved) external {\r\n    require(_operator != msg.sender);\r\n    operatorApprovals[msg.sender][_operator] = _approved;\r\n    emit ApprovalForAll(msg.sender, _operator, _approved);\r\n  }\r\n\r\n  // @override\r\n  function getApproved(uint256 _tokenId) external view returns (address) {\r\n    return internalGetApproved(_tokenId);\r\n  }\r\n\r\n  // @override\r\n  function isApprovedForAll(address _owner, address _operator) public view returns (bool) {\r\n    return internalIsApprovedForAll(_owner, _operator);\r\n  }\r\n\r\n  /**\r\n   * payment methods for ERC721\r\n  ***/\r\n\r\n  function approve(address _approved, uint256 _tokenId, uint256 _amount) external payable {\r\n    internalApprove(_approved, _tokenId, _amount);\r\n  }\r\n\r\n  function amountOf(uint256 _tokenId) external view returns (uint256) {\r\n    uint index = indexByTokenId(_tokenId);\r\n    return tokens[index].amount;\r\n  }\r\n\r\n  /**\r\n   * internal methods for ERC721 external methods\r\n  ***/\r\n\r\n  // @override\r\n  function internalOwnerOf(uint256 _tokenId) internal view returns (address) {\r\n    uint index = indexByTokenId(_tokenId);\r\n    return tokens[index].owner;\r\n  }\r\n\r\n  // @override\r\n  function internalSafeTransferFrom(address _from, address _to, uint256 _tokenId, uint256 _value, bytes _data) internal returns (uint256) {\r\n    if (isContract(_to)) {\r\n      bytes4 retval = ERC721TokenReceiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data);\r\n      require(retval == InterfaceId_ERC721TokenReceiver, \"internalSafeTransferFrom msg.sender can not approved\");\r\n    }\r\n    return internalTransferFrom(_from, _to, _tokenId, _value);\r\n  }\r\n\r\n  function internalTransferFrom(address _from, address _to, uint256 _tokenId, uint256 _value) internal returns (uint256 sendAmount) {\r\n    uint index = indexByTokenId(_tokenId);\r\n    address owner = tokens[index].owner;\r\n    require((_from == owner) && (_from != _to));\r\n\r\n    // can transfer, if meet one of the confitions\r\n    // 1. sender is owner.\r\n    // 2. sender is approved of owner's all token transfer to \"_to\" address.\r\n    // 3. if an approved address is set,\r\n    // 3-1. and amount is set, approved sender pay token amount to owner, transfer to \"_to\" address.\r\n    // 3-2. and amount is not set, sender is approved of token transfer to \"_to\" address.\r\n    // 4. if an approved address is not set, sender to pay token amount to owner.\r\n    uint256 amount = tokens[index].amount;\r\n    tokens[index].amount = 0;\r\n    bool canTransfer = (msg.sender == owner) || internalIsApprovedForAll(owner, msg.sender);\r\n    if (canTransfer) {\r\n      // owner and approved sender, not payable.\r\n      require(_value == 0);\r\n\r\n    } else if (tokens[index].approved == msg.sender) {\r\n      sendAmount = amount;\r\n      canTransfer = (amount == _value);\r\n\r\n    } else if ((tokens[index].approved == address(0)) && (0 < amount)) {\r\n      sendAmount = amount;\r\n      canTransfer = (amount == _value);\r\n    }\r\n    require(canTransfer);\r\n\r\n    // clear approved\r\n    tokens[index].approved = address(0);\r\n\r\n    // transfer\r\n    transferToken(_from, _to, _tokenId);\r\n    emit Transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  function internalGetApproved(uint256 _tokenId) internal view returns (address) {\r\n    uint index = indexByTokenId(_tokenId);\r\n    return tokens[index].approved;\r\n  }\r\n\r\n  function internalIsApprovedForAll(address _owner, address _operator) internal view returns (bool) {\r\n    return operatorApprovals[_owner][_operator];\r\n  }\r\n\r\n  function internalApprove(address _approved, uint256 _tokenId, uint256 _amount) internal {\r\n    uint index = indexByTokenId(_tokenId);\r\n    address owner = tokens[index].owner;\r\n    require(_approved != owner);\r\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n    tokens[index].approved = _approved;\r\n    tokens[index].amount = _amount;\r\n    emit Approval(owner, _approved, _tokenId);\r\n    if (0 < _amount) {\r\n      emit ApprovalWithAmount(owner, _approved, _tokenId, _amount);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * internal methods for ERC721\r\n  ***/\r\n\r\n  function addTokenTo(address _toOwner, uint256 _tokenId, uint256 _inscription, bool _isSetCreator) internal {\r\n    uint index = tokenIdToIndex[_tokenId];\r\n    require(_toOwner != address(0));\r\n    if ((index == 0) && (0 < tokens.length)) {\r\n      require(tokens[0].id != _tokenId);\r\n    }\r\n\r\n    index = tokens.length;\r\n\r\n    // add token to owner\r\n    uint256 ownerIndex = ownerToTokensIndex[_toOwner].length;\r\n    ownerToTokensIndex[_toOwner].push(index);\r\n\r\n    address creator = _isSetCreator ? msg.sender : address(0);\r\n    Token memory tokenWithCreator = Token(_tokenId, _inscription, 0, ownerIndex, block.number, _toOwner, creator, address(0), \"\");\r\n    tokens.push(tokenWithCreator);\r\n    tokenIdToIndex[_tokenId] = index;\r\n  }\r\n\r\n  function removeTokenFrom(address _fromOwner, uint256 _tokenId) internal {\r\n    uint index = indexByTokenId(_tokenId);\r\n    require(tokens[index].owner == _fromOwner);\r\n\r\n    // change removeToken index <--> lastToken index for owner\r\n    uint256 removeTokenIndex = tokens[index].ownerIndex;\r\n    uint256 lastTokenIndex = ownerToTokensIndex[_fromOwner].length - 1;\r\n    if (removeTokenIndex != lastTokenIndex) {\r\n      tokens[ownerToTokensIndex[_fromOwner][lastTokenIndex] ].ownerIndex = removeTokenIndex;\r\n      ownerToTokensIndex[_fromOwner][removeTokenIndex] = ownerToTokensIndex[_fromOwner][lastTokenIndex];\r\n    }\r\n    ownerToTokensIndex[_fromOwner].length = lastTokenIndex;\r\n\r\n    // change removeToken index <--> lastToken index for all\r\n    removeTokenIndex = index;\r\n    lastTokenIndex = tokens.length - 1;\r\n    if (removeTokenIndex != lastTokenIndex) {\r\n      uint256 lastTokenId = tokens[lastTokenIndex].id;\r\n\r\n      // owner to\r\n      address lastTokenOwner = tokens[lastTokenIndex].owner;\r\n      uint256 lastTokenOwnerIndex = tokens[lastTokenIndex].ownerIndex;\r\n      ownerToTokensIndex[lastTokenOwner][lastTokenOwnerIndex] = removeTokenIndex;\r\n\r\n      // all\r\n      tokenIdToIndex[lastTokenId] = removeTokenIndex;\r\n      tokens[removeTokenIndex] = tokens[lastTokenIndex];\r\n    }\r\n    tokenIdToIndex[_tokenId] = 0;\r\n    tokens.length = lastTokenIndex;\r\n  }\r\n\r\n  function transferToken(address _fromOwner, address _toOwner, uint256 _tokenId) internal {\r\n    uint index = indexByTokenId(_tokenId);\r\n    require((_toOwner != address(0)) && (_fromOwner != _toOwner) && (tokens[index].owner == _fromOwner));\r\n\r\n    // remove from old owner\r\n    uint256 removeTokenIndex = tokens[index].ownerIndex;\r\n    uint256 lastTokenIndex = ownerToTokensIndex[_fromOwner].length - 1;\r\n\r\n    tokens[ownerToTokensIndex[_fromOwner][lastTokenIndex] ].ownerIndex = removeTokenIndex;\r\n    ownerToTokensIndex[_fromOwner][removeTokenIndex] = ownerToTokensIndex[_fromOwner][lastTokenIndex];\r\n    ownerToTokensIndex[_fromOwner].length = lastTokenIndex;\r\n\r\n    // add to new owner\r\n    uint256 ownerIndex = ownerToTokensIndex[_toOwner].length;\r\n    ownerToTokensIndex[_toOwner].push(index);\r\n    tokens[index].owner = _toOwner;\r\n    tokens[index].ownerIndex = ownerIndex;\r\n  }\r\n\r\n  function isContract(address addr) internal view returns (bool) {\r\n    uint256 size;\r\n    assembly { size := extcodesize(addr) }\r\n    return size > 0;\r\n  }\r\n\r\n  /**\r\n   * SixPillars\r\n  ***/\r\n\r\n  constructor() public {\r\n    _registerInterface(InterfaceId_ERC165);\r\n    _registerInterface(InterfaceId_ERC721);\r\n    _registerInterface(InterfaceId_ERC721Enumerable);\r\n    _registerInterface(InterfaceId_ERC721Metadata);\r\n    _registerInterface(InterfaceId_ERC721TokenReceiver);\r\n    tokenIdSeed = 722;\r\n    lastMintBlockNumber = 0;\r\n  }\r\n\r\n  function recover(bytes32 msgHash, uint8 v, bytes32 r, bytes32 s) public pure returns (address) {\r\n    return ecrecover(msgHash, v, r, s);\r\n  }\r\n\r\n  /// Mint new token.\r\n  ///\r\n  /// emit Mint(owner, creator, inscription, tokenId)\r\n  /// Throw _to is not valid.\r\n  /// Throw new token id is already used. (please try again later)\r\n  /// @param _to Owner of new token.\r\n  /// @param _inscription immutable parameter for new token.\r\n  /// @param _isSetCreator if true, creator of new token is msg.sender. if false, creator is zero address.\r\n  function mint(address _to, uint256 _inscription, bool _isSetCreator) external {\r\n    uint256 seed = tokenIdSeed;\r\n    if ((lastMintBlockNumber != 0) && (lastMintBlockNumber < block.number)) {\r\n      seed += (block.number - lastMintBlockNumber);\r\n    }\r\n    uint256 newTokenId = uint256(keccak256(abi.encodePacked(seed)));\r\n    tokenIdSeed = newTokenId;\r\n    lastMintBlockNumber = block.number;\r\n    addTokenTo(_to, newTokenId, _inscription, _isSetCreator);\r\n    emit Mint(\r\n      _to,\r\n      (_isSetCreator == true) ? msg.sender : address(0),\r\n      _inscription,\r\n      newTokenId\r\n    );\r\n  }\r\n\r\n  /// Burn your token.\r\n  ///\r\n  /// emit Burn(owner, creator, tokenId)\r\n  /// Throw token owner is not msg.sender.\r\n  /// @param _tokenId id of the token you want to burned.\r\n  function burn(uint256 _tokenId) external {\r\n    uint index = indexByTokenId(_tokenId);\r\n    address owner = tokens[index].owner;\r\n    address creator = tokens[index].creator;\r\n    require(owner == msg.sender);\r\n    removeTokenFrom(owner, _tokenId);\r\n    emit Burn(\r\n      owner,\r\n      creator,\r\n      _tokenId\r\n    );\r\n  }\r\n\r\n  /// Add creator to the token\r\n  ///\r\n  /// msg.sender is new creator.\r\n  /// emit CreatedBy(creator, tokenId)\r\n  /// Throw token creator is already added.\r\n  /// @param _tokenId id of the token you want add creator.\r\n  function createdBy(uint256 _tokenId) external {\r\n    uint index = indexByTokenId(_tokenId);\r\n    address creator = tokens[index].creator;\r\n    require(creator == address(0));\r\n    tokens[index].creator = msg.sender;\r\n    emit CreatedBy(\r\n      msg.sender,\r\n      _tokenId\r\n    );\r\n  }\r\n\r\n  /// Remove creator to the token\r\n  ///\r\n  /// creator of the token will be zero address.\r\n  /// emit ClearCreator(tokenId)\r\n  /// Throw token creator is not msg.sender.\r\n  /// @param _tokenId id of the token you want remove creator.\r\n  function clearCreator(uint256 _tokenId) external {\r\n    uint index = indexByTokenId(_tokenId);\r\n    address creator = tokens[index].creator;\r\n    require(msg.sender == creator);\r\n    tokens[index].creator = address(0);\r\n    emit ClearCreator(_tokenId);\r\n  }\r\n\r\n  /// Get inscription of the token.\r\n  /// @param _tokenId id of the token you get it.\r\n  /// @return uint256 inscription of the token.\r\n  function inscription(uint256 _tokenId) external view returns(uint256) {\r\n    uint index = indexByTokenId(_tokenId);\r\n    return tokens[index].inscription;\r\n  }\r\n\r\n  /// Get creator of the token.\r\n  /// @param _tokenId id of the token you get it.\r\n  /// @return address creator of the token.\r\n  function creator(uint256 _tokenId) external view returns(address) {\r\n    uint index = indexByTokenId(_tokenId);\r\n    return tokens[index].creator;\r\n  }\r\n\r\n  /// Get block number of the token at created.\r\n  /// @param _tokenId id of the token you get it.\r\n  /// @return uint256 block number of the token at created.\r\n  function createdAt(uint256 _tokenId) external view returns(uint256) {\r\n    uint index = indexByTokenId(_tokenId);\r\n    return tokens[index].createdAt;\r\n  }\r\n\r\n  /// Set new url for your token.\r\n  ///\r\n  /// Throw token owner is not msg.sender.\r\n  /// @param _tokenId id of the token you set it.\r\n  /// @param _uri new uri.\r\n  function setTokenURI(uint256 _tokenId, string _uri) external {\r\n    uint index = indexByTokenId(_tokenId);\r\n    require(tokens[index].owner == msg.sender);\r\n    tokens[index].uri = _uri;\r\n  }\r\n\r\n  /// Token balance of creator.\r\n  ///\r\n  /// Throw creator is not valid.\r\n  /// @param _creator creator of the tokens.\r\n  /// @return uint256 balance.\r\n  function balanceOfCreator(address _creator) external view returns (uint256) {\r\n    require(_creator != address(0));\r\n    uint256 count = 0;\r\n    for (uint256 i = 0; i < tokens.length; i++) {\r\n      if (tokens[i].creator == _creator) {\r\n        count++;\r\n      }\r\n    }\r\n    return count;\r\n  }\r\n\r\n  /// Get token ID of the specified creator and index.\r\n  ///\r\n  /// Throw owner is not valid.\r\n  /// Throw overflow index.\r\n  /// @param _creator creator of the token.\r\n  /// @param _index index of the creator tokens.\r\n  /// @return uint256 token id.\r\n  function tokenOfCreatorByIndex(address _creator, uint256 _index) external view returns (uint256) {\r\n    require(_creator != address(0));\r\n    uint256 count = 0;\r\n    for (uint256 i = 0; i < tokens.length; i++) {\r\n      if (tokens[i].creator == _creator) {\r\n        if (count == _index) {\r\n          return tokens[i].id;\r\n        }\r\n        count++;\r\n      }\r\n    }\r\n    revert();\r\n  }\r\n\r\n  /// Token balance of owner and creator.\r\n  ///\r\n  /// Throw owner is not valid.\r\n  /// Throw creator is not valid.\r\n  /// @param _owner owner of the tokens.\r\n  /// @param _creator creator of the tokens.\r\n  /// @return uint256 balance of `token.owner == _owner` and `token.creator == _creator` tokens.\r\n  function balanceOfOwnerAndCreator(address _owner, address _creator) external view returns (uint256) {\r\n    require((_owner != address(0)) && (_creator != address(0)));\r\n    uint256 balance = 0;\r\n    for (uint256 i = 0; i < ownerToTokensIndex[_owner].length; i++) {\r\n      uint256 index = ownerToTokensIndex[_owner][i];\r\n      if (tokens[index].creator == _creator) {\r\n        balance++;\r\n      }\r\n    }\r\n    return balance;\r\n  }\r\n\r\n  /// Get token ID of the specified owner, creator, and index.\r\n  ///\r\n  /// Throw owner is not valid.\r\n  /// Throw creator is not valid.\r\n  /// Throw overflow index.\r\n  /// @param _owner owner of the token.\r\n  /// @param _creator creator of the token, you can use zero address.\r\n  /// @param _index index of the creator tokens.\r\n  /// @return uint256 token id.\r\n  function tokenOfOwnerAndCreatorByIndex(address _owner, address _creator, uint256 _index) external view returns (uint256) {\r\n    require((_owner != address(0)) && (_creator != address(0)));\r\n    uint256 count = 0;\r\n    for (uint256 i = 0; i < ownerToTokensIndex[_owner].length; i++) {\r\n      uint256 index = ownerToTokensIndex[_owner][i];\r\n      if (tokens[index].creator == _creator) {\r\n        if (count == _index) {\r\n          return tokens[index].id;\r\n        }\r\n        count++;\r\n      }\r\n    }\r\n    revert();\r\n  }\r\n}", "OptimizationUsed": "0", "ContractName": "SixPillars", "ByteCode": "0x6080604052600436106101cc576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680621baa89146101d157806301ffc9a7146101fe57806306fdde0314610262578063081812fc146102f2578063095ea7b31461035f578063150b7a021461039f57806315105fa814610476578063162094c4146104a357806318160ddd146104e857806319fa8f501461051357806323b872dd1461057c5780632f745c59146105dc578063426a84931461063d57806342842e0e1461068757806342966c68146106e75780634f6ccce7146107145780634fc092751461075557806350a1676e146107b6578063510b5158146107f757806363365651146108645780636352211e146108cd57806363895eb41461093a57806370a08231146109a357806379d28ac9146109fa578063819ee03a14610a5157806383f5a47e14610aba57806395d89b4114610b3b578063968c15de14610bcb578063a1ac8c5614610c0c578063a22cb46514610c83578063b88d4fde14610cd2578063bd12a00714610d4a578063c2bf17b014610db3578063c87b56dd14610e4d578063d1a1beb414610ef3578063e8eb228414610f4c578063e985e9c514610f8d575b600080fd5b3480156101dd57600080fd5b506101fc60048036038101908080359060200190929190505050611008565b005b34801561020a57600080fd5b5061024860048036038101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050611146565b604051808215151515815260200191505060405180910390f35b34801561026e57600080fd5b506102776111ae565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102b757808201518184015260208101905061029c565b50505050905090810190601f1680156102e45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102fe57600080fd5b5061031d600480360381019080803590602001909291905050506111eb565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61039d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506111fd565b005b3480156103ab57600080fd5b50610422600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190820180359060200191909192939192939050505061120d565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b34801561048257600080fd5b506104a16004803603810190808035906020019092919050505061123e565b005b3480156104af57600080fd5b506104e660048036038101908080359060200190929190803590602001908201803590602001919091929391929390505050611364565b005b3480156104f457600080fd5b506104fd611421565b6040518082815260200191505060405180910390f35b34801561051f57600080fd5b5061052861142d565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b6105da600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611454565b005b3480156105e857600080fd5b50610627600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611521565b6040518082815260200191505060405180910390f35b610685600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291905050506115f7565b005b6106e5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611607565b005b3480156106f357600080fd5b50610712600480360381019080803590602001909291905050506116e5565b005b34801561072057600080fd5b5061073f6004803603810190808035906020019092919050505061182a565b6040518082815260200191505060405180910390f35b34801561076157600080fd5b506107a0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061183c565b6040518082815260200191505060405180910390f35b3480156107c257600080fd5b506107e160048036038101908080359060200190929190505050611959565b6040518082815260200191505060405180910390f35b34801561080357600080fd5b5061082260048036038101908080359060200190929190505050611990565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561087057600080fd5b506108796119e7565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b3480156108d957600080fd5b506108f860048036038101908080359060200190929190505050611a0e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561094657600080fd5b5061094f611a20565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b3480156109af57600080fd5b506109e4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611a47565b6040518082815260200191505060405180910390f35b348015610a0657600080fd5b50610a3b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611ace565b6040518082815260200191505060405180910390f35b348015610a5d57600080fd5b50610a66611bb8565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b348015610ac657600080fd5b50610b25600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611bdf565b6040518082815260200191505060405180910390f35b348015610b4757600080fd5b50610b50611dcf565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610b90578082015181840152602081019050610b75565b50505050905090810190601f168015610bbd5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610bd757600080fd5b50610bf660048036038101908080359060200190929190505050611e0c565b6040518082815260200191505060405180910390f35b348015610c1857600080fd5b50610c6d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611e43565b6040518082815260200191505060405180910390f35b348015610c8f57600080fd5b50610cd0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050612000565b005b610d48600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190820180359060200191909192939192939050505061213c565b005b348015610d5657600080fd5b50610d5f61223e565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b348015610dbf57600080fd5b50610e0b6004803603810190808035600019169060200190929190803560ff16906020019092919080356000191690602001909291908035600019169060200190929190505050612265565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610e5957600080fd5b50610e78600480360381019080803590602001909291905050506122f2565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610eb8578082015181840152602081019050610e9d565b50505050905090810190601f168015610ee55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610eff57600080fd5b50610f4a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035151590602001909291905050506123c2565b005b348015610f5857600080fd5b50610f7760048036038101908080359060200190929190505050612517565b6040518082815260200191505060405180910390f35b348015610f9957600080fd5b50610fee600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061254e565b604051808215151515815260200191505060405180910390f35b60008061101483612562565b915060008281548110151561102557fe5b906000526020600020906009020160060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151561109457600080fd5b336000838154811015156110a457fe5b906000526020600020906009020160060160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167fff8bb7fb3f9399329e771a899663512e27f6a61ace14f788a702c0f01fbc7f8b846040518082815260200191505060405180910390a2505050565b600060066000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b60606040805190810160405280600a81526020017f53697850696c6c61727300000000000000000000000000000000000000000000815250905090565b60006111f6826125c5565b9050919050565b6112098282600061261c565b5050565b600063150b7a027c010000000000000000000000000000000000000000000000000000000002905095945050505050565b60008061124a83612562565b915060008281548110151561125b57fe5b906000526020600020906009020160060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112c957600080fd5b600080838154811015156112d957fe5b906000526020600020906009020160060160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f7bd093fff706c1478043eb8d9c9a16c5899318ad9a74bacb13514b8d488c31db836040518082815260200191505060405180910390a1505050565b600061136f84612562565b90503373ffffffffffffffffffffffffffffffffffffffff1660008281548110151561139757fe5b906000526020600020906009020160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156113eb57600080fd5b82826000838154811015156113fc57fe5b9060005260206000209060090201600801919061141a929190613ca7565b5050505050565b60008080549050905090565b6301ffc9a77c01000000000000000000000000000000000000000000000000000000000281565b600061146284848434612849565b9050806000101561151b578373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156114b3573d6000803e3d6000fd5b50818373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f78cfbf59ac826b3433da5294c46a9dbb9d8dd1991f51e84bfbcb7cf4df4edaab846040518082815260200191505060405180910390a45b50505050565b600080600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490508310151561157457600080fd5b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020838154811015156115c057fe5b906000526020600020015490506000818154811015156115dc57fe5b90600052602060002090600902016000015491505092915050565b61160283838361261c565b505050565b6000611626848484346020604051908101604052806000815250612b9f565b905080600010156116df578373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611677573d6000803e3d6000fd5b50818373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f78cfbf59ac826b3433da5294c46a9dbb9d8dd1991f51e84bfbcb7cf4df4edaab846040518082815260200191505060405180910390a45b50505050565b60008060006116f384612562565b925060008381548110151561170457fe5b906000526020600020906009020160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915060008381548110151561174757fe5b906000526020600020906009020160060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690503373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415156117b557600080fd5b6117bf8285612e48565b8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fbac40739b0d4ca32fa2d82fc91630465ba3eddd1598da6fca393b26fb63b9453866040518082815260200191505060405180910390a350505050565b6000611835826133d5565b9050919050565b60008060008073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415151561187c57600080fd5b60009150600090505b60008054905081101561194c578473ffffffffffffffffffffffffffffffffffffffff166000828154811015156118b857fe5b906000526020600020906009020160060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561193f57838214156119365760008181548110151561191d57fe5b9060005260206000209060090201600001549250611951565b81806001019250505b8080600101915050611885565b600080fd5b505092915050565b60008061196583612562565b905060008181548110151561197657fe5b906000526020600020906009020160040154915050919050565b60008061199c83612562565b90506000818154811015156119ad57fe5b906000526020600020906009020160060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915050919050565b63780e9d637c01000000000000000000000000000000000000000000000000000000000281565b6000611a1982613411565b9050919050565b63150b7a027c01000000000000000000000000000000000000000000000000000000000281565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515611a8457600080fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b60008060008073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614151515611b0e57600080fd5b60009150600090505b600080549050811015611bae578373ffffffffffffffffffffffffffffffffffffffff16600082815481101515611b4a57fe5b906000526020600020906009020160060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611ba15781806001019250505b8080600101915050611b17565b8192505050919050565b6380ac58cd7c01000000000000000000000000000000000000000000000000000000000281565b600080600080600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614158015611c4f5750600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614155b1515611c5a57600080fd5b60009250600091505b600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050821015611dc057600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481101515611cf957fe5b906000526020600020015490508573ffffffffffffffffffffffffffffffffffffffff16600082815481101515611d2c57fe5b906000526020600020906009020160060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611db35784831415611daa57600081815481101515611d9157fe5b9060005260206000209060090201600001549350611dc5565b82806001019350505b8180600101925050611c63565b600080fd5b5050509392505050565b60606040805190810160405280600381526020017f5350540000000000000000000000000000000000000000000000000000000000815250905090565b600080611e1883612562565b9050600081815481101515611e2957fe5b906000526020600020906009020160010154915050919050565b600080600080600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614158015611eb35750600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614155b1515611ebe57600080fd5b60009250600091505b600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050821015611ff457600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481101515611f5d57fe5b906000526020600020015490508473ffffffffffffffffffffffffffffffffffffffff16600082815481101515611f9057fe5b906000526020600020906009020160060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611fe75782806001019350505b8180600101925050611ec7565b82935050505092915050565b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561203b57600080fd5b80600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051808215151515815260200191505060405180910390a35050565b600061217d8686863487878080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050612b9f565b90508060001015612236578573ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156121ce573d6000803e3d6000fd5b50838573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167f78cfbf59ac826b3433da5294c46a9dbb9d8dd1991f51e84bfbcb7cf4df4edaab846040518082815260200191505060405180910390a45b505050505050565b635b5e139f7c01000000000000000000000000000000000000000000000000000000000281565b6000600185858585604051600081526020016040526040518085600019166000191681526020018460ff1660ff1681526020018360001916600019168152602001826000191660001916815260200194505050505060206040516020810390808403906000865af11580156122de573d6000803e3d6000fd5b505050602060405103519050949350505050565b606060006122ff83612562565b905060008181548110151561231057fe5b90600052602060002090600902016008018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156123b55780601f1061238a576101008083540402835291602001916123b5565b820191906000526020600020905b81548152906001019060200180831161239857829003601f168201915b5050505050915050919050565b60008060025491506000600354141580156123de575043600354105b156123ed576003544303820191505b81604051602001808281526020019150506040516020818303038152906040526040518082805190602001908083835b602083101515612442578051825260208201915060208101905060208303925061241d565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600190049050806002819055504360038190555061248f85828686613468565b60011515831515146124a25760006124a4565b335b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f2f00e3cdd69a77be7ed215ec7b2a36784dd158f921fca79ac29deffa353fe6ee8684604051808381526020018281526020019250505060405180910390a35050505050565b60008061252383612562565b905060008181548110151561253457fe5b906000526020600020906009020160020154915050919050565b600061255a83836137e6565b905092915050565b600080600160008481526020019081526020016000205490506000805490508110151561258e57600080fd5b8260008281548110151561259e57fe5b9060005260206000209060090201600001541415156125bc57600080fd5b80915050919050565b6000806125d183612562565b90506000818154811015156125e257fe5b906000526020600020906009020160070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915050919050565b60008061262884612562565b915060008281548110151561263957fe5b906000526020600020906009020160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16141515156126a857600080fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806126e857506126e7813361254e565b5b15156126f357600080fd5b8460008381548110151561270357fe5b906000526020600020906009020160070160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260008381548110151561276257fe5b906000526020600020906009020160020181905550838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4826000101561284257838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f47acbf2e865dd3b62c6613c6db7412416e0943adb9af678f64ab3c3ff623a404866040518082815260200191505060405180910390a45b5050505050565b600080600080600061285a87612562565b935060008481548110151561286b57fe5b906000526020600020906009020160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1692508273ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff1614801561290657508773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff1614155b151561291157600080fd5b60008481548110151561292057fe5b90600052602060002090600902016002015491506000808581548110151561294457fe5b9060005260206000209060090201600201819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480612999575061299883336137e6565b5b905080156129b5576000861415156129b057600080fd5b612ac2565b3373ffffffffffffffffffffffffffffffffffffffff166000858154811015156129db57fe5b906000526020600020906009020160070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415612a36578194508582149050612ac1565b600073ffffffffffffffffffffffffffffffffffffffff16600085815481101515612a5d57fe5b906000526020600020906009020160070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148015612ab25750816000105b15612ac05781945085821490505b5b5b801515612ace57600080fd5b60008085815481101515612ade57fe5b906000526020600020906009020160070160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612b3889898961387a565b868873ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a450505050949350505050565b600080612bab86613c94565b15612e30578573ffffffffffffffffffffffffffffffffffffffff1663150b7a02338988876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015612ca5578082015181840152602081019050612c8a565b50505050905090810190601f168015612cd25780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015612cf457600080fd5b505af1158015612d08573d6000803e3d6000fd5b505050506040513d6020811015612d1e57600080fd5b8101908080519060200190929190505050905063150b7a027c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141515612e2f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260348152602001807f696e7465726e616c536166655472616e7366657246726f6d206d73672e73656e81526020017f6465722063616e206e6f7420617070726f76656400000000000000000000000081525060400191505060405180910390fd5b5b612e3c87878787612849565b91505095945050505050565b600080600080600080612e5a87612562565b95508773ffffffffffffffffffffffffffffffffffffffff16600087815481101515612e8257fe5b906000526020600020906009020160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515612ed657600080fd5b600086815481101515612ee557fe5b90600052602060002090600902016003015494506001600460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050039350838514151561307757846000600460008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002086815481101515612f9957fe5b9060005260206000200154815481101515612fb057fe5b906000526020600020906009020160030181905550600460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208481548110151561301157fe5b9060005260206000200154600460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208681548110151561306857fe5b90600052602060002001819055505b83600460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020816130c29190613d27565b50859450600160008054905003935083851415156133a3576000848154811015156130e957fe5b906000526020600020906009020160000154925060008481548110151561310c57fe5b906000526020600020906009020160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915060008481548110151561314f57fe5b906000526020600020906009020160030154905084600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811015156131b057fe5b90600052602060002001819055508460016000858152602001908152602001600020819055506000848154811015156131e557fe5b906000526020600020906009020160008681548110151561320257fe5b906000526020600020906009020160008201548160000155600182015481600101556002820154816002015560038201548160030155600482015481600401556005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506006820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160060160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506007820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160070160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506008820181600801908054600181600116156101000203166002900461339e929190613d53565b509050505b60006001600089815260200190815260200160002081905550836000816133ca9190613dda565b505050505050505050565b60008080549050821015156133e957600080fd5b6000828154811015156133f857fe5b9060005260206000209060090201600001549050919050565b60008061341d83612562565b905060008181548110151561342e57fe5b906000526020600020906009020160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915050919050565b6000806000613475613e0c565b60016000888152602001908152602001600020549350600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16141515156134c757600080fd5b6000841480156134dc57506000805490506000105b1561351157866000808154811015156134f157fe5b9060005260206000209060090201600001541415151561351057600080fd5b5b6000805490509350600460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509250600460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020849080600181540180825580915050906001820390600052602060002001600090919290919091505550846135d35760006135d5565b335b915061012060405190810160405280888152602001878152602001600081526020018481526020014381526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016020604051908101604052806000815250815250905060008190806001815401808255809150509060018203906000526020600020906009020160009091929091909150600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c08201518160060160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060e08201518160070160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506101008201518160080190805190602001906137c0929190613e9b565b505050508360016000898152602001908152602001600020819055505050505050505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60008060008061388985612562565b9350600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16141580156138f457508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614155b801561396b57508673ffffffffffffffffffffffffffffffffffffffff1660008581548110151561392157fe5b906000526020600020906009020160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b151561397657600080fd5b60008481548110151561398557fe5b90600052602060002090600902016003015492506001600460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050039150826000600460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002084815481101515613a3057fe5b9060005260206000200154815481101515613a4757fe5b906000526020600020906009020160030181905550600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481101515613aa857fe5b9060005260206000200154600460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002084815481101515613aff57fe5b906000526020600020018190555081600460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081613b589190613d27565b50600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002084908060018154018082558091505090600182039060005260206000200160009091929091909150555085600085815481101515613c1757fe5b906000526020600020906009020160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600085815481101515613c7657fe5b90600052602060002090600902016003018190555050505050505050565b600080823b905060008111915050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10613ce857803560ff1916838001178555613d16565b82800160010185558215613d16579182015b82811115613d15578235825591602001919060010190613cfa565b5b509050613d239190613f1b565b5090565b815481835581811115613d4e57818360005260206000209182019101613d4d9190613f1b565b5b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10613d8c5780548555613dc9565b82800160010185558215613dc957600052602060002091601f016020900482015b82811115613dc8578254825591600101919060010190613dad565b5b509050613dd69190613f1b565b5090565b815481835581811115613e0757600902816009028360005260206000209182019101613e069190613f40565b5b505050565b610120604051908101604052806000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10613edc57805160ff1916838001178555613f0a565b82800160010185558215613f0a579182015b82811115613f09578251825591602001919060010190613eee565b5b509050613f179190613f1b565b5090565b613f3d91905b80821115613f39576000816000905550600101613f21565b5090565b90565b61400991905b808211156140055760008082016000905560018201600090556002820160009055600382016000905560048201600090556005820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556006820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556007820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600882016000613ffc919061400c565b50600901613f46565b5090565b90565b50805460018160011615610100020316600290046000825580601f106140325750614051565b601f0160209004906000526020600020908101906140509190613f1b565b5b505600a165627a7a723058202a8cbe845f838b767bef61fa7596a5dd7eb0d4e4118bd09d582eae20eda2dba50029"}