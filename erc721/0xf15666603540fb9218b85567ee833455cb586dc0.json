{"Runs": "200", "SwarmSource": "bzzr://8727f604be4f2d14e86664a968d46b0a5d12befc9e422b6e2d4e906fec521cde", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"numberOfBasesSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"spawnNewZeroCard\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDutchAuctionToCraftAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cardIdToBidOn\",\"type\":\"uint256\"},{\"name\":\"cardIdToCraftWith\",\"type\":\"uint256\"}],\"name\":\"bidOnCraftAuction\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cardNumber\",\"type\":\"uint256\"}],\"name\":\"getActualPriceOfCardOnCraftAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_claimant\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"hasBeenApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"indexToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDutchAuctionToBuyAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dutchAuctionToBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cardId\",\"type\":\"uint256\"}],\"name\":\"cancelCraftingAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"masterAddress2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"numberOfAbilitiesSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cardNumber\",\"type\":\"uint256\"},{\"name\":\"startPrice\",\"type\":\"uint256\"},{\"name\":\"endPrice\",\"type\":\"uint256\"},{\"name\":\"_lentghOfTime\",\"type\":\"uint256\"}],\"name\":\"createDutchAuctionToBuy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cardNumber\",\"type\":\"uint256\"}],\"name\":\"isOnAuctionToBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"count\",\"type\":\"uint32\"},{\"name\":\"base\",\"type\":\"uint16\"},{\"name\":\"ability\",\"type\":\"uint16\"}],\"name\":\"createInitialCards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMaster\",\"type\":\"address\"}],\"name\":\"setMasterAddress2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cardNumber\",\"type\":\"uint256\"}],\"name\":\"getActualPriceOfCardOnBuyAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"masterAddress1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cardNumber\",\"type\":\"uint256\"}],\"name\":\"getCardBuyAuction\",\"outputs\":[{\"name\":\"startingPrice\",\"type\":\"uint256\"},{\"name\":\"endPrice\",\"type\":\"uint256\"},{\"name\":\"duration\",\"type\":\"uint256\"},{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"startedAt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getCard\",\"outputs\":[{\"name\":\"difficulty\",\"type\":\"uint256\"},{\"name\":\"canCraftAt\",\"type\":\"uint256\"},{\"name\":\"createdAt\",\"type\":\"uint256\"},{\"name\":\"craftedFromLeft\",\"type\":\"uint256\"},{\"name\":\"craftedFromRight\",\"type\":\"uint256\"},{\"name\":\"generation\",\"type\":\"uint256\"},{\"name\":\"runes\",\"type\":\"uint16[16]\"},{\"name\":\"powers\",\"type\":\"uint16[16]\"},{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crafting\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cardNumber\",\"type\":\"uint256\"}],\"name\":\"getCraftingAuction\",\"outputs\":[{\"name\":\"startingPrice\",\"type\":\"uint256\"},{\"name\":\"endPrice\",\"type\":\"uint256\"},{\"name\":\"duration\",\"type\":\"uint256\"},{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"startedAt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cardNumber\",\"type\":\"uint256\"}],\"name\":\"bidOnAuctionToBuy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMaster\",\"type\":\"address\"}],\"name\":\"setMasterAddress1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cardId\",\"type\":\"uint256\"},{\"name\":\"reciever\",\"type\":\"address\"}],\"name\":\"giftCard\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAbilities\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"indexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_craftedFromLeft\",\"type\":\"uint256\"},{\"name\":\"_craftedFromRight\",\"type\":\"uint256\"}],\"name\":\"craftTwoCards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cardNumber\",\"type\":\"uint256\"}],\"name\":\"isOnCraftingAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cardNumber\",\"type\":\"uint256\"},{\"name\":\"startPrice\",\"type\":\"uint256\"},{\"name\":\"endPrice\",\"type\":\"uint256\"},{\"name\":\"_lentghOfTime\",\"type\":\"uint256\"}],\"name\":\"startCraftingAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setCraftAuctionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setBuyAuctionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setCraftingAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cardId\",\"type\":\"uint256\"}],\"name\":\"cancelAuctionToBuy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dutchAuctionToCraft\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBases\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"master1\",\"type\":\"address\"},{\"name\":\"master2\",\"type\":\"address\"},{\"name\":\"withdrawAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cardNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"craftedFromLeft\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"craftedFromRight\",\"type\":\"uint256\"}],\"name\":\"CardCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"cardId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"reciever\",\"type\":\"address\"}],\"name\":\"Gift\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.20-nightly.2018.1.6+commit.2548228b", "ConstructorArguments": "000000000000000000000000e4d37c28cd205ca8e58a2608eed5cb531b924b080000000000000000000000008784efb95d7158a4e0a3a8bf34b5e6fa726b6672000000000000000000000000056d66d5d74507b9e43a563bcd8dc50c60122c90", "SourceCode": "pragma solidity ^0.4.19;\r\n\r\ncontract Card { \r\n\r\n    // the erc721 standard of an Ether Scrolls card\r\n    event Transfer(address indexed from, address indexed to, uint indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint indexed tokenId);\r\n    event CardCreated(address indexed owner, uint cardNumber, uint craftedFromLeft, uint craftedFromRight);\r\n    event Gift(uint cardId, address sender, address reciever);\r\n\r\n    address public masterAddress1;\r\n    address public masterAddress2;\r\n    address public withdrawAddress;\r\n\r\n    struct CardStructure {\r\n        uint16[16] runes;\r\n        uint16[16] powers;\r\n        uint64 createdAt;\r\n        uint64 canCraftAt;\r\n        uint32 craftedFromLeft;\r\n        uint32 craftedFromRight;\r\n        uint difficulty;\r\n        uint16 generation;\r\n    }\r\n\r\n    CardStructure[] allCards;\r\n\r\n    // erc721 used to id owner\r\n    mapping (uint => address) public indexToOwner; \r\n\r\n    // part of erc721. used for balanceOf\r\n    mapping (address => uint) ownershipCount;\r\n\r\n    // part of erc721 used for approval\r\n    mapping (uint => address) public indexToApproved;\r\n\r\n    function _transfer(address _from, address _to, uint _tokenId) internal {\r\n     \r\n        ownershipCount[_to]++;\r\n        indexToOwner[_tokenId] = _to;\r\n        // dont record any transfers from the contract itself\r\n        if (_from != address(this)) {\r\n            ownershipCount[_from]--;\r\n        }\r\n        Transfer(_from, _to, _tokenId);\r\n    }\r\n \r\n    modifier masterRestricted() {\r\n        require(msg.sender == masterAddress1 || msg.sender == masterAddress2);\r\n        _;\r\n    }\r\n\r\n   function getCard(uint _id) public view returns ( uint difficulty, uint canCraftAt, \r\n   uint createdAt, uint craftedFromLeft, uint craftedFromRight, uint generation, uint16[16] runes, uint16[16] powers,\r\n   address owner) {\r\n      CardStructure storage card = allCards[_id];\r\n      difficulty = uint(card.difficulty);\r\n      canCraftAt = uint(card.canCraftAt);\r\n      createdAt = uint(card.createdAt);\r\n      craftedFromLeft = uint(card.craftedFromLeft);\r\n      craftedFromRight = uint(card.craftedFromRight);\r\n      generation = uint(card.generation);\r\n      runes = card.runes;\r\n      powers = uint16[16](card.powers);\r\n      owner = address(indexToOwner[_id]);\r\n    }\r\n\r\n    function _createCard(uint16[16] _runes, uint16[16] _powers, uint _craftedFromLeft, uint _craftedFromRight, uint _generation, \r\n    address _owner) internal returns (uint) {\r\n\r\n        CardStructure memory card = CardStructure({\r\n            runes: uint16[16](_runes),\r\n            powers: uint16[16](_powers),\r\n            createdAt: uint64(now),\r\n            canCraftAt: 0,\r\n            craftedFromLeft: uint32(_craftedFromLeft),\r\n            craftedFromRight: uint32(_craftedFromRight),\r\n            difficulty: 0,\r\n            generation: uint16(_generation)\r\n        });\r\n        \r\n        uint cardNumber = allCards.push(card) - 1;\r\n\r\n        CardCreated(_owner, cardNumber, uint(card.craftedFromLeft), uint(card.craftedFromRight));\r\n        _transfer(this, _owner, cardNumber);\r\n        return cardNumber;\r\n    }\r\n\r\n    string public name = \"EtherScrolls\";\r\n    string public symbol = \"ES\";\r\n\r\n    function implementsERC721() public pure returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    function _owns(address _claimant, uint _tokenId) internal view returns (bool) {\r\n        return indexToOwner[_tokenId] == _claimant;\r\n    }\r\n\r\n    function hasBeenApproved(address _claimant, uint _tokenId) public view returns (bool) {\r\n        return indexToApproved[_tokenId] == _claimant;\r\n    }\r\n\r\n    function _approve(uint _tokenId, address _approved) internal {\r\n        indexToApproved[_tokenId] = _approved;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint count) {\r\n        return ownershipCount[_owner];\r\n    }\r\n\r\n    function transfer(address _to, uint _tokenId) public {\r\n        require(_owns(msg.sender, _tokenId));\r\n        require(_to != address(0));\r\n        _transfer(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    function approve(address _to, uint _tokenId) public {\r\n        require(_owns(msg.sender, _tokenId));\r\n        _approve(_tokenId, _to);\r\n        Approval(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _tokenId) public {\r\n        require(_owns(_from, _tokenId));    \r\n        require(hasBeenApproved(msg.sender, _tokenId));\r\n        _transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    function totalSupply() public view returns (uint) {\r\n        return allCards.length - 1;\r\n    }\r\n\r\n    function ownerOf(uint _tokenId) public view returns (address) {\r\n        address owner = indexToOwner[_tokenId];\r\n        require(owner != address(0));\r\n        return owner;\r\n    }\r\n}\r\n\r\ncontract CraftingInterface {\r\n    function craft(uint16[16] leftParentRunes, uint16[16] leftParentPowers, uint16[16] rightParentRunes, uint16[16] rightParentPowers) public view returns (uint16[16], uint16[16]);\r\n}\r\n\r\ncontract DutchAuctionInterface {\r\n    function DutchAuction(address etherScrollsAddressess, address _master1, address _master2) public;\r\n    function payMasters() external;\r\n    function isForAuction(uint card) public view returns (bool);\r\n    function getCurrentPrice(uint cardNumber) public view returns (uint);\r\n    function isValidAuction(uint card) public view returns (bool);\r\n    function getAuction(uint cardNumber) public view returns(uint startingPrice, uint endingPrice, uint duration, address seller,uint startedAt );\r\n    function getSellerOfToken(uint cardNumber) public view returns (address);\r\n}\r\n\r\ncontract DutchAuctionToBuyInterface is DutchAuctionInterface {\r\n    function DutchAuctionToBuy(address etherScrollsAddress, address master1, address master2) public;// DutchAuctionInterface(etherScrollsAddress, master1, master2);\r\n    function startAuction(uint cardNumber, uint startPrice, uint endPrice, uint duration, address seller) public;\r\n    function priceOfOfficalCardSold() public view returns (uint);\r\n    function bidFromEtherScrolls(uint cardNumber, address buyer) public payable;\r\n    function cancelBuyAuction(uint cardNumber, address requestor) public;\r\n}\r\n\r\ncontract DutchAuctionToCraftInterface is DutchAuctionInterface {\r\n    function DutchAuctionToCraft(address etherScrollsAddress, address master1, address master2) public;// DutchAuctionInterface(etherScrollsAddress, master1, master2);\r\n    function startAuction(uint cardNumber, uint startPrice, uint endPrice, uint duration, address seller) public;\r\n    function priceOfOfficalCardSold() public view returns (uint);\r\n    function placeBidFromEtherScrolls(uint _tokenId) public payable;\r\n    function cancelCraftAuction(uint cardNumber, address requestor) public;\r\n}\r\n\r\ncontract CardMarket is Card { \r\n\r\n    mapping (uint => uint) public numberOfBasesSold;\r\n    mapping (uint => uint) public numberOfAbilitiesSold;\r\n    uint16 lastAbilityToBeAddedToCirculation;\r\n    uint16 lastBaseToBeAddedToCirculation;\r\n    uint16[] arrayOfPossibleBases;\r\n    uint16[] arrayOfPossibleAbilities;\r\n    CraftingInterface public crafting;\r\n    uint maxRunes;\r\n    uint numberOfSpecialCardsCreated;\r\n     \r\n    DutchAuctionToBuyInterface public dutchAuctionToBuy;\r\n    DutchAuctionToCraftInterface public dutchAuctionToCraft;\r\n\r\n    function CardMarket(address master1, address master2, address inputWithdrawAddress) public {\r\n        \r\n        masterAddress1 = master1;\r\n        masterAddress2 = master2;\r\n        withdrawAddress = inputWithdrawAddress;\r\n\r\n        uint16[16] memory firstCard;\r\n\r\n        _createCard(firstCard, firstCard, 0, 0, 0, master1);\r\n\r\n        maxRunes = 300;\r\n\r\n        arrayOfPossibleBases = [uint16(0),uint16(1),uint16(2),uint16(3),uint16(4),uint16(5),\r\n        uint16(6),uint16(7),uint16(8),uint16(9),uint16(10),uint16(11),uint16(12),uint16(13),\r\n        uint16(14),uint16(15),uint16(16),uint16(17),uint16(18),uint16(19)];\r\n\r\n        lastBaseToBeAddedToCirculation = 19;\r\n\r\n        arrayOfPossibleAbilities = [uint16(0),uint16(1),uint16(2),uint16(3),uint16(4),uint16(5),\r\n        uint16(6),uint16(7),uint16(8),uint16(9),uint16(10),uint16(11),uint16(12),uint16(13),\r\n        uint16(14),uint16(15),uint16(16),uint16(17),uint16(18),uint16(19)];\r\n\r\n        lastAbilityToBeAddedToCirculation = 19;\r\n    }\r\n\r\n    function getBases() public view returns (uint16[]) {\r\n        return arrayOfPossibleBases;\r\n    }\r\n\r\n     function getAbilities() public view returns (uint16[]) {\r\n        return arrayOfPossibleAbilities;\r\n    }\r\n\r\n    // only a max of 250 Initial cards can ever be created\r\n    function createInitialCards(uint32 count, uint16 base, uint16 ability) public masterRestricted {\r\n\r\n        uint16[16] memory bases = [uint16(0), uint16(1), uint16(2), uint16(3), uint16(4), uint16(5),uint16(6), uint16(0),\r\n        uint16(1), uint16(2), uint16(3),uint16(4), uint16(5),uint16(6), base, ability];\r\n        uint16[16] memory powers = [uint16(35), uint16(20), uint16(10), uint16(5), uint16(5), uint16(5), uint16(1), uint16(35),\r\n        uint16(21), uint16(14), uint16(10),uint16(9), uint16(8), uint16(3), uint16(9), uint16(7)];\r\n      \r\n        for (uint i = 0; i < count; i++) {\r\n           \r\n            if (base == 0) {\r\n                bases[14] = uint16((uint(block.blockhash(block.number - i - 1)) % 20));\r\n                bases[15] = uint16((uint(block.blockhash(block.number - i - 2)) % 20));\r\n            }\r\n            powers[14] = uint16((uint(block.blockhash(block.number - i - 3)) % 9) + 1);\r\n            powers[15] = uint16((uint(block.blockhash(block.number - i - 4)) % 9) + 1);\r\n\r\n            if (numberOfSpecialCardsCreated < 250) {\r\n                _createCard(bases, powers, 0, 0, 0, msg.sender);\r\n                numberOfSpecialCardsCreated++;\r\n            }\r\n        }\r\n    }\r\n\r\n    function withdraw() public {\r\n        require(msg.sender == masterAddress1 || msg.sender == masterAddress2 || msg.sender == withdrawAddress);\r\n        dutchAuctionToBuy.payMasters();\r\n        dutchAuctionToCraft.payMasters();\r\n        uint halfOfFunds = this.balance / 2;\r\n        masterAddress1.transfer(halfOfFunds);\r\n        masterAddress2.transfer(halfOfFunds);\r\n    }   \r\n\r\n    function setBuyAuctionAddress(address _address) public masterRestricted {\r\n        dutchAuctionToBuy = DutchAuctionToBuyInterface(_address);\r\n    }\r\n\r\n    function setCraftAuctionAddress(address _address) public masterRestricted {\r\n        dutchAuctionToCraft = DutchAuctionToCraftInterface(_address);\r\n    }\r\n\r\n    function setMasterAddress1(address _newMaster) public {\r\n        require(msg.sender == masterAddress1);\r\n        masterAddress1 = _newMaster;\r\n    }\r\n\r\n    function setMasterAddress2(address _newMaster) public {\r\n        require(msg.sender == masterAddress2);\r\n        masterAddress2 = _newMaster;\r\n    }\r\n\r\n    function cancelAuctionToBuy(uint cardId) public {\r\n        dutchAuctionToBuy.cancelBuyAuction(cardId, msg.sender);\r\n    }\r\n\r\n    function cancelCraftingAuction(uint cardId) public {\r\n        dutchAuctionToCraft.cancelCraftAuction(cardId, msg.sender);\r\n    }\r\n\r\n    function createDutchAuctionToBuy(uint _cardNumber, uint startPrice, \r\n    uint endPrice, uint _lentghOfTime) public {\r\n        require(_lentghOfTime >= 10 minutes);\r\n        require(dutchAuctionToBuy.isForAuction(_cardNumber) == false);\r\n        require(dutchAuctionToCraft.isForAuction(_cardNumber) == false);\r\n        require(_owns(msg.sender, _cardNumber));\r\n        _approve(_cardNumber, dutchAuctionToBuy);\r\n        dutchAuctionToBuy.startAuction(_cardNumber, startPrice, endPrice, _lentghOfTime, msg.sender);\r\n    }\r\n\r\n    function startCraftingAuction(uint _cardNumber, uint startPrice, uint endPrice,\r\n    uint _lentghOfTime) public {\r\n        require(_lentghOfTime >= 1 minutes);\r\n        require(_owns(msg.sender, _cardNumber));\r\n        CardStructure storage card = allCards[_cardNumber];\r\n        require(card.canCraftAt <= now);\r\n        require(dutchAuctionToBuy.isForAuction(_cardNumber) == false);\r\n        require(dutchAuctionToCraft.isForAuction(_cardNumber) == false);\r\n        _approve(_cardNumber, dutchAuctionToCraft);\r\n        dutchAuctionToCraft.startAuction(_cardNumber, startPrice, endPrice, _lentghOfTime, msg.sender);\r\n    }\r\n\r\n      // craft two cards. you will get a new card. \r\n    function craftTwoCards(uint _craftedFromLeft, uint _craftedFromRight) public {\r\n        require(_owns(msg.sender, _craftedFromLeft));\r\n        require(_owns(msg.sender, _craftedFromRight));\r\n        // make sure that the card that will produce a new card is not up for auction\r\n        require((isOnAuctionToBuy(_craftedFromLeft) == false) && (isOnCraftingAuction(_craftedFromLeft) == false));\r\n        require(_craftedFromLeft != _craftedFromRight);\r\n        CardStructure storage leftCard = allCards[_craftedFromLeft];\r\n        CardStructure storage rightCard = allCards[_craftedFromRight];\r\n        require(leftCard.canCraftAt <= now);\r\n        require(rightCard.canCraftAt <= now);\r\n        spawnCard(_craftedFromLeft, _craftedFromRight);\r\n    }\r\n\r\n    function isOnCraftingAuction(uint cardNumber) public view returns (bool) {\r\n        return (dutchAuctionToCraft.isForAuction(cardNumber) && dutchAuctionToCraft.isValidAuction(cardNumber));\r\n    }\r\n\r\n    function isOnAuctionToBuy(uint cardNumber) public view returns (bool) {\r\n        return (dutchAuctionToBuy.isForAuction(cardNumber) && dutchAuctionToBuy.isValidAuction(cardNumber));\r\n    }\r\n\r\n    function getCardBuyAuction(uint cardNumber) public view returns( uint startingPrice, uint endPrice, uint duration, address seller,\r\n    uint startedAt ) {\r\n        return dutchAuctionToBuy.getAuction(cardNumber);\r\n    }\r\n\r\n    function getCraftingAuction(uint cardNumber) public view returns(uint startingPrice, uint endPrice, uint duration, address seller, \r\n    uint startedAt ) {\r\n        return dutchAuctionToCraft.getAuction(cardNumber);\r\n    }\r\n    \r\n    function getActualPriceOfCardOnBuyAuction (uint cardNumber) public view returns (uint) {\r\n        return dutchAuctionToBuy.getCurrentPrice(cardNumber);\r\n    }\r\n\r\n    function getActualPriceOfCardOnCraftAuction (uint cardNumber) public view returns (uint) {\r\n        return dutchAuctionToCraft.getCurrentPrice(cardNumber);\r\n    }\r\n\r\n    function setCraftingAddress(address _address) public masterRestricted {\r\n        CraftingInterface candidateContract = CraftingInterface(_address);\r\n        crafting = candidateContract;\r\n    }\r\n\r\n    function getDutchAuctionToCraftAddress() public view returns (address) {\r\n        return address(dutchAuctionToCraft);\r\n    }\r\n\r\n     function getDutchAuctionToBuyAddress() public view returns (address) {\r\n        return address(dutchAuctionToBuy);\r\n    }\r\n\r\n    function _startCraftRecovery(CardStructure storage card) internal {\r\n\r\n        uint base = card.generation + card.difficulty + 1;\r\n        if (base < 6) {\r\n            base = base * (1 minutes);\r\n        } else if ( base < 11) {\r\n            base = (base - 5) * (1 hours);\r\n        } else {\r\n            base = (base - 10) * (1 days);\r\n        }\r\n        base = base * 2;\r\n        \r\n        card.canCraftAt = uint64(now + base);\r\n\r\n        if (card.difficulty < 15) {\r\n            card.difficulty++;\r\n        }\r\n    }\r\n\r\n     function bidOnCraftAuction(uint cardIdToBidOn, uint cardIdToCraftWith) public payable {\r\n        require(_owns(msg.sender, cardIdToCraftWith));\r\n        CardStructure storage cardToBidOn = allCards[cardIdToBidOn];\r\n        CardStructure storage cardToCraftWith = allCards[cardIdToCraftWith];\r\n        require(cardToCraftWith.canCraftAt <= now);\r\n        require(cardToBidOn.canCraftAt <= now);\r\n        require(cardIdToBidOn != cardIdToCraftWith);\r\n        uint bidAmount = msg.value;\r\n        // the bid funciton ensures that the seller acutally owns the card being sold\r\n        dutchAuctionToCraft.placeBidFromEtherScrolls.value(bidAmount)(cardIdToBidOn);\r\n        spawnCard(cardIdToCraftWith, cardIdToBidOn);\r\n    }\r\n    \r\n    function spawnCard(uint _craftedFromLeft, uint _craftedFromRight) internal returns(uint) {\r\n        CardStructure storage leftCard = allCards[_craftedFromLeft];\r\n        CardStructure storage rightCard = allCards[_craftedFromRight];\r\n\r\n        _startCraftRecovery(rightCard);\r\n        _startCraftRecovery(leftCard);\r\n\r\n        uint16 parentGen = leftCard.generation;\r\n        if (rightCard.generation > leftCard.generation) {\r\n            parentGen = rightCard.generation;\r\n        }\r\n\r\n        parentGen += 1;\r\n        if (parentGen > 18) {\r\n            parentGen = 18;\r\n        }\r\n\r\n        uint16[16] memory runes;\r\n        uint16[16] memory powers;\r\n\r\n        (runes, powers) = crafting.craft(leftCard.runes, leftCard.powers, rightCard.runes, rightCard.powers);\r\n        address owner = indexToOwner[_craftedFromLeft];\r\n      \r\n        return _createCard(runes, powers, _craftedFromLeft, _craftedFromRight, parentGen, owner);\r\n    }\r\n\r\n    function() external payable {}\r\n\r\n    function bidOnAuctionToBuy(uint cardNumber) public payable {\r\n        address seller = dutchAuctionToBuy.getSellerOfToken(cardNumber);\r\n        // make sure that the seller still owns the card\r\n        uint bidAmount = msg.value;\r\n        dutchAuctionToBuy.bidFromEtherScrolls.value(bidAmount)(cardNumber, msg.sender);\r\n        // if a zero generation card was just bought\r\n        if (seller == address(this)) {\r\n            spawnNewZeroCardInternal();\r\n        }\r\n    }\r\n\r\n    // 250 is the max number of cards that the developers are allowed to print themselves\r\n    function spawnNewZeroCard() public masterRestricted {\r\n        if (numberOfSpecialCardsCreated < 250) {\r\n            spawnNewZeroCardInternal();\r\n            numberOfSpecialCardsCreated++;\r\n        }\r\n    }\r\n\r\n    function spawnNewZeroCardInternal() internal {\r\n\r\n        uint16[16] memory runes = generateRunes();\r\n        uint16 x = uint16(uint(block.blockhash(block.number - 1)) % 9) + 1;\r\n        uint16 y = uint16(uint(block.blockhash(block.number - 2)) % 9) + 1;\r\n    \r\n        uint16[16] memory powers = [uint16(25), uint16(10), uint16(5), uint16(0), uint16(0), uint16(0), uint16(0),\r\n                                uint16(25), uint16(10), uint16(5), uint16(0), uint16(0), uint16(0), uint16(0), x, y];\r\n        \r\n        uint cardNumber = _createCard(runes, powers, 0, 0, 0, address(this));\r\n\r\n        _approve(cardNumber, dutchAuctionToBuy);\r\n\r\n        uint price = dutchAuctionToBuy.priceOfOfficalCardSold() * 2;\r\n        // 11000000000000000 wei is .011 eth\r\n        if (price < 11000000000000000 ) {\r\n            price = 11000000000000000;\r\n        }\r\n\r\n        dutchAuctionToBuy.startAuction(cardNumber, price, 0, 2 days, address(this));\r\n\r\n    }\r\n\r\n    function giftCard(uint cardId, address reciever) public {\r\n        require((isOnAuctionToBuy(cardId) == false) && (isOnCraftingAuction(cardId) == false));\r\n        require(ownerOf(cardId) == msg.sender);\r\n        transfer(reciever, cardId);\r\n        Gift(cardId, msg.sender, reciever);\r\n    }\r\n\r\n    function generateRunes() internal returns (uint16[16]) {\r\n        \r\n        uint i = 1;\r\n        uint lastBaseIndex = arrayOfPossibleBases.length;\r\n        uint16 base1 = uint16(uint(block.blockhash(block.number - i)) % lastBaseIndex); \r\n        i++;\r\n        uint16 base2 = uint16(uint(block.blockhash(block.number - i)) % lastBaseIndex);\r\n        i++;\r\n        uint16 base3 = uint16(uint(block.blockhash(block.number - i)) % lastBaseIndex);\r\n        i++;\r\n        \r\n        // ensure that each rune is distinct\r\n        while (base1 == base2 || base2 == base3 || base3 == base1) {\r\n            base1 = uint16(uint(block.blockhash(block.number - i)) % lastBaseIndex);\r\n            i++;\r\n            base2 = uint16(uint(block.blockhash(block.number - i)) % lastBaseIndex);\r\n            i++;\r\n            base3 = uint16(uint(block.blockhash(block.number - i)) % lastBaseIndex);\r\n            i++;\r\n        }\r\n        \r\n        base1 = arrayOfPossibleBases[base1];\r\n        base2 = arrayOfPossibleBases[base2];\r\n        base3 = arrayOfPossibleBases[base3];\r\n\r\n        uint lastAbilityIndex = arrayOfPossibleAbilities.length;\r\n        uint16 ability1 = uint16(uint(block.blockhash(block.number - i)) % lastAbilityIndex);\r\n        i++;\r\n        uint16 ability2 = uint16(uint(block.blockhash(block.number - i)) % lastAbilityIndex);\r\n        i++;\r\n        uint16 ability3 = uint16(uint(block.blockhash(block.number - i)) % lastAbilityIndex);\r\n        i++;\r\n\r\n        // ensure that each rune is distinct\r\n        while (ability1 == ability2 || ability2 == ability3 || ability3 == ability1) {\r\n            ability1 = uint16(uint(block.blockhash(block.number - i)) % lastAbilityIndex);\r\n            i++;\r\n            ability2 = uint16(uint(block.blockhash(block.number - i)) % lastAbilityIndex);\r\n            i++;\r\n            ability3 = uint16(uint(block.blockhash(block.number - i)) % lastAbilityIndex);\r\n            i++;\r\n        }\r\n        \r\n        ability1 = arrayOfPossibleAbilities[ability1];\r\n        ability2 = arrayOfPossibleAbilities[ability2];\r\n        ability3 = arrayOfPossibleAbilities[ability3];\r\n\r\n        numberOfBasesSold[base1]++;\r\n        numberOfAbilitiesSold[ability1]++;\r\n\r\n        // if we have reached the max number of runes\r\n        if (numberOfBasesSold[base1] > maxRunes) {\r\n            // remove the rune from the list of possible runes\r\n            for (i = 0; i < arrayOfPossibleBases.length; i++ ) {\r\n                if (arrayOfPossibleBases[i] == base1) {\r\n                // add a new rune to the list\r\n                // we dont need a check here to see if lastBaseCardToBeAddedToCirculation overflows because\r\n                // the 50k max card limit will expire well before this limit is reached\r\n                lastBaseToBeAddedToCirculation++;\r\n                arrayOfPossibleBases[i] = lastBaseToBeAddedToCirculation;\r\n                break;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (numberOfAbilitiesSold[ability1] > maxRunes) {\r\n            // remove the rune from the list of possible runes\r\n            for (i = 0; i < arrayOfPossibleAbilities.length; i++) {\r\n                if (arrayOfPossibleAbilities[i] == ability1) {\r\n                // we dont need to check for overflow here because of the 300 rune limits\r\n                lastAbilityToBeAddedToCirculation++;\r\n                arrayOfPossibleAbilities[i] = lastAbilityToBeAddedToCirculation;\r\n                break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return [base1, base2, base3, uint16(0), uint16(0), uint16(0), uint16(0), \r\n                ability1, ability2, ability3, uint16(0), uint16(0), uint16(0), uint16(0),  base1, ability1];\r\n    }\r\n}\r\n\r\ncontract EtherScrolls is CardMarket {\r\n    \r\n    function EtherScrolls(address master1, address master2, address withdrawAddress) public CardMarket(master1, master2, withdrawAddress) {}\r\n\r\n}", "OptimizationUsed": "0", "ContractName": "EtherScrolls", "ByteCode": ""}