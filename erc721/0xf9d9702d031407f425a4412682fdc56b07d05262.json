{"Runs": "200", "SwarmSource": "bzzr://41f68c9f8ac3aca7749087e69ecac831dab821449d0e0dd73d0fbe55a6d62281", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getNextNode\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getPreviousNode\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_firstName\",\"type\":\"string\"},{\"name\":\"_lastName\",\"type\":\"string\"},{\"name\":\"_pattern\",\"type\":\"uint256\"},{\"name\":\"_icon\",\"type\":\"uint256\"}],\"name\":\"newToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_firstName\",\"type\":\"string\"},{\"name\":\"_lastName\",\"type\":\"string\"},{\"name\":\"_pattern\",\"type\":\"uint256\"},{\"name\":\"_icon\",\"type\":\"uint256\"}],\"name\":\"editToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"progressiveId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getWall\",\"outputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"firstName\",\"type\":\"string\"},{\"name\":\"lastName\",\"type\":\"string\"},{\"name\":\"pattern\",\"type\":\"uint256\"},{\"name\":\"icon\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.24+commit.e67f0147", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000b57616c6c4f66436861696e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003574f430000000000000000000000000000000000000000000000000000000000", "SourceCode": "pragma solidity ^0.4.24;\r\n\r\n// File: openzeppelin-solidity/contracts/access/Roles.sol\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n  struct Role {\r\n    mapping (address => bool) bearer;\r\n  }\r\n\r\n  /**\r\n   * @dev give an account access to this role\r\n   */\r\n  function add(Role storage role, address account) internal {\r\n    require(account != address(0));\r\n    require(!has(role, account));\r\n\r\n    role.bearer[account] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev remove an account's access to this role\r\n   */\r\n  function remove(Role storage role, address account) internal {\r\n    require(account != address(0));\r\n    require(has(role, account));\r\n\r\n    role.bearer[account] = false;\r\n  }\r\n\r\n  /**\r\n   * @dev check if an account has this role\r\n   * @return bool\r\n   */\r\n  function has(Role storage role, address account)\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    require(account != address(0));\r\n    return role.bearer[account];\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/roles/MinterRole.sol\r\n\r\ncontract MinterRole {\r\n  using Roles for Roles.Role;\r\n\r\n  event MinterAdded(address indexed account);\r\n  event MinterRemoved(address indexed account);\r\n\r\n  Roles.Role private minters;\r\n\r\n  constructor() internal {\r\n    _addMinter(msg.sender);\r\n  }\r\n\r\n  modifier onlyMinter() {\r\n    require(isMinter(msg.sender));\r\n    _;\r\n  }\r\n\r\n  function isMinter(address account) public view returns (bool) {\r\n    return minters.has(account);\r\n  }\r\n\r\n  function addMinter(address account) public onlyMinter {\r\n    _addMinter(account);\r\n  }\r\n\r\n  function renounceMinter() public {\r\n    _removeMinter(msg.sender);\r\n  }\r\n\r\n  function _addMinter(address account) internal {\r\n    minters.add(account);\r\n    emit MinterAdded(account);\r\n  }\r\n\r\n  function _removeMinter(address account) internal {\r\n    minters.remove(account);\r\n    emit MinterRemoved(account);\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/introspection/IERC165.sol\r\n\r\n/**\r\n * @title IERC165\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n */\r\ninterface IERC165 {\r\n\r\n  /**\r\n   * @notice Query if a contract implements an interface\r\n   * @param interfaceId The interface identifier, as specified in ERC-165\r\n   * @dev Interface identification is specified in ERC-165. This function\r\n   * uses less than 30,000 gas.\r\n   */\r\n  function supportsInterface(bytes4 interfaceId)\r\n    external\r\n    view\r\n    returns (bool);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/IERC721.sol\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic interface\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract IERC721 is IERC165 {\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 indexed tokenId\r\n  );\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed approved,\r\n    uint256 indexed tokenId\r\n  );\r\n  event ApprovalForAll(\r\n    address indexed owner,\r\n    address indexed operator,\r\n    bool approved\r\n  );\r\n\r\n  function balanceOf(address owner) public view returns (uint256 balance);\r\n  function ownerOf(uint256 tokenId) public view returns (address owner);\r\n\r\n  function approve(address to, uint256 tokenId) public;\r\n  function getApproved(uint256 tokenId)\r\n    public view returns (address operator);\r\n\r\n  function setApprovalForAll(address operator, bool _approved) public;\r\n  function isApprovedForAll(address owner, address operator)\r\n    public view returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 tokenId) public;\r\n  function safeTransferFrom(address from, address to, uint256 tokenId)\r\n    public;\r\n\r\n  function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId,\r\n    bytes data\r\n  )\r\n    public;\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/IERC721Receiver.sol\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ncontract IERC721Receiver {\r\n  /**\r\n   * @notice Handle the receipt of an NFT\r\n   * @dev The ERC721 smart contract calls this function on the recipient\r\n   * after a `safeTransfer`. This function MUST return the function selector,\r\n   * otherwise the caller will revert the transaction. The selector to be\r\n   * returned can be obtained as `this.onERC721Received.selector`. This\r\n   * function MAY throw to revert and reject the transfer.\r\n   * Note: the ERC721 contract address is always the message sender.\r\n   * @param operator The address which called `safeTransferFrom` function\r\n   * @param from The address which previously owned the token\r\n   * @param tokenId The NFT identifier which is being transferred\r\n   * @param data Additional data with no specified format\r\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n   */\r\n  function onERC721Received(\r\n    address operator,\r\n    address from,\r\n    uint256 tokenId,\r\n    bytes data\r\n  )\r\n    public\r\n    returns(bytes4);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/utils/Address.sol\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary Address {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   * as the code is not actually created until after the constructor finishes.\r\n   * @param account address of the account to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address account) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(account) }\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/introspection/ERC165.sol\r\n\r\n/**\r\n * @title ERC165\r\n * @author Matt Condon (@shrugs)\r\n * @dev Implements ERC165 using a lookup table.\r\n */\r\ncontract ERC165 is IERC165 {\r\n\r\n  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\r\n  /**\r\n   * 0x01ffc9a7 ===\r\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\r\n   */\r\n\r\n  /**\r\n   * @dev a mapping of interface id to whether or not it's supported\r\n   */\r\n  mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n  /**\r\n   * @dev A contract implementing SupportsInterfaceWithLookup\r\n   * implement ERC165 itself\r\n   */\r\n  constructor()\r\n    internal\r\n  {\r\n    _registerInterface(_InterfaceId_ERC165);\r\n  }\r\n\r\n  /**\r\n   * @dev implement supportsInterface(bytes4) using a lookup table\r\n   */\r\n  function supportsInterface(bytes4 interfaceId)\r\n    external\r\n    view\r\n    returns (bool)\r\n  {\r\n    return _supportedInterfaces[interfaceId];\r\n  }\r\n\r\n  /**\r\n   * @dev internal method for registering an interface\r\n   */\r\n  function _registerInterface(bytes4 interfaceId)\r\n    internal\r\n  {\r\n    require(interfaceId != 0xffffffff);\r\n    _supportedInterfaces[interfaceId] = true;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/ERC721.sol\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic implementation\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721 is ERC165, IERC721 {\r\n\r\n  using SafeMath for uint256;\r\n  using Address for address;\r\n\r\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n  // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\r\n  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\r\n\r\n  // Mapping from token ID to owner\r\n  mapping (uint256 => address) private _tokenOwner;\r\n\r\n  // Mapping from token ID to approved address\r\n  mapping (uint256 => address) private _tokenApprovals;\r\n\r\n  // Mapping from owner to number of owned token\r\n  mapping (address => uint256) private _ownedTokensCount;\r\n\r\n  // Mapping from owner to operator approvals\r\n  mapping (address => mapping (address => bool)) private _operatorApprovals;\r\n\r\n  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\r\n  /*\r\n   * 0x80ac58cd ===\r\n   *   bytes4(keccak256('balanceOf(address)')) ^\r\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\r\n   *   bytes4(keccak256('approve(address,uint256)')) ^\r\n   *   bytes4(keccak256('getApproved(uint256)')) ^\r\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\r\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\r\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\r\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\r\n   */\r\n\r\n  constructor()\r\n    public\r\n  {\r\n    // register the supported interfaces to conform to ERC721 via ERC165\r\n    _registerInterface(_InterfaceId_ERC721);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the balance of the specified address\r\n   * @param owner address to query the balance of\r\n   * @return uint256 representing the amount owned by the passed address\r\n   */\r\n  function balanceOf(address owner) public view returns (uint256) {\r\n    require(owner != address(0));\r\n    return _ownedTokensCount[owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the owner of the specified token ID\r\n   * @param tokenId uint256 ID of the token to query the owner of\r\n   * @return owner address currently marked as the owner of the given token ID\r\n   */\r\n  function ownerOf(uint256 tokenId) public view returns (address) {\r\n    address owner = _tokenOwner[tokenId];\r\n    require(owner != address(0));\r\n    return owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Approves another address to transfer the given token ID\r\n   * The zero address indicates there is no approved address.\r\n   * There can only be one approved address per token at a given time.\r\n   * Can only be called by the token owner or an approved operator.\r\n   * @param to address to be approved for the given token ID\r\n   * @param tokenId uint256 ID of the token to be approved\r\n   */\r\n  function approve(address to, uint256 tokenId) public {\r\n    address owner = ownerOf(tokenId);\r\n    require(to != owner);\r\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n    _tokenApprovals[tokenId] = to;\r\n    emit Approval(owner, to, tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the approved address for a token ID, or zero if no address set\r\n   * Reverts if the token ID does not exist.\r\n   * @param tokenId uint256 ID of the token to query the approval of\r\n   * @return address currently approved for the given token ID\r\n   */\r\n  function getApproved(uint256 tokenId) public view returns (address) {\r\n    require(_exists(tokenId));\r\n    return _tokenApprovals[tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Sets or unsets the approval of a given operator\r\n   * An operator is allowed to transfer all tokens of the sender on their behalf\r\n   * @param to operator address to set the approval\r\n   * @param approved representing the status of the approval to be set\r\n   */\r\n  function setApprovalForAll(address to, bool approved) public {\r\n    require(to != msg.sender);\r\n    _operatorApprovals[msg.sender][to] = approved;\r\n    emit ApprovalForAll(msg.sender, to, approved);\r\n  }\r\n\r\n  /**\r\n   * @dev Tells whether an operator is approved by a given owner\r\n   * @param owner owner address which you want to query the approval of\r\n   * @param operator operator address which you want to query the approval of\r\n   * @return bool whether the given operator is approved by the given owner\r\n   */\r\n  function isApprovedForAll(\r\n    address owner,\r\n    address operator\r\n  )\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return _operatorApprovals[owner][operator];\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers the ownership of a given token ID to another address\r\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param from current owner of the token\r\n   * @param to address to receive the ownership of the given token ID\r\n   * @param tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  )\r\n    public\r\n  {\r\n    require(_isApprovedOrOwner(msg.sender, tokenId));\r\n    require(to != address(0));\r\n\r\n    _clearApproval(from, tokenId);\r\n    _removeTokenFrom(from, tokenId);\r\n    _addTokenTo(to, tokenId);\r\n\r\n    emit Transfer(from, to, tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * If the target address is a contract, it must implement `onERC721Received`,\r\n   * which is called upon a safe transfer, and return the magic value\r\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n   * the transfer is reverted.\r\n   *\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param from current owner of the token\r\n   * @param to address to receive the ownership of the given token ID\r\n   * @param tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  )\r\n    public\r\n  {\r\n    // solium-disable-next-line arg-overflow\r\n    safeTransferFrom(from, to, tokenId, \"\");\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * If the target address is a contract, it must implement `onERC721Received`,\r\n   * which is called upon a safe transfer, and return the magic value\r\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n   * the transfer is reverted.\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param from current owner of the token\r\n   * @param to address to receive the ownership of the given token ID\r\n   * @param tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes data to send along with a safe transfer check\r\n   */\r\n  function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n  {\r\n    transferFrom(from, to, tokenId);\r\n    // solium-disable-next-line arg-overflow\r\n    require(_checkOnERC721Received(from, to, tokenId, _data));\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the specified token exists\r\n   * @param tokenId uint256 ID of the token to query the existence of\r\n   * @return whether the token exists\r\n   */\r\n  function _exists(uint256 tokenId) internal view returns (bool) {\r\n    address owner = _tokenOwner[tokenId];\r\n    return owner != address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the given spender can transfer a given token ID\r\n   * @param spender address of the spender to query\r\n   * @param tokenId uint256 ID of the token to be transferred\r\n   * @return bool whether the msg.sender is approved for the given token ID,\r\n   *  is an operator of the owner, or is the owner of the token\r\n   */\r\n  function _isApprovedOrOwner(\r\n    address spender,\r\n    uint256 tokenId\r\n  )\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    address owner = ownerOf(tokenId);\r\n    // Disable solium check because of\r\n    // https://github.com/duaraghav8/Solium/issues/175\r\n    // solium-disable-next-line operator-whitespace\r\n    return (\r\n      spender == owner ||\r\n      getApproved(tokenId) == spender ||\r\n      isApprovedForAll(owner, spender)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * Reverts if the given token ID already exists\r\n   * @param to The address that will own the minted token\r\n   * @param tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address to, uint256 tokenId) internal {\r\n    require(to != address(0));\r\n    _addTokenTo(to, tokenId);\r\n    emit Transfer(address(0), to, tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * Reverts if the token does not exist\r\n   * @param tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address owner, uint256 tokenId) internal {\r\n    _clearApproval(owner, tokenId);\r\n    _removeTokenFrom(owner, tokenId);\r\n    emit Transfer(owner, address(0), tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * Note that this function is left internal to make ERC721Enumerable possible, but is not\r\n   * intended to be called by custom derived contracts: in particular, it emits no Transfer event.\r\n   * @param to address representing the new owner of the given token ID\r\n   * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function _addTokenTo(address to, uint256 tokenId) internal {\r\n    require(_tokenOwner[tokenId] == address(0));\r\n    _tokenOwner[tokenId] = to;\r\n    _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * Note that this function is left internal to make ERC721Enumerable possible, but is not\r\n   * intended to be called by custom derived contracts: in particular, it emits no Transfer event,\r\n   * and doesn't clear approvals.\r\n   * @param from address representing the previous owner of the given token ID\r\n   * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function _removeTokenFrom(address from, uint256 tokenId) internal {\r\n    require(ownerOf(tokenId) == from);\r\n    _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\r\n    _tokenOwner[tokenId] = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to invoke `onERC721Received` on a target address\r\n   * The call is not executed if the target address is not a contract\r\n   * @param from address representing the previous owner of the given token ID\r\n   * @param to target address that will receive the tokens\r\n   * @param tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes optional data to send along with the call\r\n   * @return whether the call correctly returned the expected magic value\r\n   */\r\n  function _checkOnERC721Received(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId,\r\n    bytes _data\r\n  )\r\n    internal\r\n    returns (bool)\r\n  {\r\n    if (!to.isContract()) {\r\n      return true;\r\n    }\r\n    bytes4 retval = IERC721Receiver(to).onERC721Received(\r\n      msg.sender, from, tokenId, _data);\r\n    return (retval == _ERC721_RECEIVED);\r\n  }\r\n\r\n  /**\r\n   * @dev Private function to clear current approval of a given token ID\r\n   * Reverts if the given address is not indeed the owner of the token\r\n   * @param owner owner of the token\r\n   * @param tokenId uint256 ID of the token to be transferred\r\n   */\r\n  function _clearApproval(address owner, uint256 tokenId) private {\r\n    require(ownerOf(tokenId) == owner);\r\n    if (_tokenApprovals[tokenId] != address(0)) {\r\n      _tokenApprovals[tokenId] = address(0);\r\n    }\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/IERC721Enumerable.sol\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract IERC721Enumerable is IERC721 {\r\n  function totalSupply() public view returns (uint256);\r\n  function tokenOfOwnerByIndex(\r\n    address owner,\r\n    uint256 index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256 tokenId);\r\n\r\n  function tokenByIndex(uint256 index) public view returns (uint256);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/ERC721Enumerable.sol\r\n\r\ncontract ERC721Enumerable is ERC165, ERC721, IERC721Enumerable {\r\n  // Mapping from owner to list of owned token IDs\r\n  mapping(address => uint256[]) private _ownedTokens;\r\n\r\n  // Mapping from token ID to index of the owner tokens list\r\n  mapping(uint256 => uint256) private _ownedTokensIndex;\r\n\r\n  // Array with all token ids, used for enumeration\r\n  uint256[] private _allTokens;\r\n\r\n  // Mapping from token id to position in the allTokens array\r\n  mapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n  bytes4 private constant _InterfaceId_ERC721Enumerable = 0x780e9d63;\r\n  /**\r\n   * 0x780e9d63 ===\r\n   *   bytes4(keccak256('totalSupply()')) ^\r\n   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\r\n   *   bytes4(keccak256('tokenByIndex(uint256)'))\r\n   */\r\n\r\n  /**\r\n   * @dev Constructor function\r\n   */\r\n  constructor() public {\r\n    // register the supported interface to conform to ERC721 via ERC165\r\n    _registerInterface(_InterfaceId_ERC721Enumerable);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\r\n   * @param owner address owning the tokens list to be accessed\r\n   * @param index uint256 representing the index to be accessed of the requested tokens list\r\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\r\n   */\r\n  function tokenOfOwnerByIndex(\r\n    address owner,\r\n    uint256 index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    require(index < balanceOf(owner));\r\n    return _ownedTokens[owner][index];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the total amount of tokens stored by the contract\r\n   * @return uint256 representing the total amount of tokens\r\n   */\r\n  function totalSupply() public view returns (uint256) {\r\n    return _allTokens.length;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of all the tokens in this contract\r\n   * Reverts if the index is greater or equal to the total number of tokens\r\n   * @param index uint256 representing the index to be accessed of the tokens list\r\n   * @return uint256 token ID at the given index of the tokens list\r\n   */\r\n  function tokenByIndex(uint256 index) public view returns (uint256) {\r\n    require(index < totalSupply());\r\n    return _allTokens[index];\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * This function is internal due to language limitations, see the note in ERC721.sol.\r\n   * It is not intended to be called by custom derived contracts: in particular, it emits no Transfer event.\r\n   * @param to address representing the new owner of the given token ID\r\n   * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function _addTokenTo(address to, uint256 tokenId) internal {\r\n    super._addTokenTo(to, tokenId);\r\n    uint256 length = _ownedTokens[to].length;\r\n    _ownedTokens[to].push(tokenId);\r\n    _ownedTokensIndex[tokenId] = length;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * This function is internal due to language limitations, see the note in ERC721.sol.\r\n   * It is not intended to be called by custom derived contracts: in particular, it emits no Transfer event,\r\n   * and doesn't clear approvals.\r\n   * @param from address representing the previous owner of the given token ID\r\n   * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function _removeTokenFrom(address from, uint256 tokenId) internal {\r\n    super._removeTokenFrom(from, tokenId);\r\n\r\n    // To prevent a gap in the array, we store the last token in the index of the token to delete, and\r\n    // then delete the last slot.\r\n    uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n    uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\r\n    uint256 lastToken = _ownedTokens[from][lastTokenIndex];\r\n\r\n    _ownedTokens[from][tokenIndex] = lastToken;\r\n    // This also deletes the contents at the last position of the array\r\n    _ownedTokens[from].length--;\r\n\r\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\r\n    // be zero. Then we can make sure that we will remove tokenId from the ownedTokens list since we are first swapping\r\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\r\n\r\n    _ownedTokensIndex[tokenId] = 0;\r\n    _ownedTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * Reverts if the given token ID already exists\r\n   * @param to address the beneficiary that will own the minted token\r\n   * @param tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address to, uint256 tokenId) internal {\r\n    super._mint(to, tokenId);\r\n\r\n    _allTokensIndex[tokenId] = _allTokens.length;\r\n    _allTokens.push(tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * Reverts if the token does not exist\r\n   * @param owner owner of the token to burn\r\n   * @param tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address owner, uint256 tokenId) internal {\r\n    super._burn(owner, tokenId);\r\n\r\n    // Reorg all tokens array\r\n    uint256 tokenIndex = _allTokensIndex[tokenId];\r\n    uint256 lastTokenIndex = _allTokens.length.sub(1);\r\n    uint256 lastToken = _allTokens[lastTokenIndex];\r\n\r\n    _allTokens[tokenIndex] = lastToken;\r\n    _allTokens[lastTokenIndex] = 0;\r\n\r\n    _allTokens.length--;\r\n    _allTokensIndex[tokenId] = 0;\r\n    _allTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/IERC721Metadata.sol\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract IERC721Metadata is IERC721 {\r\n  function name() external view returns (string);\r\n  function symbol() external view returns (string);\r\n  function tokenURI(uint256 tokenId) external view returns (string);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/ERC721Metadata.sol\r\n\r\ncontract ERC721Metadata is ERC165, ERC721, IERC721Metadata {\r\n  // Token name\r\n  string private _name;\r\n\r\n  // Token symbol\r\n  string private _symbol;\r\n\r\n  // Optional mapping for token URIs\r\n  mapping(uint256 => string) private _tokenURIs;\r\n\r\n  bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\r\n  /**\r\n   * 0x5b5e139f ===\r\n   *   bytes4(keccak256('name()')) ^\r\n   *   bytes4(keccak256('symbol()')) ^\r\n   *   bytes4(keccak256('tokenURI(uint256)'))\r\n   */\r\n\r\n  /**\r\n   * @dev Constructor function\r\n   */\r\n  constructor(string name, string symbol) public {\r\n    _name = name;\r\n    _symbol = symbol;\r\n\r\n    // register the supported interfaces to conform to ERC721 via ERC165\r\n    _registerInterface(InterfaceId_ERC721Metadata);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token name\r\n   * @return string representing the token name\r\n   */\r\n  function name() external view returns (string) {\r\n    return _name;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token symbol\r\n   * @return string representing the token symbol\r\n   */\r\n  function symbol() external view returns (string) {\r\n    return _symbol;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns an URI for a given token ID\r\n   * Throws if the token ID does not exist. May return an empty string.\r\n   * @param tokenId uint256 ID of the token to query\r\n   */\r\n  function tokenURI(uint256 tokenId) external view returns (string) {\r\n    require(_exists(tokenId));\r\n    return _tokenURIs[tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to set the token URI for a given token\r\n   * Reverts if the token ID does not exist\r\n   * @param tokenId uint256 ID of the token to set its URI\r\n   * @param uri string URI to assign\r\n   */\r\n  function _setTokenURI(uint256 tokenId, string uri) internal {\r\n    require(_exists(tokenId));\r\n    _tokenURIs[tokenId] = uri;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * Reverts if the token does not exist\r\n   * @param owner owner of the token to burn\r\n   * @param tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address owner, uint256 tokenId) internal {\r\n    super._burn(owner, tokenId);\r\n\r\n    // Clear metadata (if any)\r\n    if (bytes(_tokenURIs[tokenId]).length != 0) {\r\n      delete _tokenURIs[tokenId];\r\n    }\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/ERC721Full.sol\r\n\r\n/**\r\n * @title Full ERC721 Token\r\n * This implementation includes all the required and some optional functionality of the ERC721 standard\r\n * Moreover, it includes approve all functionality using operator terminology\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Full is ERC721, ERC721Enumerable, ERC721Metadata {\r\n  constructor(string name, string symbol) ERC721Metadata(name, symbol)\r\n    public\r\n  {\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address who) external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender)\r\n    external view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function approve(address spender, uint256 value)\r\n    external returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    external returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() internal {\r\n    _owner = msg.sender;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  /**\r\n   * @return the address of the owner.\r\n   */\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @return true if `msg.sender` is the owner of the contract.\r\n   */\r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n// File: eth-token-recover/contracts/TokenRecover.sol\r\n\r\n/**\r\n * @title TokenRecover\r\n * @author Vittorio Minacori (https://github.com/vittominacori)\r\n * @dev Allow to recover any ERC20 sent into the contract for error\r\n */\r\ncontract TokenRecover is Ownable {\r\n\r\n  /**\r\n   * @dev Remember that only owner can call so be careful when use on contracts generated from other contracts.\r\n   * @param tokenAddress The token contract address\r\n   * @param tokenAmount Number of tokens to be sent\r\n   */\r\n  function recoverERC20(\r\n    address tokenAddress,\r\n    uint256 tokenAmount\r\n  )\r\n    public\r\n    onlyOwner\r\n  {\r\n    IERC20(tokenAddress).transfer(owner(), tokenAmount);\r\n  }\r\n}\r\n\r\n// File: solidity-linked-list/contracts/StructuredLinkedList.sol\r\n\r\ncontract StructureInterface {\r\n  function getValue (uint256 _id) public view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @title StructuredLinkedList\r\n * @author Vittorio Minacori (https://github.com/vittominacori)\r\n * @dev This utility library is inspired by https://github.com/Modular-Network/ethereum-libraries/tree/master/LinkedListLib\r\n *  It has been updated to add additional functionality and be compatible with solidity 0.4.24 coding patterns.\r\n */\r\nlibrary StructuredLinkedList {\r\n\r\n  uint256 constant NULL = 0;\r\n  uint256 constant HEAD = 0;\r\n  bool constant PREV = false;\r\n  bool constant NEXT = true;\r\n\r\n  struct List {\r\n    mapping (uint256 => mapping (bool => uint256)) list;\r\n  }\r\n\r\n  /**\r\n   * @dev Checks if the list exists\r\n   * @param self stored linked list from contract\r\n   * @return bool true if list exists, false otherwise\r\n   */\r\n  function listExists(\r\n    List storage self\r\n  )\r\n  internal\r\n  view\r\n  returns (bool)\r\n  {\r\n    // if the head nodes previous or next pointers both point to itself, then there are no items in the list\r\n    if (self.list[HEAD][PREV] != HEAD || self.list[HEAD][NEXT] != HEAD) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Checks if the node exists\r\n   * @param self stored linked list from contract\r\n   * @param _node a node to search for\r\n   * @return bool true if node exists, false otherwise\r\n   */\r\n  function nodeExists(\r\n    List storage self,\r\n    uint256 _node\r\n  )\r\n  internal\r\n  view\r\n  returns (bool)\r\n  {\r\n    if (self.list[_node][PREV] == HEAD && self.list[_node][NEXT] == HEAD) {\r\n      if (self.list[HEAD][NEXT] == _node) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the number of elements in the list\r\n   * @param self stored linked list from contract\r\n   * @return uint256\r\n   */\r\n  function sizeOf(\r\n    List storage self\r\n  )\r\n  internal\r\n  view\r\n  returns (uint256)\r\n  {\r\n    bool exists;\r\n    uint256 i;\r\n    uint256 numElements;\r\n    (exists, i) = getAdjacent(self, HEAD, NEXT);\r\n    while (i != HEAD) {\r\n      (exists, i) = getAdjacent(self, i, NEXT);\r\n      numElements++;\r\n    }\r\n    return numElements;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the links of a node as a tuple\r\n   * @param self stored linked list from contract\r\n   * @param _node id of the node to get\r\n   * @return bool, uint256, uint256 true if node exists or false otherwise, previous node, next node\r\n   */\r\n  function getNode(\r\n    List storage self,\r\n    uint256 _node\r\n  )\r\n  internal\r\n  view\r\n  returns (bool, uint256, uint256)\r\n  {\r\n    if (!nodeExists(self, _node)) {\r\n      return (false, 0, 0);\r\n    } else {\r\n      return (true, self.list[_node][PREV], self.list[_node][NEXT]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the link of a node `_node` in direction `_direction`.\r\n   * @param self stored linked list from contract\r\n   * @param _node id of the node to step from\r\n   * @param _direction direction to step in\r\n   * @return bool, uint256 true if node exists or false otherwise, node in _direction\r\n   */\r\n  function getAdjacent(\r\n    List storage self,\r\n    uint256 _node,\r\n    bool _direction\r\n  )\r\n  internal\r\n  view\r\n  returns (bool, uint256)\r\n  {\r\n    if (!nodeExists(self, _node)) {\r\n      return (false, 0);\r\n    } else {\r\n      return (true, self.list[_node][_direction]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the link of a node `_node` in direction `NEXT`.\r\n   * @param self stored linked list from contract\r\n   * @param _node id of the node to step from\r\n   * @return bool, uint256 true if node exists or false otherwise, next node\r\n   */\r\n  function getNextNode(\r\n    List storage self,\r\n    uint256 _node\r\n  )\r\n  internal\r\n  view\r\n  returns (bool, uint256)\r\n  {\r\n    return getAdjacent(self, _node, NEXT);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the link of a node `_node` in direction `PREV`.\r\n   * @param self stored linked list from contract\r\n   * @param _node id of the node to step from\r\n   * @return bool, uint256 true if node exists or false otherwise, previous node\r\n   */\r\n  function getPreviousNode(\r\n    List storage self,\r\n    uint256 _node\r\n  )\r\n  internal\r\n  view\r\n  returns (bool, uint256)\r\n  {\r\n    return getAdjacent(self, _node, PREV);\r\n  }\r\n\r\n  /**\r\n   * @dev Can be used before `insert` to build an ordered list.\r\n   * @dev Get the node and then `insertBefore` or `insertAfter` basing on your list order.\r\n   * @dev If you want to order basing on other than `structure.getValue()` override this function\r\n   * @param self stored linked list from contract\r\n   * @param _structure the structure instance\r\n   * @param _value value to seek\r\n   * @return uint256 next node with a value less than _value\r\n   */\r\n  function getSortedSpot(\r\n    List storage self,\r\n    address _structure,\r\n    uint256 _value\r\n  )\r\n  internal view returns (uint256)\r\n  {\r\n    if (sizeOf(self) == 0) {\r\n      return 0;\r\n    }\r\n    bool exists;\r\n    uint256 next;\r\n    (exists, next) = getAdjacent(self, HEAD, NEXT);\r\n    while (\r\n      (next != 0) && ((_value < StructureInterface(_structure).getValue(next)) != NEXT)\r\n    ) {\r\n      next = self.list[next][NEXT];\r\n    }\r\n    return next;\r\n  }\r\n\r\n  /**\r\n   * @dev Creates a bidirectional link between two nodes on direction `_direction`\r\n   * @param self stored linked list from contract\r\n   * @param _node first node for linking\r\n   * @param _link  node to link to in the _direction\r\n   */\r\n  function createLink(\r\n    List storage self,\r\n    uint256 _node,\r\n    uint256 _link,\r\n    bool _direction\r\n  )\r\n  internal\r\n  {\r\n    self.list[_link][!_direction] = _node;\r\n    self.list[_node][_direction] = _link;\r\n  }\r\n\r\n  /**\r\n   * @dev Insert node `_new` beside existing node `_node` in direction `_direction`.\r\n   * @param self stored linked list from contract\r\n   * @param _node existing node\r\n   * @param _new  new node to insert\r\n   * @param _direction direction to insert node in\r\n   * @return bool true if success, false otherwise\r\n   */\r\n  function insert(\r\n    List storage self,\r\n    uint256 _node,\r\n    uint256 _new,\r\n    bool _direction\r\n  )\r\n  internal returns (bool)\r\n  {\r\n    if (!nodeExists(self, _new) && nodeExists(self, _node)) {\r\n      uint256 c = self.list[_node][_direction];\r\n      createLink(\r\n        self,\r\n        _node,\r\n        _new,\r\n        _direction\r\n      );\r\n      createLink(\r\n        self,\r\n        _new,\r\n        c,\r\n        _direction\r\n      );\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Insert node `_new` beside existing node `_node` in direction `NEXT`.\r\n   * @param self stored linked list from contract\r\n   * @param _node existing node\r\n   * @param _new  new node to insert\r\n   * @return bool true if success, false otherwise\r\n   */\r\n  function insertAfter(\r\n    List storage self,\r\n    uint256 _node,\r\n    uint256 _new\r\n  )\r\n  internal\r\n  returns (bool)\r\n  {\r\n    return insert(\r\n      self,\r\n      _node,\r\n      _new,\r\n      NEXT\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Insert node `_new` beside existing node `_node` in direction `PREV`.\r\n   * @param self stored linked list from contract\r\n   * @param _node existing node\r\n   * @param _new  new node to insert\r\n   * @return bool true if success, false otherwise\r\n   */\r\n  function insertBefore(\r\n    List storage self,\r\n    uint256 _node,\r\n    uint256 _new\r\n  )\r\n  internal\r\n  returns (bool)\r\n  {\r\n    return insert(\r\n      self,\r\n      _node,\r\n      _new,\r\n      PREV\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Removes an entry from the linked list\r\n   * @param self stored linked list from contract\r\n   * @param _node node to remove from the list\r\n   * @return uint256 the removed node\r\n   */\r\n  function remove(\r\n    List storage self,\r\n    uint256 _node\r\n  )\r\n  internal\r\n  returns (uint256)\r\n  {\r\n    if ((_node == NULL) || (!nodeExists(self, _node))) {\r\n      return 0;\r\n    }\r\n    createLink(\r\n      self,\r\n      self.list[_node][PREV],\r\n      self.list[_node][NEXT],\r\n      NEXT\r\n    );\r\n    delete self.list[_node][PREV];\r\n    delete self.list[_node][NEXT];\r\n    return _node;\r\n  }\r\n\r\n  /**\r\n   * @dev Pushes an entry to the head of the linked list\r\n   * @param self stored linked list from contract\r\n   * @param _node new entry to push to the head\r\n   * @param _direction push to the head (NEXT) or tail (PREV)\r\n   * @return bool true if success, false otherwise\r\n   */\r\n  function push(\r\n    List storage self,\r\n    uint256 _node,\r\n    bool _direction\r\n  )\r\n  internal\r\n  returns (bool)\r\n  {\r\n    return insert(\r\n      self,\r\n      HEAD,\r\n      _node,\r\n      _direction\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Pops the first entry from the linked list\r\n   * @param self stored linked list from contract\r\n   * @param _direction pop from the head (NEXT) or the tail (PREV)\r\n   * @return uint256 the removed node\r\n   */\r\n  function pop(\r\n    List storage self,\r\n    bool _direction\r\n  )\r\n  internal\r\n  returns (uint256)\r\n  {\r\n    bool exists;\r\n    uint256 adj;\r\n\r\n    (exists, adj) = getAdjacent(self, HEAD, _direction);\r\n\r\n    return remove(self, adj);\r\n  }\r\n}\r\n\r\n// File: contracts/WallOfChainToken.sol\r\n\r\ncontract WallOfChainToken is ERC721Full, TokenRecover, MinterRole {\r\n  using StructuredLinkedList for StructuredLinkedList.List;\r\n\r\n  StructuredLinkedList.List list;\r\n\r\n  struct WallStructure {\r\n    uint256 value;\r\n    string firstName;\r\n    string lastName;\r\n    uint256 pattern;\r\n    uint256 icon;\r\n  }\r\n\r\n  bool public mintingFinished = false;\r\n\r\n  uint256 public progressiveId = 0;\r\n\r\n  // Mapping from token ID to the structures\r\n  mapping(uint256 => WallStructure) structureIndex;\r\n\r\n  modifier canGenerate() {\r\n    require(\r\n      !mintingFinished,\r\n      \"Minting is finished\"\r\n    );\r\n    _;\r\n  }\r\n\r\n  constructor(string _name, string _symbol) public\r\n  ERC721Full(_name, _symbol)\r\n  {}\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   */\r\n  function finishMinting() public onlyOwner canGenerate {\r\n    mintingFinished = true;\r\n  }\r\n\r\n  function newToken(\r\n    address _beneficiary,\r\n    uint256 _value,\r\n    string _firstName,\r\n    string _lastName,\r\n    uint256 _pattern,\r\n    uint256 _icon\r\n  )\r\n    public\r\n    canGenerate\r\n    onlyMinter\r\n    returns (uint256)\r\n  {\r\n    uint256 tokenId = progressiveId.add(1);\r\n    _mint(_beneficiary, tokenId);\r\n    structureIndex[tokenId] = WallStructure(\r\n      _value,\r\n      _firstName,\r\n      _lastName,\r\n      _value == 0 ? 0 : _pattern,\r\n      _value == 0 ? 0 : _icon\r\n    );\r\n    progressiveId = tokenId;\r\n\r\n    uint256 position = list.getSortedSpot(StructureInterface(this), _value);\r\n    list.insertBefore(position, tokenId);\r\n\r\n    return tokenId;\r\n  }\r\n\r\n  function editToken (\r\n    uint256 _tokenId,\r\n    uint256 _value,\r\n    string _firstName,\r\n    string _lastName,\r\n    uint256 _pattern,\r\n    uint256 _icon\r\n  )\r\n    public\r\n    onlyMinter\r\n    returns (uint256)\r\n  {\r\n    require(\r\n      _exists(_tokenId),\r\n      \"Token must exists\"\r\n    );\r\n\r\n    uint256 value = getValue(_tokenId);\r\n\r\n    if (_value > 0) {\r\n      value = value.add(_value); // add the new value sent\r\n\r\n      // reorder the list\r\n      list.remove(_tokenId);\r\n      uint256 position = list.getSortedSpot(StructureInterface(this), value);\r\n      list.insertBefore(position, _tokenId);\r\n    }\r\n\r\n    structureIndex[_tokenId] = WallStructure(\r\n      value,\r\n      _firstName,\r\n      _lastName,\r\n      value == 0 ? 0 : _pattern,\r\n      value == 0 ? 0 : _icon\r\n    );\r\n\r\n    return _tokenId;\r\n  }\r\n\r\n  function getWall (\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n    view\r\n    returns (\r\n      address tokenOwner,\r\n      uint256 value,\r\n      string firstName,\r\n      string lastName,\r\n      uint256 pattern,\r\n      uint256 icon\r\n    )\r\n  {\r\n    require(\r\n      _exists(_tokenId),\r\n      \"Token must exists\"\r\n    );\r\n\r\n    WallStructure storage wall = structureIndex[_tokenId];\r\n\r\n    tokenOwner = ownerOf(_tokenId);\r\n\r\n    value = wall.value;\r\n    firstName = wall.firstName;\r\n    lastName = wall.lastName;\r\n    pattern = wall.pattern;\r\n    icon = wall.icon;\r\n  }\r\n\r\n  function getValue (uint256 _tokenId) public view returns (uint256) {\r\n    require(\r\n      _exists(_tokenId),\r\n      \"Token must exists\"\r\n    );\r\n    WallStructure storage wall = structureIndex[_tokenId];\r\n    return wall.value;\r\n  }\r\n\r\n  function getNextNode(uint256 _tokenId) public view returns (bool, uint256) {\r\n    return list.getNextNode(_tokenId);\r\n  }\r\n\r\n  function getPreviousNode(\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n    view\r\n    returns (bool, uint256)\r\n  {\r\n    return list.getPreviousNode(_tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Only contract owner or token owner can burn\r\n   */\r\n  function burn(uint256 _tokenId) public {\r\n    address tokenOwner = isOwner() ? ownerOf(_tokenId) : msg.sender;\r\n    super._burn(tokenOwner, _tokenId);\r\n    list.remove(_tokenId);\r\n    delete structureIndex[_tokenId];\r\n  }\r\n}", "OptimizationUsed": "1", "ContractName": "WallOfChainToken", "ByteCode": "0x6080604052600436106101925763ffffffff60e060020a60003504166301ffc9a7811461019757806305d2035b146101e257806306fdde03146101f7578063081812fc14610281578063095ea7b3146102b55780630ff4c916146102db57806318160ddd1461030557806323b872dd1461031a5780632f745c591461034457806342842e0e1461036857806342966c68146103925780634f6ccce7146103aa5780636352211e146103c25780636d902bfb146103da57806370a082311461040d578063715018a61461042e5780637d64bcb4146104435780638980f11f146104585780638da5cb5b1461047c5780638f32d59b1461049157806392c2cd8c146104a657806395d89b41146104be578063983b2d56146104d357806398650275146104f45780639c77068414610509578063a22cb465146105b9578063aa271e1a146105df578063b40bb85d14610600578063b88d4fde146106a7578063c3b909d714610716578063c87b56dd1461072b578063e985e9c514610743578063f2fde38b1461076a578063ff91e4891461078b575b600080fd5b3480156101a357600080fd5b506101ce7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19600435166108af565b604080519115158252519081900360200190f35b3480156101ee57600080fd5b506101ce6108e3565b34801561020357600080fd5b5061020c6108ec565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561024657818101518382015260200161022e565b50505050905090810190601f1680156102735780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561028d57600080fd5b50610299600435610983565b60408051600160a060020a039092168252519081900360200190f35b3480156102c157600080fd5b506102d9600160a060020a03600435166024356109b5565b005b3480156102e757600080fd5b506102f3600435610a6b565b60408051918252519081900360200190f35b34801561031157600080fd5b506102f3610ae1565b34801561032657600080fd5b506102d9600160a060020a0360043581169060243516604435610ae7565b34801561035057600080fd5b506102f3600160a060020a0360043516602435610b75565b34801561037457600080fd5b506102d9600160a060020a0360043581169060243516604435610bc3565b34801561039e57600080fd5b506102d9600435610be4565b3480156103b657600080fd5b506102f3600435610c60565b3480156103ce57600080fd5b50610299600435610c95565b3480156103e657600080fd5b506103f2600435610cb9565b60408051921515835260208301919091528051918290030190f35b34801561041957600080fd5b506102f3600160a060020a0360043516610cd6565b34801561043a57600080fd5b506102d9610d09565b34801561044f57600080fd5b506102d9610d73565b34801561046457600080fd5b506102d9600160a060020a0360043516602435610df0565b34801561048857600080fd5b50610299610e9d565b34801561049d57600080fd5b506101ce610eac565b3480156104b257600080fd5b506103f2600435610ebd565b3480156104ca57600080fd5b5061020c610ed1565b3480156104df57600080fd5b506102d9600160a060020a0360043516610f32565b34801561050057600080fd5b506102d9610f52565b34801561051557600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526102f3948235600160a060020a031694602480359536959460649492019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750949750508435955050506020909201359150610f5d9050565b3480156105c557600080fd5b506102d9600160a060020a036004351660243515156110d3565b3480156105eb57600080fd5b506101ce600160a060020a0360043516611157565b34801561060c57600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526102f394823594602480359536959460649492019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375094975050843595505050602090920135915061116a9050565b3480156106b357600080fd5b50604080516020601f6064356004818101359283018490048402850184019095528184526102d994600160a060020a0381358116956024803590921695604435953695608494019181908401838280828437509497506112f69650505050505050565b34801561072257600080fd5b506102f3611318565b34801561073757600080fd5b5061020c60043561131e565b34801561074f57600080fd5b506101ce600160a060020a03600435811690602435166113d3565b34801561077657600080fd5b506102d9600160a060020a0360043516611401565b34801561079757600080fd5b506107a360043561141d565b6040518087600160a060020a0316600160a060020a031681526020018681526020018060200180602001858152602001848152602001838103835287818151815260200191508051906020019080838360005b8381101561080e5781810151838201526020016107f6565b50505050905090810190601f16801561083b5780820380516001836020036101000a031916815260200191505b50838103825286518152865160209182019188019080838360005b8381101561086e578181015183820152602001610856565b50505050905090810190601f16801561089b5780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191660009081526020819052604090205460ff1690565b600f5460ff1681565b60098054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156109785780601f1061094d57610100808354040283529160200191610978565b820191906000526020600020905b81548152906001019060200180831161095b57829003601f168201915b505050505090505b90565b600061098e826115e1565b151561099957600080fd5b50600090815260026020526040902054600160a060020a031690565b60006109c082610c95565b9050600160a060020a0383811690821614156109db57600080fd5b33600160a060020a03821614806109f757506109f781336113d3565b1515610a0257600080fd5b600082815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b600080610a77836115e1565b1515610acd576040805160e560020a62461bcd02815260206004820152601160248201527f546f6b656e206d75737420657869737473000000000000000000000000000000604482015290519081900360640190fd5b505060009081526011602052604090205490565b60075490565b610af133826115fe565b1515610afc57600080fd5b600160a060020a0382161515610b1157600080fd5b610b1b838261165d565b610b2583826116ce565b610b2f82826117d5565b8082600160a060020a031684600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6000610b8083610cd6565b8210610b8b57600080fd5b600160a060020a0383166000908152600560205260409020805483908110610baf57fe5b906000526020600020015490505b92915050565b610bdf83838360206040519081016040528060008152506112f6565b505050565b6000610bee610eac565b610bf85733610c01565b610c0182610c95565b9050610c0d818361181e565b610c1e600e8363ffffffff61186616565b50600082815260116020526040812081815590610c3e6001830182612209565b610c4c600283016000612209565b506000600382018190556004909101555050565b6000610c6a610ae1565b8210610c7557600080fd5b6007805483908110610c8357fe5b90600052602060002001549050919050565b600081815260016020526040812054600160a060020a0316801515610bbd57600080fd5b600080610ccd600e8463ffffffff6118e416565b91509150915091565b6000600160a060020a0382161515610ced57600080fd5b50600160a060020a031660009081526003602052604090205490565b610d11610eac565b1515610d1c57600080fd5b600c54604051600091600160a060020a0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600c805473ffffffffffffffffffffffffffffffffffffffff19169055565b610d7b610eac565b1515610d8657600080fd5b600f5460ff1615610de1576040805160e560020a62461bcd02815260206004820152601360248201527f4d696e74696e672069732066696e697368656400000000000000000000000000604482015290519081900360640190fd5b600f805460ff19166001179055565b610df8610eac565b1515610e0357600080fd5b81600160a060020a031663a9059cbb610e1a610e9d565b836040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015610e6d57600080fd5b505af1158015610e81573d6000803e3d6000fd5b505050506040513d6020811015610e9757600080fd5b50505050565b600c54600160a060020a031690565b600c54600160a060020a0316331490565b600080610ccd600e8463ffffffff6118fe16565b600a8054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156109785780601f1061094d57610100808354040283529160200191610978565b610f3b33611157565b1515610f4657600080fd5b610f4f8161190d565b50565b610f5b33611955565b565b600f546000908190819060ff1615610fbf576040805160e560020a62461bcd02815260206004820152601360248201527f4d696e74696e672069732066696e697368656400000000000000000000000000604482015290519081900360640190fd5b610fc833611157565b1515610fd357600080fd5b601054610fe790600163ffffffff61199d16565b9150610ff389836119b6565b60a0604051908101604052808981526020018881526020018781526020018960001461101f5786611022565b60005b815260200189156110335785611036565b60005b905260008381526011602090815260409091208251815582820151805191926110679260018501929091019061224d565b506040820151805161108391600284019160209091019061224d565b506060820151600382015560809091015160049091015560108290556110b1600e308a63ffffffff611a0516565b90506110c5600e828463ffffffff611aed16565b509098975050505050505050565b600160a060020a0382163314156110e957600080fd5b336000818152600460209081526040808320600160a060020a03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b6000610bbd600d8363ffffffff611afc16565b600080600061117833611157565b151561118357600080fd5b61118c896115e1565b15156111e2576040805160e560020a62461bcd02815260206004820152601160248201527f546f6b656e206d75737420657869737473000000000000000000000000000000604482015290519081900360640190fd5b6111eb89610a6b565b9150600088111561124257611206828963ffffffff61199d16565b9150611219600e8a63ffffffff61186616565b5061122c600e308463ffffffff611a0516565b9050611240600e828b63ffffffff611aed16565b505b60a0604051908101604052808381526020018881526020018781526020018360001461126e5786611271565b60005b815260200183156112825785611285565b60005b905260008a81526011602090815260409091208251815582820151805191926112b69260018501929091019061224d565b50604082015180516112d291600284019160209091019061224d565b50606082015160038201556080909101516004909101555096979650505050505050565b611301848484610ae7565b61130d84848484611b33565b1515610e9757600080fd5b60105481565b6060611329826115e1565b151561133457600080fd5b6000828152600b602090815260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845290918301828280156113c75780601f1061139c576101008083540402835291602001916113c7565b820191906000526020600020905b8154815290600101906020018083116113aa57829003601f168201915b50505050509050919050565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205460ff1690565b611409610eac565b151561141457600080fd5b610f4f81611cb5565b6000806060806000806000611431886115e1565b1515611487576040805160e560020a62461bcd02815260206004820152601160248201527f546f6b656e206d75737420657869737473000000000000000000000000000000604482015290519081900360640190fd5b50600087815260116020526040902061149f88610c95565b815460018084018054604080516020600295841615610100026000190190931694909404601f8101839004830285018301909152808452949b50929950909290918301828280156115315780601f1061150657610100808354040283529160200191611531565b820191906000526020600020905b81548152906001019060200180831161151457829003601f168201915b50505060028085018054604080516020601f6000196101006001871615020190941695909504928301859004850281018501909152818152959a5090935091508301828280156115c25780601f10611597576101008083540402835291602001916115c2565b820191906000526020600020905b8154815290600101906020018083116115a557829003601f168201915b5050505050935080600301549250806004015491505091939550919395565b600090815260016020526040902054600160a060020a0316151590565b60008061160a83610c95565b905080600160a060020a031684600160a060020a03161480611645575083600160a060020a031661163a84610983565b600160a060020a0316145b80611655575061165581856113d3565b949350505050565b81600160a060020a031661167082610c95565b600160a060020a03161461168357600080fd5b600081815260026020526040902054600160a060020a0316156116ca576000818152600260205260409020805473ffffffffffffffffffffffffffffffffffffffff191690555b5050565b60008060006116dd8585611d33565b600084815260066020908152604080832054600160a060020a038916845260059092529091205490935061171890600163ffffffff611dc916565b600160a060020a03861660009081526005602052604090208054919350908390811061174057fe5b90600052602060002001549050806005600087600160a060020a0316600160a060020a031681526020019081526020016000208481548110151561178057fe5b6000918252602080832090910192909255600160a060020a03871681526005909152604090208054906117b79060001983016122cb565b50600093845260066020526040808520859055908452909220555050565b60006117e18383611de0565b50600160a060020a039091166000908152600560209081526040808320805460018101825590845282842081018590559383526006909152902055565b6118288282611e70565b6000818152600b602052604090205460026000196101006001841615020190911604156116ca576000818152600b602052604081206116ca91612209565b600081158061187c575061187a8383611f2c565b155b1561188957506000610bbd565b60008281526020848152604080832083805290915280822054600180845291909220546118ba928692909190611fa4565b50600081815260209283526040808220828052909352828120819055600181529182209190915590565b6000806118f384846001611fd5565b915091509250929050565b6000806118f384846000611fd5565b61191e600d8263ffffffff61201b16565b604051600160a060020a038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b611966600d8263ffffffff61206916565b604051600160a060020a038216907fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669290600090a250565b6000828201838110156119af57600080fd5b9392505050565b6119c082826120b5565b600780546000838152600860205260408120829055600182018355919091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688015550565b6000806000611a1386612110565b1515611a225760009250611ae4565b611a2f8660006001611fd5565b90925090505b8015801590611abd57506001151585600160a060020a0316630ff4c916836040518263ffffffff1660e060020a02815260040180828152602001915050602060405180830381600087803b158015611a8c57600080fd5b505af1158015611aa0573d6000803e3d6000fd5b505050506040513d6020811015611ab657600080fd5b5051851014155b15611ae05760009081526020868152604080832060018452909152902054611a35565b8092505b50509392505050565b60006116558484846000612148565b6000600160a060020a0382161515611b1357600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b600080611b4885600160a060020a03166121b1565b1515611b575760019150611cac565b6040517f150b7a020000000000000000000000000000000000000000000000000000000081523360048201818152600160a060020a03898116602485015260448401889052608060648501908152875160848601528751918a169463150b7a0294938c938b938b93909160a490910190602085019080838360005b83811015611bea578181015183820152602001611bd2565b50505050905090810190601f168015611c175780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015611c3957600080fd5b505af1158015611c4d573d6000803e3d6000fd5b505050506040513d6020811015611c6357600080fd5b50517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1981167f150b7a020000000000000000000000000000000000000000000000000000000014925090505b50949350505050565b600160a060020a0381161515611cca57600080fd5b600c54604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600c805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b81600160a060020a0316611d4682610c95565b600160a060020a031614611d5957600080fd5b600160a060020a038216600090815260036020526040902054611d8390600163ffffffff611dc916565b600160a060020a03909216600090815260036020908152604080832094909455918152600190915220805473ffffffffffffffffffffffffffffffffffffffff19169055565b60008083831115611dd957600080fd5b5050900390565b600081815260016020526040902054600160a060020a031615611e0257600080fd5b6000818152600160208181526040808420805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0388169081179091558452600390915290912054611e509161199d565b600160a060020a0390921660009081526003602052604090209190915550565b6000806000611e7f85856121b9565b600084815260086020526040902054600754909350611ea590600163ffffffff611dc916565b9150600782815481101515611eb657fe5b9060005260206000200154905080600784815481101515611ed357fe5b60009182526020822001919091556007805484908110611eef57fe5b6000918252602090912001556007805490611f0e9060001983016122cb565b50600093845260086020526040808520859055908452909220555050565b600081815260208381526040808320838052909152812054158015611f67575060008281526020848152604080832060018452909152902054155b15611f9c5760008080526020848152604080832060018452909152902054821415611f9457506001610bbd565b506000610bbd565b506001610bbd565b6000828152602085815260408083209315808452938252808320869055948252948552838120911581529352912055565b600080611fe28585611f2c565b1515611ff357506000905080612013565b505060008281526020848152604080832084151584529091529020546001905b935093915050565b600160a060020a038116151561203057600080fd5b61203a8282611afc565b1561204457600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b600160a060020a038116151561207e57600080fd5b6120888282611afc565b151561209357600080fd5b600160a060020a0316600090815260209190915260409020805460ff19169055565b600160a060020a03821615156120ca57600080fd5b6120d482826117d5565b6040518190600160a060020a038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000806000806121238560006001611fd5565b90935091505b81156116555761213b85836001611fd5565b9093509150600101612129565b6000806121558685611f2c565b15801561216757506121678686611f2c565b156121a85750600084815260208681526040808320851515845290915290205461219386868686611fa4565b61219f86858386611fa4565b60019150611cac565b60009150611cac565b6000903b1190565b6121c3828261165d565b6121cd82826116ce565b6040518190600090600160a060020a038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b50805460018160011615610100020316600290046000825580601f1061222f5750610f4f565b601f016020900490600052602060002090810190610f4f91906122eb565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061228e57805160ff19168380011785556122bb565b828001600101855582156122bb579182015b828111156122bb5782518255916020019190600101906122a0565b506122c79291506122eb565b5090565b815481835581811115610bdf57600083815260209020610bdf9181019083015b61098091905b808211156122c757600081556001016122f15600a165627a7a7230582041f68c9f8ac3aca7749087e69ecac831dab821449d0e0dd73d0fbe55a6d622810029"}