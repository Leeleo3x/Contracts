{"Runs": "200", "SwarmSource": "bzzr://69418110e9b888023bd9a1542ce249340f3510554ea0b97e55d6014125c7fd2a", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"InterfaceId_ERC165\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"paid1\",\"type\":\"address\"},{\"name\":\"paid2\",\"type\":\"address\"},{\"name\":\"paid3\",\"type\":\"address\"},{\"name\":\"paid4\",\"type\":\"address\"},{\"name\":\"paid5\",\"type\":\"address\"},{\"name\":\"paid6\",\"type\":\"address\"},{\"name\":\"paid7\",\"type\":\"address\"},{\"name\":\"GameID\",\"type\":\"string\"},{\"name\":\"FortuneCookie\",\"type\":\"string\"},{\"name\":\"Letter\",\"type\":\"string\"}],\"name\":\"create\",\"outputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"get\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"UplinePaid\",\"type\":\"string\"},{\"name\":\"Letter\",\"type\":\"string\"},{\"name\":\"GameID\",\"type\":\"string\"},{\"name\":\"FortuneCookie\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"UplinePaid\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"amt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"GameID\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"FortuneCookie\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"Letter\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"tokenUri\",\"type\":\"string\"}],\"name\":\"Create\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.25-nightly.2018.7.31+commit.75c1a9bd", "ConstructorArguments": "", "SourceCode": "pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title ERC165\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n */\r\ninterface ERC165 {\r\n\r\n  function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool);\r\n}\r\n\r\n\r\n\r\ncontract SupportsInterfaceWithLookup is ERC165 {\r\n  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\r\n\r\n  mapping(bytes4 => bool) internal supportedInterfaces;\r\n\r\n  constructor()\r\n    public\r\n  {\r\n    _registerInterface(InterfaceId_ERC165);\r\n  }\r\n\r\n  function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool)\r\n  {\r\n    return supportedInterfaces[_interfaceId];\r\n  }\r\n\r\n  function _registerInterface(bytes4 _interfaceId)\r\n    internal\r\n  {\r\n    require(_interfaceId != 0xffffffff);\r\n    supportedInterfaces[_interfaceId] = true;\r\n  }\r\n}\r\n\r\n\r\ncontract ERC721Basic is ERC165 {\r\n\r\n  bytes4 internal constant InterfaceId_ERC721 = 0x80ac58cd;\r\n\r\n  bytes4 internal constant InterfaceId_ERC721Exists = 0x4f558e79;\r\n\r\n  bytes4 internal constant InterfaceId_ERC721Enumerable = 0x780e9d63;\r\n\r\n  bytes4 internal constant InterfaceId_ERC721Metadata = 0x5b5e139f;\r\n\r\n  event Transfer(\r\n    address indexed _from,\r\n    address indexed _to,\r\n    uint256 indexed _tokenId\r\n  );\r\n  event Approval(\r\n    address indexed _owner,\r\n    address indexed _approved,\r\n    uint256 indexed _tokenId\r\n  );\r\n  event ApprovalForAll(\r\n    address indexed _owner,\r\n    address indexed _operator,\r\n    bool _approved\r\n  );\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 _balance);\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n  function exists(uint256 _tokenId) public view returns (bool _exists);\r\n\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function getApproved(uint256 _tokenId)\r\n    public view returns (address _operator);\r\n\r\n  function setApprovalForAll(address _operator, bool _approved) public;\r\n  function isApprovedForAll(address _owner, address _operator)\r\n    public view returns (bool);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId)\r\n    public;\r\n\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public;\r\n}\r\n\r\n\r\n\r\ncontract ERC721Enumerable is ERC721Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function tokenOfOwnerByIndex(\r\n    address _owner,\r\n    uint256 _index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256 _tokenId);\r\n\r\n  function tokenByIndex(uint256 _index) public view returns (uint256);\r\n}\r\n\r\n\r\ncontract ERC721Metadata is ERC721Basic {\r\n  function name() external view returns (string _name);\r\n  function symbol() external view returns (string _symbol);\r\n  function tokenURI(uint256 _tokenId) public view returns (string);\r\n}\r\n\r\n\r\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\r\n}\r\n\r\n\r\n\r\n\r\ncontract ERC721Receiver {\r\n\r\n  bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n  function onERC721Received(\r\n    address _operator,\r\n    address _from,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n    returns(bytes4);\r\n}\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n    return a / b;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\nlibrary AddressUtils {\r\n\r\n\r\n  function isContract(address addr) internal view returns (bool) {\r\n    uint256 size;\r\n    assembly { size := extcodesize(addr) }\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract ERC721BasicToken is SupportsInterfaceWithLookup, ERC721Basic {\r\n\r\n  using SafeMath for uint256;\r\n  using AddressUtils for address;\r\n\r\n  bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n  mapping (uint256 => address) internal tokenOwner;\r\n  mapping (uint256 => address) internal tokenApprovals;\r\n  mapping (address => uint256) internal ownedTokensCount;\r\n  mapping (address => mapping (address => bool)) internal operatorApprovals;\r\n\r\n  constructor()\r\n    public\r\n  {\r\n    _registerInterface(InterfaceId_ERC721);\r\n    _registerInterface(InterfaceId_ERC721Exists);\r\n  }\r\n\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    require(_owner != address(0));\r\n    return ownedTokensCount[_owner];\r\n  }\r\n\r\n  function ownerOf(uint256 _tokenId) public view returns (address) {\r\n    address owner = tokenOwner[_tokenId];\r\n    require(owner != address(0));\r\n    return owner;\r\n  }\r\n\r\n  function exists(uint256 _tokenId) public view returns (bool) {\r\n    address owner = tokenOwner[_tokenId];\r\n    return owner != address(0);\r\n  }\r\n\r\n  function approve(address _to, uint256 _tokenId) public {\r\n    address owner = ownerOf(_tokenId);\r\n    require(_to != owner);\r\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n    tokenApprovals[_tokenId] = _to;\r\n    emit Approval(owner, _to, _tokenId);\r\n  }\r\n\r\n  function getApproved(uint256 _tokenId) public view returns (address) {\r\n    return tokenApprovals[_tokenId];\r\n  }\r\n\r\n  function setApprovalForAll(address _to, bool _approved) public {\r\n    require(_to != msg.sender);\r\n    operatorApprovals[msg.sender][_to] = _approved;\r\n    emit ApprovalForAll(msg.sender, _to, _approved);\r\n  }\r\n\r\n  function isApprovedForAll(\r\n    address _owner,\r\n    address _operator\r\n  )\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return operatorApprovals[_owner][_operator];\r\n  }\r\n\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n  {\r\n    require(isApprovedOrOwner(msg.sender, _tokenId));\r\n    require(_from != address(0));\r\n    require(_to != address(0));\r\n\r\n    clearApproval(_from, _tokenId);\r\n    removeTokenFrom(_from, _tokenId);\r\n    addTokenTo(_to, _tokenId);\r\n\r\n    emit Transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n  {\r\n    // solium-disable-next-line arg-overflow\r\n    safeTransferFrom(_from, _to, _tokenId, \"\");\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n  {\r\n    transferFrom(_from, _to, _tokenId);\r\n    // solium-disable-next-line arg-overflow\r\n    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\r\n  }\r\n\r\n  function isApprovedOrOwner(\r\n    address _spender,\r\n    uint256 _tokenId\r\n  )\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    address owner = ownerOf(_tokenId);\r\n    return (\r\n      _spender == owner ||\r\n      getApproved(_tokenId) == _spender ||\r\n      isApprovedForAll(owner, _spender)\r\n    );\r\n  }\r\n\r\n\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    require(_to != address(0));\r\n    addTokenTo(_to, _tokenId);\r\n    emit Transfer(address(0), _to, _tokenId);\r\n  }\r\n\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    clearApproval(_owner, _tokenId);\r\n    removeTokenFrom(_owner, _tokenId);\r\n    emit Transfer(_owner, address(0), _tokenId);\r\n  }\r\n\r\n  function clearApproval(address _owner, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _owner);\r\n    if (tokenApprovals[_tokenId] != address(0)) {\r\n      tokenApprovals[_tokenId] = address(0);\r\n    }\r\n  }\r\n\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    require(tokenOwner[_tokenId] == address(0));\r\n    tokenOwner[_tokenId] = _to;\r\n    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\r\n  }\r\n\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _from);\r\n    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\r\n    tokenOwner[_tokenId] = address(0);\r\n  }\r\n\r\n  function checkAndCallSafeTransfer(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    internal\r\n    returns (bool)\r\n  {\r\n    if (!_to.isContract()) {\r\n      return true;\r\n    }\r\n    bytes4 retval = ERC721Receiver(_to).onERC721Received(\r\n      msg.sender, _from, _tokenId, _data);\r\n    return (retval == ERC721_RECEIVED);\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ERC721Token is SupportsInterfaceWithLookup, ERC721BasicToken, ERC721 {\r\n\r\n  // Token name\r\n  string internal name_;\r\n\r\n  // Token symbol\r\n  string internal symbol_;\r\n\r\n  // Mapping from owner to list of owned token IDs\r\n  mapping(address => uint256[]) internal ownedTokens;\r\n\r\n  // Mapping from token ID to index of the owner tokens list\r\n  mapping(uint256 => uint256) internal ownedTokensIndex;\r\n\r\n  // Array with all token ids, used for enumeration\r\n  uint256[] internal allTokens;\r\n\r\n  // Mapping from token id to position in the allTokens array\r\n  mapping(uint256 => uint256) internal allTokensIndex;\r\n\r\n  // Optional mapping for token URIs\r\n  mapping(uint256 => string) internal tokenURIs;\r\n\r\n  constructor(string _name, string _symbol) public {\r\n    name_ = _name;\r\n    symbol_ = _symbol;\r\n\r\n    // register the supported interfaces to conform to ERC721 via ERC165\r\n    _registerInterface(InterfaceId_ERC721Enumerable);\r\n    _registerInterface(InterfaceId_ERC721Metadata);\r\n  }\r\n\r\n  function name() external view returns (string) {\r\n    return name_;\r\n  }\r\n\r\n  function symbol() external view returns (string) {\r\n    return symbol_;\r\n  }\r\n\r\n  function tokenURI(uint256 _tokenId) public view returns (string) {\r\n    require(exists(_tokenId));\r\n    return tokenURIs[_tokenId];\r\n  }\r\n\r\n  function tokenOfOwnerByIndex(\r\n    address _owner,\r\n    uint256 _index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    require(_index < balanceOf(_owner));\r\n    return ownedTokens[_owner][_index];\r\n  }\r\n\r\n  function totalSupply() public view returns (uint256) {\r\n    return allTokens.length;\r\n  }\r\n\r\n  function tokenByIndex(uint256 _index) public view returns (uint256) {\r\n    require(_index < totalSupply());\r\n    return allTokens[_index];\r\n  }\r\n\r\n\r\n  function _setTokenURI(uint256 _tokenId, string _uri) internal {\r\n    require(exists(_tokenId));\r\n    tokenURIs[_tokenId] = _uri;\r\n  }\r\n\r\n\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    super.addTokenTo(_to, _tokenId);\r\n    uint256 length = ownedTokens[_to].length;\r\n    ownedTokens[_to].push(_tokenId);\r\n    ownedTokensIndex[_tokenId] = length;\r\n  }\r\n\r\n\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    super.removeTokenFrom(_from, _tokenId);\r\n\r\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\r\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\r\n\r\n    ownedTokens[_from][tokenIndex] = lastToken;\r\n    ownedTokens[_from].length--; // This also deletes the contents at the last position of the array\r\n\r\n    ownedTokensIndex[_tokenId] = 0;\r\n    ownedTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    super._mint(_to, _tokenId);\r\n\r\n    allTokensIndex[_tokenId] = allTokens.length;\r\n    allTokens.push(_tokenId);\r\n  }\r\n\r\n\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    super._burn(_owner, _tokenId);\r\n\r\n    if (bytes(tokenURIs[_tokenId]).length != 0) {\r\n      delete tokenURIs[_tokenId];\r\n    }\r\n\r\n    uint256 tokenIndex = allTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = allTokens.length.sub(1);\r\n    uint256 lastToken = allTokens[lastTokenIndex];\r\n\r\n    allTokens[tokenIndex] = lastToken;\r\n    allTokens[lastTokenIndex] = 0;\r\n\r\n    allTokens.length--;\r\n    allTokensIndex[_tokenId] = 0;\r\n    allTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract LetterToken307 is ERC721Token {\r\n\r\n  constructor() public ERC721Token(\"LetterToken307\",\"LetterToken307\") { }\r\n\r\n  struct Token{\r\n    string UplinePaid;\r\n    string GameID;\r\n    string FortuneCookie;\r\n    string Letter;\r\n    uint256 Amt;\r\n  }\r\n\r\n  Token[] private tokens;\r\n\r\n  \r\n  function create(address paid1, address paid2, address paid3, address paid4, address paid5, address paid6, address paid7, string GameID, string FortuneCookie, string Letter) public payable returns (uint256 _tokenId) {\r\n\r\n\r\n    uint256  Amt=msg.value/7;\r\n    paid1.transfer(Amt);\r\n    paid2.transfer(Amt);\r\n    paid3.transfer(Amt);\r\n    paid4.transfer(Amt);\r\n    paid5.transfer(Amt);\r\n    paid6.transfer(Amt);\r\n    paid7.transfer(Amt);\r\n\r\n    //Generate A String Proving The Upline Was Paid\r\n    string memory UplinePaid=StoreProofOfUplinePaid(paid1,paid2,paid3,paid4,paid5,paid6,paid7,Amt);\r\n\r\n\r\n    //Add The Token\t\r\n    Token memory _newToken = Token({\r\n\t    UplinePaid: UplinePaid,\r\n\t    GameID: GameID,\r\n        FortuneCookie: FortuneCookie,\r\n        Letter: Letter,\r\n\t    Amt: Amt\r\n    });\r\n    _tokenId = tokens.push(_newToken) - 1;\r\n    \r\n    string memory tokenUri = createTokenUri(GameID);\r\n    _mint(msg.sender,_tokenId);\r\n    _setTokenURI(_tokenId, tokenUri);\r\n\r\n    \r\n    //Emit The Token\r\n    emit Create(_tokenId,msg.sender,UplinePaid,Amt,GameID,FortuneCookie,Letter,tokenUri);\r\n    return _tokenId;\r\n  }\r\n\r\n  event Create(\r\n    uint _id,\r\n    address indexed _owner,string UplinePaid,uint256 amt, string GameID, \r\n    string FortuneCookie,\r\n    string Letter,\r\n    string tokenUri\r\n  );\r\n\r\n  function get(uint256 _id) public view returns (address owner, string UplinePaid,string Letter,string GameID,string FortuneCookie) {\r\n    return (\r\n    \r\n      tokenOwner[_id],\r\n      tokens[_id].UplinePaid,\r\n      tokens[_id].Letter,\r\n      tokens[_id].GameID,\r\n      tokens[_id].FortuneCookie\r\n    );\r\n  }\r\n\r\n  function tokensOfOwner(address _owner) public view returns(uint256[]) {\r\n    return ownedTokens[_owner];\r\n  }\r\n\r\n\r\n function toAsciiString(address x) internal pure returns (string) {\r\n    bytes memory s = new bytes(40);\r\n    for (uint i = 0; i < 20; i++) {\r\n        byte b = byte(uint8(uint(x) / (2**(8*(19 - i)))));\r\n        byte hi = byte(uint8(b) / 16);\r\n        byte lo = byte(uint8(b) - 16 * uint8(hi));\r\n        s[2*i] = char(hi);\r\n        s[2*i+1] = char(lo);            \r\n    }\r\n    return string(s);\r\n}\r\n\r\n function char(byte b) internal pure returns (byte c) {\r\n    if (b < 10) return byte(uint8(b) + 0x30);\r\n    else return byte(uint8(b) + 0x57);\r\n}\r\n\r\n  function createTokenUri(string GameID) internal pure returns (string){\r\n    string memory uri = \"https://www.millionetherwords.com/Win/At?game=\";\r\n    \r\n    uri = strConcat(uri,GameID);\r\n    \r\n    return uri;\r\n  }\r\n  \r\n  \r\n  function StoreProofOfUplinePaid(address paid1, address paid2, address paid3, address paid4, address paid5, address paid6, address paid7,uint256 amt) internal pure returns (string){\r\n    string memory UplinePaid = \"\";\r\n    \r\n    UplinePaid = strConcat(UplinePaid,toAsciiString(paid1));\r\n    UplinePaid = strConcat(UplinePaid,\"-\");\r\n\r\n    UplinePaid = strConcat(UplinePaid,toAsciiString(paid2));\r\n    UplinePaid = strConcat(UplinePaid,\"-\");\r\n    \r\n    UplinePaid = strConcat(UplinePaid,toAsciiString(paid3));\r\n    UplinePaid = strConcat(UplinePaid,\"-\");\r\n    \r\n    UplinePaid = strConcat(UplinePaid,toAsciiString(paid4));\r\n    UplinePaid = strConcat(UplinePaid,\"-\");\r\n    \r\n    UplinePaid = strConcat(UplinePaid,toAsciiString(paid5));\r\n    UplinePaid = strConcat(UplinePaid,\"-\");\r\n    \r\n    UplinePaid = strConcat(UplinePaid,toAsciiString(paid6));\r\n    UplinePaid = strConcat(UplinePaid,\"-\");\r\n    \r\n    UplinePaid = strConcat(UplinePaid,toAsciiString(paid7));\r\n    UplinePaid = strConcat(UplinePaid,\"-\");\r\n    \r\n    UplinePaid = strConcat(UplinePaid,uint2str(amt));\r\n    return UplinePaid;\r\n  }\r\n\r\nfunction uint2str(uint i) internal pure returns (string){\r\n\r\n    bytes32 data = bytes32(i);\r\n    bytes memory bytesString = new bytes(32);\r\n    for (uint j=0; j<32; j++) {\r\n        byte char1 = byte(bytes32(uint(data) * 2 ** (8 * j)));\r\n        if (char1 != 0) {\r\n            bytesString[j] = char1;\r\n        }\r\n    }\r\n    return string(bytesString);\r\n\r\n    \r\n}\r\n\r\n\r\n\r\n    function strConcat(string _a, string _b) internal pure returns (string) {\r\n        bytes memory _ba = bytes(_a);\r\n        bytes memory _bb = bytes(_b);\r\n        string memory ab = new string(_ba.length + _bb.length);\r\n        bytes memory bab = bytes(ab);\r\n        uint k = 0;\r\n        for (uint i = 0; i < _ba.length; i++) bab[k++] = _ba[i];\r\n        for (uint i2 = 0; i2 < _bb.length; i2++) bab[k++] = _bb[i2];\r\n        return string(bab);\r\n    }\r\n\r\n}", "OptimizationUsed": "1", "ContractName": "LetterToken307", "ByteCode": "0x60806040526004361061011c5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301ffc9a7811461012157806306fdde0314610169578063081812fc146101f3578063095ea7b31461023957806318160ddd1461027457806319fa8f501461029b57806323b872dd146102cd5780632f745c591461031057806342842e0e146103495780634f558e791461038c5780634f6ccce7146103b65780636352211e146103e05780636be24a471461040a57806370a08231146106005780638462151c146106335780639507d39a146106b657806395d89b41146108a3578063a22cb465146108b8578063b88d4fde146108f3578063c87b56dd146109c6578063e985e9c5146109f0575b600080fd5b34801561012d57600080fd5b506101556004803603602081101561014457600080fd5b5035600160e060020a031916610a2b565b604080519115158252519081900360200190f35b34801561017557600080fd5b5061017e610a4e565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101b85781810151838201526020016101a0565b50505050905090810190601f1680156101e55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101ff57600080fd5b5061021d6004803603602081101561021657600080fd5b5035610ae5565b60408051600160a060020a039092168252519081900360200190f35b34801561024557600080fd5b506102726004803603604081101561025c57600080fd5b50600160a060020a038135169060200135610b00565b005b34801561028057600080fd5b50610289610bb6565b60408051918252519081900360200190f35b3480156102a757600080fd5b506102b0610bbc565b60408051600160e060020a03199092168252519081900360200190f35b3480156102d957600080fd5b50610272600480360360608110156102f057600080fd5b50600160a060020a03813581169160208101359091169060400135610be0565b34801561031c57600080fd5b506102896004803603604081101561033357600080fd5b50600160a060020a038135169060200135610c83565b34801561035557600080fd5b506102726004803603606081101561036c57600080fd5b50600160a060020a03813581169160208101359091169060400135610cd0565b34801561039857600080fd5b50610155600480360360208110156103af57600080fd5b5035610cf1565b3480156103c257600080fd5b50610289600480360360208110156103d957600080fd5b5035610d0e565b3480156103ec57600080fd5b5061021d6004803603602081101561040357600080fd5b5035610d43565b610289600480360361014081101561042157600080fd5b600160a060020a038235811692602081013582169260408201358316926060830135811692608081013582169260a082013583169260c0830135169190810190610100810160e082013564010000000081111561047d57600080fd5b82018360208201111561048f57600080fd5b803590602001918460018302840111640100000000831117156104b157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561050457600080fd5b82018360208201111561051657600080fd5b8035906020019184600183028401116401000000008311171561053857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561058b57600080fd5b82018360208201111561059d57600080fd5b803590602001918460018302840111640100000000831117156105bf57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610d6d945050505050565b34801561060c57600080fd5b506102896004803603602081101561062357600080fd5b5035600160a060020a031661126e565b34801561063f57600080fd5b506106666004803603602081101561065657600080fd5b5035600160a060020a03166112a1565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156106a257818101518382015260200161068a565b505050509050019250505060405180910390f35b3480156106c257600080fd5b506106e0600480360360208110156106d957600080fd5b503561130d565b6040518086600160a060020a0316600160a060020a0316815260200180602001806020018060200180602001858103855289818151815260200191508051906020019080838360005b83811015610741578181015183820152602001610729565b50505050905090810190601f16801561076e5780820380516001836020036101000a031916815260200191505b5085810384528851815288516020918201918a019080838360005b838110156107a1578181015183820152602001610789565b50505050905090810190601f1680156107ce5780820380516001836020036101000a031916815260200191505b50858103835287518152875160209182019189019080838360005b838110156108015781810151838201526020016107e9565b50505050905090810190601f16801561082e5780820380516001836020036101000a031916815260200191505b50858103825286518152865160209182019188019080838360005b83811015610861578181015183820152602001610849565b50505050905090810190601f16801561088e5780820380516001836020036101000a031916815260200191505b50995050505050505050505060405180910390f35b3480156108af57600080fd5b5061017e6115fa565b3480156108c457600080fd5b50610272600480360360408110156108db57600080fd5b50600160a060020a038135169060200135151561165b565b3480156108ff57600080fd5b506102726004803603608081101561091657600080fd5b600160a060020a0382358116926020810135909116916040820135919081019060808101606082013564010000000081111561095157600080fd5b82018360208201111561096357600080fd5b8035906020019184600183028401116401000000008311171561098557600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506116df945050505050565b3480156109d257600080fd5b5061017e600480360360208110156109e957600080fd5b5035611707565b3480156109fc57600080fd5b5061015560048036036040811015610a1357600080fd5b50600160a060020a03813581169160200135166117b2565b600160e060020a0319811660009081526020819052604090205460ff165b919050565b60058054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610ada5780601f10610aaf57610100808354040283529160200191610ada565b820191906000526020600020905b815481529060010190602001808311610abd57829003601f168201915b505050505090505b90565b600090815260026020526040902054600160a060020a031690565b6000610b0b82610d43565b9050600160a060020a038381169082161415610b2657600080fd5b33600160a060020a0382161480610b425750610b4281336117b2565b1515610b4d57600080fd5b600082815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b60095490565b7f01ffc9a70000000000000000000000000000000000000000000000000000000081565b610bea33826117e0565b1515610bf557600080fd5b600160a060020a0383161515610c0a57600080fd5b600160a060020a0382161515610c1f57600080fd5b610c29838261183f565b610c3383826118b0565b610c3d82826119b2565b8082600160a060020a031684600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6000610c8e8361126e565b8210610c9957600080fd5b600160a060020a0383166000908152600760205260409020805483908110610cbd57fe5b9060005260206000200154905092915050565b610cec83838360206040519081016040528060008152506116df565b505050565b600090815260016020526040902054600160a060020a0316151590565b6000610d18610bb6565b8210610d2357600080fd5b6009805483908110610d3157fe5b90600052602060002001549050919050565b600081815260016020526040812054600160a060020a0316801515610d6757600080fd5b92915050565b6040516000906007340490600160a060020a038d169082156108fc0290839085818181858888f19350505050158015610daa573d6000803e3d6000fd5b50604051600160a060020a038c169082156108fc029083906000818181858888f19350505050158015610de1573d6000803e3d6000fd5b50604051600160a060020a038b169082156108fc029083906000818181858888f19350505050158015610e18573d6000803e3d6000fd5b50604051600160a060020a038a169082156108fc029083906000818181858888f19350505050158015610e4f573d6000803e3d6000fd5b50604051600160a060020a0389169082156108fc029083906000818181858888f19350505050158015610e86573d6000803e3d6000fd5b50604051600160a060020a0388169082156108fc029083906000818181858888f19350505050158015610ebd573d6000803e3d6000fd5b50604051600160a060020a0387169082156108fc029083906000818181858888f19350505050158015610ef4573d6000803e3d6000fd5b506060610f078d8d8d8d8d8d8d896119f8565b9050610f116122d4565b506040805160a08101825282815260208082018990529181018790526060810186905260808101849052600c80546001818101808455600093909352835180519495919486936005027fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c70192610f8b928492910190612304565b506020828101518051610fa49260018501920190612304565b5060408201518051610fc0916002840191602090910190612304565b5060608201518051610fdc916003840191602090910190612304565b506080820151816004015550500393506060610ff788611bab565b90506110033386611c19565b61100d8582611c68565b33600160a060020a03167f01f4e6d07c9c03c8f262e6aa7b6a5d3089e0e00cf5a68c4c1ed8691c5f3392808685878c8c8c8860405180888152602001806020018781526020018060200180602001806020018060200186810386528c818151815260200191508051906020019080838360005b83811015611098578181015183820152602001611080565b50505050905090810190601f1680156110c55780820380516001836020036101000a031916815260200191505b5086810385528a5181528a516020918201918c019080838360005b838110156110f85781810151838201526020016110e0565b50505050905090810190601f1680156111255780820380516001836020036101000a031916815260200191505b5086810384528951815289516020918201918b019080838360005b83811015611158578181015183820152602001611140565b50505050905090810190601f1680156111855780820380516001836020036101000a031916815260200191505b5086810383528851815288516020918201918a019080838360005b838110156111b85781810151838201526020016111a0565b50505050905090810190601f1680156111e55780820380516001836020036101000a031916815260200191505b50868103825287518152875160209182019189019080838360005b83811015611218578181015183820152602001611200565b50505050905090810190601f1680156112455780820380516001836020036101000a031916815260200191505b509c5050505050505050505050505060405180910390a2505050509a9950505050505050505050565b6000600160a060020a038216151561128557600080fd5b50600160a060020a031660009081526003602052604090205490565b600160a060020a03811660009081526007602090815260409182902080548351818402810184019094528084526060939283018282801561130157602002820191906000526020600020905b8154815260200190600101908083116112ed575b50505050509050919050565b600081815260016020526040812054600c8054606092839283928392600160a060020a031691908890811061133e57fe5b9060005260206000209060050201600001600c8881548110151561135e57fe5b9060005260206000209060050201600301600c8981548110151561137e57fe5b9060005260206000209060050201600101600c8a81548110151561139e57fe5b6000918252602091829020855460408051601f600260001961010060018716150201909416849004908101879004870282018701909252818152600590940290920101928691908301828280156114365780601f1061140b57610100808354040283529160200191611436565b820191906000526020600020905b81548152906001019060200180831161141957829003601f168201915b5050865460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152959950889450925084019050828280156114c45780601f10611499576101008083540402835291602001916114c4565b820191906000526020600020905b8154815290600101906020018083116114a757829003601f168201915b5050855460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152959850879450925084019050828280156115525780601f1061152757610100808354040283529160200191611552565b820191906000526020600020905b81548152906001019060200180831161153557829003601f168201915b5050845460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152959750869450925084019050828280156115e05780601f106115b5576101008083540402835291602001916115e0565b820191906000526020600020905b8154815290600101906020018083116115c357829003601f168201915b505050505090509450945094509450945091939590929450565b60068054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610ada5780601f10610aaf57610100808354040283529160200191610ada565b600160a060020a03821633141561167157600080fd5b336000818152600460209081526040808320600160a060020a03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b6116ea848484610be0565b6116f684848484611c9b565b151561170157600080fd5b50505050565b606061171282610cf1565b151561171d57600080fd5b6000828152600b602090815260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845290918301828280156113015780601f1061178557610100808354040283529160200191611301565b820191906000526020600020905b8154815290600101906020018083116117935750939695505050505050565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205460ff1690565b6000806117ec83610d43565b905080600160a060020a031684600160a060020a03161480611827575083600160a060020a031661181c84610ae5565b600160a060020a0316145b80611837575061183781856117b2565b949350505050565b81600160a060020a031661185282610d43565b600160a060020a03161461186557600080fd5b600081815260026020526040902054600160a060020a0316156118ac576000818152600260205260409020805473ffffffffffffffffffffffffffffffffffffffff191690555b5050565b6118ba8282611e02565b600081815260086020908152604080832054600160a060020a038616845260079092528220549091906118f490600163ffffffff611e9816565b600160a060020a0385166000908152600760205260408120805492935090918390811061191d57fe5b90600052602060002001549050806007600087600160a060020a0316600160a060020a031681526020019081526020016000208481548110151561195d57fe5b6000918252602080832090910192909255600160a060020a0387168152600790915260409020805490611994906000198301612382565b50600093845260086020526040808520859055908452909220555050565b6119bc8282611eaa565b600160a060020a039091166000908152600760209081526040808320805460018101825590845282842081018590559383526008909152902055565b604080516020810190915260008152606090611a1c81611a178c611f3a565b61203c565b9050611a448160408051908101604052806001815260200160f860020a602d0281525061203c565b9050611a5381611a178b611f3a565b9050611a7b8160408051908101604052806001815260200160f860020a602d0281525061203c565b9050611a8a81611a178a611f3a565b9050611ab28160408051908101604052806001815260200160f860020a602d0281525061203c565b9050611ac181611a1789611f3a565b9050611ae98160408051908101604052806001815260200160f860020a602d0281525061203c565b9050611af881611a1788611f3a565b9050611b208160408051908101604052806001815260200160f860020a602d0281525061203c565b9050611b2f81611a1787611f3a565b9050611b578160408051908101604052806001815260200160f860020a602d0281525061203c565b9050611b6681611a1786611f3a565b9050611b8e8160408051908101604052806001815260200160f860020a602d0281525061203c565b9050611b9d81611a178561214d565b9a9950505050505050505050565b6040805160608181018352602e82527f68747470733a2f2f7777772e6d696c6c696f6e6574686572776f7264732e636f60208301527f6d2f57696e2f41743f67616d653d00000000000000000000000000000000000092820192909252611c12818461203c565b9392505050565b611c2382826121e8565b600980546000838152600a60205260408120829055600182018355919091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af015550565b611c7182610cf1565b1515611c7c57600080fd5b6000828152600b602090815260409091208251610cec92840190612304565b6000611caf84600160a060020a0316612243565b1515611cbd57506001611837565b6040517f150b7a020000000000000000000000000000000000000000000000000000000081523360048201818152600160a060020a03888116602485015260448401879052608060648501908152865160848601528651600095928a169463150b7a029490938c938b938b939260a4019060208501908083838e5b83811015611d50578181015183820152602001611d38565b50505050905090810190601f168015611d7d5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015611d9f57600080fd5b505af1158015611db3573d6000803e3d6000fd5b505050506040513d6020811015611dc957600080fd5b5051600160e060020a0319167f150b7a020000000000000000000000000000000000000000000000000000000014915050949350505050565b81600160a060020a0316611e1582610d43565b600160a060020a031614611e2857600080fd5b600160a060020a038216600090815260036020526040902054611e5290600163ffffffff611e9816565b600160a060020a03909216600090815260036020908152604080832094909455918152600190915220805473ffffffffffffffffffffffffffffffffffffffff19169055565b600082821115611ea457fe5b50900390565b600081815260016020526040902054600160a060020a031615611ecc57600080fd5b6000818152600160208181526040808420805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0388169081179091558452600390915290912054611f1a9161224b565b600160a060020a0390921660009081526003602052604090209190915550565b604080516028808252606082810190935282919060208201818038833901905050905060005b60148110156120355760008160130360080260020a85600160a060020a0316811515611f8857fe5b0460f860020a029050600060108260f860020a900460ff16811515611fa957fe5b0460f860020a90810291508082046010028184040302611fc882612258565b8585600202815181101515611fd957fe5b906020010190600160f860020a031916908160001a905350611ffa81612258565b858560020260010181518110151561200e57fe5b906020010190600160f860020a031916908160001a9053505060019092019150611f609050565b5092915050565b6060808390506060839050606081518351016040519080825280601f01601f191660200182016040528015612078576020820181803883390190505b509050806000805b85518110156120de57858181518110151561209757fe5b90602001015160f860020a900460f860020a0283838060010194508151811015156120be57fe5b906020010190600160f860020a031916908160001a905350600101612080565b5060005b84518110156121405784818151811015156120f957fe5b90602001015160f860020a900460f860020a02838380600101945081518110151561212057fe5b906020010190600160f860020a031916908160001a9053506001016120e2565b5090979650505050505050565b6040805160208082528183019092526060918391839160208201818038833901905050905060005b60208110156121e0576008810260020a83027fff000000000000000000000000000000000000000000000000000000000000008116156121d7578083838151811015156121be57fe5b906020010190600160f860020a031916908160001a9053505b50600101612175565b509392505050565b600160a060020a03821615156121fd57600080fd5b61220782826119b2565b6040518190600160a060020a038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000903b1190565b81810182811015610d6757fe5b60007f0a000000000000000000000000000000000000000000000000000000000000007fff00000000000000000000000000000000000000000000000000000000000000831610156122bc578160f860020a900460300160f860020a029050610a49565b8160f860020a900460570160f860020a029050610a49565b60a06040519081016040528060608152602001606081526020016060815260200160608152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061234557805160ff1916838001178555612372565b82800160010185558215612372579182015b82811115612372578251825591602001919060010190612357565b5061237e9291506123a2565b5090565b815481835581811115610cec57600083815260209020610cec9181019083015b610ae291905b8082111561237e57600081556001016123a85600a165627a7a7230582069418110e9b888023bd9a1542ce249340f3510554ea0b97e55d6014125c7fd2a0029"}