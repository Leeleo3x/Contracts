{"Runs": "200", "SwarmSource": "bzzr://5e64ce47ca67e1c613a62eff9d1f0be90ee852f0ad9fa29c4ca14e102bb4215d", "ABI": "[{\"constant\":false,\"inputs\":[],\"name\":\"freezeTransfers\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unfreezeTransfers\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenIssuer\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unfreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.10+commit.f0d539ae", "ConstructorArguments": "00000000000000000000000003b92813983f611a6bfdf0c23c4f289ed073dcf5", "SourceCode": "/*\r\n * Blockchain Capital Token Smart Contract.  Copyright \u00a9 2017 by ABDK\r\n * Consulting.  \r\n */\r\n\r\n/*\r\n * ERC-20 Standard Token Smart Contract Interface.\r\n * Copyright \u00a9 2016 by ABDK Consulting.\r\n */\r\npragma solidity ^0.4.1;\r\n\r\n/**\r\n * ERC-20 standard token interface, as defined\r\n * <a href=\"http://github.com/ethereum/EIPs/issues/20\">here</a>.\r\n */\r\ncontract Token {\r\n  /**\r\n   * Get total number of tokens in circulation.\r\n   *\r\n   * @return total number of tokens in circulation\r\n   */\r\n  function totalSupply () constant returns (uint256 supply);\r\n\r\n  /**\r\n   * Get number of tokens currently belonging to given owner.\r\n   *\r\n   * @param _owner address to get number of tokens currently belonging to the\r\n            owner of\r\n   * @return number of tokens currently belonging to the owner of given address\r\n   */\r\n  function balanceOf (address _owner) constant returns (uint256 balance);\r\n\r\n  /**\r\n   * Transfer given number of tokens from message sender to given recipient.\r\n   *\r\n   * @param _to address to transfer tokens to the owner of\r\n   * @param _value number of tokens to transfer to the owner of given address\r\n   * @return true if tokens were transferred successfully, false otherwise\r\n   */\r\n  function transfer (address _to, uint256 _value) returns (bool success);\r\n\r\n  /**\r\n   * Transfer given number of tokens from given owner to given recipient.\r\n   *\r\n   * @param _from address to transfer tokens from the owner of\r\n   * @param _to address to transfer tokens to the owner of\r\n   * @param _value number of tokens to transfer from given owner to given\r\n            recipient\r\n   * @return true if tokens were transferred successfully, false otherwise\r\n   */\r\n  function transferFrom (address _from, address _to, uint256 _value)\r\n  returns (bool success);\r\n\r\n  /**\r\n   * Allow given spender to transfer given number of tokens from message sender.\r\n   *\r\n   * @param _spender address to allow the owner of to transfer tokens from\r\n            message sender\r\n   * @param _value number of tokens to allow to transfer\r\n   * @return true if token transfer was successfully approved, false otherwise\r\n   */\r\n  function approve (address _spender, uint256 _value) returns (bool success);\r\n\r\n  /**\r\n   * Tell how many tokens given spender is currently allowed to transfer from\r\n   * given owner.\r\n   *\r\n   * @param _owner address to get number of tokens allowed to be transferred\r\n   *        from the owner of\r\n   * @param _spender address to get number of tokens allowed to be transferred\r\n   *        by the owner of\r\n   * @return number of tokens given spender is currently allowed to transfer\r\n   *         from given owner\r\n   */\r\n  function allowance (address _owner, address _spender) constant\r\n  returns (uint256 remaining);\r\n\r\n  /**\r\n   * Logged when tokens were transferred from one owner to another.\r\n   *\r\n   * @param _from address of the owner, tokens were transferred from\r\n   * @param _to address of the owner, tokens were transferred to\r\n   * @param _value number of tokens transferred\r\n   */\r\n  event Transfer (address indexed _from, address indexed _to, uint256 _value);\r\n\r\n  /**\r\n   * Logged when owner approved his tokens to be transferred by some spender.\r\n   *\r\n   * @param _owner owner who approved his tokens to be transferred\r\n   * @param _spender spender who were allowed to transfer the tokens belonging\r\n   *        to the owner\r\n   * @param _value number of tokens belonging to the owner, approved to be\r\n   *        transferred by the spender\r\n   */\r\n  event Approval (\r\n    address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n/*\r\n * Safe Math Smart Contract.  Copyright \u00a9 2016 by ABDK Consulting.\r\n */\r\n/**\r\n * Provides methods to safely add, subtract and multiply uint256 numbers.\r\n */\r\ncontract SafeMath {\r\n  uint256 constant private MAX_UINT256 =\r\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n  /**\r\n   * Add two uint256 values, throw in case of overflow.\r\n   *\r\n   * @param x first value to add\r\n   * @param y second value to add\r\n   * @return x + y\r\n   */\r\n  function safeAdd (uint256 x, uint256 y)\r\n  constant internal\r\n  returns (uint256 z) {\r\n    if (x > MAX_UINT256 - y) throw;\r\n    return x + y;\r\n  }\r\n\r\n  /**\r\n   * Subtract one uint256 value from another, throw in case of underflow.\r\n   *\r\n   * @param x value to subtract from\r\n   * @param y value to subtract\r\n   * @return x - y\r\n   */\r\n  function safeSub (uint256 x, uint256 y)\r\n  constant internal\r\n  returns (uint256 z) {\r\n    if (x < y) throw;\r\n    return x - y;\r\n  }\r\n\r\n  /**\r\n   * Multiply two uint256 values, throw in case of overflow.\r\n   *\r\n   * @param x first value to multiply\r\n   * @param y second value to multiply\r\n   * @return x * y\r\n   */\r\n  function safeMul (uint256 x, uint256 y)\r\n  constant internal\r\n  returns (uint256 z) {\r\n    if (y == 0) return 0; // Prevent division by zero at the next line\r\n    if (x > MAX_UINT256 / y) throw;\r\n    return x * y;\r\n  }\r\n}\r\n\r\n/*\r\n * Abstract Token Smart Contract.  Copyright \u00a9 2017 by ABDK Consulting.\r\n */\r\n\r\n/**\r\n * Abstract Token Smart Contract that could be used as a base contract for\r\n * ERC-20 token contracts.\r\n */\r\ncontract AbstractToken is Token, SafeMath {\r\n  /**\r\n   * Create new Abstract Token contract.\r\n   */\r\n  function AbstractToken () {\r\n    // Do nothing\r\n  }\r\n\r\n  /**\r\n   * Get number of tokens currently belonging to given owner.\r\n   *\r\n   * @param _owner address to get number of tokens currently belonging to the\r\n            owner of\r\n   * @return number of tokens currently belonging to the owner of given address\r\n   */\r\n  function balanceOf (address _owner) constant returns (uint256 balance) {\r\n    return accounts [_owner];\r\n  }\r\n\r\n  /**\r\n   * Transfer given number of tokens from message sender to given recipient.\r\n   *\r\n   * @param _to address to transfer tokens to the owner of\r\n   * @param _value number of tokens to transfer to the owner of given address\r\n   * @return true if tokens were transferred successfully, false otherwise\r\n   */\r\n  function transfer (address _to, uint256 _value) returns (bool success) {\r\n    if (accounts [msg.sender] < _value) return false;\r\n    if (_value > 0 && msg.sender != _to) {\r\n      accounts [msg.sender] = safeSub (accounts [msg.sender], _value);\r\n      accounts [_to] = safeAdd (accounts [_to], _value);\r\n      Transfer (msg.sender, _to, _value);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Transfer given number of tokens from given owner to given recipient.\r\n   *\r\n   * @param _from address to transfer tokens from the owner of\r\n   * @param _to address to transfer tokens to the owner of\r\n   * @param _value number of tokens to transfer from given owner to given\r\n            recipient\r\n   * @return true if tokens were transferred successfully, false otherwise\r\n   */\r\n  function transferFrom (address _from, address _to, uint256 _value)\r\n  returns (bool success) {\r\n    if (allowances [_from][msg.sender] < _value) return false;\r\n    if (accounts [_from] < _value) return false;\r\n\r\n    allowances [_from][msg.sender] =\r\n      safeSub (allowances [_from][msg.sender], _value);\r\n\r\n    if (_value > 0 && _from != _to) {\r\n      accounts [_from] = safeSub (accounts [_from], _value);\r\n      accounts [_to] = safeAdd (accounts [_to], _value);\r\n      Transfer (_from, _to, _value);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Allow given spender to transfer given number of tokens from message sender.\r\n   *\r\n   * @param _spender address to allow the owner of to transfer tokens from\r\n            message sender\r\n   * @param _value number of tokens to allow to transfer\r\n   * @return true if token transfer was successfully approved, false otherwise\r\n   */\r\n  function approve (address _spender, uint256 _value) returns (bool success) {\r\n    allowances [msg.sender][_spender] = _value;\r\n    Approval (msg.sender, _spender, _value);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Tell how many tokens given spender is currently allowed to transfer from\r\n   * given owner.\r\n   *\r\n   * @param _owner address to get number of tokens allowed to be transferred\r\n   *        from the owner of\r\n   * @param _spender address to get number of tokens allowed to be transferred\r\n   *        by the owner of\r\n   * @return number of tokens given spender is currently allowed to transfer\r\n   *         from given owner\r\n   */\r\n  function allowance (address _owner, address _spender) constant\r\n  returns (uint256 remaining) {\r\n    return allowances [_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * Mapping from addresses of token holders to the numbers of tokens belonging\r\n   * to these token holders.\r\n   */\r\n  mapping (address => uint256) accounts;\r\n\r\n  /**\r\n   * Mapping from addresses of token holders to the mapping of addresses of\r\n   * spenders to the allowances set by these token holders to these spenders.\r\n   */\r\n  mapping (address => mapping (address => uint256)) private allowances;\r\n}\r\n\r\n\r\n/*\r\n * Standard Token Smart Contract.  Copyright \u00a9 2016 by ABDK Consulting.\r\n */\r\n\r\n\r\n/**\r\n * Standard Token Smart Contract that implements ERC-20 token with special\r\n * unlimited supply \"token issuer\" account.\r\n */\r\ncontract StandardToken is AbstractToken {\r\n  uint256 constant private MAX_UINT256 =\r\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n  /**\r\n   * Create new Standard Token contract with given \"token issuer\" account.\r\n   *\r\n   * @param _tokenIssuer address of \"token issuer\" account\r\n   */\r\n  function StandardToken (address _tokenIssuer) AbstractToken () {\r\n    tokenIssuer = _tokenIssuer;\r\n    accounts [_tokenIssuer] = MAX_UINT256;\r\n  }\r\n\r\n  /**\r\n   * Get total number of tokens in circulation.\r\n   *\r\n   * @return total number of tokens in circulation\r\n   */\r\n  function totalSupply () constant returns (uint256 supply) {\r\n    return safeSub (MAX_UINT256, accounts [tokenIssuer]);\r\n  }\r\n\r\n  /**\r\n   * Get number of tokens currently belonging to given owner.\r\n   *\r\n   * @param _owner address to get number of tokens currently belonging to the\r\n            owner of\r\n   * @return number of tokens currently belonging to the owner of given address\r\n   */\r\n  function balanceOf (address _owner) constant returns (uint256 balance) {\r\n    return _owner == tokenIssuer ? 0 : AbstractToken.balanceOf (_owner);\r\n  }\r\n\r\n  /**\r\n   * Address of \"token issuer\" account.\r\n   */\r\n  address private tokenIssuer;\r\n}\r\n\r\n/**\r\n * Blockchain Capital Token Smart Contract.\r\n */\r\ncontract BCAPToken is StandardToken {\r\n  /**\r\n   * Create new Blockchain Capital Token contract with given token issuer\r\n   * address.\r\n   *\r\n   * @param _tokenIssuer address of token issuer\r\n   */\r\n  function BCAPToken (address _tokenIssuer)\r\n    StandardToken (_tokenIssuer) {\r\n    owner = _tokenIssuer;\r\n  }\r\n\r\n  /**\r\n   * Freeze token transfers.\r\n   */\r\n  function freezeTransfers () {\r\n    if (msg.sender != owner) throw;\r\n\r\n    if (!transfersFrozen) {\r\n      transfersFrozen = true;\r\n      Freeze ();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unfreeze token transfers.\r\n   */\r\n  function unfreezeTransfers () {\r\n    if (msg.sender != owner) throw;\r\n\r\n    if (transfersFrozen) {\r\n      transfersFrozen = false;\r\n      Unfreeze ();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Transfer given number of tokens from message sender to given recipient.\r\n   *\r\n   * @param _to address to transfer tokens to the owner of\r\n   * @param _value number of tokens to transfer to the owner of given address\r\n   * @return true if tokens were transferred successfully, false otherwise\r\n   */\r\n  function transfer (address _to, uint256 _value) returns (bool success) {\r\n    if (transfersFrozen) return false;\r\n    else return AbstractToken.transfer (_to, _value);\r\n  }\r\n\r\n  /**\r\n   * Transfer given number of tokens from given owner to given recipient.\r\n   *\r\n   * @param _from address to transfer tokens from the owner of\r\n   * @param _to address to transfer tokens to the owner of\r\n   * @param _value number of tokens to transfer from given owner to given\r\n            recipient\r\n   * @return true if tokens were transferred successfully, false otherwise\r\n   */\r\n  function transferFrom (address _from, address _to, uint256 _value)\r\n  returns (bool success) {\r\n    if (transfersFrozen) return false;\r\n    else return AbstractToken.transferFrom (_from, _to, _value);\r\n  }\r\n\r\n  /**\r\n   * Logged when transfers were frozen.\r\n   */\r\n  event Freeze ();\r\n\r\n  /**\r\n   * Logged when transfers were unfrozen.\r\n   */\r\n  event Unfreeze ();\r\n\r\n  /**\r\n   * Address of the owner of smart contract.  Only owner is allowed to\r\n   * freeze/unfreeze transfers.\r\n   */\r\n  address owner;\r\n\r\n  /**\r\n   * Whether transfers are currently frozen or not.\r\n   */\r\n  bool transfersFrozen = false;\r\n}", "OptimizationUsed": "1", "ContractName": "BCAPToken", "ByteCode": "0x606060405236156100725763ffffffff60e060020a600035041663015024608114610074578063095ea7b31461008657806318160ddd146100b957806323b872dd146100db57806331c420d41461011457806370a0823114610126578063a9059cbb14610154578063dd62ed3e14610187575bfe5b341561007c57fe5b6100846101bb565b005b341561008e57fe5b6100a5600160a060020a036004351660243561023b565b604080519115158252519081900360200190f35b34156100c157fe5b6100c96102a6565b60408051918252519081900360200190f35b34156100e357fe5b6100a5600160a060020a03600435811690602435166044356102d4565b604080519115158252519081900360200190f35b341561011c57fe5b610084610307565b005b341561012e57fe5b6100c9600160a060020a0360043516610380565b60408051918252519081900360200190f35b341561015c57fe5b6100a5600160a060020a03600435166024356103b1565b604080519115158252519081900360200190f35b341561018f57fe5b6100c9600160a060020a03600435811690602435166103e6565b60408051918252519081900360200190f35b60035433600160a060020a039081169116146101d75760006000fd5b60035460a060020a900460ff161515610238576003805474ff0000000000000000000000000000000000000000191660a060020a1790556040517f615acbaede366d76a8b8cb2a9ada6a71495f0786513d71aa97aaf0c3910b78de90600090a15b5b565b600160a060020a03338116600081815260016020908152604080832094871680845294825280832086905580518681529051929493927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060015b92915050565b600254600160a060020a03166000908152602081905260408120546102ce9060001990610413565b90505b90565b60035460009060a060020a900460ff16156102f1575060006102ff565b6102fc84848461042e565b90505b5b9392505050565b60035433600160a060020a039081169116146103235760006000fd5b60035460a060020a900460ff1615610238576003805474ff0000000000000000000000000000000000000000191690556040517f2f05ba71d0df11bf5fa562a6569d70c4f80da84284badbe015ce1456063d0ded90600090a15b5b565b600254600090600160a060020a038381169116146103a6576103a1826105c5565b6103a9565b60005b90505b919050565b60035460009060a060020a900460ff16156103ce575060006102a0565b6103d883836105e4565b90506102a0565b5b92915050565b600160a060020a038083166000908152600160209081526040808320938516835292905220545b92915050565b6000818310156104235760006000fd5b508082035b92915050565b600160a060020a0380841660009081526001602090815260408083203390941683529290529081205482901015610467575060006102ff565b600160a060020a03841660009081526020819052604090205482901015610490575060006102ff565b600160a060020a03808516600090815260016020908152604080832033909416835292905220546104c19083610413565b600160a060020a038086166000908152600160209081526040808320339094168352929052908120919091558211801561050d575082600160a060020a031684600160a060020a031614155b156105ba57600160a060020a0384166000908152602081905260409020546105359083610413565b600160a060020a03808616600090815260208190526040808220939093559085168152205461056490836106e7565b600160a060020a038085166000818152602081815260409182902094909455805186815290519193928816927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a35b5060015b9392505050565b600160a060020a0381166000908152602081905260409020545b919050565b600160a060020a0333166000908152602081905260408120548290101561060d575060006102a0565b60008211801561062f575082600160a060020a031633600160a060020a031614155b156106dd57600160a060020a0333166000908152602081905260409020546106579083610413565b600160a060020a03338116600090815260208190526040808220939093559085168152205461068690836106e7565b600160a060020a03808516600081815260208181526040918290209490945580518681529051919333909316927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a35b5060015b92915050565b600081600019038311156106fb5760006000fd5b508181015b929150505600a165627a7a723058205e64ce47ca67e1c613a62eff9d1f0be90ee852f0ad9fa29c4ca14e102bb4215d0029"}