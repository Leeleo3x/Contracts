{"Runs": "200", "SwarmSource": "bzzr://5ad3756d194a8b0ce3399ad948dd279610af008bf0ec9341456b2f12bf7ee282", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_tokenOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_tokenApprovals\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ooo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_operatorApprovals\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_ownedTokensCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.25+commit.59dbf8f1", "ConstructorArguments": "", "SourceCode": "pragma solidity >0.4.24 <0.5.0;\r\n\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\nlibrary Address {\r\n  function isContract(address account) internal view returns (bool) {\r\n    uint256 size;\r\n    assembly { size := extcodesize(account) }\r\n    return size > 0;\r\n  }\r\n}\r\n\r\n\r\ncontract IERC165{\r\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\r\n}\r\n\r\ncontract ERC165 is IERC165{\r\n    mapping(bytes4 => bool) internal _supportedInterfaces;\r\n    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\r\n    constructor() public {\r\n        _registerInterface(_InterfaceId_ERC165);\r\n    }\r\n    function supportsInterface(bytes4 interfaceID) external view returns (bool){\r\n        return _supportedInterfaces[interfaceID];\r\n    }\r\n    function _registerInterface(bytes4 interfaceId) internal {\r\n        require(interfaceId != 0xffffffff);\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n}\r\n\r\ncontract IERC721 {\r\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n    function balanceOf(address _owner) public view returns (uint256);\r\n    function ownerOf(uint256 _tokenId) public view returns (address);\r\n    function approve(address _approved, uint256 _tokenId) public payable;\r\n    function getApproved(uint256 _tokenId) public view returns (address);\r\n    function setApprovalForAll(address _operator, bool _approved) public;\r\n    function isApprovedForAll(address _owner, address _operator) public view returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public payable;\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) public payable;\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) public payable;    \r\n\r\n}\r\n\r\ncontract IERC721Receiver {\r\n    bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\r\n    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes _data) public returns(bytes4);\r\n}\r\n\r\ncontract ERC721Receiver is IERC721Receiver {\r\n    function onERC721Received(address _operator, address _from,uint256 _tokenId, bytes _data) public returns(bytes4) {\r\n        return ERC721_RECEIVED;\r\n    }\r\n}\r\n\r\ncontract ERC721 is IERC721,ERC165 {\r\n    \r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    \r\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\r\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\r\n    // Mapping from token ID to owner\r\n    mapping (uint256 => address) public _tokenOwner;\r\n    // Mapping from token ID to approved address\r\n    mapping (uint256 => address) public _tokenApprovals;\r\n    // Mapping from owner to number of owned token\r\n    mapping (address => uint256) public _ownedTokensCount;\r\n    // Mapping from owner to operator approvals\r\n    mapping (address => mapping (address => bool)) public _operatorApprovals;\r\n    bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\r\n    /*\r\n     * 0x80ac58cd ===\r\n     *   bytes4(keccak256('balanceOf(address)')) ^\r\n     *   bytes4(keccak256('ownerOf(uint256)')) ^\r\n     *   bytes4(keccak256('approve(address,uint256)')) ^\r\n     *   bytes4(keccak256('getApproved(uint256)')) ^\r\n     *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\r\n     *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\r\n     *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n     *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\r\n     *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\r\n    */\r\n    constructor() public {\r\n        _registerInterface(_InterfaceId_ERC721);\r\n    }\r\n    function balanceOf(address _owner) public view returns (uint256){\r\n        require(_owner != address(0));\r\n        return _ownedTokensCount[_owner];\r\n    }\r\n    function ownerOf(uint256 tokenId) public view returns (address) {\r\n        address owner = _tokenOwner[tokenId];\r\n        require(owner != address(0));\r\n        return owner;\r\n    }\r\n    function approve(address to, uint256 tokenId) public payable {\r\n        address owner = ownerOf(tokenId);\r\n        require(to != owner);\r\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(owner, to, tokenId);\r\n    }\r\n    function getApproved(uint256 tokenId) public view returns (address) {\r\n        require(_exists(tokenId));\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n    function setApprovalForAll(address to, bool approved) public {\r\n        require(to != msg.sender);\r\n        _operatorApprovals[msg.sender][to] = approved;\r\n        emit ApprovalForAll(msg.sender, to, approved);\r\n    }\r\n    function isApprovedForAll(address owner, address operator) public view returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n    function transferFrom(address from, address to, uint256 tokenId) public payable {\r\n        require(_isApprovedOrOwner(msg.sender, tokenId));\r\n        require(to != address(0));\r\n\r\n        _clearApproval(from, tokenId);\r\n        _removeTokenFrom(from, tokenId);\r\n        _addTokenTo(to, tokenId);\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public payable {\r\n        // solium-disable-next-line arg-overflow\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) public payable {\r\n        transferFrom(from, to, tokenId);\r\n        // solium-disable-next-line arg-overflow\r\n        require(_checkOnERC721Received(from, to, tokenId, _data));\r\n    }\r\n    function _exists(uint256 tokenId) internal view returns (bool) {\r\n        address owner = _tokenOwner[tokenId];\r\n        return owner != address(0);\r\n    }\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\r\n        address owner = ownerOf(tokenId);\r\n        // Disable solium check because of\r\n        // https://github.com/duaraghav8/Solium/issues/175\r\n        // solium-disable-next-line operator-whitespace\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n    function _addTokenTo(address to, uint256 tokenId) internal {\r\n        require(_tokenOwner[tokenId] == address(0));\r\n        _tokenOwner[tokenId] = to;\r\n        _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\r\n    }\r\n    function _removeTokenFrom(address from, uint256 tokenId) internal {\r\n        require(ownerOf(tokenId) == from);\r\n        _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\r\n        _tokenOwner[tokenId] = address(0);\r\n    }\r\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes _data) internal returns (bool) {\r\n        if (!to.isContract()) {\r\n            return true;\r\n        }\r\n        bytes4 retval = IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data);\r\n        return (retval == _ERC721_RECEIVED);\r\n    }\r\n    function _clearApproval(address owner, uint256 tokenId) private {\r\n        require(ownerOf(tokenId) == owner);\r\n        if (_tokenApprovals[tokenId] != address(0)) {\r\n            _tokenApprovals[tokenId] = address(0);\r\n        }\r\n    }\r\n    \r\n}\r\n\r\ncontract BTCCtoken is ERC721{\r\n    \r\n    \r\n    // Set in case the core contract is broken and an upgrade is required\r\n    address public ooo;\r\n    address public newContractAddress;\r\n    uint256 public totalSupply= 1000000000 ether;\r\n    string public constant name = \"btcc\";\r\n    string public constant symbol = \"btcc\";\r\n    \r\n    constructor() public{\r\n        address _owner = msg.sender;\r\n        _tokenOwner[1] = _owner;\r\n        _ownedTokensCount[_owner] = _ownedTokensCount[_owner]+1;\r\n    }\r\n    \r\n   \r\n    \r\n    \r\n    \r\n    }", "OptimizationUsed": "1", "ContractName": "BTCCtoken", "ByteCode": "0x6080604052600436106101065763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301ffc9a7811461010b57806306fdde0314610156578063081812fc146101e0578063095ea7b31461021457806318160ddd1461022d57806323b872dd1461025457806342842e0e146102715780636352211e1461028e5780636af04a57146102a657806370a08231146102bb578063796db312146102dc57806395d89b4114610156578063a22cb465146102f4578063a7cc01361461031a578063b88d4fde14610332578063d8dca9d914610394578063e985e9c5146103a9578063edc3bc3f146103d0578063f6631718146103f7575b600080fd5b34801561011757600080fd5b506101427bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1960043516610418565b604080519115158252519081900360200190f35b34801561016257600080fd5b5061016b61044c565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101a557818101518382015260200161018d565b50505050905090810190601f1680156101d25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101ec57600080fd5b506101f8600435610483565b60408051600160a060020a039092168252519081900360200190f35b61022b600160a060020a03600435166024356104b5565b005b34801561023957600080fd5b5061024261056b565b60408051918252519081900360200190f35b61022b600160a060020a0360043581169060243516604435610571565b61022b600160a060020a03600435811690602435166044356105ff565b34801561029a57600080fd5b506101f8600435610620565b3480156102b257600080fd5b506101f861064a565b3480156102c757600080fd5b50610242600160a060020a0360043516610659565b3480156102e857600080fd5b506101f860043561068c565b34801561030057600080fd5b5061022b600160a060020a036004351660243515156106a7565b34801561032657600080fd5b506101f860043561072b565b604080516020601f60643560048181013592830184900484028501840190955281845261022b94600160a060020a0381358116956024803590921695604435953695608494019181908401838280828437509497506107469650505050505050565b3480156103a057600080fd5b506101f861076e565b3480156103b557600080fd5b50610142600160a060020a036004358116906024351661077d565b3480156103dc57600080fd5b50610142600160a060020a03600435811690602435166107ab565b34801561040357600080fd5b50610242600160a060020a03600435166107cb565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191660009081526020819052604090205460ff1690565b60408051808201909152600481527f6274636300000000000000000000000000000000000000000000000000000000602082015281565b600061048e826107dd565b151561049957600080fd5b50600090815260026020526040902054600160a060020a031690565b60006104c082610620565b9050600160a060020a0383811690821614156104db57600080fd5b33600160a060020a03821614806104f757506104f7813361077d565b151561050257600080fd5b600082815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b60075481565b61057b33826107fa565b151561058657600080fd5b600160a060020a038216151561059b57600080fd5b6105a58382610859565b6105af83826108ca565b6105b98282610960565b8082600160a060020a031684600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b61061b8383836020604051908101604052806000815250610746565b505050565b600081815260016020526040812054600160a060020a031680151561064457600080fd5b92915050565b600654600160a060020a031681565b6000600160a060020a038216151561067057600080fd5b50600160a060020a031660009081526003602052604090205490565b600160205260009081526040902054600160a060020a031681565b600160a060020a0382163314156106bd57600080fd5b336000818152600460209081526040808320600160a060020a03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b600260205260009081526040902054600160a060020a031681565b610751848484610571565b61075d848484846109f0565b151561076857600080fd5b50505050565b600554600160a060020a031681565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205460ff1690565b600460209081526000928352604080842090915290825290205460ff1681565b60036020526000908152604090205481565b600090815260016020526040902054600160a060020a0316151590565b60008061080683610620565b905080600160a060020a031684600160a060020a03161480610841575083600160a060020a031661083684610483565b600160a060020a0316145b806108515750610851818561077d565b949350505050565b81600160a060020a031661086c82610620565b600160a060020a03161461087f57600080fd5b600081815260026020526040902054600160a060020a0316156108c6576000818152600260205260409020805473ffffffffffffffffffffffffffffffffffffffff191690555b5050565b81600160a060020a03166108dd82610620565b600160a060020a0316146108f057600080fd5b600160a060020a03821660009081526003602052604090205461091a90600163ffffffff610b7216565b600160a060020a03909216600090815260036020908152604080832094909455918152600190915220805473ffffffffffffffffffffffffffffffffffffffff19169055565b600081815260016020526040902054600160a060020a03161561098257600080fd5b6000818152600160208181526040808420805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03881690811790915584526003909152909120546109d091610b89565b600160a060020a0390921660009081526003602052604090209190915550565b600080610a0585600160a060020a0316610ba2565b1515610a145760019150610b69565b6040517f150b7a020000000000000000000000000000000000000000000000000000000081523360048201818152600160a060020a03898116602485015260448401889052608060648501908152875160848601528751918a169463150b7a0294938c938b938b93909160a490910190602085019080838360005b83811015610aa7578181015183820152602001610a8f565b50505050905090810190601f168015610ad45780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015610af657600080fd5b505af1158015610b0a573d6000803e3d6000fd5b505050506040513d6020811015610b2057600080fd5b50517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1981167f150b7a020000000000000000000000000000000000000000000000000000000014925090505b50949350505050565b60008083831115610b8257600080fd5b5050900390565b600082820183811015610b9b57600080fd5b9392505050565b6000903b11905600a165627a7a723058205ad3756d194a8b0ce3399ad948dd279610af008bf0ec9341456b2f12bf7ee2820029"}