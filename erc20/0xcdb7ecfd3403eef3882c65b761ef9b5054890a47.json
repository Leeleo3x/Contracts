{"Runs": "200", "SwarmSource": "bzzr://f0503e2df61292537ceb01bcae4269ca40dae7a3b5aca1e7244c15921b614b37", "ABI": "[{\"constant\":false,\"inputs\":[],\"name\":\"pauseable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"Supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"tokensup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hault\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_client\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"hurifymint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_client\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"hurmint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_hurclan\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.18+commit.9cf6e910", "ConstructorArguments": "00000000000000000000000081c771ebdf70fd8ca1686a1c5321b997bcbf2b79", "SourceCode": "pragma solidity ^0.4.18;\r\ncontract Hurify {\r\n/* Public variables of the token */\r\nstring public name = \"Hurify Token\";                  // Token Name\r\nstring public symbol = \"HUR\";                         // Token symbol\r\nuint public decimals = 18;                            // Token Decimal Point\r\naddress public owner;                                 // Owner of the Token Contract\r\nuint256 totalHurify;                                  // Total Token for the Crowdsale\r\nuint256 totalToken;                                   // The current total token supply.\r\nbool public hault = false;                            // Crowdsale State\r\n /* This creates an array with all balances */\r\nmapping (address => uint256) balances;\r\nmapping (address => mapping (address => uint256)) allowed;\r\n/* This generates a public event on the blockchain that will notify clients */\r\nevent Transfer(address indexed from, address indexed to, uint256 value);\r\n/* This notifies clients about the refund amount */\r\n event Burn(address _from, uint256 _value);\r\n event Approval(address _from, address _to, uint256 _value);\r\n/* Initializes contract with initial supply tokens to the creator of the contract */\r\nfunction Hurify (\r\n  address _hurclan\r\n  ) public {\r\n   owner = msg.sender;                                            // Assigning owner address.\r\n   balances[msg.sender] = 212500000 * (10 ** decimals);            // Assigning Total Token balance to owner\r\n   totalHurify = 273125000 * (10 ** decimals);\r\n   balances[_hurclan] = safeAdd(balances[_hurclan], 53125000 * (10 ** decimals));\r\n}\r\nfunction safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\nmodifier onlyPayloadSize(uint size) {\r\n   require(msg.data.length >= size + 4) ;\r\n   _;\r\n}\r\nmodifier onlyowner {\r\n  require (owner == msg.sender);\r\n  _;\r\n}\r\n///@notice Alter the Total Supply.\r\nfunction tokensup(uint256 _value) onlyowner public{\r\n  totalHurify = safeAdd(totalHurify, _value * (10 ** decimals));\r\n  balances[owner] = safeAdd(balances[owner], _value * (10 ** decimals));\r\n}\r\n///@notice Transfer tokens based on type\r\nfunction hurifymint( address _client, uint _value, uint _type) onlyowner public {\r\n  uint numHur;\r\n  require(totalToken <= totalHurify);\r\n  if(_type == 1){\r\n      numHur = _value * 6000 * (10 ** decimals);\r\n  }\r\n  else if (_type == 2){\r\n      numHur = _value * 5000 * (10 ** decimals);\r\n  }\r\n  balances[owner] = safeSub(balances[owner], numHur);\r\n  balances[_client] = safeAdd(balances[_client], numHur);\r\n  totalToken = safeAdd(totalToken, numHur);\r\n  Transfer(owner, _client, numHur);\r\n}\r\n///@notice Transfer token with only value\r\nfunction hurmint( address _client, uint256 _value) onlyowner public {\r\n  require(totalToken <= totalHurify);\r\n  uint256 numHur = _value * ( 10 ** decimals);\r\n  balances[owner] = safeSub(balances[owner], numHur);\r\n  balances[_client] = safeAdd(balances[_client], numHur);\r\n  totalToken = safeAdd(totalToken, numHur);\r\n  Transfer(owner, _client, numHur);\r\n}\r\n//Default assumes totalSupply can't be over max (2^256 - 1).\r\n//If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check requireit doesn't wrap.\r\n//Replace the if with this one instead.\r\nfunction transfer(address _to, uint256 _value) public returns (bool success) {\r\n    require(!hault);\r\n    require(balances[msg.sender] >= _value);\r\n    balances[msg.sender] = safeSub(balances[msg.sender],_value);\r\n    balances[_to] = safeAdd(balances[_to], _value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n}\r\nfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n      if (balances[_from] < _value || allowed[_from][msg.sender] < _value) {\r\n          // Balance or allowance too low\r\n          revert();\r\n      }\r\n      require(!hault);\r\n      balances[_to] = safeAdd(balances[_to], _value);\r\n      balances[_from] = safeSub(balances[_from],_value);\r\n      allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender],_value);\r\n      Transfer(_from, _to, _value);\r\n      return true;\r\n}\r\n/// @dev Sets approved amount of tokens for spender. Returns success.\r\n/// @param _spender Address of allowed account.\r\n/// @param _value Number of approved tokens.\r\n/// @return Returns success of function call.\r\nfunction approve(address _spender, uint256 _value)\r\n    public\r\n    returns (bool)\r\n{\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n}\r\n/// @dev Returns number of allowed tokens for given address.\r\n/// @param _owner Address of token owner.\r\n/// @param _spender Address of token spender.\r\n/// @return Returns remaining allowance for spender.\r\nfunction allowance(address _owner, address _spender)\r\n    constant\r\n    public\r\n    returns (uint256)\r\n{\r\n    return allowed[_owner][_spender];\r\n}\r\n/// @notice Returns balance of HUR Tokens.\r\n/// @param _from Balance for Address.\r\nfunction balanceOf(address _from) public view returns (uint balance) {\r\n    return balances[_from];\r\n  }\r\n\r\n///@notice Returns the Total Number of HUR Tokens.\r\nfunction totalSupply() public view returns (uint Supply){\r\n  return totalHurify;\r\n}\r\n/// @notice Pause the crowdsale\r\nfunction pauseable() public onlyowner {\r\n    hault = true;\r\n  }\r\n/// @notice Unpause the crowdsale\r\nfunction unpause() public onlyowner {\r\n    hault = false;\r\n}\r\n\r\n/// @notice Remove `_value` tokens from the system irreversibly\r\nfunction burn(uint256 _value) onlyowner public returns (bool success) {\r\n    require (balances[msg.sender] >= _value);                                          // Check if the sender has enough\r\n    balances[msg.sender] = safeSub(balances[msg.sender], _value);                      // Subtract from the sender\r\n    totalHurify = safeSub(totalHurify, _value);                                        // Updates totalSupply\r\n    Burn(msg.sender, _value);\r\n    return true;\r\n}\r\n}", "OptimizationUsed": "0", "ContractName": "Hurify", "ByteCode": "0x6060604052600436106100f1576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806303b98c0e146100f657806306fdde031461010b578063095ea7b31461019957806318160ddd146101f357806323b872dd1461021c578063247aebbb14610295578063275103fd146102b8578063313ce567146102e55780633f4ba83a1461030e57806342966c68146103235780634d32ef8c1461035e57806370a08231146103a9578063723eb2cc146103f65780638da5cb5b1461043857806395d89b411461048d578063a9059cbb1461051b578063dd62ed3e14610575575b600080fd5b341561010157600080fd5b6101096105e1565b005b341561011657600080fd5b61011e61065a565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561015e578082015181840152602081019050610143565b50505050905090810190601f16801561018b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101a457600080fd5b6101d9600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506106f8565b604051808215151515815260200191505060405180910390f35b34156101fe57600080fd5b610206610824565b6040518082815260200191505060405180910390f35b341561022757600080fd5b61027b600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061082e565b604051808215151515815260200191505060405180910390f35b34156102a057600080fd5b6102b66004808035906020019091905050610bac565b005b34156102c357600080fd5b6102cb610cfb565b604051808215151515815260200191505060405180910390f35b34156102f057600080fd5b6102f8610d0e565b6040518082815260200191505060405180910390f35b341561031957600080fd5b610321610d14565b005b341561032e57600080fd5b6103446004808035906020019091905050610d8d565b604051808215151515815260200191505060405180910390f35b341561036957600080fd5b6103a7600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091908035906020019091905050610f4b565b005b34156103b457600080fd5b6103e0600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506111ec565b6040518082815260200191505060405180910390f35b341561040157600080fd5b610436600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611235565b005b341561044357600080fd5b61044b6114aa565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561049857600080fd5b6104a06114d0565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104e05780820151818401526020810190506104c5565b50505050905090810190601f16801561050d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561052657600080fd5b61055b600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061156e565b604051808215151515815260200191505060405180910390f35b341561058057600080fd5b6105cb600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611761565b6040518082815260200191505060405180910390f35b3373ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561063d57600080fd5b6001600660006101000a81548160ff021916908315150217905550565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106f05780601f106106c5576101008083540402835291602001916106f0565b820191906000526020600020905b8154815290600101906020018083116106d357829003601f168201915b505050505081565b600081600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925338484604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a16001905092915050565b6000600454905090565b600081600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410806108f8575081600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054105b1561090257600080fd5b600660009054906101000a900460ff1615151561091e57600080fd5b610967600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836117e8565b600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506109f3600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611806565b600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610abc600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611806565b600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b3373ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610c0857600080fd5b610c1b600454600254600a0a83026117e8565b600481905550610c9360076000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600254600a0a83026117e8565b60076000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b600660009054906101000a900460ff1681565b60025481565b3373ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610d7057600080fd5b6000600660006101000a81548160ff021916908315150217905550565b60003373ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610deb57600080fd5b81600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610e3957600080fd5b610e82600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611806565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610ed160045483611806565b6004819055507fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca53383604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a160019050919050565b60003373ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610fa957600080fd5b60045460055411151515610fbc57600080fd5b6001821415610fd857600254600a0a6117708402029050610ff1565b6002821415610ff057600254600a0a61138884020290505b5b61105c60076000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482611806565b60076000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061110a600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054826117e8565b600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611159600554826117e8565b6005819055508373ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a350505050565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60003373ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561129357600080fd5b600454600554111515156112a657600080fd5b600254600a0a8202905061131b60076000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482611806565b60076000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506113c9600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054826117e8565b600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611418600554826117e8565b6005819055508273ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115665780601f1061153b57610100808354040283529160200191611566565b820191906000526020600020905b81548152906001019060200180831161154957829003601f168201915b505050505081565b6000600660009054906101000a900460ff1615151561158c57600080fd5b81600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156115da57600080fd5b611623600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611806565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506116af600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836117e8565b600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60008082840190508381101515156117fc57fe5b8091505092915050565b600082821115151561181457fe5b8183039050929150505600a165627a7a72305820f0503e2df61292537ceb01bcae4269ca40dae7a3b5aca1e7244c15921b614b370029"}