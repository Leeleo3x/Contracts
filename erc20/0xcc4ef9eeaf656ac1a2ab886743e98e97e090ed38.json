{"Runs": "200", "SwarmSource": "bzzr://fd9d72d00ec6336f1f859b938935b01a220e394b0d4d3a649e67dee31603bda5", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"splitter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCreationCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethFundDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ddftFundDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCreationMin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ddftFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_ethFundDeposit\",\"type\":\"address\"},{\"name\":\"_ddftFundDeposit\",\"type\":\"address\"},{\"name\":\"_splitter\",\"type\":\"address\"},{\"name\":\"_fundingStartTime\",\"type\":\"uint256\"},{\"name\":\"duration\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"LogRefund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"CreateDDFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.11+commit.68ef5810", "ConstructorArguments": "0000000000000000000000001112b3019c526a036c4288b57b3e5c7ff9d363b20000000000000000000000001759b80a76f390ef4d5c14a483869b31f2c309c7000000000000000000000000da59ab6e4b9d9fb867b8a952f455c77ad92afa8e0000000000000000000000000000000000000000000000000000000059635020000000000000000000000000000000000000000000000000000000000000001e", "SourceCode": "pragma solidity ^0.4.11;\r\n\r\n\r\n/*\r\n * Ownable\r\n *\r\n * Base contract with an owner.\r\n * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    if (msg.sender != owner) {\r\n      throw;\r\n    }\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n/* taking ideas from FirstBlood token */\r\ncontract SafeMath {\r\n\r\n    /* function assert(bool assertion) internal { */\r\n    /*   if (!assertion) { */\r\n    /*     throw; */\r\n    /*   } */\r\n    /* }      // assert no longer needed once solidity is on 0.4.10 */\r\n\r\n    function safeAdd(uint256 x, uint256 y) internal returns(uint256) {\r\n      uint256 z = x + y;\r\n      assert((z >= x) && (z >= y));\r\n      return z;\r\n    }\r\n\r\n    function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {\r\n      assert(x >= y);\r\n      uint256 z = x - y;\r\n      return z;\r\n    }\r\n\r\n    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\r\n      uint256 z = x * y;\r\n      assert((x == 0)||(z/x == y));\r\n      return z;\r\n    }\r\n\r\n}\r\n\r\ncontract Token {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n\r\n/*  ERC 20 token */\r\ncontract StandardToken is Token {\r\n\r\n  modifier onlyPayloadSize(uint size) {\r\n     if(msg.data.length < size + 4) {\r\n       throw;\r\n     }\r\n     _;\r\n  }\r\n\r\n\r\n    function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) returns (bool success) {\r\n      if (balances[msg.sender] >= _value && _value > 0) {\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) returns (bool success) {\r\n      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value;\r\n        allowed[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n}\r\n\r\ncontract splitterContract is Ownable{\r\n\r\n    event ev(string msg, address whom, uint256 val);\r\n\r\n    struct xRec {\r\n        bool inList;\r\n        address next;\r\n        address prev;\r\n        uint256 val;\r\n    }\r\n\r\n    struct l8r {\r\n        address whom;\r\n        uint256 val;\r\n    }\r\n    address public myAddress = this;\r\n    address public first;\r\n    address public last;\r\n    address public ddf;\r\n    bool    public thinkMode;\r\n    uint256 public pos;\r\n\r\n    mapping (address => xRec) public theList;\r\n\r\n    l8r[]  afterParty;\r\n\r\n    modifier onlyMeOrDDF() {\r\n        if (msg.sender == ddf || msg.sender == myAddress || msg.sender == owner) {\r\n            _;\r\n            return;\r\n        }\r\n    }\r\n\r\n    function setDDF(address ddf_) onlyOwner {\r\n        ddf = ddf_;\r\n    }\r\n\r\n    function splitterContract(address seed, uint256 seedVal) {\r\n        first = seed;\r\n        last = seed;\r\n        theList[seed] = xRec(true,0x0,0x0,seedVal);\r\n    }\r\n\r\n    function startThinking() onlyOwner {\r\n        thinkMode = true;\r\n        pos = 0;\r\n    }\r\n\r\n    function stopThinking(uint256 num) onlyOwner {\r\n        thinkMode = false;\r\n        for (uint256 i = 0; i < num; i++) {\r\n            if (pos >= afterParty.length) {\r\n                delete afterParty;\r\n                return;\r\n            }\r\n            update(afterParty[pos].whom,afterParty[pos].val);\r\n            pos++;\r\n        }\r\n        thinkMode = true;\r\n    } \r\n\r\n    function thinkLength() constant returns (uint256) {\r\n        return afterParty.length;\r\n    }\r\n\r\n    function addRec4L8R(address whom, uint256 val) internal {\r\n        afterParty.push(l8r(whom,val));\r\n    }\r\n\r\n    function add(address whom, uint256 value) internal {\r\n        theList[whom] = xRec(true,0x0,last,value);\r\n        theList[last].next = whom;\r\n        last = whom;\r\n        ev(\"add\",whom,value);\r\n    }\r\n\r\n    function remove(address whom) internal {\r\n        if (first == whom) {\r\n            first = theList[whom].next;\r\n            theList[whom] = xRec(false,0x0,0x0,0);\r\n            return;\r\n        }\r\n        address next = theList[whom].next;\r\n        address prev = theList[whom].prev;\r\n        if (prev != 0x0) {\r\n            theList[prev].next = next;\r\n        }\r\n        if (next != 0x0) {\r\n            theList[next].prev = prev;\r\n        }\r\n        theList[whom] = xRec(false,0x0,0x0,0);\r\n        ev(\"remove\",whom,0);\r\n    }\r\n\r\n    function update(address whom, uint256 value) onlyMeOrDDF {\r\n        if (thinkMode) {\r\n            addRec4L8R(whom,value);\r\n            return;\r\n        }\r\n        if (value != 0) {\r\n            if (!theList[whom].inList) {\r\n                add(whom,value);\r\n            } else {\r\n                theList[whom].val = value;\r\n                ev(\"update\",whom,value);\r\n            }\r\n            return;\r\n        }\r\n        if (theList[whom].inList) {\r\n                remove(whom);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\ncontract DDFToken is StandardToken, SafeMath {\r\n\r\n    // metadata\r\n    string public constant name = \"Digital Developers Fund Token\";\r\n    string public constant symbol = \"DDF\";\r\n    uint256 public constant decimals = 18;\r\n    string public version = \"1.0\";\r\n\r\n    // contracts\r\n    address public ethFundDeposit;      // deposit address for ETH for Domain Development Fund\r\n    address public ddftFundDeposit;     // deposit address for Domain Development Fund reserve\r\n    address public splitter;          // DA 8/6/2017 - splitter contract\r\n\r\n    // crowdsale parameters\r\n    bool public isFinalized;              // switched to true in operational state\r\n    uint256 public fundingStartTime;\r\n    uint256 public fundingEndTime;\r\n    uint256 public constant ddftFund = 25 * (10**5) * 10**decimals;   // 1m DDFT reserved for DDF use\r\n    uint256 public constant tokenExchangeRate = 1000;               // 1000 DDFT tokens per 1 ETH\r\n    uint256 public constant tokenCreationCap =  250 * (10**6) * 10**decimals;\r\n    uint256 public constant tokenCreationMin =  1 * (10**6) * 10**decimals;\r\n\r\n\r\n    // events\r\n    event LogRefund(address indexed _to, uint256 _value);\r\n    event CreateDDFT(address indexed _to, uint256 _value);\r\n\r\n    // constructor\r\n    function DDFToken(\r\n        address _ethFundDeposit,\r\n        address _ddftFundDeposit,\r\n        address _splitter, // DA 8/6/2017\r\n        uint256 _fundingStartTime,\r\n        uint256 duration)\r\n    {\r\n      isFinalized = false;                   //controls pre through crowdsale state\r\n      ethFundDeposit = _ethFundDeposit;\r\n      ddftFundDeposit = _ddftFundDeposit;\r\n      splitter =  _splitter ;                  // DA 8/6/2017\r\n      fundingStartTime = _fundingStartTime;\r\n      fundingEndTime = fundingStartTime + duration * 1 days;\r\n      totalSupply = ddftFund;\r\n      balances[ddftFundDeposit] = ddftFund;    // Deposit DDF share\r\n      CreateDDFT(ddftFundDeposit, ddftFund);  // logs DDF fund\r\n    }\r\n\r\n    function () payable {           // DA 8/6/2017 prefer to use fallback function\r\n      createTokens(msg.value);\r\n    }\r\n\r\n    /// @dev Accepts ether and creates new DDFT tokens.\r\n    function createTokens(uint256 _value)  internal {\r\n      if (isFinalized) throw;\r\n      if (now < fundingStartTime) throw;\r\n      if (now > fundingEndTime) throw;\r\n      if (msg.value == 0) throw;\r\n\r\n      uint256 tokens = safeMult(_value, tokenExchangeRate); // check that we're not over totals\r\n      uint256 checkedSupply = safeAdd(totalSupply, tokens);\r\n\r\n      // DA 8/6/2017 to fairly allocate the last few tokens\r\n      if (tokenCreationCap < checkedSupply) {\r\n        if (tokenCreationCap <= totalSupply) throw;  // CAP reached no more please\r\n        uint256 tokensToAllocate = safeSubtract(tokenCreationCap,totalSupply);\r\n        uint256 tokensToRefund   = safeSubtract(tokens,tokensToAllocate);\r\n        totalSupply = tokenCreationCap;\r\n        balances[msg.sender] += tokensToAllocate;  // safeAdd not needed; bad semantics to use here\r\n        uint256 etherToRefund = tokensToRefund / tokenExchangeRate;\r\n        msg.sender.transfer(etherToRefund);\r\n        CreateDDFT(msg.sender, tokensToAllocate);  // logs token creation\r\n        LogRefund(msg.sender,etherToRefund);\r\n        splitterContract(splitter).update(msg.sender,balances[msg.sender]);\r\n        return;\r\n      }\r\n      // DA 8/6/2017 end of fair allocation code\r\n      totalSupply = checkedSupply;\r\n      balances[msg.sender] += tokens;  // safeAdd not needed; bad semantics to use here\r\n      CreateDDFT(msg.sender, tokens);  // logs token creation\r\n      splitterContract(splitter).update(msg.sender,balances[msg.sender]);\r\n    }\r\n\r\n    /// @dev Ends the funding period and sends the ETH home\r\n    function finalize() external {\r\n      if (isFinalized) throw;\r\n      if (msg.sender != ethFundDeposit) throw; // locks finalize to the ultimate ETH owner\r\n      if(totalSupply < tokenCreationMin + ddftFund) throw;      // have to sell minimum to move to operational\r\n      if(now <= fundingEndTime && totalSupply != tokenCreationCap) throw;\r\n      // move to operational\r\n      isFinalized = true;\r\n      // DA 8/6/2017 change send/throw to transfer\r\n      ethFundDeposit.transfer(this.balance);  // send the eth to DDF\r\n    }\r\n\r\n    /// @dev Allows contributors to recover their ether in the case of a failed funding campaign.\r\n    function refund() external {\r\n      if(isFinalized) throw;                       // prevents refund if operational\r\n      if (now <= fundingEndTime) throw; // prevents refund until sale period is over\r\n      if(totalSupply >= tokenCreationMin + ddftFund) throw;  // no refunds if we sold enough\r\n      if(msg.sender == ddftFundDeposit) throw;    // DDF not entitled to a refund\r\n      uint256 ddftVal = balances[msg.sender];\r\n      if (ddftVal == 0) throw;\r\n      balances[msg.sender] = 0;\r\n      totalSupply = safeSubtract(totalSupply, ddftVal); // extra safe\r\n      uint256 ethVal = ddftVal / tokenExchangeRate;     // should be safe; previous throws covers edges\r\n      LogRefund(msg.sender, ethVal);               // log it \r\n      // DA 8/6/2017 change send/throw to transfer\r\n      msg.sender.transfer(ethVal);                 // if you're using a contract; make sure it works with .send gas limits\r\n    }\r\n\r\n    // DA 8/6/2017\r\n    /// @dev Updates splitter contract with ownership changes\r\n    function transfer(address _to, uint _value) returns (bool success)  {\r\n      success = super.transfer(_to,_value);\r\n      splitterContract sc = splitterContract(splitter);\r\n      sc.update(msg.sender,balances[msg.sender]);\r\n      sc.update(_to,balances[_to]);\r\n      return;\r\n    }\r\n\r\n}", "OptimizationUsed": "1", "ContractName": "DDFToken", "ByteCode": "0x606060405236156101255763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610137578063095ea7b3146101c757806318160ddd146101fa5780631df935581461021c57806323b872dd1461023e578063313ce567146102775780633cd8045e146102995780634172d080146102c55780634bb278f3146102e757806354fd4d50146102f9578063590e1ae3146103895780636f7920fd1461039b57806370a08231146103bd57806374eedd46146103eb5780638d4e40831461040d57806395d89b4114610431578063a81c3bdf146104c1578063a9059cbb146104ed578063b244c3f314610520578063c039daf61461054c578063d4629ae71461056e578063dd62ed3e14610590575b6101355b610132346105c4565b5b565b005b341561013f57fe5b6101476108ab565b60408051602080825283518183015283519192839290830191850190808383821561018d575b80518252602083111561018d57601f19909201916020918201910161016d565b505050905090810190601f1680156101b95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101cf57fe5b6101e6600160a060020a03600435166024356108e2565b604080519115158252519081900360200190f35b341561020257fe5b61020a61094d565b60408051918252519081900360200190f35b341561022457fe5b61020a610953565b60408051918252519081900360200190f35b341561024657fe5b6101e6600160a060020a0360043581169060243516604435610959565b604080519115158252519081900360200190f35b341561027f57fe5b61020a610a66565b60408051918252519081900360200190f35b34156102a157fe5b6102a9610a6b565b60408051600160a060020a039092168252519081900360200190f35b34156102cd57fe5b61020a610a7a565b60408051918252519081900360200190f35b34156102ef57fe5b610135610a80565b005b341561030157fe5b610147610b53565b60408051602080825283518183015283519192839290830191850190808383821561018d575b80518252602083111561018d57601f19909201916020918201910161016d565b505050905090810190601f1680156101b95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561039157fe5b610135610be1565b005b34156103a357fe5b61020a610d11565b60408051918252519081900360200190f35b34156103c557fe5b61020a600160a060020a0360043516610d20565b60408051918252519081900360200190f35b34156103f357fe5b61020a610d3f565b60408051918252519081900360200190f35b341561041557fe5b6101e6610d45565b604080519115158252519081900360200190f35b341561043957fe5b610147610d55565b60408051602080825283518183015283519192839290830191850190808383821561018d575b80518252602083111561018d57601f19909201916020918201910161016d565b505050905090810190601f1680156101b95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156104c957fe5b6102a9610d8c565b60408051600160a060020a039092168252519081900360200190f35b34156104f557fe5b6101e6600160a060020a0360043516602435610d9b565b604080519115158252519081900360200190f35b341561052857fe5b6102a9610e93565b60408051600160a060020a039092168252519081900360200190f35b341561055457fe5b61020a610ea2565b60408051918252519081900360200190f35b341561057657fe5b61020a610eb0565b60408051918252519081900360200190f35b341561059857fe5b61020a600160a060020a0360043581169060243516610ebf565b60408051918252519081900360200190f35b60006000600060006000600660149054906101000a900460ff16156105e95760006000fd5b6007544210156105f95760006000fd5b6008544211156106095760006000fd5b3415156106165760006000fd5b610622866103e8610eec565b945061063060005486610f1b565b93506acecb8f27f4200f3a000000849010156107db576000546acecb8f27f4200f3a000000116106605760006000fd5b600054610679906acecb8f27f4200f3a00000090610f43565b92506106858584610f43565b6acecb8f27f4200f3a0000006000908155600160a060020a033316815260016020526040902080548501905591506103e8825b6040519190049150600160a060020a0333169082156108fc029083906000818181858888f1935050505015156106ea57fe5b604080518481529051600160a060020a033316917f835ec6efb61a0ba7651c686250762510759df668ef959b12dbff6ee283c94065919081900360200190a2604080518281529051600160a060020a033316917fb6c0eca8138e097d71e2dd31e19a1266487f0553f170b7260ffe68bcbe9ff8a7919081900360200190a2600654600160a060020a0333811660008181526001602052604080822054815160e160020a63516c1daf0281526004810194909452602484015251929093169263a2d83b5e9260448084019382900301818387803b15156107c557fe5b6102c65a03f115156107d357fe5b5050506108a3565b6000848155600160a060020a033316808252600160209081526040928390208054890190558251888152925191927f835ec6efb61a0ba7651c686250762510759df668ef959b12dbff6ee283c94065929081900390910190a2600654600160a060020a0333811660008181526001602052604080822054815160e160020a63516c1daf0281526004810194909452602484015251929093169263a2d83b5e9260448084019382900301818387803b151561089157fe5b6102c65a03f1151561089f57fe5b5050505b505050505050565b60408051808201909152601d81527f4469676974616c20446576656c6f706572732046756e6420546f6b656e000000602082015281565b600160a060020a03338116600081815260026020908152604080832094871680845294825280832086905580518681529051929493927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060015b92915050565b60005481565b60075481565b60006060606436101561096c5760006000fd5b600160a060020a0385166000908152600160205260409020548390108015906109bc5750600160a060020a0380861660009081526002602090815260408083203390941683529290522054839010155b80156109c85750600083115b15610a5757600160a060020a03808516600081815260016020908152604080832080548901905589851680845281842080548a90039055600283528184203390961684529482529182902080548890039055815187815291519293927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a360019150610a5c565b600091505b5b5b509392505050565b601281565b600654600160a060020a031681565b6103e881565b60065460a060020a900460ff1615610a985760006000fd5b60045433600160a060020a03908116911614610ab45760006000fd5b6000546a02e5276153cd3fb3800000901015610ad05760006000fd5b6008544211158015610aef57506000546acecb8f27f4200f3a00000014155b15610afa5760006000fd5b6006805474ff0000000000000000000000000000000000000000191660a060020a179055600454604051600160a060020a039182169130163180156108fc02916000818181858888f19350505050151561013257fe5b5b565b6003805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610bd95780601f10610bae57610100808354040283529160200191610bd9565b820191906000526020600020905b815481529060010190602001808311610bbc57829003601f168201915b505050505081565b600654600090819060a060020a900460ff1615610bfe5760006000fd5b6008544211610c0d5760006000fd5b6000546a02e5276153cd3fb38000009010610c285760006000fd5b60055433600160a060020a0390811691161415610c455760006000fd5b600160a060020a0333166000908152600160205260409020549150811515610c6d5760006000fd5b600160a060020a033316600090815260016020526040812081905554610c939083610f43565b6000556103e8825b04905033600160a060020a03167fb6c0eca8138e097d71e2dd31e19a1266487f0553f170b7260ffe68bcbe9ff8a7826040518082815260200191505060405180910390a2604051600160a060020a0333169082156108fc029083906000818181858888f193505050501515610d0c57fe5b5b5050565b6acecb8f27f4200f3a00000081565b600160a060020a0381166000908152600160205260409020545b919050565b60085481565b60065460a060020a900460ff1681565b60408051808201909152600381527f4444460000000000000000000000000000000000000000000000000000000000602082015281565b600454600160a060020a031681565b60006000610da98484610f5e565b600654600160a060020a0333811660008181526001602052604080822054815160e160020a63516c1daf0281526004810194909452602484015251949650919092169350839263a2d83b5e92604480820193929182900301818387803b1515610e0e57fe5b6102c65a03f11515610e1c57fe5b505050600160a060020a0384811660008181526001602052604080822054815160e160020a63516c1daf02815260048101949094526024840152519284169263a2d83b5e92604480820193929182900301818387803b1515610e7a57fe5b6102c65a03f11515610e8857fe5b5050505b5092915050565b600554600160a060020a031681565b69d3c21bcecceda100000081565b6a021165458500521280000081565b600160a060020a038083166000908152600260209081526040808320938516835292905220545b92915050565b6000828202831580610f085750828482811515610f0557fe5b04145b1515610f1057fe5b8091505b5092915050565b6000828201838110801590610f085750828110155b1515610f1057fe5b8091505b5092915050565b60008082841015610f5057fe5b5050808203805b5092915050565b600060406044361015610f715760006000fd5b600160a060020a033316600090815260016020526040902054839010801590610f9a5750600083115b1561100f57600160a060020a03338116600081815260016020908152604080832080548990039055938816808352918490208054880190558351878152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a360019150610e8c565b60009150610e8c565b5b5b50929150505600a165627a7a72305820fd9d72d00ec6336f1f859b938935b01a220e394b0d4d3a649e67dee31603bda50029"}