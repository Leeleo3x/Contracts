{"Runs": "200", "SwarmSource": "bzzr://6378abcfaefceadc69da8c6a5ce5584d9407c8c1b14d336a43049204bdd50245", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"votingDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimVotingProposal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentProposal\",\"outputs\":[{\"name\":\"addr\",\"type\":\"string\"},{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"valueMod\",\"type\":\"uint256\"},{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"yay\",\"type\":\"uint256\"},{\"name\":\"nay\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rounding\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"showVotes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vote\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"accounts\",\"outputs\":[{\"name\":\"lastProposalStartTime\",\"type\":\"uint256\"},{\"name\":\"lastAirdropWei\",\"type\":\"uint256\"},{\"name\":\"lastAirdropClaimTime\",\"type\":\"uint256\"},{\"name\":\"bonusWei\",\"type\":\"uint256\"},{\"name\":\"valueModVote\",\"type\":\"uint256\"},{\"name\":\"valueMod\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"string\"},{\"name\":\"_hash\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"votingProposal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address[]\"}],\"name\":\"payBonus\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isProposalActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"redistributionTimeout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setMintDone\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isVotingPhaseOver\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintDone\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"showBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastNegativeVoting\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blockingDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDropPerUnlockedToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isVoteOngoing\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"option\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"votes\",\"type\":\"uint256\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"weiPerToken\",\"type\":\"uint256\"}],\"name\":\"Payout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.18+commit.9cf6e910", "ConstructorArguments": "", "SourceCode": "pragma solidity ^0.4.14;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n//Interface declaration from: https://github.com/ethereum/eips/issues/20\r\ncontract ERC20Interface {\r\n    //from: https://github.com/OpenZeppelin/zeppelin-solidity/blob/b395b06b65ce35cac155c13d01ab3fc9d42c5cfb/contracts/token/ERC20Basic.sol\r\n    uint256 public totalSupply; //tokens that can vote, transfer, receive dividend\r\n    function balanceOf(address who) public constant returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    //from: https://github.com/OpenZeppelin/zeppelin-solidity/blob/b395b06b65ce35cac155c13d01ab3fc9d42c5cfb/contracts/token/ERC20.sol\r\n    function allowance(address owner, address spender) public constant returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract ModumToken is ERC20Interface {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    address public owner;\r\n\r\n    mapping(address => mapping (address => uint256)) public allowed;\r\n\r\n    enum UpdateMode{Wei, Vote, Both} //update mode for the account\r\n    struct Account {\r\n        uint256 lastProposalStartTime; //For checking at which proposal valueModVote was last updated\r\n        uint256 lastAirdropWei; //For checking after which airDrop bonusWei was last updated\r\n        uint256 lastAirdropClaimTime; //for unclaimed airdrops, re-airdrop\r\n        uint256 bonusWei;      //airDrop/Dividend payout available for withdrawal.\r\n        uint256 valueModVote;  // votes available for voting on active Proposal\r\n        uint256 valueMod;      // the owned tokens\r\n    }\r\n    mapping(address => Account) public accounts;\r\n\r\n    //Airdorp\r\n    uint256 public totalDropPerUnlockedToken = 0;     //totally airdropped eth per unlocked token\r\n    uint256 public rounding = 0;                      //airdrops not accounted yet to make system rounding error proof\r\n\r\n    //Token locked/unlocked - totalSupply/max\r\n    uint256 public lockedTokens = 9 * 1100 * 1000;   //token that need to be unlocked by voting\r\n    uint256 public constant maxTokens = 30 * 1000 * 1000;      //max distributable tokens\r\n\r\n    //minting phase running if false, true otherwise. Many operations can only be called when\r\n    //minting phase is over\r\n    bool public mintDone = false;\r\n    uint256 public constant redistributionTimeout = 548 days; //18 month\r\n\r\n    //as suggested in https://theethereum.wiki/w/index.php/ERC20_Token_Standard\r\n    string public constant name = \"Modum Token\";\r\n    string public constant symbol = \"MOD\";\r\n    uint8 public constant decimals = 0;\r\n\r\n    //Voting\r\n    struct Proposal {\r\n        string addr;        //Uri for more info\r\n        bytes32 hash;       //Hash of the uri content for checking\r\n        uint256 valueMod;      //token to unlock: proposal with 0 amount is invalid\r\n        uint256 startTime;\r\n        uint256 yay;\r\n        uint256 nay;\r\n    }\r\n    Proposal public currentProposal;\r\n    uint256 public constant votingDuration = 2 weeks;\r\n    uint256 public lastNegativeVoting = 0;\r\n    uint256 public constant blockingDuration = 90 days;\r\n\r\n    event Voted(address _addr, bool option, uint256 votes); //called when a vote is casted\r\n    event Payout(uint256 weiPerToken); //called when an someone payed ETHs to this contract, that can be distributed\r\n\r\n    function ModumToken() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * In case an owner account gets compromised, it should be possible to move control\r\n     * over to another account. This helps in cases like the Parity multisig exploit: As\r\n     * soon as an exploit becomes known, the affected parties might have a small time\r\n     * window before being attacked.\r\n     */\r\n    function transferOwnership(address _newOwner) public {\r\n        require(msg.sender == owner);\r\n        require(_newOwner != address(0));\r\n        owner = _newOwner;\r\n    }\r\n\r\n    //*************************** Voting *****************************************\r\n    /*\r\n     * In addition to the the vode with address/URL and its hash, we also set the value\r\n     * of tokens to be transfered from the locked tokens to the modum account.\r\n     */\r\n    function votingProposal(string _addr, bytes32 _hash, uint256 _value) public {\r\n        require(msg.sender == owner); // proposal ony by onwer\r\n        require(!isProposalActive()); // no proposal is active, cannot vote in parallel\r\n        require(_value <= lockedTokens); //proposal cannot be larger than remaining locked tokens\r\n        require(_value > 0); //there needs to be locked tokens to make proposal, at least 1 locked token\r\n        require(_hash != bytes32(0)); //hash need to be set\r\n        require(bytes(_addr).length > 0); //the address need to be set and non-empty\r\n        require(mintDone); //minting phase needs to be over\r\n        //in case of negative vote, wait 90 days. If no lastNegativeVoting have\r\n        //occured, lastNegativeVoting is 0 and now is always larger than 14.1.1970\r\n        //(1.1.1970 plus blockingDuration).\r\n        require(now >= lastNegativeVoting.add(blockingDuration));\r\n\r\n        currentProposal = Proposal(_addr, _hash, _value, now, 0, 0);\r\n    }\r\n\r\n    function vote(bool _vote) public returns (uint256) {\r\n        require(isVoteOngoing()); // vote needs to be ongoing\r\n        Account storage account = updateAccount(msg.sender, UpdateMode.Vote);\r\n        uint256 votes = account.valueModVote; //available votes\r\n        require(votes > 0); //voter must have a vote left, either by not voting yet, or have modum tokens\r\n\r\n        if(_vote) {\r\n            currentProposal.yay = currentProposal.yay.add(votes);\r\n        }\r\n        else {\r\n            currentProposal.nay = currentProposal.nay.add(votes);\r\n        }\r\n\r\n        account.valueModVote = 0;\r\n        Voted(msg.sender, _vote, votes);\r\n        return votes;\r\n    }\r\n\r\n    function showVotes(address _addr) public constant returns (uint256) {\r\n        Account memory account = accounts[_addr];\r\n        if(account.lastProposalStartTime < currentProposal.startTime || // the user did set his token power yet\r\n            (account.lastProposalStartTime == 0 && currentProposal.startTime == 0)) {\r\n            return account.valueMod;\r\n        }\r\n        return account.valueModVote;\r\n    }\r\n\r\n    // The voting can be claimed by the owner of this contract\r\n    function claimVotingProposal() public {\r\n        require(msg.sender == owner); //only owner can claim proposal\r\n        require(isProposalActive()); // proposal active\r\n        require(isVotingPhaseOver()); // voting has already ended\r\n\r\n        if(currentProposal.yay > currentProposal.nay && currentProposal.valueMod > 0) {\r\n            //Vote was accepted\r\n            Account storage account = updateAccount(owner, UpdateMode.Both);\r\n            uint256 valueMod = currentProposal.valueMod;\r\n            account.valueMod = account.valueMod.add(valueMod); //add tokens to owner\r\n            totalSupply = totalSupply.add(valueMod);\r\n            lockedTokens = lockedTokens.sub(valueMod);\r\n        } else if(currentProposal.yay <= currentProposal.nay) {\r\n            //in case of a negative vote, set the time of this negative\r\n            //vote to the end of the negative voting period.\r\n            //This will prevent any new voting to be conducted.\r\n            lastNegativeVoting = currentProposal.startTime.add(votingDuration);\r\n        }\r\n        delete currentProposal; //proposal ended\r\n    }\r\n\r\n    function isProposalActive() public constant returns (bool)  {\r\n        return currentProposal.hash != bytes32(0);\r\n    }\r\n\r\n    function isVoteOngoing() public constant returns (bool)  {\r\n        return isProposalActive()\r\n            && now >= currentProposal.startTime\r\n            && now < currentProposal.startTime.add(votingDuration);\r\n        //its safe to use it for longer periods:\r\n        //https://ethereum.stackexchange.com/questions/6795/is-block-timestamp-safe-for-longer-time-periods\r\n    }\r\n\r\n    function isVotingPhaseOver() public constant returns (bool)  {\r\n        //its safe to use it for longer periods:\r\n        //https://ethereum.stackexchange.com/questions/6795/is-block-timestamp-safe-for-longer-time-periods\r\n        return now >= currentProposal.startTime.add(votingDuration);\r\n    }\r\n\r\n    //*********************** Minting *****************************************\r\n    function mint(address[] _recipient, uint256[] _value) public {\r\n        require(msg.sender == owner); //only owner can claim proposal\r\n        require(!mintDone); //only during minting\r\n        //require(_recipient.length == _value.length); //input need to be of same size\r\n        //we know what we are doing... remove check to save gas\r\n\r\n        //we want to mint a couple of accounts\r\n        for (uint8 i=0; i<_recipient.length; i++) {\r\n            \r\n            //require(lockedTokens.add(totalSupply).add(_value[i]) <= maxTokens);\r\n            //do the check in the mintDone\r\n\r\n            //121 gas can be saved by creating temporary variables\r\n            address tmpRecipient = _recipient[i];\r\n            uint tmpValue = _value[i];\r\n\r\n            //no need to update account, as we have not set minting to true. This means\r\n            //nobody can start a proposal (isVoteOngoing() is always false) and airdrop\r\n            //cannot be done either totalDropPerUnlockedToken is 0 thus, bonus is always\r\n            //zero.\r\n            Account storage account = accounts[tmpRecipient];\r\n            account.valueMod = account.valueMod.add(tmpValue);\r\n            //if this remains 0, we cannot calculate the time period when the user claimed\r\n            //his airdrop, thus, set it to now\r\n            account.lastAirdropClaimTime = now;\r\n            totalSupply = totalSupply.add(tmpValue); //create the tokens and add to recipient\r\n            Transfer(msg.sender, tmpRecipient, tmpValue);\r\n        }\r\n    }\r\n\r\n    function setMintDone() public {\r\n        require(msg.sender == owner);\r\n        require(!mintDone); //only in minting phase\r\n        //here we check that we never exceed the 30mio max tokens. This includes\r\n        //the locked and the unlocked tokens.\r\n        require(lockedTokens.add(totalSupply) <= maxTokens);\r\n        mintDone = true; //end the minting\r\n    }\r\n\r\n    //updates an account for voting or airdrop or both. This is required to be able to fix the amount of tokens before\r\n    //a vote or airdrop happend.\r\n    function updateAccount(address _addr, UpdateMode mode) internal returns (Account storage){\r\n        Account storage account = accounts[_addr];\r\n        if(mode == UpdateMode.Vote || mode == UpdateMode.Both) {\r\n            if(isVoteOngoing() && account.lastProposalStartTime < currentProposal.startTime) {// the user did set his token power yet\r\n                account.valueModVote = account.valueMod;\r\n                account.lastProposalStartTime = currentProposal.startTime;\r\n            }\r\n        }\r\n\r\n        if(mode == UpdateMode.Wei || mode == UpdateMode.Both) {\r\n            uint256 bonus = totalDropPerUnlockedToken.sub(account.lastAirdropWei);\r\n            if(bonus != 0) {\r\n                account.bonusWei = account.bonusWei.add(bonus.mul(account.valueMod));\r\n                account.lastAirdropWei = totalDropPerUnlockedToken;\r\n            }\r\n        }\r\n\r\n        return account;\r\n    }\r\n\r\n    //*********************** Airdrop ************************************************\r\n    //default function to pay bonus, anybody that sends eth to this contract will distribute the wei\r\n    //to their token holders\r\n    //Dividend payment / Airdrop\r\n    function() public payable {\r\n        require(mintDone); //minting needs to be over\r\n        require(msg.sender == owner); //ETH payment need to be one-way only, from modum to tokenholders, confirmed by Lykke\r\n        payout(msg.value);\r\n    }\r\n    \r\n    //anybody can pay and add address that will be checked if they\r\n    //can be added to the bonus\r\n    function payBonus(address[] _addr) public payable {\r\n        require(msg.sender == owner);  //ETH payment need to be one-way only, from modum to tokenholders, confirmed by Lykke\r\n        uint256 totalWei = 0;\r\n        for (uint8 i=0; i<_addr.length; i++) {\r\n            Account storage account = updateAccount(_addr[i], UpdateMode.Wei);\r\n            if(now >= account.lastAirdropClaimTime + redistributionTimeout) {\r\n                totalWei += account.bonusWei;\r\n                account.bonusWei = 0;\r\n                account.lastAirdropClaimTime = now;\r\n            } else {\r\n                revert();\r\n            }\r\n        }\r\n        payout(msg.value.add(totalWei));\r\n    }\r\n    \r\n    function payout(uint256 valueWei) internal {\r\n        uint256 value = valueWei.add(rounding); //add old rounding\r\n        rounding = value % totalSupply; //ensure no rounding error\r\n        uint256 weiPerToken = value.sub(rounding).div(totalSupply);\r\n        totalDropPerUnlockedToken = totalDropPerUnlockedToken.add(weiPerToken); //account for locked tokens and add the drop\r\n        Payout(weiPerToken);\r\n    }\r\n\r\n    function showBonus(address _addr) public constant returns (uint256) {\r\n        uint256 bonus = totalDropPerUnlockedToken.sub(accounts[_addr].lastAirdropWei);\r\n        if(bonus != 0) {\r\n            return accounts[_addr].bonusWei.add(bonus.mul(accounts[_addr].valueMod));\r\n        }\r\n        return accounts[_addr].bonusWei;\r\n    }\r\n\r\n    function claimBonus() public returns (uint256) {\r\n        require(mintDone); //minting needs to be over\r\n\r\n        Account storage account = updateAccount(msg.sender, UpdateMode.Wei);\r\n        uint256 sendValue = account.bonusWei; //fetch the values\r\n\r\n        if(sendValue != 0) {\r\n            account.bonusWei = 0; //set to zero (before, against reentry)\r\n            account.lastAirdropClaimTime = now; //mark as collected now\r\n            msg.sender.transfer(sendValue); //send the bonus to the correct account\r\n            return sendValue;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    //****************************** ERC20 ************************************\r\n\r\n    // Get the account balance of another account with address _owner\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return accounts[_owner].valueMod;\r\n    }\r\n\r\n    // Send _value amount of tokens to address _to\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        require(mintDone);\r\n        require(_value > 0);\r\n        Account memory tmpFrom = accounts[msg.sender];\r\n        require(tmpFrom.valueMod >= _value);\r\n\r\n        Account storage from = updateAccount(msg.sender, UpdateMode.Both);\r\n        Account storage to = updateAccount(_to, UpdateMode.Both);\r\n        from.valueMod = from.valueMod.sub(_value);\r\n        to.valueMod = to.valueMod.add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    // Send _value amount of tokens from address _from to address _to\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(mintDone);\r\n        require(_value > 0);\r\n        Account memory tmpFrom = accounts[_from];\r\n        require(tmpFrom.valueMod >= _value);\r\n        require(allowed[_from][msg.sender] >= _value);\r\n\r\n        Account storage from = updateAccount(_from, UpdateMode.Both);\r\n        Account storage to = updateAccount(_to, UpdateMode.Both);\r\n        from.valueMod = from.valueMod.sub(_value);\r\n        to.valueMod = to.valueMod.add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    // ********************** approve, allowance, increaseApproval, and decreaseApproval used from:\r\n    // https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/StandardToken.sol\r\n    //\r\n    // changed from uint to uint256 as this is considered to be best practice.\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /*\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     */\r\n    function increaseApproval(address _spender, uint256 _addedValue) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool success) {\r\n        uint256 oldValue = allowed[msg.sender][_spender];\r\n        if(_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n}", "OptimizationUsed": "1", "ContractName": "ModumToken", "ByteCode": "0x6060604052600436106101cc5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610203578063095ea7b31461028d5780630eb34740146102c3578063132002fc146102e857806318160ddd146102fb57806323b872dd1461030e5780632877c748146103365780632b49d425146103495780632e4404031461040c578063313ce5671461041f5780633b81b785146104485780634b9f5c9814610467578063506353941461047f5780635c658165146104925780635e5c06e2146104b7578063661884631461050f57806370a0823114610531578063772e6f0314610550578063826efb6d146105a85780638672f1bc146105ec5780638da5cb5b146105ff57806395d89b411461062e578063a9059cbb14610641578063b54eb82214610663578063b5e8297514610676578063b5ee6f3d14610689578063bd0887241461069c578063cc70decb146106af578063d246a8c9146106ce578063d73dd623146106e1578063dd62ed3e14610703578063e467f7e014610728578063e8315742146107b7578063ea8eb4be146107ca578063ed343f65146107dd578063f247016c146107f0578063f2fde38b14610803575b60075460ff1615156101dd57600080fd5b60015433600160a060020a039081169116146101f857600080fd5b61020134610822565b005b341561020e57600080fd5b6102166108c4565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561025257808201518382015260200161023a565b50505050905090810190601f16801561027f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561029857600080fd5b6102af600160a060020a03600435166024356108fb565b604051901515815260200160405180910390f35b34156102ce57600080fd5b6102d66109a1565b60405190815260200160405180910390f35b34156102f357600080fd5b6102d66109a7565b341561030657600080fd5b6102d66109ae565b341561031957600080fd5b6102af600160a060020a03600435811690602435166044356109b4565b341561034157600080fd5b610201610b7e565b341561035457600080fd5b61035c610ca5565b6040516020810186905260408101859052606081018490526080810183905260a0810182905260c0808252875460026101006001831615026000190190911604908201819052819060e0820190899080156103f85780601f106103cd576101008083540402835291602001916103f8565b820191906000526020600020905b8154815290600101906020018083116103db57829003601f168201915b505097505050505050505060405180910390f35b341561041757600080fd5b6102d6610cbe565b341561042a57600080fd5b610432610cc4565b60405160ff909116815260200160405180910390f35b341561045357600080fd5b6102d6600160a060020a0360043516610cc9565b341561047257600080fd5b6102d66004351515610d6d565b341561048a57600080fd5b6102d6610e3e565b341561049d57600080fd5b6102d6600160a060020a0360043581169060243516610ec1565b34156104c257600080fd5b6104d6600160a060020a0360043516610ede565b60405180878152602001868152602001858152602001848152602001838152602001828152602001965050505050505060405180910390f35b341561051a57600080fd5b6102af600160a060020a0360043516602435610f1a565b341561053c57600080fd5b6102d6600160a060020a0360043516611014565b341561055b57600080fd5b61020160046024813581810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496505084359460200135935061103292505050565b610201600460248135818101908301358060208181020160405190810160405280939291908181526020018383602002808284375094965061114895505050505050565b34156105f757600080fd5b6102af6111ff565b341561060a57600080fd5b610612611208565b604051600160a060020a03909116815260200160405180910390f35b341561063957600080fd5b610216611217565b341561064c57600080fd5b6102af600160a060020a036004351660243561124e565b341561066e57600080fd5b6102d6611389565b341561068157600080fd5b610201611391565b341561069457600080fd5b6102af6113f2565b34156106a757600080fd5b6102af611413565b34156106ba57600080fd5b6102d6600160a060020a036004351661141c565b34156106d957600080fd5b6102d66114d7565b34156106ec57600080fd5b6102af600160a060020a03600435166024356114dd565b341561070e57600080fd5b6102d6600160a060020a0360043581169060243516611581565b341561073357600080fd5b6102016004602481358181019083013580602081810201604051908101604052809392919081815260200183836020028082843782019150505050505091908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437509496506115ac95505050505050565b34156107c257600080fd5b6102d66116cc565b34156107d557600080fd5b6102d66116d4565b34156107e857600080fd5b6102d66116db565b34156107fb57600080fd5b6102af6116e1565b341561080e57600080fd5b610201600160a060020a036004351661171e565b60008061083a6005548461177d90919063ffffffff16565b91506000548281151561084957fe5b0660058190556000546108739161086790859063ffffffff61179316565b9063ffffffff6117a516565b600454909150610889908263ffffffff61177d16565b6004557f22427047e1a674a9aff59700a2c8d00ea96e017ddf9236690bdedf1f21f28d9d8160405190815260200160405180910390a1505050565b60408051908101604052600b81527f4d6f64756d20546f6b656e000000000000000000000000000000000000000000602082015281565b600081158061092d5750600160a060020a03338116600090815260026020908152604080832093871683529290522054155b151561093857600080fd5b600160a060020a03338116600081815260026020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60065481565b6212750081565b60005481565b60006109be6118d8565b600754600090819060ff1615156109d457600080fd5b600085116109e157600080fd5b600160a060020a038716600090815260036020526040908190209060c0905190810160409081528254825260018301546020830152600283015490820152600382015460608201526004820154608082015260059091015460a082019081529093508590511015610a5157600080fd5b600160a060020a038088166000908152600260209081526040808320339094168352929052205485901015610a8557600080fd5b610a908760026117bc565b9150610a9d8660026117bc565b6005830154909150610ab5908663ffffffff61179316565b600580840191909155810154610ad1908663ffffffff61177d16565b6005820155600160a060020a0380881660009081526002602090815260408083203390941683529290522054610b0d908663ffffffff61179316565b600160a060020a0380891660009081526002602090815260408083203385168085529252918290209390935590881691907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9088905190815260200160405180910390a35060019695505050505050565b600154600090819033600160a060020a03908116911614610b9e57600080fd5b610ba66111ff565b1515610bb157600080fd5b610bb96113f2565b1515610bc457600080fd5b600d54600c54118015610bda5750600a54600090115b15610c4957600154610bf690600160a060020a031660026117bc565b600a5460058201549193509150610c13908263ffffffff61177d16565b6005830155600054610c2b908263ffffffff61177d16565b600055600654610c41908263ffffffff61179316565b600655610c6e565b600d54600c5411610c6e57600b54610c6a906212750063ffffffff61177d16565b600e555b60086000610c7c828261190f565b506000600182018190556002820181905560038201819055600482018190556005909101555050565b600954600a54600b54600c54600d546008949392919086565b60055481565b600081565b6000610cd36118d8565b600160a060020a038316600090815260036020526040908190209060c0905190810160409081528254825260018301546020830152600283015490820152600382015460608201526004820154608082015260059091015460a0820152600b5490915081511080610d4e57508051158015610d4e5750600b54155b15610d5f578060a001519150610d67565b806080015191505b50919050565b6000806000610d7a6116e1565b1515610d8557600080fd5b610d903360016117bc565b6004810154909250905060008111610da757600080fd5b8315610dc857600c54610dc0908263ffffffff61177d16565b600c55610ddf565b600d54610ddb908263ffffffff61177d16565b600d555b600060048301557f591a89b27b3057021df052ec15caa0a817c1894bcb52243ed0c8cdaa83f322be338583604051600160a060020a03909316835290151560208301526040808301919091526060909101905180910390a19392505050565b6007546000908190819060ff161515610e5657600080fd5b610e613360006117bc565b600381015490925090508015610eb75760006003830155426002830155600160a060020a03331681156108fc0282604051600060405180830381858888f193505050501515610eaf57600080fd5b809250610ebc565b600092505b505090565b600260209081526000928352604080842090915290825290205481565b60036020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040154908060050154905086565b600160a060020a03338116600090815260026020908152604080832093861683529290529081205480831115610f7757600160a060020a033381166000908152600260209081526040808320938816835292905290812055610fae565b610f87818463ffffffff61179316565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b600160a060020a031660009081526003602052604090206005015490565b60015433600160a060020a0390811691161461104d57600080fd5b6110556111ff565b1561105f57600080fd5b60065481111561106e57600080fd5b6000811161107b57600080fd5b81151561108757600080fd5b600083511161109557600080fd5b60075460ff1615156110a657600080fd5b600e546110bc906276a70063ffffffff61177d16565b4210156110c857600080fd5b60c0604051908101604090815284825260208201849052810182905242606082015260006080820181905260a0820152600881518190805161110e929160200190611956565b506020820151600182015560408201518160020155606082015181600301556080820151816004015560a082015160059091015550505050565b6001546000908190819033600160a060020a0390811691161461116a57600080fd5b60009250600091505b83518260ff1610156111e1576111a2848360ff168151811061119157fe5b9060200190602002015160006117bc565b60028101549091506302d276000142106111d157600381018054600090915542600283015592909201916111d6565b600080fd5b600190910190611173565b6111f96111f4348563ffffffff61177d16565b610822565b50505050565b60095415155b90565b600154600160a060020a031681565b60408051908101604052600381527f4d4f440000000000000000000000000000000000000000000000000000000000602082015281565b60006112586118d8565b600754600090819060ff16151561126e57600080fd5b6000851161127b57600080fd5b600160a060020a033316600090815260036020526040908190209060c0905190810160409081528254825260018301546020830152600283015490820152600382015460608201526004820154608082015260059091015460a0820190815290935085905110156112eb57600080fd5b6112f63360026117bc565b91506113038660026117bc565b600583015490915061131b908663ffffffff61179316565b600580840191909155810154611337908663ffffffff61177d16565b6005820155600160a060020a038087169033167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8760405190815260200160405180910390a350600195945050505050565b6302d2760081565b60015433600160a060020a039081169116146113ac57600080fd5b60075460ff16156113bc57600080fd5b6301c9c3806113d860005460065461177d90919063ffffffff16565b11156113e357600080fd5b6007805460ff19166001179055565b600b5460009061140b906212750063ffffffff61177d16565b421015905090565b60075460ff1681565b600160a060020a038116600090815260036020526040812060010154600454829161144d919063ffffffff61179316565b905080156114b657600160a060020a0383166000908152600360205260409020600501546114af9061148690839063ffffffff6118b416565b600160a060020a038516600090815260036020819052604090912001549063ffffffff61177d16565b9150610d67565b5050600160a060020a03166000908152600360208190526040909120015490565b600e5481565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054611515908363ffffffff61177d16565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60015460009081908190819033600160a060020a039081169116146115d057600080fd5b60075460ff16156115e057600080fd5b600093505b85518460ff1610156116c457858460ff168151811061160057fe5b906020019060200201519250848460ff168151811061161b57fe5b90602001906020020151600160a060020a038416600090815260036020526040902060058101549193509150611657908363ffffffff61177d16565b6005820155426002820155600054611675908363ffffffff61177d16565b600055600160a060020a038084169033167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a36001909301926115e5565b505050505050565b6301c9c38081565b6276a70081565b60045481565b60006116eb6111ff565b80156116f95750600b544210155b80156117195750600b54611716906212750063ffffffff61177d16565b42105b905090565b60015433600160a060020a0390811691161461173957600080fd5b600160a060020a038116151561174e57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008282018381101561178c57fe5b9392505050565b60008282111561179f57fe5b50900390565b60008082848115156117b357fe5b04949350505050565b600160a060020a03821660009081526003602052604081208160018460028111156117e357fe5b14806117fa575060028460028111156117f857fe5b145b1561182a576118076116e1565b80156118155750600b548254105b1561182a5760058201546004830155600b5482555b600084600281111561183857fe5b148061184f5750600284600281111561184d57fe5b145b156118ac57600182015460045461186b9163ffffffff61179316565b905080156118ac5761189e61188d8360050154836118b490919063ffffffff16565b60038401549063ffffffff61177d16565b600383015560045460018301555b509392505050565b60008282028315806118d057508284828115156118cd57fe5b04145b151561178c57fe5b60c0604051908101604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b50805460018160011615610100020316600290046000825580601f106119355750611953565b601f01602090049060005260206000209081019061195391906119d4565b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061199757805160ff19168380011785556119c4565b828001600101855582156119c4579182015b828111156119c45782518255916020019190600101906119a9565b506119d09291506119d4565b5090565b61120591905b808211156119d057600081556001016119da5600a165627a7a723058206378abcfaefceadc69da8c6a5ce5584d9407c8c1b14d336a43049204bdd502450029"}