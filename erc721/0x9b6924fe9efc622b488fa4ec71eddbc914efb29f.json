{"Runs": "500", "SwarmSource": "bzzr://2716ad9d6881011870ef000d01e1b711a14677545289566c0b61e84a908df94f", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"canSafeTransferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bytes1\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"canTransferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bytes1\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"rescue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"canSafeTransferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bytes1\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"adopt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getValidAttributeID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"registry\",\"type\":\"address\"},{\"name\":\"validAttributeTypeID\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.25+commit.59dbf8f1", "ConstructorArguments": "000000000000000000000000951996f7f031ddc2f6f2b9f680454f8cc1aa776e00000000000000000000000000000000000000000000000000000000000056ce", "SourceCode": "pragma solidity 0.4.25;\r\n\r\n\r\n/************************ TPL Crypto Copycats - Devcon4 ***********************\r\n * Use at your own risk, these contracts are experimental and lightly tested! *\r\n * Documentation & tests at https://github.com/TPL-protocol/tpl-contracts     *\r\n * Implements an Attribute Registry https://github.com/0age/AttributeRegistry *\r\n *                                                                            *\r\n * Source layout:                                    Line #                   *\r\n *  - library Address                                  45                     *\r\n *  - library SafeMath                                 72                     *\r\n *  - interface AttributeRegistryInterface            135                     *\r\n *  - interface TPLERC721PermissionedInterface        189                     *\r\n *  - interface IERC165                               258                     *\r\n *  - contract IERC721                                277                     *\r\n *    - is IERC165                                                            *\r\n *  - contract IERC721Enumerable                      324                     *\r\n *    - is IERC721                                                            *\r\n *  - contract IERC721Receiver                        343                     *\r\n *  - contract ERC165                                 374                     *\r\n *    - is IERC165                                                            *\r\n *  - contract ERC721                                 424                     *\r\n *    - is IERC165                                                            *\r\n *    - is IERC721                                                            *\r\n *    - using SafeMath for uint256                                            *\r\n *    - using Address for address                                             *\r\n *  - contract ERC721Enumerable                       744                     *\r\n *    - is ERC165                                                             *\r\n *    - is ERC721                                                             *\r\n *    - is IERC721Enumerable                                                  *\r\n *  - contract TPLERC721Permissioned                  893                     *\r\n *    - is ERC721                                                             *\r\n *    - is TPLERC721PermissionedInterface                                     *\r\n *  - contract CryptoCopycats                        1146                     *\r\n *    - is TPLERC721Permissioned                                              *\r\n *    - is ERC721Enumerable                                                   *\r\n *                                                                            *\r\n *  https://github.com/TPL-protocol/tpl-contracts/blob/master/LICENSE.md      *\r\n ******************************************************************************/\r\n\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary Address {\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   * as the code is not actually created until after the constructor finishes.\r\n   * @param account address of the account to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address account) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(account) }\r\n    return size > 0;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Attribute Registry interface. EIP-165 ID: 0x5f46473f\r\n */\r\ninterface AttributeRegistryInterface {\r\n  /**\r\n   * @notice Check if an attribute of the type with ID `attributeTypeID` has\r\n   * been assigned to the account at `account` and is currently valid.\r\n   * @param account address The account to check for a valid attribute.\r\n   * @param attributeTypeID uint256 The ID of the attribute type to check for.\r\n   * @return True if the attribute is assigned and valid, false otherwise.\r\n   * @dev This function MUST return either true or false - i.e. calling this\r\n   * function MUST NOT cause the caller to revert.\r\n   */\r\n  function hasAttribute(\r\n    address account,\r\n    uint256 attributeTypeID\r\n  ) external view returns (bool);\r\n\r\n  /**\r\n   * @notice Retrieve the value of the attribute of the type with ID\r\n   * `attributeTypeID` on the account at `account`, assuming it is valid.\r\n   * @param account address The account to check for the given attribute value.\r\n   * @param attributeTypeID uint256 The ID of the attribute type to check for.\r\n   * @return The attribute value if the attribute is valid, reverts otherwise.\r\n   * @dev This function MUST revert if a directly preceding or subsequent\r\n   * function call to `hasAttribute` with identical `account` and\r\n   * `attributeTypeID` parameters would return false.\r\n   */\r\n  function getAttributeValue(\r\n    address account,\r\n    uint256 attributeTypeID\r\n  ) external view returns (uint256);\r\n\r\n  /**\r\n   * @notice Count the number of attribute types defined by the registry.\r\n   * @return The number of available attribute types.\r\n   * @dev This function MUST return a positive integer value  - i.e. calling\r\n   * this function MUST NOT cause the caller to revert.\r\n   */\r\n  function countAttributeTypes() external view returns (uint256);\r\n\r\n  /**\r\n   * @notice Get the ID of the attribute type at index `index`.\r\n   * @param index uint256 The index of the attribute type in question.\r\n   * @return The ID of the attribute type.\r\n   * @dev This function MUST revert if the provided `index` value falls outside\r\n   * of the range of the value returned from a directly preceding or subsequent\r\n   * function call to `countAttributeTypes`. It MUST NOT revert if the provided\r\n   * `index` value falls inside said range.\r\n   */\r\n  function getAttributeTypeID(uint256 index) external view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @title TPL ERC721 Permissioned interface. EIP-165 ID: 0xadd914e4\r\n */\r\ninterface TPLERC721PermissionedInterface {\r\n  /**\r\n   * @notice Check if a transfer of the NFT with ID `tokenId` on behalf of\r\n   * account `from` to a recipient at account `to` with `msg.value` of `value`\r\n   * and data `data` is approved. The check must fail if the recipient of the\r\n   * transfer does not correctly implement `onERC721Received`.\r\n   * @param from address The current owner of the NFT.\r\n   * @param to address The new owner.\r\n   * @param tokenId uint256 The NFT to transfer.\r\n   * @param value uint256 The amount of ether to include with the transaction.   \r\n   * @param data bytes Additional data with no specified format to be included.\r\n   * @return Bool indicating if transfer is approved & byte with a status code.\r\n   */  \r\n  function canSafeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId,\r\n    uint256 value,\r\n    bytes data\r\n  ) external view returns (bool, bytes1);\r\n\r\n  /**\r\n   * @notice Check if a transfer of the NFT with ID `tokenId` on behalf of\r\n   * account `from` to a recipient at account `to` with `msg.value` of `value`\r\n   * is approved. The check must fail if the recipient of the transfer does not\r\n   * correctly implement `onERC721Received`.\r\n   * @param from address The current owner of the NFT.\r\n   * @param to address The new owner.\r\n   * @param tokenId uint256 The NFT to transfer.\r\n   * @param value uint256 The amount of ether to include with the transaction.   \r\n   * @return Bool indicating if transfer is approved & byte with a status code.\r\n   */\r\n  function canSafeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId,\r\n    uint256 value\r\n  ) external view returns (bool, bytes1);\r\n\r\n  /**\r\n   * @notice Check if a transfer of the NFT with ID `tokenId` on behalf of\r\n   * account `from` to a recipient at account `to` with `msg.value` of `value`\r\n   * is approved. THE CALLER IS RESPONSIBLE TO CONFIRM THAT `to` IS CAPABLE OF\r\n   * RECEIVING NFTS OR ELSE THEY MAY BE PERMANENTLY LOST.\r\n   * @param from address The current owner of the NFT.\r\n   * @param to address The new owner.\r\n   * @param tokenId uint256 The NFT to transfer.\r\n   * @param value uint256 The amount of ether to include with the transaction.   \r\n   * @return Bool indicating if transfer is approved & byte with a status code.\r\n   */  \r\n  function canTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId,\r\n    uint256 value\r\n  ) external view returns (bool, bytes1);\r\n\r\n  /**\r\n   * @notice Get the account of the utilized attribute registry.\r\n   * @return The account of the registry.\r\n   */\r\n  function getRegistry() external view returns (address);\r\n}\r\n\r\n\r\n/**\r\n * @title IERC165\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n */\r\ninterface IERC165 {\r\n\r\n  /**\r\n   * @notice Query if a contract implements an interface\r\n   * @param interfaceId The interface identifier, as specified in ERC-165\r\n   * @dev Interface identification is specified in ERC-165. This function\r\n   * uses less than 30,000 gas.\r\n   */\r\n  function supportsInterface(bytes4 interfaceId)\r\n    external\r\n    view\r\n    returns (bool);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic interface\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract IERC721 is IERC165 {\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 indexed tokenId\r\n  );\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed approved,\r\n    uint256 indexed tokenId\r\n  );\r\n  event ApprovalForAll(\r\n    address indexed owner,\r\n    address indexed operator,\r\n    bool approved\r\n  );\r\n\r\n  function balanceOf(address owner) public view returns (uint256 balance);\r\n  function ownerOf(uint256 tokenId) public view returns (address owner);\r\n\r\n  function approve(address to, uint256 tokenId) public;\r\n  function getApproved(uint256 tokenId)\r\n    public view returns (address operator);\r\n\r\n  function setApprovalForAll(address operator, bool _approved) public;\r\n  function isApprovedForAll(address owner, address operator)\r\n    public view returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 tokenId) public;\r\n  function safeTransferFrom(address from, address to, uint256 tokenId)\r\n    public;\r\n\r\n  function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId,\r\n    bytes data\r\n  )\r\n    public;\r\n}\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract IERC721Enumerable is IERC721 {\r\n  function totalSupply() public view returns (uint256);\r\n  function tokenOfOwnerByIndex(\r\n    address owner,\r\n    uint256 index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256 tokenId);\r\n\r\n  function tokenByIndex(uint256 index) public view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ncontract IERC721Receiver {\r\n  /**\r\n   * @notice Handle the receipt of an NFT\r\n   * @dev The ERC721 smart contract calls this function on the recipient\r\n   * after a `safeTransfer`. This function MUST return the function selector,\r\n   * otherwise the caller will revert the transaction. The selector to be\r\n   * returned can be obtained as `this.onERC721Received.selector`. This\r\n   * function MAY throw to revert and reject the transfer.\r\n   * Note: the ERC721 contract address is always the message sender.\r\n   * @param operator The address which called `safeTransferFrom` function\r\n   * @param from The address which previously owned the token\r\n   * @param tokenId The NFT identifier which is being transferred\r\n   * @param data Additional data with no specified format\r\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n   */\r\n  function onERC721Received(\r\n    address operator,\r\n    address from,\r\n    uint256 tokenId,\r\n    bytes data\r\n  )\r\n    public\r\n    returns(bytes4);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC165\r\n * @author Matt Condon (@shrugs)\r\n * @dev Implements ERC165 using a lookup table.\r\n */\r\ncontract ERC165 is IERC165 {\r\n\r\n  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\r\n  /**\r\n   * 0x01ffc9a7 ===\r\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\r\n   */\r\n\r\n  /**\r\n   * @dev a mapping of interface id to whether or not it's supported\r\n   */\r\n  mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n  /**\r\n   * @dev A contract implementing SupportsInterfaceWithLookup\r\n   * implement ERC165 itself\r\n   */\r\n  constructor()\r\n    internal\r\n  {\r\n    _registerInterface(_InterfaceId_ERC165);\r\n  }\r\n\r\n  /**\r\n   * @dev implement supportsInterface(bytes4) using a lookup table\r\n   */\r\n  function supportsInterface(bytes4 interfaceId)\r\n    external\r\n    view\r\n    returns (bool)\r\n  {\r\n    return _supportedInterfaces[interfaceId];\r\n  }\r\n\r\n  /**\r\n   * @dev internal method for registering an interface\r\n   */\r\n  function _registerInterface(bytes4 interfaceId)\r\n    internal\r\n  {\r\n    require(interfaceId != 0xffffffff);\r\n    _supportedInterfaces[interfaceId] = true;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic implementation\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721 is ERC165, IERC721 {\r\n\r\n  using SafeMath for uint256;\r\n  using Address for address;\r\n\r\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n  // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\r\n  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\r\n\r\n  // Mapping from token ID to owner\r\n  mapping (uint256 => address) private _tokenOwner;\r\n\r\n  // Mapping from token ID to approved address\r\n  mapping (uint256 => address) private _tokenApprovals;\r\n\r\n  // Mapping from owner to number of owned token\r\n  mapping (address => uint256) private _ownedTokensCount;\r\n\r\n  // Mapping from owner to operator approvals\r\n  mapping (address => mapping (address => bool)) private _operatorApprovals;\r\n\r\n  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\r\n  /*\r\n   * 0x80ac58cd ===\r\n   *   bytes4(keccak256('balanceOf(address)')) ^\r\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\r\n   *   bytes4(keccak256('approve(address,uint256)')) ^\r\n   *   bytes4(keccak256('getApproved(uint256)')) ^\r\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\r\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\r\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\r\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\r\n   */\r\n\r\n  constructor()\r\n    public\r\n  {\r\n    // register the supported interfaces to conform to ERC721 via ERC165\r\n    _registerInterface(_InterfaceId_ERC721);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the balance of the specified address\r\n   * @param owner address to query the balance of\r\n   * @return uint256 representing the amount owned by the passed address\r\n   */\r\n  function balanceOf(address owner) public view returns (uint256) {\r\n    require(owner != address(0));\r\n    return _ownedTokensCount[owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the owner of the specified token ID\r\n   * @param tokenId uint256 ID of the token to query the owner of\r\n   * @return owner address currently marked as the owner of the given token ID\r\n   */\r\n  function ownerOf(uint256 tokenId) public view returns (address) {\r\n    address owner = _tokenOwner[tokenId];\r\n    require(owner != address(0));\r\n    return owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Approves another address to transfer the given token ID\r\n   * The zero address indicates there is no approved address.\r\n   * There can only be one approved address per token at a given time.\r\n   * Can only be called by the token owner or an approved operator.\r\n   * @param to address to be approved for the given token ID\r\n   * @param tokenId uint256 ID of the token to be approved\r\n   */\r\n  function approve(address to, uint256 tokenId) public {\r\n    address owner = ownerOf(tokenId);\r\n    require(to != owner);\r\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n    _tokenApprovals[tokenId] = to;\r\n    emit Approval(owner, to, tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the approved address for a token ID, or zero if no address set\r\n   * Reverts if the token ID does not exist.\r\n   * @param tokenId uint256 ID of the token to query the approval of\r\n   * @return address currently approved for the given token ID\r\n   */\r\n  function getApproved(uint256 tokenId) public view returns (address) {\r\n    require(_exists(tokenId));\r\n    return _tokenApprovals[tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Sets or unsets the approval of a given operator\r\n   * An operator is allowed to transfer all tokens of the sender on their behalf\r\n   * @param to operator address to set the approval\r\n   * @param approved representing the status of the approval to be set\r\n   */\r\n  function setApprovalForAll(address to, bool approved) public {\r\n    require(to != msg.sender);\r\n    _operatorApprovals[msg.sender][to] = approved;\r\n    emit ApprovalForAll(msg.sender, to, approved);\r\n  }\r\n\r\n  /**\r\n   * @dev Tells whether an operator is approved by a given owner\r\n   * @param owner owner address which you want to query the approval of\r\n   * @param operator operator address which you want to query the approval of\r\n   * @return bool whether the given operator is approved by the given owner\r\n   */\r\n  function isApprovedForAll(\r\n    address owner,\r\n    address operator\r\n  )\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return _operatorApprovals[owner][operator];\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers the ownership of a given token ID to another address\r\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param from current owner of the token\r\n   * @param to address to receive the ownership of the given token ID\r\n   * @param tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  )\r\n    public\r\n  {\r\n    require(_isApprovedOrOwner(msg.sender, tokenId));\r\n    require(to != address(0));\r\n\r\n    _clearApproval(from, tokenId);\r\n    _removeTokenFrom(from, tokenId);\r\n    _addTokenTo(to, tokenId);\r\n\r\n    emit Transfer(from, to, tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * If the target address is a contract, it must implement `onERC721Received`,\r\n   * which is called upon a safe transfer, and return the magic value\r\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n   * the transfer is reverted.\r\n   *\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param from current owner of the token\r\n   * @param to address to receive the ownership of the given token ID\r\n   * @param tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  )\r\n    public\r\n  {\r\n    // solium-disable-next-line arg-overflow\r\n    safeTransferFrom(from, to, tokenId, \"\");\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * If the target address is a contract, it must implement `onERC721Received`,\r\n   * which is called upon a safe transfer, and return the magic value\r\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n   * the transfer is reverted.\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param from current owner of the token\r\n   * @param to address to receive the ownership of the given token ID\r\n   * @param tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes data to send along with a safe transfer check\r\n   */\r\n  function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n  {\r\n    transferFrom(from, to, tokenId);\r\n    // solium-disable-next-line arg-overflow\r\n    require(_checkOnERC721Received(from, to, tokenId, _data));\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the specified token exists\r\n   * @param tokenId uint256 ID of the token to query the existence of\r\n   * @return whether the token exists\r\n   */\r\n  function _exists(uint256 tokenId) internal view returns (bool) {\r\n    address owner = _tokenOwner[tokenId];\r\n    return owner != address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the given spender can transfer a given token ID\r\n   * @param spender address of the spender to query\r\n   * @param tokenId uint256 ID of the token to be transferred\r\n   * @return bool whether the msg.sender is approved for the given token ID,\r\n   *  is an operator of the owner, or is the owner of the token\r\n   */\r\n  function _isApprovedOrOwner(\r\n    address spender,\r\n    uint256 tokenId\r\n  )\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    address owner = ownerOf(tokenId);\r\n    // Disable solium check because of\r\n    // https://github.com/duaraghav8/Solium/issues/175\r\n    // solium-disable-next-line operator-whitespace\r\n    return (\r\n      spender == owner ||\r\n      getApproved(tokenId) == spender ||\r\n      isApprovedForAll(owner, spender)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * Reverts if the given token ID already exists\r\n   * @param to The address that will own the minted token\r\n   * @param tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address to, uint256 tokenId) internal {\r\n    require(to != address(0));\r\n    _addTokenTo(to, tokenId);\r\n    emit Transfer(address(0), to, tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * Reverts if the token does not exist\r\n   * @param tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address owner, uint256 tokenId) internal {\r\n    _clearApproval(owner, tokenId);\r\n    _removeTokenFrom(owner, tokenId);\r\n    emit Transfer(owner, address(0), tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * Note that this function is left internal to make ERC721Enumerable possible, but is not\r\n   * intended to be called by custom derived contracts: in particular, it emits no Transfer event.\r\n   * @param to address representing the new owner of the given token ID\r\n   * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function _addTokenTo(address to, uint256 tokenId) internal {\r\n    require(_tokenOwner[tokenId] == address(0));\r\n    _tokenOwner[tokenId] = to;\r\n    _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * Note that this function is left internal to make ERC721Enumerable possible, but is not\r\n   * intended to be called by custom derived contracts: in particular, it emits no Transfer event,\r\n   * and doesn't clear approvals.\r\n   * @param from address representing the previous owner of the given token ID\r\n   * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function _removeTokenFrom(address from, uint256 tokenId) internal {\r\n    require(ownerOf(tokenId) == from);\r\n    _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\r\n    _tokenOwner[tokenId] = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to invoke `onERC721Received` on a target address\r\n   * The call is not executed if the target address is not a contract\r\n   * @param from address representing the previous owner of the given token ID\r\n   * @param to target address that will receive the tokens\r\n   * @param tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes optional data to send along with the call\r\n   * @return whether the call correctly returned the expected magic value\r\n   */\r\n  function _checkOnERC721Received(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId,\r\n    bytes _data\r\n  )\r\n    internal\r\n    returns (bool)\r\n  {\r\n    if (!to.isContract()) {\r\n      return true;\r\n    }\r\n    bytes4 retval = IERC721Receiver(to).onERC721Received(\r\n      msg.sender, from, tokenId, _data);\r\n    return (retval == _ERC721_RECEIVED);\r\n  }\r\n\r\n  /**\r\n   * @dev Private function to clear current approval of a given token ID\r\n   * Reverts if the given address is not indeed the owner of the token\r\n   * @param owner owner of the token\r\n   * @param tokenId uint256 ID of the token to be transferred\r\n   */\r\n  function _clearApproval(address owner, uint256 tokenId) private {\r\n    require(ownerOf(tokenId) == owner);\r\n    if (_tokenApprovals[tokenId] != address(0)) {\r\n      _tokenApprovals[tokenId] = address(0);\r\n    }\r\n  }\r\n}\r\n\r\n\r\ncontract ERC721Enumerable is ERC165, ERC721, IERC721Enumerable {\r\n  // Mapping from owner to list of owned token IDs\r\n  mapping(address => uint256[]) private _ownedTokens;\r\n\r\n  // Mapping from token ID to index of the owner tokens list\r\n  mapping(uint256 => uint256) private _ownedTokensIndex;\r\n\r\n  // Array with all token ids, used for enumeration\r\n  uint256[] private _allTokens;\r\n\r\n  // Mapping from token id to position in the allTokens array\r\n  mapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n  bytes4 private constant _InterfaceId_ERC721Enumerable = 0x780e9d63;\r\n  /**\r\n   * 0x780e9d63 ===\r\n   *   bytes4(keccak256('totalSupply()')) ^\r\n   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\r\n   *   bytes4(keccak256('tokenByIndex(uint256)'))\r\n   */\r\n\r\n  /**\r\n   * @dev Constructor function\r\n   */\r\n  constructor() public {\r\n    // register the supported interface to conform to ERC721 via ERC165\r\n    _registerInterface(_InterfaceId_ERC721Enumerable);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\r\n   * @param owner address owning the tokens list to be accessed\r\n   * @param index uint256 representing the index to be accessed of the requested tokens list\r\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\r\n   */\r\n  function tokenOfOwnerByIndex(\r\n    address owner,\r\n    uint256 index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    require(index < balanceOf(owner));\r\n    return _ownedTokens[owner][index];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the total amount of tokens stored by the contract\r\n   * @return uint256 representing the total amount of tokens\r\n   */\r\n  function totalSupply() public view returns (uint256) {\r\n    return _allTokens.length;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of all the tokens in this contract\r\n   * Reverts if the index is greater or equal to the total number of tokens\r\n   * @param index uint256 representing the index to be accessed of the tokens list\r\n   * @return uint256 token ID at the given index of the tokens list\r\n   */\r\n  function tokenByIndex(uint256 index) public view returns (uint256) {\r\n    require(index < totalSupply());\r\n    return _allTokens[index];\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * This function is internal due to language limitations, see the note in ERC721.sol.\r\n   * It is not intended to be called by custom derived contracts: in particular, it emits no Transfer event.\r\n   * @param to address representing the new owner of the given token ID\r\n   * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function _addTokenTo(address to, uint256 tokenId) internal {\r\n    super._addTokenTo(to, tokenId);\r\n    uint256 length = _ownedTokens[to].length;\r\n    _ownedTokens[to].push(tokenId);\r\n    _ownedTokensIndex[tokenId] = length;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * This function is internal due to language limitations, see the note in ERC721.sol.\r\n   * It is not intended to be called by custom derived contracts: in particular, it emits no Transfer event,\r\n   * and doesn't clear approvals.\r\n   * @param from address representing the previous owner of the given token ID\r\n   * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function _removeTokenFrom(address from, uint256 tokenId) internal {\r\n    super._removeTokenFrom(from, tokenId);\r\n\r\n    // To prevent a gap in the array, we store the last token in the index of the token to delete, and\r\n    // then delete the last slot.\r\n    uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n    uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\r\n    uint256 lastToken = _ownedTokens[from][lastTokenIndex];\r\n\r\n    _ownedTokens[from][tokenIndex] = lastToken;\r\n    // This also deletes the contents at the last position of the array\r\n    _ownedTokens[from].length--;\r\n\r\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\r\n    // be zero. Then we can make sure that we will remove tokenId from the ownedTokens list since we are first swapping\r\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\r\n\r\n    _ownedTokensIndex[tokenId] = 0;\r\n    _ownedTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * Reverts if the given token ID already exists\r\n   * @param to address the beneficiary that will own the minted token\r\n   * @param tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address to, uint256 tokenId) internal {\r\n    super._mint(to, tokenId);\r\n\r\n    _allTokensIndex[tokenId] = _allTokens.length;\r\n    _allTokens.push(tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * Reverts if the token does not exist\r\n   * @param owner owner of the token to burn\r\n   * @param tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address owner, uint256 tokenId) internal {\r\n    super._burn(owner, tokenId);\r\n\r\n    // Reorg all tokens array\r\n    uint256 tokenIndex = _allTokensIndex[tokenId];\r\n    uint256 lastTokenIndex = _allTokens.length.sub(1);\r\n    uint256 lastToken = _allTokens[lastTokenIndex];\r\n\r\n    _allTokens[tokenIndex] = lastToken;\r\n    _allTokens[lastTokenIndex] = 0;\r\n\r\n    _allTokens.length--;\r\n    _allTokensIndex[tokenId] = 0;\r\n    _allTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Permissioned ERC721 token: ownership is restricted to valid accounts.\r\n */\r\ncontract TPLERC721Permissioned is ERC721, TPLERC721PermissionedInterface {\r\n\r\n  // Declare registry interface, used to request attributes from a jurisdiction.\r\n  AttributeRegistryInterface internal _registry;\r\n\r\n  // Declare attribute ID required in order to hold tokens,\r\n  uint256 internal _validAttributeTypeID;\r\n\r\n  /**\r\n  * @notice The constructor function, with an associated attribute registry at\r\n  * `registry` and an assignable attribute type with ID `validAttributeTypeID`.\r\n  * @param registry address The account of the associated attribute registry.  \r\n  * @param validAttributeTypeID uint256 The ID of the required attribute type.\r\n  * @dev Note that it may be appropriate to require that the referenced\r\n  * attribute registry supports the correct interface via EIP-165.\r\n  */\r\n  constructor(\r\n    AttributeRegistryInterface registry,\r\n    uint256 validAttributeTypeID\r\n  ) public {\r\n    _registry = AttributeRegistryInterface(registry);\r\n    _validAttributeTypeID = validAttributeTypeID;\r\n  }\r\n\r\n  /**\r\n   * @notice Check if a transfer of the NFT with ID `tokenId` on behalf of\r\n   * account `from` to a recipient at account `to` with `msg.value` of `value`\r\n   * and data `data` is approved. The check must fail if the recipient of the\r\n   * transfer does not correctly implement `onERC721Received`.\r\n   * @param from address The current owner of the NFT.\r\n   * @param to address The new owner.\r\n   * @param tokenId uint256 The NFT to transfer.\r\n   * @param value uint256 The amount of ether to include with the transaction.   \r\n   * @param data bytes Additional data with no specified format to be included.\r\n   * @return Bool indicating if transfer is approved & byte with a status code.\r\n   */  \r\n  function canSafeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId,\r\n    uint256 value,\r\n    bytes data\r\n  ) external view returns (bool, bytes1) {\r\n    // This implementation does not allow attaching a value to the transfer.\r\n    if (value > 0) {\r\n      return (false, bytes1(hex\"A0\")); // NOTE: error codes are not standardized\r\n    }\r\n\r\n    // The spender must be approved or the owner of the NFT.\r\n    if (!_isApprovedOrOwner(msg.sender, tokenId)) {\r\n      return (false, bytes1(hex\"A0\")); // NOTE: error codes are not standardized      \r\n    }\r\n\r\n    // The to address cannot be the null address.\r\n    if (to == address(0)) {\r\n      return (false, bytes1(hex\"A0\")); // NOTE: error codes are not standardized       \r\n    }\r\n\r\n    // The receiver must return the required magic number (if it is a contract).\r\n    if (!_checkOnERC721Received(from, to, tokenId, data)) {\r\n      return (false, bytes1(hex\"A0\")); // NOTE: error codes are not standardized\r\n    }\r\n\r\n    // The recipient of the transfer must have the correct attribute assigned.\r\n    if (!_registry.hasAttribute(to, _validAttributeTypeID)) {\r\n      return (false, bytes1(hex\"10\")); // NOTE: error codes are not standardized      \r\n    }\r\n\r\n    // The transfer is approved, return true and the success status code.\r\n    return (true, bytes1(hex\"01\"));\r\n  }\r\n\r\n  /**\r\n   * @notice Check if a transfer of the NFT with ID `tokenId` on behalf of\r\n   * account `from` to a recipient at account `to` with `msg.value` of `value`\r\n   * is approved. The check must fail if the recipient of the transfer does not\r\n   * correctly implement `onERC721Received`.\r\n   * @param from address The current owner of the NFT.\r\n   * @param to address The new owner.\r\n   * @param tokenId uint256 The NFT to transfer.\r\n   * @param value uint256 The amount of ether to include with the transaction.   \r\n   * @return Bool indicating if transfer is approved & byte with a status code.\r\n   */\r\n  function canSafeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId,\r\n    uint256 value\r\n  ) external view returns (bool, bytes1) {\r\n    // This implementation does not allow attaching a value to the transfer.\r\n    if (value > 0) {\r\n      return (false, bytes1(hex\"A0\")); // NOTE: error codes are not standardized\r\n    }\r\n\r\n    // The spender must be approved or the owner of the NFT.\r\n    if (!_isApprovedOrOwner(msg.sender, tokenId)) {\r\n      return (false, bytes1(hex\"A0\")); // NOTE: error codes are not standardized      \r\n    }\r\n\r\n    // The to address cannot be the null address.\r\n    if (to == address(0)) {\r\n      return (false, bytes1(hex\"A0\")); // NOTE: error codes are not standardized       \r\n    }\r\n\r\n    // The receiver must return the required magic number (if it is a contract).\r\n    if (!_checkOnERC721Received(from, to, tokenId, \"\")) {\r\n      return (false, bytes1(hex\"A0\")); // NOTE: error codes are not standardized\r\n    }\r\n\r\n    // The recipient of the transfer must have the correct attribute assigned.\r\n    if (!_registry.hasAttribute(to, _validAttributeTypeID)) {\r\n      return (false, bytes1(hex\"10\")); // NOTE: error codes are not standardized      \r\n    }\r\n\r\n    // The transfer is approved, return true and the success status code.\r\n    return (true, bytes1(hex\"01\"));\r\n  }\r\n\r\n  /**\r\n   * @notice Check if a transfer of the NFT with ID `tokenId` on behalf of\r\n   * account `from` to a recipient at account `to` with `msg.value` of `value`\r\n   * is approved. THE CALLER IS RESPONSIBLE TO CONFIRM THAT `to` IS CAPABLE OF\r\n   * RECEIVING NFTS OR ELSE THEY MAY BE PERMANENTLY LOST.\r\n   * @param from address The current owner of the NFT.\r\n   * @param to address The new owner.\r\n   * @param tokenId uint256 The NFT to transfer.\r\n   * @param value uint256 The amount of ether to include with the transaction.   \r\n   * @return Bool indicating if transfer is approved & byte with a status code.\r\n   */  \r\n  function canTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId,\r\n    uint256 value\r\n  ) external view returns (bool, bytes1) {\r\n    // avoid an unused variable warning.\r\n    from;\r\n\r\n    // This implementation does not allow attaching a value to the transfer.\r\n    if (value > 0) {\r\n      return (false, bytes1(hex\"A0\")); // NOTE: error codes are not standardized\r\n    }\r\n\r\n    // The spender must be approved or the owner of the NFT.\r\n    if (!_isApprovedOrOwner(msg.sender, tokenId)) {\r\n      return (false, bytes1(hex\"A0\")); // NOTE: error codes are not standardized      \r\n    }\r\n\r\n    // The to address cannot be the null address.\r\n    if (to == address(0)) {\r\n      return (false, bytes1(hex\"A0\")); // NOTE: error codes are not standardized       \r\n    }\r\n\r\n    // The recipient of the transfer must have the correct attribute assigned.\r\n    if (!_registry.hasAttribute(to, _validAttributeTypeID)) {\r\n      return (false, bytes1(hex\"10\")); // NOTE: error codes are not standardized      \r\n    }\r\n\r\n    // The transfer is approved, return true and the success status code.\r\n    return (true, bytes1(hex\"01\"));\r\n  }\r\n\r\n  /**\r\n   * @notice Get the account of the utilized attribute registry.\r\n   * @return The account of the registry.\r\n   */\r\n  function getRegistry() external view returns (address) {\r\n    return address(_registry);\r\n  }\r\n\r\n  /**\r\n   * @notice Get the ID of the attribute type required to receive tokens.\r\n   * @return The ID of the required attribute type.\r\n   */\r\n  function getValidAttributeID() external view returns (uint256) {\r\n    return _validAttributeTypeID;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers the ownership of a given token ID to another address\r\n   * Usage of this method is discouraged, use `safeTransferFrom` when possible\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param from current owner of the token\r\n   * @param to address to receive the ownership of the given token ID\r\n   * @param tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  )\r\n    public\r\n  {\r\n    require(\r\n      _registry.hasAttribute(to, _validAttributeTypeID),\r\n      \"Transfer failed - receiver is not approved.\"\r\n    );\r\n    super.transferFrom(from, to, tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * If the target address is a contract, it must implement `onERC721Received`,\r\n   * which is called upon a safe transfer, and return the magic value\r\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`;\r\n   * otherwise, the transfer is reverted.\r\n   *\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param from current owner of the token\r\n   * @param to address to receive the ownership of the given token ID\r\n   * @param tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  )\r\n    public\r\n  {\r\n    // solium-disable-next-line arg-overflow\r\n    safeTransferFrom(from, to, tokenId, hex\"\");\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * If the target address is a contract, it must implement `onERC721Received`,\r\n   * which is called upon a safe transfer, and return the magic value\r\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`;\r\n   * otherwise, the transfer is reverted.\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param from current owner of the token\r\n   * @param to address to receive the ownership of the given token ID\r\n   * @param tokenId uint256 ID of the token to be transferred\r\n   * @param data bytes data to send along with a safe transfer check\r\n   */\r\n  function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId,\r\n    bytes data\r\n  )\r\n    public\r\n  {\r\n    transferFrom(from, to, tokenId);\r\n    // solium-disable-next-line arg-overflow\r\n    require(_checkOnERC721Received(from, to, tokenId, data));\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title An instance of TPLERC721Permissioned with an initial token.\r\n */\r\ncontract CryptoCopycats is TPLERC721Permissioned, ERC721Enumerable {\r\n\r\n  string public name = \"Crypto Copycats\";\r\n\r\n  mapping(address => bool) private _hasAdopted;\r\n\r\n  /**\r\n  * @notice The constructor function, with an associated attribute registry at\r\n  * `registry`, an assignable attribute type with ID `validAttributeTypeID`, and\r\n  * an initial NFT assigned to the creator.\r\n  * @param registry address The account of the associated attribute registry.  \r\n  * @param validAttributeTypeID uint256 The ID of the required attribute type.\r\n  * @dev Note that it may be appropriate to require that the referenced\r\n  * attribute registry supports the correct interface via EIP-165.\r\n  */\r\n  constructor(\r\n    AttributeRegistryInterface registry,\r\n    uint256 validAttributeTypeID\r\n  ) public TPLERC721Permissioned(registry, validAttributeTypeID) {\r\n    _adopt();\r\n  }\r\n\r\n  function adopt() external {\r\n    require(\r\n      _registry.hasAttribute(msg.sender, _validAttributeTypeID),\r\n      \"We only let approved owners adopt our cats!\"\r\n    );\r\n    require(\r\n      !_hasAdopted[msg.sender],\r\n      \"Do not adopt more than one cat, please!\"\r\n    );    \r\n    _adopt();\r\n  }\r\n\r\n  function rescue(uint256 tokenId) external {\r\n    address currentOwner = ownerOf(tokenId);\r\n    require(\r\n      !_registry.hasAttribute(currentOwner, _validAttributeTypeID),\r\n      \"You would steal a cat from a loving owner? You monster!\"\r\n    );\r\n    require(\r\n      _registry.hasAttribute(msg.sender, _validAttributeTypeID),\r\n      \"We only let approved owners rescue cats!\"\r\n    );\r\n\r\n    _rescue(tokenId);\r\n  }\r\n\r\n  function _adopt() internal {\r\n    uint256 tokenId = uint256(\r\n      keccak256(\r\n        abi.encodePacked(\r\n          msg.sender,\r\n          blockhash(block.number - 1),\r\n          now\r\n        )\r\n      )\r\n    );\r\n\r\n    _mint(msg.sender, tokenId);\r\n    _hasAdopted[msg.sender] = true;\r\n  }\r\n\r\n  function _rescue(uint256 tokenId) internal {\r\n    // Don't over-analyze the methods we use to rescue cats...\r\n    _burn(ownerOf(tokenId), tokenId);\r\n    _mint(msg.sender, tokenId);\r\n  }\r\n}", "OptimizationUsed": "1", "ContractName": "CryptoCopycats", "ByteCode": "0x60806040526004361061011c5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301ffc9a7811461012157806306fdde031461016c578063081812fc146101f6578063095ea7b31461022a57806318160ddd1461025057806323b872dd146102775780632f745c59146102a15780633571ffa3146102c557806342842e0e1461033e5780634f6ccce71461036857806355e9a76e146103805780635ab1bd53146103ad5780636352211e146103c25780636ac053ad146103da57806370a08231146103f257806397f0f17a14610413578063a22cb46514610440578063b0f5d8a414610466578063b88d4fde1461047b578063e985e9c5146104ea578063eac5a01c14610511575b600080fd5b34801561012d57600080fd5b506101587bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1960043516610526565b604080519115158252519081900360200190f35b34801561017857600080fd5b5061018161055a565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101bb5781810151838201526020016101a3565b50505050905090810190601f1680156101e85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561020257600080fd5b5061020e6004356105e8565b60408051600160a060020a039092168252519081900360200190f35b34801561023657600080fd5b5061024e600160a060020a036004351660243561061a565b005b34801561025c57600080fd5b506102656106d0565b60408051918252519081900360200190f35b34801561028357600080fd5b5061024e600160a060020a03600435811690602435166044356106d7565b3480156102ad57600080fd5b50610265600160a060020a0360043516602435610819565b3480156102d157600080fd5b50610302600160a060020a036004803582169160248035909116916044359160643591608435918201910135610866565b6040805192151583527fff0000000000000000000000000000000000000000000000000000000000000090911660208301528051918290030190f35b34801561034a57600080fd5b5061024e600160a060020a0360043581169060243516604435610a3a565b34801561037457600080fd5b50610265600435610a56565b34801561038c57600080fd5b50610302600160a060020a0360043581169060243516604435606435610a8b565b3480156103b957600080fd5b5061020e610c02565b3480156103ce57600080fd5b5061020e600435610c11565b3480156103e657600080fd5b5061024e600435610c3b565b3480156103fe57600080fd5b50610265600160a060020a0360043516610eb5565b34801561041f57600080fd5b50610302600160a060020a0360043581169060243516604435606435610ee8565b34801561044c57600080fd5b5061024e600160a060020a03600435166024351515610f9a565b34801561047257600080fd5b5061024e61101e565b34801561048757600080fd5b50604080516020601f60643560048181013592830184900484028501840190955281845261024e94600160a060020a0381358116956024803590921695604435953695608494019181908401838280828437509497506111fc9650505050505050565b3480156104f657600080fd5b50610158600160a060020a0360043581169060243516611224565b34801561051d57600080fd5b50610265611252565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191660009081526020819052604090205460ff1690565b600b805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105e05780601f106105b5576101008083540402835291602001916105e0565b820191906000526020600020905b8154815290600101906020018083116105c357829003601f168201915b505050505081565b60006105f382611258565b15156105fe57600080fd5b50600090815260026020526040902054600160a060020a031690565b600061062582610c11565b9050600160a060020a03838116908216141561064057600080fd5b33600160a060020a038216148061065c575061065c8133611224565b151561066757600080fd5b600082815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6009545b90565b600554600654604080517f4b5f297a000000000000000000000000000000000000000000000000000000008152600160a060020a038681166004830152602482019390935290519190921691634b5f297a9160448083019260209291908290030181600087803b15801561074a57600080fd5b505af115801561075e573d6000803e3d6000fd5b505050506040513d602081101561077457600080fd5b5051151561080957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f5472616e73666572206661696c6564202d207265636569766572206973206e6f60448201527f7420617070726f7665642e000000000000000000000000000000000000000000606482015290519081900360840190fd5b610814838383611275565b505050565b600061082483610eb5565b821061082f57600080fd5b600160a060020a038316600090815260076020526040902080548390811061085357fe5b9060005260206000200154905092915050565b600080600085111561088b575060009050600080516020611ae2833981519152610a2f565b6108953387611303565b15156108b4575060009050600080516020611ae2833981519152610a2f565b600160a060020a03871615156108dd575060009050600080516020611ae2833981519152610a2f565b61091988888887878080601f01602080910402602001604051908101604052809392919081815260200183838082843750611362945050505050565b1515610938575060009050600080516020611ae2833981519152610a2f565b600554600654604080517f4b5f297a000000000000000000000000000000000000000000000000000000008152600160a060020a038b81166004830152602482019390935290519190921691634b5f297a9160448083019260209291908290030181600087803b1580156109ab57600080fd5b505af11580156109bf573d6000803e3d6000fd5b505050506040513d60208110156109d557600080fd5b50511515610a085750600090507f1000000000000000000000000000000000000000000000000000000000000000610a2f565b50600190507f01000000000000000000000000000000000000000000000000000000000000005b965096945050505050565b61081483838360206040519081016040528060008152506111fc565b6000610a606106d0565b8210610a6b57600080fd5b6009805483908110610a7957fe5b90600052602060002001549050919050565b6000806000831115610ab0575060009050600080516020611ae2833981519152610bf9565b610aba3385611303565b1515610ad9575060009050600080516020611ae2833981519152610bf9565b600160a060020a0385161515610b02575060009050600080516020611ae2833981519152610bf9565b600554600654604080517f4b5f297a000000000000000000000000000000000000000000000000000000008152600160a060020a038981166004830152602482019390935290519190921691634b5f297a9160448083019260209291908290030181600087803b158015610b7557600080fd5b505af1158015610b89573d6000803e3d6000fd5b505050506040513d6020811015610b9f57600080fd5b50511515610bd25750600090507f1000000000000000000000000000000000000000000000000000000000000000610bf9565b50600190507f01000000000000000000000000000000000000000000000000000000000000005b94509492505050565b600554600160a060020a031690565b600081815260016020526040812054600160a060020a0316801515610c3557600080fd5b92915050565b6000610c4682610c11565b600554600654604080517f4b5f297a000000000000000000000000000000000000000000000000000000008152600160a060020a03808616600483015260248201939093529051939450911691634b5f297a916044808201926020929091908290030181600087803b158015610cbb57600080fd5b505af1158015610ccf573d6000803e3d6000fd5b505050506040513d6020811015610ce557600080fd5b505115610d7957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603760248201527f596f7520776f756c6420737465616c2061206361742066726f6d2061206c6f7660448201527f696e67206f776e65723f20596f75206d6f6e7374657221000000000000000000606482015290519081900360840190fd5b600554600654604080517f4b5f297a000000000000000000000000000000000000000000000000000000008152336004820152602481019290925251600160a060020a0390921691634b5f297a916044808201926020929091908290030181600087803b158015610de957600080fd5b505af1158015610dfd573d6000803e3d6000fd5b505050506040513d6020811015610e1357600080fd5b50511515610ea857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f5765206f6e6c79206c657420617070726f766564206f776e657273207265736360448201527f7565206361747321000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b610eb1826114e4565b5050565b6000600160a060020a0382161515610ecc57600080fd5b50600160a060020a031660009081526003602052604090205490565b6000806000831115610f0d575060009050600080516020611ae2833981519152610bf9565b610f173385611303565b1515610f36575060009050600080516020611ae2833981519152610bf9565b600160a060020a0385161515610f5f575060009050600080516020611ae2833981519152610bf9565b610f7b8686866020604051908101604052806000815250611362565b1515610b02575060009050600080516020611ae2833981519152610bf9565b600160a060020a038216331415610fb057600080fd5b336000818152600460209081526040808320600160a060020a03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b600554600654604080517f4b5f297a000000000000000000000000000000000000000000000000000000008152336004820152602481019290925251600160a060020a0390921691634b5f297a916044808201926020929091908290030181600087803b15801561108e57600080fd5b505af11580156110a2573d6000803e3d6000fd5b505050506040513d60208110156110b857600080fd5b5051151561114d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f5765206f6e6c79206c657420617070726f766564206f776e6572732061646f7060448201527f74206f7572206361747321000000000000000000000000000000000000000000606482015290519081900360840190fd5b336000908152600c602052604090205460ff16156111f257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f446f206e6f742061646f7074206d6f7265207468616e206f6e65206361742c2060448201527f706c656173652100000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6111fa611503565b565b6112078484846106d7565b61121384848484611362565b151561121e57600080fd5b50505050565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205460ff1690565b60065490565b600090815260016020526040902054600160a060020a0316151590565b61127f3382611303565b151561128a57600080fd5b600160a060020a038216151561129f57600080fd5b6112a983826115d1565b6112b38382611640565b6112bd8282611747565b8082600160a060020a031684600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b60008061130f83610c11565b905080600160a060020a031684600160a060020a0316148061134a575083600160a060020a031661133f846105e8565b600160a060020a0316145b8061135a575061135a8185611224565b949350505050565b60008061137785600160a060020a0316611790565b151561138657600191506114db565b6040517f150b7a020000000000000000000000000000000000000000000000000000000081523360048201818152600160a060020a03898116602485015260448401889052608060648501908152875160848601528751918a169463150b7a0294938c938b938b93909160a490910190602085019080838360005b83811015611419578181015183820152602001611401565b50505050905090810190601f1680156114465780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561146857600080fd5b505af115801561147c573d6000803e3d6000fd5b505050506040513d602081101561149257600080fd5b50517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1981167f150b7a020000000000000000000000000000000000000000000000000000000014925090505b50949350505050565b6114f66114f082610c11565b82611798565b6115003382611854565b50565b604080516c010000000000000000000000003302602080830191909152600019430140603483015242605480840191909152835180840390910181526074909201928390528151600093918291908401908083835b602083106115775780518252601f199092019160209182019101611558565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206001900490506115b43382611854565b50336000908152600c60205260409020805460ff19166001179055565b81600160a060020a03166115e482610c11565b600160a060020a0316146115f757600080fd5b600081815260026020526040902054600160a060020a031615610eb1576000908152600260205260409020805473ffffffffffffffffffffffffffffffffffffffff1916905550565b600080600061164f85856118a3565b600084815260086020908152604080832054600160a060020a038916845260079092529091205490935061168a90600163ffffffff61193916565b600160a060020a0386166000908152600760205260409020805491935090839081106116b257fe5b90600052602060002001549050806007600087600160a060020a0316600160a060020a03168152602001908152602001600020848154811015156116f257fe5b6000918252602080832090910192909255600160a060020a0387168152600790915260409020805490611729906000198301611aa4565b50600093845260086020526040808520859055908452909220555050565b60006117538383611950565b50600160a060020a039091166000908152600760209081526040808320805460018101825590845282842081018590559383526008909152902055565b6000903b1190565b60008060006117a785856119e0565b6000848152600a60205260409020546009549093506117cd90600163ffffffff61193916565b91506009828154811015156117de57fe5b90600052602060002001549050806009848154811015156117fb57fe5b6000918252602082200191909155600980548490811061181757fe5b6000918252602090912001556009805490611836906000198301611aa4565b506000938452600a6020526040808520859055908452909220555050565b61185e8282611a30565b600980546000838152600a60205260408120829055600182018355919091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af015550565b81600160a060020a03166118b682610c11565b600160a060020a0316146118c957600080fd5b600160a060020a0382166000908152600360205260409020546118f390600163ffffffff61193916565b600160a060020a03909216600090815260036020908152604080832094909455918152600190915220805473ffffffffffffffffffffffffffffffffffffffff19169055565b6000808383111561194957600080fd5b5050900390565b600081815260016020526040902054600160a060020a03161561197257600080fd5b6000818152600160208181526040808420805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03881690811790915584526003909152909120546119c091611a8b565b600160a060020a0390921660009081526003602052604090209190915550565b6119ea82826115d1565b6119f48282611640565b6040518190600090600160a060020a038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b600160a060020a0382161515611a4557600080fd5b611a4f8282611747565b6040518190600160a060020a038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600082820183811015611a9d57600080fd5b9392505050565b815481835581811115610814576000838152602090206108149181019083016106d491905b80821115611add5760008155600101611ac9565b50905600a000000000000000000000000000000000000000000000000000000000000000a165627a7a723058202716ad9d6881011870ef000d01e1b711a14677545289566c0b61e84a908df94f0029"}