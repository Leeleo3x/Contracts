{"Runs": "200", "SwarmSource": "bzzr://03b77cbf8c200fad42a33fd043780a625096f62849b46442f9cf1fb29cb402d9", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferPrivileged\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mintingFinish\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"burnAmount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintAgents\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setMintAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFromPrivileged\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeMaster\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUpgradeState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"previligedBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canUpgrade\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getPrivilegedBalance\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"addApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUpgraded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"setUpgradeAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"subApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BURN_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"master\",\"type\":\"address\"}],\"name\":\"setUpgradeMaster\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"name\":\"_decimals\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"MintingAgentChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"UpgradeAgentSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"burnedAmount\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.19+commit.c4cbbb05", "ConstructorArguments": "00000000000000000000000051420c0846571de5b70851789bedefa67b5edacd00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000005f5e100000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000104d6f64756c547261646520546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044d54526300000000000000000000000000000000000000000000000000000000", "SourceCode": "pragma solidity ^0.4.13;\r\n\r\ncontract Receiver {\r\n    function tokenFallback(address from, uint value, bytes data);\r\n}\r\n\r\n/*\r\n * ERC20 interface\r\n * see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint);\r\n  function allowance(address owner, address spender) public constant returns (uint);\r\n\r\n  function transfer(address to, uint value) public returns (bool ok);\r\n  function transferFrom(address from, address to, uint value) public returns (bool ok);\r\n  function approve(address spender, uint value) public returns (bool ok);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\ncontract SafeMath {\r\n  function safeMul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function safeDiv(uint a, uint b) internal returns (uint) {\r\n    assert(b > 0);\r\n    uint c = a / b;\r\n    assert(a == b * c + a % b);\r\n    return c;\r\n  }\r\n\r\n  function safeSub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function safeAdd(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c>=a && c>=b);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function assert(bool assertion) internal {\r\n    if (!assertion) {\r\n      revert();\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * Standard ERC20 token with Short Hand Attack and approve() race condition mitigation.\r\n *\r\n * Based on code by FirstBlood:\r\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, SafeMath {\r\n  event Transfer(address indexed from, address indexed to, uint indexed value, bytes data);\r\n\r\n  /* Token supply got increased and a new owner received these tokens */\r\n  event Minted(address receiver, uint amount);\r\n\r\n  /* Actual balances of token holders */\r\n  mapping(address => uint) balances;\r\n\r\n  /* approve() allowances */\r\n  mapping (address => mapping (address => uint)) allowed;\r\n\r\n  /**\r\n   *\r\n   * Fix for the ERC20 short address attack\r\n   *\r\n   * http://vessenes.com/the-erc20-short-address-attack-explained/\r\n   */\r\n  modifier onlyPayloadSize(uint size) {\r\n     if(msg.data.length != size + 4) {\r\n       revert();\r\n     }\r\n     _;\r\n  }\r\n\r\n  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) public returns (bool success) {\r\n      bytes memory _empty;\r\n\r\n      return transfer(_to, _value, _empty);\r\n  }\r\n\r\n  function transfer(address _to, uint _value, bytes _data) public returns (bool success) {\r\n    balances[msg.sender] = safeSub(balances[msg.sender], _value);\r\n    balances[_to] = safeAdd(balances[_to], _value);\r\n    Transfer(msg.sender, _to, _value, _data);\r\n    Transfer(msg.sender, _to, _value);\r\n\r\n    if (isContract(_to)) {\r\n      Receiver(_to).tokenFallback(msg.sender, _value, _data);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  // ERC223 fetch contract size (must be nonzero to be a contract)\r\n  function isContract( address _addr ) private returns (bool) {\r\n    uint length;\r\n    _addr = _addr;\r\n    assembly { length := extcodesize(_addr) }\r\n    return (length > 0);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\r\n    uint _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because safeSub(_allowance, _value) will already throw if this condition is not met\r\n    // if (_value > _allowance) revert();\r\n\r\n    balances[_to] = safeAdd(balances[_to], _value);\r\n    balances[_from] = safeSub(balances[_from], _value);\r\n    allowed[_from][msg.sender] = safeSub(_allowance, _value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function balanceOf(address _owner) public constant returns (uint balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  function approve(address _spender, uint _value) public returns (bool success) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) revert();\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) public constant returns (uint remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * Atomic increment of approved spending\r\n   *\r\n   * Works around https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   */\r\n  function addApproval(address _spender, uint _addedValue) public\r\n  onlyPayloadSize(2 * 32)\r\n  returns (bool success) {\r\n      uint oldValue = allowed[msg.sender][_spender];\r\n      allowed[msg.sender][_spender] = safeAdd(oldValue, _addedValue);\r\n      Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n      return true;\r\n  }\r\n\r\n  /**\r\n   * Atomic decrement of approved spending.\r\n   *\r\n   * Works around https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   */\r\n  function subApproval(address _spender, uint _subtractedValue) public\r\n  onlyPayloadSize(2 * 32)\r\n  returns (bool success) {\r\n\r\n      uint oldVal = allowed[msg.sender][_spender];\r\n\r\n      if (_subtractedValue > oldVal) {\r\n          allowed[msg.sender][_spender] = 0;\r\n      } else {\r\n          allowed[msg.sender][_spender] = safeSub(oldVal, _subtractedValue);\r\n      }\r\n      Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n      return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\ncontract BurnableToken is StandardToken {\r\n\r\n  address public constant BURN_ADDRESS = 0;\r\n\r\n  /** How many tokens we burned */\r\n  event Burned(address burner, uint burnedAmount);\r\n\r\n  /**\r\n   * Burn extra tokens from a balance.\r\n   *\r\n   */\r\n  function burn(uint burnAmount) public {\r\n    address burner = msg.sender;\r\n    balances[burner] = safeSub(balances[burner], burnAmount);\r\n    totalSupply = safeSub(totalSupply, burnAmount);\r\n    Burned(burner, burnAmount);\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Upgrade agent interface inspired by Lunyr.\r\n *\r\n * Upgrade agent transfers tokens to a new contract.\r\n * Upgrade agent itself can be the token contract, or just a middle man contract doing the heavy lifting.\r\n */\r\ncontract UpgradeAgent {\r\n\r\n  uint public originalSupply;\r\n\r\n  /** Interface marker */\r\n  function isUpgradeAgent() public constant returns (bool) {\r\n    return true;\r\n  }\r\n\r\n  function upgradeFrom(address _from, uint256 _value) public;\r\n\r\n}\r\n\r\n\r\n/**\r\n * A token upgrade mechanism where users can opt-in amount of tokens to the next smart contract revision.\r\n *\r\n * First envisioned by Golem and Lunyr projects.\r\n */\r\ncontract UpgradeableToken is StandardToken {\r\n\r\n  /** Contract / person who can set the upgrade path. This can be the same as team multisig wallet, as what it is with its default value. */\r\n  address public upgradeMaster;\r\n\r\n  /** The next contract where the tokens will be migrated. */\r\n  UpgradeAgent public upgradeAgent;\r\n\r\n  /** How many tokens we have upgraded by now. */\r\n  uint256 public totalUpgraded;\r\n\r\n  /**\r\n   * Upgrade states.\r\n   *\r\n   * - NotAllowed: The child contract has not reached a condition where the upgrade can bgun\r\n   * - WaitingForAgent: Token allows upgrade, but we don't have a new agent yet\r\n   * - ReadyToUpgrade: The agent is set, but not a single token has been upgraded yet\r\n   * - Upgrading: Upgrade agent is set and the balance holders can upgrade their tokens\r\n   *\r\n   */\r\n  enum UpgradeState {Unknown, NotAllowed, WaitingForAgent, ReadyToUpgrade, Upgrading}\r\n\r\n  /**\r\n   * Somebody has upgraded some of his tokens.\r\n   */\r\n  event Upgrade(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n  /**\r\n   * New upgrade agent available.\r\n   */\r\n  event UpgradeAgentSet(address agent);\r\n\r\n  /**\r\n   * Do not allow construction without upgrade master set.\r\n   */\r\n  function UpgradeableToken(address _upgradeMaster) public {\r\n    upgradeMaster = _upgradeMaster;\r\n  }\r\n\r\n  /**\r\n   * Allow the token holder to upgrade some of their tokens to a new contract.\r\n   */\r\n  function upgrade(uint256 value) public {\r\n\r\n      UpgradeState state = getUpgradeState();\r\n      if(!(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading)) {\r\n        // Called in a bad state\r\n        revert();\r\n      }\r\n\r\n      // Validate input value.\r\n      if (value == 0) revert();\r\n\r\n      balances[msg.sender] = safeSub(balances[msg.sender], value);\r\n\r\n      // Take tokens out from circulation\r\n      totalSupply = safeSub(totalSupply, value);\r\n      totalUpgraded = safeAdd(totalUpgraded, value);\r\n\r\n      // Upgrade agent reissues the tokens\r\n      upgradeAgent.upgradeFrom(msg.sender, value);\r\n      Upgrade(msg.sender, upgradeAgent, value);\r\n  }\r\n\r\n  /**\r\n   * Set an upgrade agent that handles\r\n   */\r\n  function setUpgradeAgent(address agent) external {\r\n\r\n      if(!canUpgrade()) {\r\n        // The token is not yet in a state that we could think upgrading\r\n        revert();\r\n      }\r\n\r\n      if (agent == 0x0) revert();\r\n      // Only a master can designate the next agent\r\n      if (msg.sender != upgradeMaster) revert();\r\n      // Upgrade has already begun for an agent\r\n      if (getUpgradeState() == UpgradeState.Upgrading) revert();\r\n\r\n      upgradeAgent = UpgradeAgent(agent);\r\n\r\n      // Bad interface\r\n      if(!upgradeAgent.isUpgradeAgent()) revert();\r\n      // Make sure that token supplies match in source and target\r\n      if (upgradeAgent.originalSupply() != totalSupply) revert();\r\n\r\n      UpgradeAgentSet(upgradeAgent);\r\n  }\r\n\r\n  /**\r\n   * Get the state of the token upgrade.\r\n   */\r\n  function getUpgradeState() public constant returns(UpgradeState) {\r\n    if(!canUpgrade()) return UpgradeState.NotAllowed;\r\n    else if(address(upgradeAgent) == 0x00) return UpgradeState.WaitingForAgent;\r\n    else if(totalUpgraded == 0) return UpgradeState.ReadyToUpgrade;\r\n    else return UpgradeState.Upgrading;\r\n  }\r\n\r\n  /**\r\n   * Change the upgrade master.\r\n   *\r\n   * This allows us to set a new owner for the upgrade mechanism.\r\n   */\r\n  function setUpgradeMaster(address master) public {\r\n      if (master == 0x0) revert();\r\n      if (msg.sender != upgradeMaster) revert();\r\n      upgradeMaster = master;\r\n  }\r\n\r\n  /**\r\n   * Child contract can enable to provide the condition when the upgrade can begun.\r\n   */\r\n  function canUpgrade() public constant returns(bool) {\r\n     return true;\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract MTRCToken is BurnableToken, UpgradeableToken {\r\n\r\n  string public name;\r\n  string public symbol;\r\n  uint public decimals;\r\n  address public owner;\r\n\r\n  bool public mintingFinished = false;\r\n\r\n  mapping(address => uint) public previligedBalances;\r\n\r\n  /** List of agents that are allowed to create new tokens */\r\n  mapping(address => bool) public mintAgents;\r\n  event MintingAgentChanged(address addr, bool state);\r\n\r\n  modifier onlyOwner() {\r\n    if(msg.sender != owner) revert();\r\n    _;\r\n  }\r\n\r\n  modifier onlyMintAgent() {\r\n    // Only crowdsale contracts are allowed to mint new tokens\r\n    if(!mintAgents[msg.sender]) revert();\r\n    _;\r\n  }\r\n\r\n  /** Make sure we are not done yet. */\r\n  modifier canMint() {\r\n    if(mintingFinished) revert();\r\n    _;\r\n  }\r\n\r\n  modifier onlyNotSame(address _from, address _to) {\r\n    if(_from == _to) revert();\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n  function MTRCToken(address _owner, string _name, string _symbol, uint _totalSupply, uint _decimals) public UpgradeableToken(_owner) {\r\n    name = _name;\r\n    symbol = _symbol;\r\n    decimals = _decimals;\r\n    totalSupply = _totalSupply * 10 ** uint(decimals);\r\n\r\n    // Allocate initial balance to the owner\r\n    balances[_owner] = totalSupply;\r\n\r\n    // save the owner\r\n    owner = _owner;\r\n  }\r\n\r\n  function mintingFinish() public onlyOwner {\r\n    mintingFinished = true;\r\n  }\r\n\r\n  // privileged transfer\r\n  function transferPrivileged(address _to, uint _value) public onlyOwner returns (bool success) {\r\n    balances[msg.sender] = safeSub(balances[msg.sender], _value);\r\n    balances[_to] = safeAdd(balances[_to], _value);\r\n    previligedBalances[_to] = safeAdd(previligedBalances[_to], _value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  // get priveleged balance\r\n  function getPrivilegedBalance(address _owner) public constant returns (uint balance) {\r\n    return previligedBalances[_owner];\r\n  }\r\n\r\n  // admin only can transfer from the privileged accounts\r\n  function transferFromPrivileged(address _from, address _to, uint _value) public onlyOwner onlyNotSame(_from, _to) returns (bool success) {\r\n    uint availablePrevilegedBalance = previligedBalances[_from];\r\n\r\n    balances[_from] = safeSub(balances[_from], _value);\r\n    balances[_to] = safeAdd(balances[_to], _value);\r\n    previligedBalances[_from] = safeSub(availablePrevilegedBalance, _value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Create new tokens and allocate them to an address..\r\n   *\r\n   * Only callably by a crowdsale contract (mint agent).\r\n   */\r\n  function mint(address receiver, uint amount) onlyMintAgent canMint public {\r\n    amount *= 10 ** uint(decimals);\r\n    totalSupply = safeAdd(totalSupply, amount);\r\n    balances[receiver] = safeAdd(balances[receiver], amount);\r\n\r\n    // This will make the mint transaction apper in EtherScan.io\r\n    // We can remove this after there is a standardized minting event\r\n    Transfer(0, receiver, amount);\r\n  }\r\n\r\n  /**\r\n   * Owner can allow a crowdsale contract to mint new tokens.\r\n   */\r\n  function setMintAgent(address addr, bool state) onlyOwner canMint public {\r\n    mintAgents[addr] = state;\r\n    MintingAgentChanged(addr, state);\r\n  }\r\n\r\n}", "OptimizationUsed": "1", "ContractName": "MTRCToken", "ByteCode": "0x6060604052600436106101875763ffffffff60e060020a60003504166305d2035b811461018c57806306fdde03146101b3578063095ea7b31461023d57806318160ddd1461025f5780631a017f3f1461028457806323b872dd146102a6578063313ce567146102ce5780633ba8c9a7146102e157806340c10f19146102f657806342966c681461031857806342c1867b1461032e578063432146751461034d57806345977d03146103715780635d3171d9146103875780635de4ccb0146103af578063600440cb146103de57806370a08231146103f15780638444b391146104105780638c133a77146104475780638da5cb5b1461046657806395d89b41146104795780639738968c1461048c578063a9059cbb1461049f578063ab7e9dca146104c1578063ac3cb72c146104e0578063be45fd6214610502578063c752ff6214610567578063d7e7088a1461057a578063dd62ed3e14610599578063e2301d02146105be578063f2fde38b146105e0578063fccc2813146105ff578063ffeb7d7514610612575b600080fd5b341561019757600080fd5b61019f610631565b604051901515815260200160405180910390f35b34156101be57600080fd5b6101c6610641565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156102025780820151838201526020016101ea565b50505050905090810190601f16801561022f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561024857600080fd5b61019f600160a060020a03600435166024356106df565b341561026a57600080fd5b610272610787565b60405190815260200160405180910390f35b341561028f57600080fd5b61019f600160a060020a036004351660243561078d565b34156102b157600080fd5b61019f600160a060020a036004358116906024351660443561087b565b34156102d957600080fd5b61027261096a565b34156102ec57600080fd5b6102f4610970565b005b341561030157600080fd5b6102f4600160a060020a03600435166024356109b1565b341561032357600080fd5b6102f4600435610a6e565b341561033957600080fd5b61019f600160a060020a0360043516610b04565b341561035857600080fd5b6102f4600160a060020a03600435166024351515610b19565b341561037c57600080fd5b6102f4600435610bbc565b341561039257600080fd5b61019f600160a060020a0360043581169060243516604435610d13565b34156103ba57600080fd5b6103c2610e29565b604051600160a060020a03909116815260200160405180910390f35b34156103e957600080fd5b6103c2610e38565b34156103fc57600080fd5b610272600160a060020a0360043516610e47565b341561041b57600080fd5b610423610e62565b6040518082600481111561043357fe5b60ff16815260200191505060405180910390f35b341561045257600080fd5b610272600160a060020a0360043516610eac565b341561047157600080fd5b6103c2610ebe565b341561048457600080fd5b6101c6610ecd565b341561049757600080fd5b61019f610f38565b34156104aa57600080fd5b61019f600160a060020a0360043516602435610f3d565b34156104cc57600080fd5b610272600160a060020a0360043516610f6a565b34156104eb57600080fd5b61019f600160a060020a0360043516602435610f85565b341561050d57600080fd5b61019f60048035600160a060020a03169060248035919060649060443590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061103795505050505050565b341561057257600080fd5b610272611275565b341561058557600080fd5b6102f4600160a060020a036004351661127b565b34156105a457600080fd5b610272600160a060020a0360043581169060243516611432565b34156105c957600080fd5b61019f600160a060020a036004351660243561145d565b34156105eb57600080fd5b6102f4600160a060020a036004351661153d565b341561060a57600080fd5b6103c2611593565b341561061d57600080fd5b6102f4600160a060020a0360043516611598565b60095460a060020a900460ff1681565b60068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106d75780601f106106ac576101008083540402835291602001916106d7565b820191906000526020600020905b8154815290600101906020018083116106ba57829003601f168201915b505050505081565b600081158015906107145750600160a060020a0333811660009081526002602090815260408083209387168352929052205415155b1561071e57600080fd5b600160a060020a03338116600081815260026020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60005481565b60095460009033600160a060020a039081169116146107ab57600080fd5b600160a060020a0333166000908152600160205260409020546107ce90836115f7565b600160a060020a0333811660009081526001602052604080822093909355908516815220546107fd908361160b565b600160a060020a038416600090815260016020908152604080832093909355600a9052205461082c908361160b565b600160a060020a038085166000818152600a602052604090819020939093559133909116906000805160206116568339815191529085905190815260200160405180910390a350600192915050565b600160a060020a0380841660009081526002602090815260408083203385168452825280832054938616835260019091528120549091906108bc908461160b565b600160a060020a0380861660009081526001602052604080822093909355908716815220546108eb90846115f7565b600160a060020a03861660009081526001602052604090205561090e81846115f7565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616916000805160206116568339815191529086905190815260200160405180910390a3506001949350505050565b60085481565b60095433600160a060020a0390811691161461098b57600080fd5b6009805474ff0000000000000000000000000000000000000000191660a060020a179055565b600160a060020a0333166000908152600b602052604090205460ff1615156109d857600080fd5b60095460a060020a900460ff16156109ef57600080fd5b600854600a0a81029050610a056000548261160b565b6000908155600160a060020a038316815260016020526040902054610a2a908261160b565b600160a060020a0383166000818152600160205260408082209390935590916000805160206116568339815191529084905190815260200160405180910390a35050565b33600160a060020a038116600090815260016020526040902054610a9290836115f7565b600160a060020a03821660009081526001602052604081209190915554610ab990836115f7565b6000557f696de425f79f4a40bc6d2122ca50507f0efbeabbff86a84871b7196ab8ea8df78183604051600160a060020a03909216825260208201526040908101905180910390a15050565b600b6020526000908152604090205460ff1681565b60095433600160a060020a03908116911614610b3457600080fd5b60095460a060020a900460ff1615610b4b57600080fd5b600160a060020a0382166000908152600b602052604090819020805460ff19168315151790557f4b0adf6c802794c7dde28a08a4e07131abcff3bf9603cd71f14f90bec7865efa908390839051600160a060020a039092168252151560208201526040908101905180910390a15050565b6000610bc6610e62565b90506003816004811115610bd657fe5b1480610bed57506004816004811115610beb57fe5b145b1515610bf857600080fd5b811515610c0457600080fd5b600160a060020a033316600090815260016020526040902054610c2790836115f7565b600160a060020a03331660009081526001602052604081209190915554610c4e90836115f7565b600055600554610c5e908361160b565b600555600454600160a060020a031663753e88e5338460405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b1515610cb757600080fd5b6102c65a03f11515610cc857600080fd5b5050600454600160a060020a03908116915033167f7e5c344a8141a805725cb476f76c6953b842222b967edd1f78ddb6e8b3f397ac8460405190815260200160405180910390a35050565b600954600090819033600160a060020a03908116911614610d3357600080fd5b848480600160a060020a031682600160a060020a03161415610d5457600080fd5b600160a060020a0387166000908152600a6020908152604080832054600190925290912054909350610d8690866115f7565b600160a060020a038089166000908152600160205260408082209390935590881681522054610db5908661160b565b600160a060020a038716600090815260016020526040902055610dd883866115f7565b600160a060020a038089166000818152600a60205260409081902093909355908816916000805160206116568339815191529088905190815260200160405180910390a35060019695505050505050565b600454600160a060020a031681565b600354600160a060020a031681565b600160a060020a031660009081526001602052604090205490565b6000610e6c610f38565b1515610e7a57506001610ea9565b600454600160a060020a03161515610e9457506002610ea9565b6005541515610ea557506003610ea9565b5060045b90565b600a6020526000908152604090205481565b600954600160a060020a031681565b60078054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106d75780601f106106ac576101008083540402835291602001916106d7565b600190565b6000610f47611643565b604036604414610f5657600080fd5b610f61858584611037565b95945050505050565b600160a060020a03166000908152600a602052604090205490565b600080604036604414610f9757600080fd5b600160a060020a033381166000908152600260209081526040808320938916835292905220549150610fc9828561160b565b600160a060020a033381166000818152600260209081526040808320948b168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a3506001949350505050565b600160a060020a03331660009081526001602052604081205461105a90846115f7565b600160a060020a033381166000908152600160205260408082209390935590861681522054611089908461160b565b600160a060020a038086166000818152600160205260409081902093909355859290913316907fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c169086905160208082528190810183818151815260200191508051906020019080838360005b8381101561110d5780820151838201526020016110f5565b50505050905090810190601f16801561113a5780820380516001836020036101000a031916815260200191505b509250505060405180910390a483600160a060020a031633600160a060020a03166000805160206116568339815191528560405190815260200160405180910390a36111858461162f565b1561126b5783600160a060020a031663c0ee0b8a3385856040518463ffffffff1660e060020a0281526004018084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156112095780820151838201526020016111f1565b50505050905090810190601f1680156112365780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b151561125657600080fd5b6102c65a03f1151561126757600080fd5b5050505b5060019392505050565b60055481565b611283610f38565b151561128e57600080fd5b600160a060020a03811615156112a357600080fd5b60035433600160a060020a039081169116146112be57600080fd5b60046112c8610e62565b60048111156112d357fe5b14156112de57600080fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038381169190911791829055166361d3d7a66000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561134957600080fd5b6102c65a03f1151561135a57600080fd5b50505060405180519050151561136f57600080fd5b600080546004549091600160a060020a0390911690634b2ba0dd90604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156113bf57600080fd5b6102c65a03f115156113d057600080fd5b505050604051805190501415156113e657600080fd5b6004547f7845d5aa74cc410e35571258d954f23b82276e160fe8c188fa80566580f279cc90600160a060020a0316604051600160a060020a03909116815260200160405180910390a150565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60008060403660441461146f57600080fd5b600160a060020a033381166000908152600260209081526040808320938916835292905220549150818411156114cc57600160a060020a0333811660009081526002602090815260408083209389168352929052908120556114d6565b610fc982856115f7565b600160a060020a033381166000818152600260209081526040808320948a168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a3506001949350505050565b60095433600160a060020a0390811691161461155857600080fd5b600160a060020a03811615611590576009805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b50565b600081565b600160a060020a03811615156115ad57600080fd5b60035433600160a060020a039081169116146115c857600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600061160583831115611637565b50900390565b60008282016116288482108015906116235750838210155b611637565b9392505050565b6000903b1190565b80151561159057600080fd5b602060405190810160405260008152905600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a7230582003b77cbf8c200fad42a33fd043780a625096f62849b46442f9cf1fb29cb402d90029"}