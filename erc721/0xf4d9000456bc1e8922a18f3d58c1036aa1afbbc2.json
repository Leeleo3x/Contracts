{"Runs": "200", "SwarmSource": "bzzr://c36376474c25d2a528b3d35fd3b36b7f52dc540b626917d529edc9475649c082", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"addCourse\",\"outputs\":[{\"name\":\"courseID\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"IDNumber\",\"type\":\"string\"}],\"name\":\"getMyCertIDs\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_certIDs\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Courses\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_course\",\"type\":\"uint256\"},{\"name\":\"_date\",\"type\":\"uint256\"},{\"name\":\"_userCode\",\"type\":\"bytes32\"}],\"name\":\"create\",\"outputs\":[{\"name\":\"certificateID\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"certificateNumber\",\"type\":\"uint256\"}],\"name\":\"getCertInfo\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_courseName\",\"type\":\"string\"},{\"name\":\"_issueDate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"c_id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"c_name\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"c_course\",\"type\":\"string\"}],\"name\":\"Creation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.24+commit.e67f0147", "ConstructorArguments": "", "SourceCode": "pragma solidity ^0.4.24;\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary Address {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   * as the code is not actually created until after the constructor finishes.\r\n   * @param account address of the account to check\r\n   * @return whether the target address is a contract\r\n   */\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        // XXX Currently there is no better way to check if there is a contract in an address\r\n        // than to check the size of the code at that address.\r\n        // See https://ethereum.stackexchange.com/a/14016/36603\r\n        // for more details about how this works.\r\n        // TODO Check this again before the Serenity release, because all addresses will be\r\n        // contracts then.\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title IERC165\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n */\r\ninterface IERC165 {\r\n\r\n  /**\r\n   * @notice Query if a contract implements an interface\r\n   * @param interfaceId The interface identifier, as specified in ERC-165\r\n   * @dev Interface identification is specified in ERC-165. This function\r\n   * uses less than 30,000 gas.\r\n   */\r\n  function supportsInterface(bytes4 interfaceId)\r\n    external\r\n    view\r\n    returns (bool);\r\n}\r\n\r\n/**\r\n * @title ERC165\r\n * @author Matt Condon (@shrugs)\r\n * @dev Implements ERC165 using a lookup table.\r\n */\r\ncontract ERC165 is IERC165 {\r\n\r\n    bytes4 private constant _InterfaceId_ERC165 = 0x80ac58cd;\r\n  /**\r\n   * 0x01ffc9a7 ===\r\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\r\n   */\r\n\r\n  /**\r\n   * @dev a mapping of interface id to whether or not it's supported\r\n   */\r\n    mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n  /**\r\n   * @dev A contract implementing SupportsInterfaceWithLookup\r\n   * implement ERC165 itself\r\n   */\r\n    constructor() public\r\n    {\r\n        _registerInterface(_InterfaceId_ERC165);\r\n    }\r\n\r\n  /**\r\n   * @dev implement supportsInterface(bytes4) using a lookup table\r\n   */\r\n    function supportsInterface(bytes4 interfaceId) external view\r\n    returns (bool)\r\n    {\r\n        return _supportedInterfaces[interfaceId];\r\n    }\r\n\r\n  /**\r\n   * @dev internal method for registering an interface\r\n   */\r\n    function _registerInterface(bytes4 interfaceId) internal\r\n    {\r\n        require(interfaceId != 0xffffffff);\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ncontract IERC721Receiver {\r\n  /**\r\n   * @notice Handle the receipt of an NFT\r\n   * @dev The ERC721 smart contract calls this function on the recipient\r\n   * after a `safeTransfer`. This function MUST return the function selector,\r\n   * otherwise the caller will revert the transaction. The selector to be\r\n   * returned can be obtained as `this.onERC721Received.selector`. This\r\n   * function MAY throw to revert and reject the transfer.\r\n   * Note: the ERC721 contract address is always the message sender.\r\n   * @param operator The address which called `safeTransferFrom` function\r\n   * @param from The address which previously owned the token\r\n   * @param tokenId The NFT identifier which is being transferred\r\n   * @param data Additional data with no specified format\r\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n   */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes data\r\n    )\r\n    public\r\n        returns(bytes4);\r\n}\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic interface\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract IERC721 is IERC165 {\r\n\r\n    event Transfer(\r\n        address indexed _from,\r\n        address indexed _to,\r\n        uint256 indexed _tokenId\r\n    );\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _approved,\r\n        uint256 indexed _tokenId\r\n    );\r\n    event ApprovalForAll(\r\n        address indexed _owner,\r\n        address indexed _operator,\r\n        bool _approved\r\n    );\r\n\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    function approve(address to, uint256 tokenId) external payable;\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 tokenId) external payable;\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\r\n\r\n    function safeTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId,\r\n        bytes data\r\n        ) external payable;\r\n}\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic implementation\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721 is ERC165, IERC721 {\r\n\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\r\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\r\n\r\n    // Mapping from token ID to owner\r\n    mapping (uint256 => address) private _tokenOwner;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping (uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to number of owned token\r\n    mapping (address => uint256) private _ownedTokensCount;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\r\n\r\n    bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\r\n    /*\r\n    * 0x80ac58cd ===\r\n    *   bytes4(keccak256('balanceOf(address)')) ^\r\n    *   bytes4(keccak256('ownerOf(uint256)')) ^\r\n    *   bytes4(keccak256('approve(address,uint256)')) ^\r\n    *   bytes4(keccak256('getApproved(uint256)')) ^\r\n    *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\r\n    *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\r\n    *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n    *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\r\n    *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\r\n    */\r\n\r\n    constructor() public\r\n    {\r\n    // register the supported interfaces to conform to ERC721 via ERC165\r\n        _registerInterface(_InterfaceId_ERC721);\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address\r\n    * @param owner address to query the balance of\r\n    * @return uint256 representing the amount owned by the passed address\r\n    */\r\n    function balanceOf(address owner) external view returns (uint256) {\r\n        require(owner != address(0));\r\n        return _ownedTokensCount[owner];\r\n    }\r\n\r\n  /**\r\n   * @dev Gets the owner of the specified token ID\r\n   * @param tokenId uint256 ID of the token to query the owner of\r\n   * @return owner address currently marked as the owner of the given token ID\r\n   */\r\n    function ownerOf(uint256 tokenId) external view returns (address) {\r\n        _ownerOf(tokenId);\r\n    }\r\n  \r\n    function _ownerOf(uint256 tokenId) internal view returns (address owner) {\r\n        owner = _tokenOwner[tokenId];\r\n        require(owner != address(0));\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n    * @dev Approves another address to transfer the given token ID\r\n    * The zero address indicates there is no approved address.\r\n    * There can only be one approved address per token at a given time.\r\n    * Can only be called by the token owner or an approved operator.\r\n    * @param to address to be approved for the given token ID\r\n    * @param tokenId uint256 ID of the token to be approved\r\n    */\r\n    function approve(address to, uint256 tokenId) external payable {\r\n        address owner = _tokenOwner[tokenId];\r\n        require(to != owner);\r\n        require(msg.sender == owner || _operatorApprovals[owner][msg.sender]);\r\n\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(owner, to, tokenId);\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the approved address for a token ID, or zero if no address set\r\n    * Reverts if the token ID does not exist.\r\n    * @param tokenId uint256 ID of the token to query the approval of\r\n    * @return address currently approved for the given token ID\r\n    */\r\n    function getApproved(uint256 tokenId) external view returns (address) {\r\n        _getApproved(tokenId);\r\n    }\r\n  \r\n    function _getApproved(uint256 tokenId) internal view returns (address) {\r\n        require(_exists(tokenId));\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n    /**\r\n    * @dev Sets or unsets the approval of a given operator\r\n    * An operator is allowed to transfer all tokens of the sender on their behalf\r\n    * @param to operator address to set the approval\r\n    * @param approved representing the status of the approval to be set\r\n    */\r\n    function setApprovalForAll(address to, bool approved) external {\r\n        require(to != msg.sender);\r\n        _operatorApprovals[msg.sender][to] = approved;\r\n        emit ApprovalForAll(msg.sender, to, approved);\r\n    }\r\n\r\n    /**\r\n    * @dev Tells whether an operator is approved by a given owner\r\n    * @param owner owner address which you want to query the approval of\r\n    * @param operator operator address which you want to query the approval of\r\n    * @return bool whether the given operator is approved by the given owner\r\n    */\r\n    function isApprovedForAll(\r\n        address owner,\r\n        address operator\r\n    )\r\n        external\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n    * @dev Transfers the ownership of a given token ID to another address\r\n    * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\r\n    * Requires the msg sender to be the owner, approved, or operator\r\n    * @param from current owner of the token\r\n    * @param to address to receive the ownership of the given token ID\r\n    * @param tokenId uint256 ID of the token to be transferred\r\n    */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    )\r\n        external payable\r\n    {\r\n        _transferFrom(from, to, tokenId);\r\n    }\r\n    \r\n    function _transferFrom(\r\n        address from, \r\n        address to,\r\n        uint256 tokenId) internal {\r\n        require(_isApprovedOrOwner(msg.sender, tokenId));\r\n        require(to != address(0));\r\n        \r\n        _clearApproval(from, tokenId);\r\n        _removeTokenFrom(from, tokenId);\r\n        _addTokenTo(to, tokenId);\r\n        \r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n    * @dev Safely transfers the ownership of a given token ID to another address\r\n    * If the target address is a contract, it must implement `onERC721Received`,\r\n    * which is called upon a safe transfer, and return the magic value\r\n    * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n    * the transfer is reverted.\r\n    *\r\n    * Requires the msg sender to be the owner, approved, or operator\r\n    * @param from current owner of the token\r\n    * @param to address to receive the ownership of the given token ID\r\n    * @param tokenId uint256 ID of the token to be transferred\r\n    */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    )\r\n        external payable\r\n    {\r\n        // solium-disable-next-line arg-overflow\r\n        _safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n    * @dev Safely transfers the ownership of a given token ID to another address\r\n    * If the target address is a contract, it must implement `onERC721Received`,\r\n    * which is called upon a safe transfer, and return the magic value\r\n    * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n    * the transfer is reverted.\r\n    * Requires the msg sender to be the owner, approved, or operator\r\n    * @param from current owner of the token\r\n    * @param to address to receive the ownership of the given token ID\r\n    * @param tokenId uint256 ID of the token to be transferred\r\n    * @param _data bytes data to send along with a safe transfer check\r\n    */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes _data\r\n    )\r\n        external payable\r\n    {\r\n        _safeTransferFrom(from, to, tokenId, _data);\r\n    }\r\n    \r\n    function _safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes _data)\r\n        internal\r\n    {\r\n        _transferFrom(from, to, tokenId);\r\n        // solium-disable-next-line arg-overflow\r\n        require(_checkAndCallSafeTransfer(from, to, tokenId, _data));\r\n    }\r\n\r\n    /**\r\n    * @dev Returns whether the specified token exists\r\n    * @param tokenId uint256 ID of the token to query the existence of\r\n    * @return whether the token exists\r\n    */\r\n    function _exists(uint256 tokenId) internal view returns (bool) {\r\n        address owner = _tokenOwner[tokenId];\r\n        return owner != address(0);\r\n    }\r\n\r\n    /**\r\n    * @dev Returns whether the given spender can transfer a given token ID\r\n    * @param spender address of the spender to query\r\n    * @param tokenId uint256 ID of the token to be transferred\r\n    * @return bool whether the msg.sender is approved for the given token ID,\r\n    *  is an operator of the owner, or is the owner of the token\r\n    */\r\n    function _isApprovedOrOwner(\r\n        address spender,\r\n        uint256 tokenId\r\n    )\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        address owner = _tokenOwner[tokenId];\r\n        // Disable solium check because of\r\n        // https://github.com/duaraghav8/Solium/issues/175\r\n        // solium-disable-next-line operator-whitespace\r\n        return (\r\n        spender == owner ||\r\n        _getApproved(tokenId) == spender ||\r\n        _operatorApprovals[owner][spender]\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to mint a new token\r\n    * Reverts if the given token ID already exists\r\n    * @param to The address that will own the minted token\r\n    * @param tokenId uint256 ID of the token to be minted by the msg.sender\r\n    */\r\n    function _mint(address to, uint256 tokenId) internal {\r\n        require(to != address(0));\r\n        _addTokenTo(to, tokenId);\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to burn a specific token\r\n    * Reverts if the token does not exist\r\n    * @param tokenId uint256 ID of the token being burned by the msg.sender\r\n    */\r\n    function _burn(address owner, uint256 tokenId) internal {\r\n        _clearApproval(owner, tokenId);\r\n        _removeTokenFrom(owner, tokenId);\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to clear current approval of a given token ID\r\n    * Reverts if the given address is not indeed the owner of the token\r\n    * @param owner owner of the token\r\n    * @param tokenId uint256 ID of the token to be transferred\r\n    */\r\n    function _clearApproval(address owner, uint256 tokenId) internal {\r\n        require(_ownerOf(tokenId) == owner);\r\n        if (_tokenApprovals[tokenId] != address(0)) {\r\n            _tokenApprovals[tokenId] = address(0);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to add a token ID to the list of a given address\r\n    * @param to address representing the new owner of the given token ID\r\n    * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n    */\r\n    function _addTokenTo(address to, uint256 tokenId) internal {\r\n        require(_tokenOwner[tokenId] == address(0));\r\n        _tokenOwner[tokenId] = to;\r\n        _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to remove a token ID from the list of a given address\r\n    * @param from address representing the previous owner of the given token ID\r\n    * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n    */\r\n    function _removeTokenFrom(address from, uint256 tokenId) internal {\r\n        require(_ownerOf(tokenId) == from);\r\n        _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\r\n        _tokenOwner[tokenId] = address(0);\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to invoke `onERC721Received` on a target address\r\n    * The call is not executed if the target address is not a contract\r\n    * @param from address representing the previous owner of the given token ID\r\n    * @param to target address that will receive the tokens\r\n    * @param tokenId uint256 ID of the token to be transferred\r\n    * @param _data bytes optional data to send along with the call\r\n    * @return whether the call correctly returned the expected magic value\r\n    */\r\n    function _checkAndCallSafeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes _data\r\n    )\r\n        internal\r\n        returns (bool)\r\n    {\r\n        if (!to.isContract()) {\r\n            return true;\r\n        }\r\n        bytes4 retval = IERC721Receiver(to).onERC721Received(\r\n        msg.sender, from, tokenId, _data);\r\n        return (retval == _ERC721_RECEIVED);\r\n    }\r\n}\r\n\r\ncontract Bloccelerator is ERC721 {\r\n    \r\n    mapping (uint256 => string) public Courses;\r\n    \r\n      // The data structure of the example deed\r\n    struct Certificate {\r\n        string name;\r\n        uint256 courseID;\r\n        uint256 date;\r\n        bytes32 registrationCode;\r\n    }\r\n\r\n  /* Events */\r\n\r\n    // When a certificate is created by an admin.\r\n    event Creation(uint256 indexed c_id, string indexed c_name, string indexed c_course);\r\n    \r\n    // Mapping from participants to certificates\r\n    mapping (uint256 => Certificate) private participants;\r\n    mapping (bytes32 => uint256[]) private studentDetail;\r\n\r\n    // Needed to make all deeds discoverable. The length of this array also serves as our deed ID.\r\n    uint256[] private certificates;\r\n    uint256[] private courseIDs;\r\n    address private owner;\r\n    string public constant name = \"Bloccelerator\";\r\n    string public constant symbol = \"BLOC\";\r\n  \r\n    constructor()\r\n    public\r\n    {\r\n        owner = msg.sender;\r\n    }\r\n  \r\n    modifier onlyContractOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    // The contract owner creates deeds. Newly created deeds are initialised with a name and a beneficiary.\r\n    function create(address _to, string _name, uint256 _course, uint256 _date, bytes32 _userCode) \r\n    public\r\n    onlyContractOwner\r\n    returns (uint256 certificateID)  {\r\n        certificateID = certificates.length;\r\n        certificates.push(certificateID);\r\n        super._mint(_to, certificateID);\r\n        participants[certificateID] = Certificate({\r\n            name: _name,\r\n            courseID: _course,\r\n            date: _date,\r\n            registrationCode: _userCode\r\n        });\r\n        studentDetail[_userCode].push(certificateID);\r\n        \r\n        emit Creation(certificateID, _name, Courses[_course]);\r\n    }\r\n  \r\n    function addCourse(string _name) public onlyContractOwner returns (uint256 courseID) {\r\n        require(verifyCourseExists(_name) != true);\r\n        uint _courseCount = courseIDs.length;\r\n        courseIDs.push(_courseCount);\r\n        Courses[_courseCount] = _name;\r\n        return _courseCount;\r\n    }\r\n  \r\n    function verifyCourseExists(string _name) internal view returns (bool exists) {\r\n        uint numberofCourses = courseIDs.length;\r\n        for (uint i=0; i<numberofCourses; i++) {\r\n            if (keccak256(abi.encodePacked(Courses[i])) == keccak256(abi.encodePacked(_name)))\r\n            {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n  \r\n    function getMyCertIDs(string IDNumber) public view returns (string _name, uint[] _certIDs) {\r\n        bytes32 hashedID = keccak256(abi.encodePacked(IDNumber));\r\n        uint[] storage ownedCerts = studentDetail[hashedID];\r\n        require(verifyOwner(ownedCerts));\r\n        \r\n        _certIDs = studentDetail[hashedID];      \r\n        _name = participants[_certIDs[0]].name;\r\n    }\r\n  \r\n    function getCertInfo(uint256 certificateNumber) public view returns (string _name, string _courseName, uint256 _issueDate) {\r\n        _name = participants[certificateNumber].name;\r\n        _courseName = Courses[participants[certificateNumber].courseID];\r\n        _issueDate = participants[certificateNumber].date;\r\n    }\r\n  \r\n    function verifyOwner(uint[] _certIDs) internal view returns (bool isOwner) {\r\n        uint _numberOfCerts = _certIDs.length;\r\n        bool allCorrect = false;\r\n        for (uint i=0; i<_numberOfCerts; i++) {\r\n            allCorrect = (true && (_ownerOf(_certIDs[i]) == msg.sender));\r\n        }\r\n        return allCorrect;\r\n    }\r\n}", "OptimizationUsed": "1", "ContractName": "Bloccelerator", "ByteCode": "0x6080604052600436106100f05763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301ffc9a781146100f557806306fdde0314610140578063081812fc146101ca578063095ea7b3146101fe57806323b872dd146102175780632e554076146102345780633d72b5a81461029f57806342842e0e146103b157806360c91d41146103ce5780636352211e146103e657806365d6c865146103fe57806370a082311461047257806395d89b4114610493578063a22cb465146104a8578063b88d4fde146104ce578063bf225cb1146104fa578063e985e9c5146105f7575b600080fd5b34801561010157600080fd5b5061012c7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff196004351661061e565b604080519115158252519081900360200190f35b34801561014c57600080fd5b50610155610652565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561018f578181015183820152602001610177565b50505050905090810190601f1680156101bc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101d657600080fd5b506101e2600435610689565b60408051600160a060020a039092168252519081900360200190f35b610215600160a060020a036004351660243561069a565b005b610215600160a060020a0360043581169060243516604435610771565b34801561024057600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261028d9436949293602493928401919081908401838280828437509497506107819650505050505050565b60408051918252519081900360200190f35b3480156102ab57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526102f894369492936024939284019190819084018382808284375094975061080d9650505050505050565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b83811015610339578181015183820152602001610321565b50505050905090810190601f1680156103665780820380516001836020036101000a031916815260200191505b508381038252845181528451602091820191808701910280838360005b8381101561039b578181015183820152602001610383565b5050505090500194505050505060405180910390f35b610215600160a060020a0360043581169060243516604435610a5b565b3480156103da57600080fd5b50610155600435610a77565b3480156103f257600080fd5b506101e2600435610b12565b34801561040a57600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855261028d958335600160a060020a031695369560449491939091019190819084018382808284375094975050843595505050602083013592604001359150610b1d9050565b34801561047e57600080fd5b5061028d600160a060020a0360043516610d0c565b34801561049f57600080fd5b50610155610d3f565b3480156104b457600080fd5b50610215600160a060020a03600435166024351515610d76565b610215600160a060020a0360048035821691602480359091169160443591606435908101910135610dfa565b34801561050657600080fd5b50610512600435610e3d565b604051808060200180602001848152602001838103835286818151815260200191508051906020019080838360005b83811015610559578181015183820152602001610541565b50505050905090810190601f1680156105865780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b838110156105b95781810151838201526020016105a1565b50505050905090810190601f1680156105e65780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b34801561060357600080fd5b5061012c600160a060020a0360043581169060243516610fa1565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191660009081526020819052604090205460ff1690565b60408051808201909152600d81527f426c6f6363656c657261746f7200000000000000000000000000000000000000602082015281565b600061069482610fcf565b50919050565b600081815260016020526040902054600160a060020a039081169083168114156106c357600080fd5b33600160a060020a03821614806106fd5750600160a060020a038116600090815260046020908152604080832033845290915290205460ff165b151561070857600080fd5b600082815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b61077c838383611001565b505050565b600a546000908190600160a060020a0316331461079d57600080fd5b6107a68361108f565b1515600114156107b557600080fd5b5060098054600181019091557f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af81018190556000818152600560209081526040909120845161080692860190611759565b5092915050565b606080600080846040516020018082805190602001908083835b602083106108465780518252601f199092019160209182019101610827565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083106108a95780518252601f19909201916020918201910161088a565b51815160209384036101000a600019018019909216911617905260408051929094018290038220600081815260078352859020805480840285018401909652858452909850965061093595509093508592915083018282801561092b57602002820191906000526020600020905b815481526020019060010190808311610917575b505050505061126e565b151561094057600080fd5b6000828152600760209081526040918290208054835181840281018401909452808452909183018282801561099457602002820191906000526020600020905b815481526020019060010190808311610980575b50505050509250600660008460008151811015156109ae57fe5b60209081029190910181015182528181019290925260409081016000208054825160026001831615610100026000190190921691909104601f810185900485028201850190935282815292909190830182828015610a4d5780601f10610a2257610100808354040283529160200191610a4d565b820191906000526020600020905b815481529060010190602001808311610a3057829003601f168201915b505050505093505050915091565b61077c83838360206040519081016040528060008152506112c4565b60056020908152600091825260409182902080548351601f600260001961010060018616150201909316929092049182018490048402810184019094528084529091830182828015610b0a5780601f10610adf57610100808354040283529160200191610b0a565b820191906000526020600020905b815481529060010190602001808311610aed57829003601f168201915b505050505081565b6000610694826112ec565b600a54600090600160a060020a03163314610b3757600080fd5b50600880546001810182556000919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee38101819055610b788682611315565b60408051608081018252868152602080820187905281830186905260608201859052600084815260068252929092208151805192939192610bbc9284920190611759565b506020828101516001838101919091556040808501516002808601919091556060909501516003909401939093556000868152600783528381208054808401825590825283822001869055888152600590925290829020915182549293909283928592908216156101000260001901909116048015610c725780601f10610c50576101008083540402835291820191610c72565b820191906000526020600020905b815481529060010190602001808311610c5e575b50509150506040518091039020856040518082805190602001908083835b60208310610caf5780518252601f199092019160209182019101610c90565b5181516020939093036101000a60001901801990911692169190911790526040519201829003822093508592507f33ece44d43f606545f1e903b9aa37af71f70d73a9c2be534d37e0cba09bebdf49160009150a495945050505050565b6000600160a060020a0382161515610d2357600080fd5b50600160a060020a031660009081526003602052604090205490565b60408051808201909152600481527f424c4f4300000000000000000000000000000000000000000000000000000000602082015281565b600160a060020a038216331415610d8c57600080fd5b336000818152600460209081526040808320600160a060020a03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b610e3685858585858080601f016020809104026020016040519081016040528093929190818152602001838380828437506112c4945050505050565b5050505050565b600081815260066020908152604080832080548251601f6002600019610100600186161502019093169290920491820185900485028101850190935280835260609485949093929190830182828015610ed75780601f10610eac57610100808354040283529160200191610ed7565b820191906000526020600020905b815481529060010190602001808311610eba57829003601f168201915b50505060008781526006602090815260408083206001908101548452600583529281902080548251600295821615610100026000190190911694909404601f810184900484028501840190925281845295985091949350909150830182828015610f825780601f10610f5757610100808354040283529160200191610f82565b820191906000526020600020905b815481529060010190602001808311610f6557829003601f168201915b5050506000968752505060066020526040909420600201549294915050565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205460ff1690565b6000610fda82611370565b1515610fe557600080fd5b50600090815260026020526040902054600160a060020a031690565b61100b338261138d565b151561101657600080fd5b600160a060020a038216151561102b57600080fd5b6110358382611408565b61103f8382611479565b611049828261150f565b8082600160a060020a031684600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b600954600090815b8181101561126257836040516020018082805190602001908083835b602083106110d25780518252601f1990920191602091820191016110b3565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083106111355780518252601f199092019160209182019101611116565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019166005600083815260200190815260200160002060405160200180828054600181600116156101000203166002900480156111d75780601f106111b55761010080835404028352918201916111d7565b820191906000526020600020905b8154815290600101906020018083116111c3575b50509150506040516020818303038152906040526040518082805190602001908083835b6020831061121a5780518252601f1990920191602091820191016111fb565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916141561125a5760019250611267565b600101611097565b600092505b5050919050565b805160009081805b828110156112bc5733600160a060020a03166112a8868381518110151561129957fe5b906020019060200201516112ec565b600160a060020a0316149150600101611276565b509392505050565b6112cf848484611001565b6112db8484848461159f565b15156112e657600080fd5b50505050565b600081815260016020526040902054600160a060020a031680151561131057600080fd5b919050565b600160a060020a038216151561132a57600080fd5b611334828261150f565b6040518190600160a060020a038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600090815260016020526040902054600160a060020a0316151590565b600081815260016020526040812054600160a060020a039081169084168114806113d0575083600160a060020a03166113c584610fcf565b600160a060020a0316145b806114005750600160a060020a0380821660009081526004602090815260408083209388168352929052205460ff165b949350505050565b81600160a060020a031661141b826112ec565b600160a060020a03161461142e57600080fd5b600081815260026020526040902054600160a060020a031615611475576000818152600260205260409020805473ffffffffffffffffffffffffffffffffffffffff191690555b5050565b81600160a060020a031661148c826112ec565b600160a060020a03161461149f57600080fd5b600160a060020a0382166000908152600360205260409020546114c990600163ffffffff61172116565b600160a060020a03909216600090815260036020908152604080832094909455918152600190915220805473ffffffffffffffffffffffffffffffffffffffff19169055565b600081815260016020526040902054600160a060020a03161561153157600080fd5b6000818152600160208181526040808420805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038816908117909155845260039091529091205461157f91611738565b600160a060020a0390921660009081526003602052604090209190915550565b6000806115b485600160a060020a0316611751565b15156115c35760019150611718565b6040517f150b7a020000000000000000000000000000000000000000000000000000000081523360048201818152600160a060020a03898116602485015260448401889052608060648501908152875160848601528751918a169463150b7a0294938c938b938b93909160a490910190602085019080838360005b8381101561165657818101518382015260200161163e565b50505050905090810190601f1680156116835780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b1580156116a557600080fd5b505af11580156116b9573d6000803e3d6000fd5b505050506040513d60208110156116cf57600080fd5b50517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1981167f150b7a020000000000000000000000000000000000000000000000000000000014925090505b50949350505050565b6000808383111561173157600080fd5b5050900390565b60008282018381101561174a57600080fd5b9392505050565b6000903b1190565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061179a57805160ff19168380011785556117c7565b828001600101855582156117c7579182015b828111156117c75782518255916020019190600101906117ac565b506117d39291506117d7565b5090565b6117f191905b808211156117d357600081556001016117dd565b905600a165627a7a72305820c36376474c25d2a528b3d35fd3b36b7f52dc540b626917d529edc9475649c0820029"}