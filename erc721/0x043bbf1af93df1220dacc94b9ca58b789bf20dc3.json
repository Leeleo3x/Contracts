{"Runs": "200", "SwarmSource": "bzzr://7d601ad39c5cfe01a015dd4e417bfcf45705dcb9c931df9153eaee5dea60acd7", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"acceptBid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_preferredTransport\",\"type\":\"string\"}],\"name\":\"tokenMetadata\",\"outputs\":[{\"name\":\"infoUrl\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawBid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"claimPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenBids\",\"outputs\":[{\"name\":\"hasBid\",\"type\":\"bool\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"bidder\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ganTokenOfferedForSale\",\"outputs\":[{\"name\":\"isForSale\",\"type\":\"bool\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"onlySellTo\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setClaimPrice\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"minSalePriceInWei\",\"type\":\"uint256\"}],\"name\":\"offerGanTokenForSale\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerBank\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"setMaxSupply\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"enterBidForGanToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getSaleData\",\"outputs\":[{\"name\":\"isForSale\",\"type\":\"bool\"},{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"onlySellTo\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getBidData\",\"outputs\":[{\"name\":\"hasBid\",\"type\":\"bool\"},{\"name\":\"bidder\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_noise\",\"type\":\"uint256\"}],\"name\":\"newGanToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenApprovals\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"sendTo\",\"type\":\"address\"},{\"name\":\"minSalePriceInWei\",\"type\":\"uint256\"}],\"name\":\"offerGanTokenForSaleToAddress\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ganTokenNoLongerForSale\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"buyGanToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownershipCounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"erc721Metadata\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllTokenIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"setMetadataAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isOnSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingWithdrawals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"BidForGanTokenOffered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"BidWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"minSalePriceInWei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"onlySellTo\",\"type\":\"address\"}],\"name\":\"GanTokenOfferedForSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"GanTokenNoLongerForSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.21+commit.dfe3193c", "ConstructorArguments": "", "SourceCode": "pragma solidity ^0.4.21;\r\n\r\n/// @title ERC-165 Standard Interface Detection\r\n/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\ninterface ERC165 {\r\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title ERC-721 Non-Fungible Token Standard\r\n/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\ncontract ERC721 is ERC165 {\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    function ownerOf(uint256 _tokenId) external view returns (address);\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) public payable;\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) public payable;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\r\n    function approve(address _approved, uint256 _tokenId) external payable;\r\n    function setApprovalForAll(address _operator, bool _approved) external;\r\n    function getApproved(uint256 _tokenId) external view returns (address);\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\r\n}\r\n\r\n/// @title ERC-721 Non-Fungible Token Standard\r\ninterface ERC721TokenReceiver {\r\n\tfunction onERC721Received(address _from, uint256 _tokenId, bytes data) external returns(bytes4);\r\n}\r\n\r\n/// @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\ninterface ERC721Metadata /* is ERC721 */ {\r\n    function name() external pure returns (string _name);\r\n    function symbol() external pure returns (string _symbol);\r\n    function tokenURI(uint256 _tokenId) external view returns (string);\r\n}\r\n\r\n/// @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\ninterface ERC721Enumerable /* is ERC721 */ {\r\n    function totalSupply() external view returns (uint256);\r\n    function tokenByIndex(uint256 _index) external view returns (uint256);\r\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/// @title A reusable contract to comply with ERC-165\r\n/// @author William Entriken (https://phor.net)\r\ncontract PublishInterfaces is ERC165 {\r\n    /// @dev Every interface that we support\r\n    mapping(bytes4 => bool) internal supportedInterfaces;\r\n\r\n    function PublishInterfaces() internal {\r\n        supportedInterfaces[0x01ffc9a7] = true; // ERC165\r\n    }\r\n\r\n    /// @notice Query if a contract implements an interface\r\n    /// @param interfaceID The interface identifier, as specified in ERC-165\r\n    /// @dev Interface identification is specified in ERC-165. This function\r\n    ///  uses less than 30,000 gas.\r\n    /// @return `true` if the contract implements `interfaceID` and\r\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\r\n    function supportsInterface(bytes4 interfaceID) external view returns (bool) {\r\n        return supportedInterfaces[interfaceID] && (interfaceID != 0xffffffff);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/// @title The external contract that is responsible for generating metadata for GanTokens,\r\n///  it has one function that will return the data as bytes.\r\ncontract Metadata {\r\n\r\n    /// @dev Given a token Id, returns a string with metadata\r\n    function getMetadata(uint256 _tokenId, string) public pure returns (bytes32[4] buffer, uint256 count) {\r\n        if (_tokenId == 1) {\r\n            buffer[0] = \"Hello World! :D\";\r\n            count = 15;\r\n        } else if (_tokenId == 2) {\r\n            buffer[0] = \"I would definitely choose a medi\";\r\n            buffer[1] = \"um length string.\";\r\n            count = 49;\r\n        } else if (_tokenId == 3) {\r\n            buffer[0] = \"Lorem ipsum dolor sit amet, mi e\";\r\n            buffer[1] = \"st accumsan dapibus augue lorem,\";\r\n            buffer[2] = \" tristique vestibulum id, libero\";\r\n            buffer[3] = \" suscipit varius sapien aliquam.\";\r\n            count = 128;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract GanNFT is ERC165, ERC721, ERC721Enumerable, PublishInterfaces, Ownable {\r\n\r\n  function GanNFT() internal {\r\n      supportedInterfaces[0x80ac58cd] = true; // ERC721\r\n      supportedInterfaces[0x5b5e139f] = true; // ERC721Metadata\r\n      supportedInterfaces[0x780e9d63] = true; // ERC721Enumerable\r\n      supportedInterfaces[0x8153916a] = true; // ERC721 + 165 (not needed)\r\n  }\r\n\r\n  bytes4 private constant ERC721_RECEIVED = bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"));\r\n\r\n  // @dev claim price taken for each new GanToken\r\n  // generating a new token will be free in the beinging and later changed\r\n  uint256 public claimPrice = 0;\r\n\r\n  // @dev max supply for token\r\n  uint256 public maxSupply = 300;\r\n\r\n  // The contract that will return tokens metadata\r\n  Metadata public erc721Metadata;\r\n\r\n  /// @dev list of all owned token ids\r\n  uint256[] public tokenIds;\r\n\r\n  /// @dev a mpping for all tokens\r\n  mapping(uint256 => address) public tokenIdToOwner;\r\n\r\n  /// @dev mapping to keep owner balances\r\n  mapping(address => uint256) public ownershipCounts;\r\n\r\n  /// @dev mapping to owners to an array of tokens that they own\r\n  mapping(address => uint256[]) public ownerBank;\r\n\r\n  /// @dev mapping to approved ids\r\n  mapping(uint256 => address) public tokenApprovals;\r\n\r\n  /// @dev The authorized operators for each address\r\n  mapping (address => mapping (address => bool)) internal operatorApprovals;\r\n\r\n  /// @notice A descriptive name for a collection of NFTs in this contract\r\n  function name() external pure returns (string) {\r\n      return \"GanToken\";\r\n  }\r\n\r\n  /// @notice An abbreviated name for NFTs in this contract\r\n  function symbol() external pure returns (string) {\r\n      return \"GT\";\r\n  }\r\n\r\n  /// @dev Set the address of the sibling contract that tracks metadata.\r\n  /// Only the contract creater can call this.\r\n  /// @param _contractAddress The location of the contract with meta data\r\n  function setMetadataAddress(address _contractAddress) public onlyOwner {\r\n      erc721Metadata = Metadata(_contractAddress);\r\n  }\r\n\r\n  modifier canTransfer(uint256 _tokenId, address _from, address _to) {\r\n    address owner = tokenIdToOwner[_tokenId];\r\n    require(tokenApprovals[_tokenId] == _to || owner == _from || operatorApprovals[_to][_to]);\r\n    _;\r\n  }\r\n  /// @notice checks to see if a sender owns a _tokenId\r\n  /// @param _tokenId The identifier for an NFT\r\n  modifier owns(uint256 _tokenId) {\r\n    require(tokenIdToOwner[_tokenId] == msg.sender);\r\n    _;\r\n  }\r\n\r\n  /// @dev This emits any time the ownership of a GanToken changes.\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n  /// @dev This emits when the approved addresses for a GanToken is changed or reaffirmed.\r\n  /// The zero address indicates there is no owner and it get reset on a transfer\r\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n\r\n  /// @dev This emits when an operator is enabled or disabled for an owner.\r\n  ///  The operator can manage all NFTs of the owner.\r\n  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n  /// @notice allow the owner to set the supply max\r\n  function setMaxSupply(uint max) external payable onlyOwner {\r\n    require(max > tokenIds.length);\r\n\r\n    maxSupply = max;\r\n  }\r\n\r\n  /// @notice allow the owner to set a new fee for creating a GanToken\r\n  function setClaimPrice(uint256 price) external payable onlyOwner {\r\n    claimPrice = price;\r\n  }\r\n\r\n  /// @dev Required for ERC-721 compliance.\r\n  function balanceOf(address _owner) external view returns (uint256 balance) {\r\n    balance = ownershipCounts[_owner];\r\n  }\r\n\r\n  /// @notice Gets the onwner of a an NFT\r\n  /// @param _tokenId The identifier for an NFT\r\n  /// @dev Required for ERC-721 compliance.\r\n  function ownerOf(uint256 _tokenId) external view returns (address owner) {\r\n    owner = tokenIdToOwner[_tokenId];\r\n  }\r\n\r\n  /// @notice returns all owners' tokens will return an empty array\r\n  /// if the address has no tokens\r\n  /// @param _owner The address of the owner in question\r\n  function tokensOfOwner(address _owner) external view returns (uint256[]) {\r\n    uint256 tokenCount = ownershipCounts[_owner];\r\n\r\n    if (tokenCount == 0) {\r\n      return new uint256[](0);\r\n    }\r\n\r\n    uint256[] memory result = new uint256[](tokenCount);\r\n\r\n    for (uint256 i = 0; i < tokenCount; i++) {\r\n      result[i] = ownerBank[_owner][i];\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /// @dev creates a list of all the tokenIds\r\n  function getAllTokenIds() external view returns (uint256[]) {\r\n    uint256[] memory result = new uint256[](tokenIds.length);\r\n    for (uint i = 0; i < result.length; i++) {\r\n      result[i] = tokenIds[i];\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /// @notice Create a new GanToken with a id and attaches an owner\r\n  /// @param _noise The id of the token that's being created\r\n  function newGanToken(uint256 _noise) external payable {\r\n    require(msg.sender != address(0));\r\n    require(tokenIdToOwner[_noise] == 0x0);\r\n    require(tokenIds.length < maxSupply);\r\n    require(msg.value >= claimPrice);\r\n\r\n    tokenIds.push(_noise);\r\n    ownerBank[msg.sender].push(_noise);\r\n    tokenIdToOwner[_noise] = msg.sender;\r\n    ownershipCounts[msg.sender]++;\r\n\r\n    emit Transfer(address(0), msg.sender, 0);\r\n  }\r\n\r\n  /// @notice Transfers the ownership of an NFT from one address to another address\r\n  /// @dev Throws unless `msg.sender` is the current owner, an authorized\r\n  ///  operator, or the approved address for this NFT. Throws if `_from` is\r\n  ///  not the current owner. Throws if `_to` is the zero address. Throws if\r\n  ///  `_tokenId` is not a valid NFT. When transfer is complete, this function\r\n  ///  checks if `_to` is a smart contract (code size > 0). If so, it calls\r\n  ///  `onERC721Received` on `_to` and throws if the return value is not\r\n  ///  `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`.\r\n  /// @param _from The current owner of the NFT\r\n  /// @param _to The new owner\r\n  /// @param _tokenId The NFT to transfer\r\n  /// @param data Additional data with no specified format, sent in call to `_to`\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) public payable\r\n  {\r\n      _safeTransferFrom(_from, _to, _tokenId, data);\r\n  }\r\n\r\n  /// @notice Transfers the ownership of an NFT from one address to another address\r\n  /// @dev This works identically to the other function with an extra data parameter,\r\n  ///  except this function just sets data to \"\"\r\n  /// @param _from The current owner of the NFT\r\n  /// @param _to The new owner\r\n  /// @param _tokenId The NFT to transfer\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId) public payable\r\n  {\r\n      _safeTransferFrom(_from, _to, _tokenId, \"\");\r\n  }\r\n\r\n  /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\r\n  ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\r\n  ///  THEY MAY BE PERMANENTLY LOST\r\n  /// @dev Throws unless `msg.sender` is the current owner, an authorized\r\n  ///  operator, or the approved address for this NFT. Throws if `_from` is\r\n  ///  not the current owner. Throws if `_to` is the zero address. Throws if\r\n  ///  `_tokenId` is not a valid NFT.\r\n  /// @param _from The current owner of the NFT\r\n  /// @param _to The new owner\r\n  /// @param _tokenId The NFT to transfer\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) external payable {\r\n    require(_to != 0x0);\r\n    require(_to != address(this));\r\n    require(tokenApprovals[_tokenId] == msg.sender);\r\n    require(tokenIdToOwner[_tokenId] == _from);\r\n\r\n    _transfer(_tokenId, _to);\r\n  }\r\n\r\n  /// @notice Grant another address the right to transfer a specific token via\r\n  ///  transferFrom(). This is the preferred flow for transfering NFTs to contracts.\r\n  /// @dev The zero address indicates there is no approved address.\r\n  /// @dev Throws unless `msg.sender` is the current NFT owner, or an authorized\r\n  ///  operator of the current owner.\r\n  /// @dev Required for ERC-721 compliance.\r\n  /// @param _to The address to be granted transfer approval. Pass address(0) to\r\n  ///  clear all approvals.\r\n  /// @param _tokenId The ID of the Kitty that can be transferred if this call succeeds.\r\n  function approve(address _to, uint256 _tokenId) external owns(_tokenId) payable {\r\n      // Register the approval (replacing any previous approval).\r\n      tokenApprovals[_tokenId] = _to;\r\n\r\n      emit Approval(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  /// @notice Enable or disable approval for a third party (\"operator\") to manage\r\n  ///  all your asset.\r\n  /// @dev Emits the ApprovalForAll event\r\n  /// @param _operator Address to add to the set of authorized operators.\r\n  /// @param _approved True if the operators is approved, false to revoke approval\r\n  function setApprovalForAll(address _operator, bool _approved) external {\r\n      operatorApprovals[msg.sender][_operator] = _approved;\r\n      emit ApprovalForAll(msg.sender, _operator, _approved);\r\n  }\r\n\r\n  /// @notice Get the approved address for a single NFT\r\n  /// @param _tokenId The NFT to find the approved address for\r\n  /// @return The approved address for this NFT, or the zero address if there is none\r\n  function getApproved(uint256 _tokenId) external view returns (address) {\r\n      return tokenApprovals[_tokenId];\r\n  }\r\n\r\n  /// @notice Query if an address is an authorized operator for another address\r\n  /// @param _owner The address that owns the NFTs\r\n  /// @param _operator The address that acts on behalf of the owner\r\n  /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\r\n  function isApprovedForAll(address _owner, address _operator) external view returns (bool) {\r\n      return operatorApprovals[_owner][_operator];\r\n  }\r\n\r\n  /// @notice Count NFTs tracked by this contract\r\n  /// @return A count of valid NFTs tracked by this contract, where each one of\r\n  ///  them has an assigned and queryable owner not equal to the zero address\r\n  /// @dev Required for ERC-721 compliance.\r\n  function totalSupply() external view returns (uint256) {\r\n    return tokenIds.length;\r\n  }\r\n\r\n  /// @notice Enumerate valid NFTs\r\n  /// @param _index A counter less than `totalSupply()`\r\n  /// @return The token identifier for index the `_index`th NFT 0 if it doesn't exist,\r\n  function tokenByIndex(uint256 _index) external view returns (uint256) {\r\n      return tokenIds[_index];\r\n  }\r\n\r\n  /// @notice Enumerate NFTs assigned to an owner\r\n  /// @dev Throws if `_index` >= `balanceOf(_owner)` or if\r\n  ///  `_owner` is the zero address, representing invalid NFTs.\r\n  /// @param _owner An address where we are interested in NFTs owned by them\r\n  /// @param _index A counter less than `balanceOf(_owner)`\r\n  /// @return The token identifier for the `_index`th NFT assigned to `_owner`,\r\n  ///   (sort order not specified)\r\n  function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 _tokenId) {\r\n      require(_owner != address(0));\r\n      require(_index < ownerBank[_owner].length);\r\n      _tokenId = ownerBank[_owner][_index];\r\n  }\r\n\r\n  function _transfer(uint256 _tokenId, address _to) internal {\r\n    require(_to != address(0));\r\n\r\n    address from = tokenIdToOwner[_tokenId];\r\n    uint256 tokenCount = ownershipCounts[from];\r\n    // remove from ownerBank and replace the deleted token id\r\n    for (uint256 i = 0; i < tokenCount; i++) {\r\n      uint256 ownedId = ownerBank[from][i];\r\n      if (_tokenId == ownedId) {\r\n        delete ownerBank[from][i];\r\n        if (i != tokenCount) {\r\n          ownerBank[from][i] = ownerBank[from][tokenCount - 1];\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    ownershipCounts[from]--;\r\n    ownershipCounts[_to]++;\r\n    ownerBank[_to].push(_tokenId);\r\n\r\n    tokenIdToOwner[_tokenId] = _to;\r\n    tokenApprovals[_tokenId] = address(0);\r\n    emit Transfer(from, _to, 1);\r\n  }\r\n\r\n  /// @dev Actually perform the safeTransferFrom\r\n  function _safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data)\r\n      private\r\n      canTransfer(_tokenId, _from, _to)\r\n  {\r\n      address owner = tokenIdToOwner[_tokenId];\r\n\r\n      require(owner == _from);\r\n      require(_to != address(0));\r\n      require(_to != address(this));\r\n      _transfer(_tokenId, _to);\r\n\r\n\r\n      // Do the callback after everything is done to avoid reentrancy attack\r\n      uint256 codeSize;\r\n      assembly { codeSize := extcodesize(_to) }\r\n      if (codeSize == 0) {\r\n          return;\r\n      }\r\n      bytes4 retval = ERC721TokenReceiver(_to).onERC721Received(_from, _tokenId, data);\r\n      require(retval == ERC721_RECEIVED);\r\n  }\r\n\r\n  /// @dev Adapted from memcpy() by @arachnid (Nick Johnson <[email\u00a0protected]>)\r\n  ///  This method is licenced under the Apache License.\r\n  ///  Ref: https://github.com/Arachnid/solidity-stringutils/blob/2f6ca9accb48ae14c66f1437ec50ed19a0616f78/strings.sol\r\n  function _memcpy(uint _dest, uint _src, uint _len) private pure {\r\n      // Copy word-length chunks while possible\r\n      for(; _len >= 32; _len -= 32) {\r\n          assembly {\r\n              mstore(_dest, mload(_src))\r\n          }\r\n          _dest += 32;\r\n          _src += 32;\r\n      }\r\n\r\n      // Copy remaining bytes\r\n      uint256 mask = 256 ** (32 - _len) - 1;\r\n      assembly {\r\n          let srcpart := and(mload(_src), not(mask))\r\n          let destpart := and(mload(_dest), mask)\r\n          mstore(_dest, or(destpart, srcpart))\r\n      }\r\n  }\r\n\r\n  /// @dev Adapted from toString(slice) by @arachnid (Nick Johnson <[email\u00a0protected]>)\r\n  ///  This method is licenced under the Apache License.\r\n  ///  Ref: https://github.com/Arachnid/solidity-stringutils/blob/2f6ca9accb48ae14c66f1437ec50ed19a0616f78/strings.sol\r\n  function _toString(bytes32[4] _rawBytes, uint256 _stringLength) private pure returns (string) {\r\n      string memory outputString = new string(_stringLength);\r\n      uint256 outputPtr;\r\n      uint256 bytesPtr;\r\n\r\n      assembly {\r\n          outputPtr := add(outputString, 32)\r\n          bytesPtr := _rawBytes\r\n      }\r\n\r\n      _memcpy(outputPtr, bytesPtr, _stringLength);\r\n\r\n      return outputString;\r\n  }\r\n\r\n\r\n  /// @notice Returns a URI pointing to a metadata package for this token conforming to\r\n  ///  ERC-721 (https://github.com/ethereum/EIPs/issues/721)\r\n  /// @param _tokenId The ID number of the GanToken whose metadata should be returned.\r\n  function tokenMetadata(uint256 _tokenId, string _preferredTransport) external view returns (string infoUrl) {\r\n      require(erc721Metadata != address(0));\r\n      uint256 count;\r\n      bytes32[4] memory buffer;\r\n\r\n      (buffer, count) = erc721Metadata.getMetadata(_tokenId, _preferredTransport);\r\n\r\n      return _toString(buffer, count);\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract GanTokenMain is GanNFT {\r\n\r\n  struct Offer {\r\n    bool isForSale;\r\n    uint256 tokenId;\r\n    address seller;\r\n    uint value;          // in ether\r\n    address onlySellTo;     // specify to sell only to a specific person\r\n  }\r\n\r\n  struct Bid {\r\n    bool hasBid;\r\n    uint256 tokenId;\r\n    address bidder;\r\n    uint value;\r\n  }\r\n\r\n  /// @dev mapping of balances for address\r\n  mapping(address => uint256) public pendingWithdrawals;\r\n\r\n  /// @dev mapping of tokenId to to an offer\r\n  mapping(uint256 => Offer) public ganTokenOfferedForSale;\r\n\r\n  /// @dev mapping bids to tokenIds\r\n  mapping(uint256 => Bid) public tokenBids;\r\n\r\n  event BidForGanTokenOffered(uint256 tokenId, uint256 value, address sender);\r\n  event BidWithdrawn(uint256 tokenId, uint256 value, address bidder);\r\n  event GanTokenOfferedForSale(uint256 tokenId, uint256 minSalePriceInWei, address onlySellTo);\r\n  event GanTokenNoLongerForSale(uint256 tokenId);\r\n\r\n\r\n  /// @notice Allow a token owner to pull sale\r\n  /// @param tokenId The id of the token that's created\r\n  function ganTokenNoLongerForSale(uint256 tokenId) public payable owns(tokenId) {\r\n    ganTokenOfferedForSale[tokenId] = Offer(false, tokenId, msg.sender, 0, 0x0);\r\n\r\n    emit GanTokenNoLongerForSale(tokenId);\r\n  }\r\n\r\n  /// @notice Put a token up for sale\r\n  /// @param tokenId The id of the token that's created\r\n  /// @param minSalePriceInWei desired price of token\r\n  function offerGanTokenForSale(uint tokenId, uint256 minSalePriceInWei) external payable owns(tokenId) {\r\n    ganTokenOfferedForSale[tokenId] = Offer(true, tokenId, msg.sender, minSalePriceInWei, 0x0);\r\n\r\n    emit GanTokenOfferedForSale(tokenId, minSalePriceInWei, 0x0);\r\n  }\r\n\r\n  /// @notice Create a new GanToken with a id and attaches an owner\r\n  /// @param tokenId The id of the token that's being created\r\n  function offerGanTokenForSaleToAddress(uint tokenId, address sendTo, uint256 minSalePriceInWei) external payable {\r\n    require(tokenIdToOwner[tokenId] == msg.sender);\r\n    ganTokenOfferedForSale[tokenId] = Offer(true, tokenId, msg.sender, minSalePriceInWei, sendTo);\r\n\r\n    emit GanTokenOfferedForSale(tokenId, minSalePriceInWei, sendTo);\r\n  }\r\n\r\n  /// @notice Allows an account to buy a NFT gan token that is up for offer\r\n  /// the token owner must set onlySellTo to the sender\r\n  /// @param id the id of the token\r\n  function buyGanToken(uint256 id) public payable {\r\n    Offer memory offer = ganTokenOfferedForSale[id];\r\n    require(offer.isForSale);\r\n    require(offer.onlySellTo == msg.sender && offer.onlySellTo != 0x0);\r\n    require(msg.value == offer.value);\r\n    require(tokenIdToOwner[id] == offer.seller);\r\n\r\n    safeTransferFrom(offer.seller, offer.onlySellTo, id);\r\n\r\n    ganTokenOfferedForSale[id] = Offer(false, id, offer.seller, 0, 0x0);\r\n\r\n    pendingWithdrawals[offer.seller] += msg.value;\r\n  }\r\n\r\n  /// @notice Allows an account to enter a higher bid on a toekn\r\n  /// @param tokenId the id of the token\r\n  function enterBidForGanToken(uint256 tokenId) external payable {\r\n    Bid memory existing = tokenBids[tokenId];\r\n    require(tokenIdToOwner[tokenId] != msg.sender);\r\n    require(tokenIdToOwner[tokenId] != 0x0);\r\n    require(msg.value > existing.value);\r\n    if (existing.value > 0) {\r\n      // Refund the failing bid\r\n      pendingWithdrawals[existing.bidder] += existing.value;\r\n    }\r\n\r\n    tokenBids[tokenId] = Bid(true, tokenId, msg.sender, msg.value);\r\n    emit BidForGanTokenOffered(tokenId, msg.value, msg.sender);\r\n  }\r\n\r\n  /// @notice Allows the owner of a token to accept an outstanding bid for that token\r\n  /// @param tokenId The id of the token that's being created\r\n  /// @param price The desired price of token in wei\r\n  function acceptBid(uint256 tokenId, uint256 price) external payable {\r\n    require(tokenIdToOwner[tokenId] == msg.sender);\r\n    Bid memory bid = tokenBids[tokenId];\r\n    require(bid.value != 0);\r\n    require(bid.value == price);\r\n\r\n    safeTransferFrom(msg.sender, bid.bidder, tokenId);\r\n\r\n    tokenBids[tokenId] = Bid(false, tokenId, address(0), 0);\r\n    pendingWithdrawals[msg.sender] += bid.value;\r\n  }\r\n\r\n  /// @notice Check is a given id is on sale\r\n  /// @param tokenId The id of the token in question\r\n  /// @return a bool whether of not the token is on sale\r\n  function isOnSale(uint256 tokenId) external view returns (bool) {\r\n    return ganTokenOfferedForSale[tokenId].isForSale;\r\n  }\r\n\r\n  /// @notice Gets all the sale data related to a token\r\n  /// @param tokenId The id of the token\r\n  /// @return sale information\r\n  function getSaleData(uint256 tokenId) public view returns (bool isForSale, address seller, uint value, address onlySellTo) {\r\n    Offer memory offer = ganTokenOfferedForSale[tokenId];\r\n    isForSale = offer.isForSale;\r\n    seller = offer.seller;\r\n    value = offer.value;\r\n    onlySellTo = offer.onlySellTo;\r\n  }\r\n\r\n  /// @notice Gets all the bid data related to a token\r\n  /// @param tokenId The id of the token\r\n  /// @return bid information\r\n  function getBidData(uint256 tokenId) view public returns (bool hasBid, address bidder, uint value) {\r\n    Bid memory bid = tokenBids[tokenId];\r\n    hasBid = bid.hasBid;\r\n    bidder = bid.bidder;\r\n    value = bid.value;\r\n  }\r\n\r\n  /// @notice Allows a bidder to withdraw their bid\r\n  /// @param tokenId The id of the token\r\n  function withdrawBid(uint256 tokenId) external payable {\r\n      Bid memory bid = tokenBids[tokenId];\r\n      require(tokenIdToOwner[tokenId] != msg.sender);\r\n      require(tokenIdToOwner[tokenId] != 0x0);\r\n      require(bid.bidder == msg.sender);\r\n\r\n      emit BidWithdrawn(tokenId, bid.value, msg.sender);\r\n      uint amount = bid.value;\r\n      tokenBids[tokenId] = Bid(false, tokenId, 0x0, 0);\r\n      // Refund the bid money\r\n      msg.sender.transfer(amount);\r\n  }\r\n\r\n  /// @notice Allows a sender to withdraw any amount in the contrat\r\n  function withdraw() external {\r\n    uint256 amount = pendingWithdrawals[msg.sender];\r\n    // Remember to zero the pending refund before\r\n    // sending to prevent re-entrancy attacks\r\n    pendingWithdrawals[msg.sender] = 0;\r\n    msg.sender.transfer(amount);\r\n  }\r\n\r\n}", "OptimizationUsed": "0", "ContractName": "GanTokenMain", "ByteCode": "0x606060405260043610610230576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806301ffc9a71461023557806302e9d5e41461028f5780630560ff44146102b057806306fdde0314610360578063081812fc146103ee578063095ea7b3146104515780630eaaf4c81461048857806315d655c9146104a057806318160ddd146104c957806323b872dd146104f25780632d47f0ce146105485780632f745c59146105c457806330c4168c1461061a5780633ccfd60b146106c957806342842e0e146106de5780634f6ccce71461073457806351f468c01461076b5780636026c151146107835780636352211e146107a45780636d119f4d146108075780636e9e48ef1461085d5780636f8b44b0146108c057806370a08231146108d857806379c5ba97146109255780638462151c1461093d57806386630b7b146109cb5780638da5cb5b14610a7357806395d89b4114610ac8578063a22cb46514610b56578063a92c300a14610b9a578063ac6ee85214610c0f578063acdeb5b914610c27578063af8ec44c14610c8a578063b176661714610cca578063b7682a8114610ce2578063b88d4fde14610cfa578063b9de5eb414610d93578063bc4006f514610de0578063bdbed72214610e35578063d58778d614610e9f578063d5abeb0114610ed6578063e17b25af14610eff578063e985e9c514610f38578063f0f2805f14610fa8578063f2fde38b14610fe3578063f3f437031461101c575b600080fd5b341561024057600080fd5b61027560048080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916906020019091905050611069565b604051808215151515815260200191505060405180910390f35b6102ae600480803590602001909190803590602001909190505061111e565b005b34156102bb57600080fd5b6102e560048080359060200190919080359060200190820180359060200191909192905050611392565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561032557808201518184015260208101905061030a565b50505050905090810190601f1680156103525780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561036b57600080fd5b6103736114f1565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103b3578082015181840152602081019050610398565b50505050905090810190601f1680156103e05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103f957600080fd5b61040f6004808035906020019091905050611534565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610486600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611571565b005b61049e600480803590602001909190505061169b565b005b34156104ab57600080fd5b6104b36119e1565b6040518082815260200191505060405180910390f35b34156104d457600080fd5b6104dc6119e7565b6040518082815260200191505060405180910390f35b610546600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506119f4565b005b341561055357600080fd5b6105696004808035906020019091905050611b3e565b60405180851515151581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200194505050505060405180910390f35b34156105cf57600080fd5b610604600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611b9b565b6040518082815260200191505060405180910390f35b341561062557600080fd5b61063b6004808035906020019091905050611c88565b60405180861515151581526020018581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019550505050505060405180910390f35b34156106d457600080fd5b6106dc611d0b565b005b610732600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611dd7565b005b341561073f57600080fd5b6107556004808035906020019091905050611df8565b6040518082815260200191505060405180910390f35b6107816004808035906020019091905050611e1c565b005b6107a26004808035906020019091908035906020019091905050611e82565b005b34156107af57600080fd5b6107c56004808035906020019091905050612083565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561081257600080fd5b610847600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506120c0565b6040518082815260200191505060405180910390f35b341561086857600080fd5b61087e60048080359060200190919050506120f1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6108d66004808035906020019091905050612124565b005b34156108e357600080fd5b61090f600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061219d565b6040518082815260200191505060405180910390f35b61093b60048080359060200190919050506121e6565b005b341561094857600080fd5b610974600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612513565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156109b757808201518184015260208101905061099c565b505050509050019250505060405180910390f35b34156109d657600080fd5b6109ec6004808035906020019091905050612654565b60405180851515151581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200194505050505060405180910390f35b3415610a7e57600080fd5b610a86612782565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610ad357600080fd5b610adb6127a8565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610b1b578082015181840152602081019050610b00565b50505050905090810190601f168015610b485780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3415610b6157600080fd5b610b98600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803515159060200190919050506127eb565b005b3415610ba557600080fd5b610bbb60048080359060200190919050506128ec565b60405180841515151581526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390f35b610c2560048080359060200190919050506129bc565b005b3415610c3257600080fd5b610c486004808035906020019091905050612c10565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610cc8600480803590602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050612c43565b005b610ce06004808035906020019091905050612e57565b005b610cf86004808035906020019091905050613031565b005b610d91600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506133ca565b005b3415610d9e57600080fd5b610dca600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506133dc565b6040518082815260200191505060405180910390f35b3415610deb57600080fd5b610df36133f4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610e4057600080fd5b610e4861341a565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610e8b578082015181840152602081019050610e70565b505050509050019250505060405180910390f35b3415610eaa57600080fd5b610ec060048080359060200190919050506134ac565b6040518082815260200191505060405180910390f35b3415610ee157600080fd5b610ee96134d0565b6040518082815260200191505060405180910390f35b3415610f0a57600080fd5b610f36600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506134d6565b005b3415610f4357600080fd5b610f8e600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050613576565b604051808215151515815260200191505060405180910390f35b3415610fb357600080fd5b610fc9600480803590602001909190505061360a565b604051808215151515815260200191505060405180910390f35b3415610fee57600080fd5b61101a600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050613637565b005b341561102757600080fd5b611053600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061378f565b6040518082815260200191505060405180910390f35b6000806000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff168015611117575063ffffffff7c010000000000000000000000000000000000000000000000000000000002827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b9050919050565b61112661410c565b3373ffffffffffffffffffffffffffffffffffffffff166006600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561119357600080fd5b600d6000848152602001908152602001600020608060405190810160405290816000820160009054906101000a900460ff16151515158152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820154815250509050600081606001511415151561124d57600080fd5b81816060015114151561125f57600080fd5b61126e33826040015185611dd7565b608060405190810160405280600015158152602001848152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815250600d600085815260200190815260200160002060008201518160000160006101000a81548160ff0219169083151502179055506020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301559050508060600151600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550505050565b61139a61414d565b60006113a4614161565b600073ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561140257600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cb4799f28787876040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180848152602001806020018281038252848482818152602001925080828437820191505094505050505060a060405180830381600087803b15156114b457600080fd5b5af115156114c157600080fd5b5050506040518060800180519060200160405280935081925050506114e681836137a7565b925050509392505050565b6114f961414d565b6040805190810160405280600881526020017f47616e546f6b656e000000000000000000000000000000000000000000000000815250905090565b60006009600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b803373ffffffffffffffffffffffffffffffffffffffff166006600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156115df57600080fd5b826009600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a3505050565b6116a361410c565b6000600d6000848152602001908152602001600020608060405190810160405290816000820160009054906101000a900460ff16151515158152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201548152505091503373ffffffffffffffffffffffffffffffffffffffff166006600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156117b957600080fd5b60006006600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561181257600080fd5b3373ffffffffffffffffffffffffffffffffffffffff16826040015173ffffffffffffffffffffffffffffffffffffffff1614151561185057600080fd5b7fb41c9b05054be45850ccc1da7d90c7b819cff855cfe0d14f16427398b286c9b683836060015133604051808481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a181606001519050608060405190810160405280600015158152602001848152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815250600d600085815260200190815260200160002060008201518160000160006101000a81548160ff0219169083151502179055506020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301559050503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015156119dc57600080fd5b505050565b60025481565b6000600580549050905090565b60008273ffffffffffffffffffffffffffffffffffffffff1614151515611a1a57600080fd5b3073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515611a5557600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166009600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611ac257600080fd5b8273ffffffffffffffffffffffffffffffffffffffff166006600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611b2f57600080fd5b611b3981836137ff565b505050565b600d6020528060005260406000206000915090508060000160009054906101000a900460ff16908060010154908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154905084565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515611bd857600080fd5b600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905082101515611c2857600080fd5b600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481101515611c7457fe5b906000526020600020900154905092915050565b600c6020528060005260406000206000915090508060000160009054906101000a900460ff16908060010154908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905085565b6000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501515611dd457600080fd5b50565b611df38383836020604051908101604052806000815250613c6d565b505050565b6000600582815481101515611e0957fe5b9060005260206000209001549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611e7857600080fd5b8060028190555050565b813373ffffffffffffffffffffffffffffffffffffffff166006600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611ef057600080fd5b60a0604051908101604052806001151581526020018481526020013373ffffffffffffffffffffffffffffffffffffffff168152602001838152602001600073ffffffffffffffffffffffffffffffffffffffff16815250600c600085815260200190815260200160002060008201518160000160006101000a81548160ff0219169083151502179055506020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003015560808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050507f96995469ba2398c3a99251b3feca78470bedcf84474cf663ac3ff6f284629c8783836000604051808481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a1505050565b60006006600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6008602052816000526040600020818154811015156120db57fe5b9060005260206000209001600091509150505481565b60066020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561218057600080fd5b6005805490508111151561219357600080fd5b8060038190555050565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6121ee61410c565b600d6000838152602001908152602001600020608060405190810160405290816000820160009054906101000a900460ff16151515158152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201548152505090503373ffffffffffffffffffffffffffffffffffffffff166006600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561230257600080fd5b60006006600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561235b57600080fd5b80606001513411151561236d57600080fd5b6000816060015111156123d0578060600151600b6000836040015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b6080604051908101604052806001151581526020018381526020013373ffffffffffffffffffffffffffffffffffffffff16815260200134815250600d600084815260200190815260200160002060008201518160000160006101000a81548160ff0219169083151502179055506020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301559050507f5f2b6d44640bd0c5cd3b8bbf12061c1e8429ac59eaa73fc2d9786a8b13e8830a823433604051808481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a15050565b61251b61418c565b600061252561418c565b6000600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054925060008314156125995760006040518059106125815750595b9080825280602002602001820160405250935061264c565b826040518059106125a75750595b90808252806020026020018201604052509150600090505b8281101561264857600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208181548110151561261357fe5b906000526020600020900154828281518110151561262d57fe5b906020019060200201818152505080806001019150506125bf565b8193505b505050919050565b6000806000806126626141a0565b600c600087815260200190815260200160002060a060405190810160405290816000820160009054906101000a900460ff16151515158152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050905080600001519450806040015193508060600151925080608001519150509193509193565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6127b061414d565b6040805190810160405280600281526020017f4754000000000000000000000000000000000000000000000000000000000000815250905090565b80600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051808215151515815260200191505060405180910390a35050565b60008060006128f961410c565b600d6000868152602001908152602001600020608060405190810160405290816000820160009054906101000a900460ff16151515158152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820154815250509050806000015193508060400151925080606001519150509193909250565b600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515156129f857600080fd5b60006006600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515612a5057600080fd5b600354600580549050101515612a6557600080fd5b6002543410151515612a7657600080fd5b60058054806001018281612a8a91906141fe565b916000526020600020900160008390919091505550600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806001018281612af091906141fe565b916000526020600020900160008390919091505550336006600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548092919060010191905055503373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60006040518082815260200191505060405180910390a350565b60096020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b3373ffffffffffffffffffffffffffffffffffffffff166006600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515612cb057600080fd5b60a0604051908101604052806001151581526020018481526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020018373ffffffffffffffffffffffffffffffffffffffff16815250600c600085815260200190815260200160002060008201518160000160006101000a81548160ff0219169083151502179055506020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003015560808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050507f96995469ba2398c3a99251b3feca78470bedcf84474cf663ac3ff6f284629c87838284604051808481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a1505050565b803373ffffffffffffffffffffffffffffffffffffffff166006600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515612ec557600080fd5b60a0604051908101604052806000151581526020018381526020013373ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815250600c600084815260200190815260200160002060008201518160000160006101000a81548160ff0219169083151502179055506020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003015560808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050507f80e8becc579a99c2394cee656d63bf4aef9c039638d459b988d460cf8f3f297b826040518082815260200191505060405180910390a15050565b6130396141a0565b600c600083815260200190815260200160002060a060405190810160405290816000820160009054906101000a900460ff16151515158152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090508060000151151561314557600080fd5b3373ffffffffffffffffffffffffffffffffffffffff16816080015173ffffffffffffffffffffffffffffffffffffffff1614801561319f57506000816080015173ffffffffffffffffffffffffffffffffffffffff1614155b15156131aa57600080fd5b8060600151341415156131bc57600080fd5b806040015173ffffffffffffffffffffffffffffffffffffffff166006600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561322d57600080fd5b6132408160400151826080015184611dd7565b60a060405190810160405280600015158152602001838152602001826040015173ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815250600c600084815260200190815260200160002060008201518160000160006101000a81548160ff0219169083151502179055506020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003015560808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555090505034600b6000836040015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505050565b6133d684848484613c6d565b50505050565b60076020528060005260406000206000915090505481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61342261418c565b61342a61418c565b600060058054905060405180591061343f5750595b90808252806020026020018201604052509150600090505b81518110156134a45760058181548110151561346f57fe5b906000526020600020900154828281518110151561348957fe5b90602001906020020181815250508080600101915050613457565b819250505090565b6005818154811015156134bb57fe5b90600052602060002090016000915090505481565b60035481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561353257600080fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000600c600083815260200190815260200160002060000160009054906101000a900460ff169050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561369357600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156136cf57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600b6020528060005260406000206000915090505481565b6137af61414d565b6137b761414d565b600080846040518059106137c85750595b9080825280601f01601f191660200182016040525092506020830191508590506137f38282876140c1565b82935050505092915050565b600080600080600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415151561384157600080fd5b6006600087815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169350600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549250600091505b82821015613a5557600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110151561391257fe5b906000526020600020900154905080861415613a4857600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110151561397457fe5b9060005260206000209001600090558282141515613a4357600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600184038154811015156139db57fe5b906000526020600020900154600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083815481101515613a3357fe5b9060005260206000209001819055505b613a55565b81806001019250506138be565b600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190600190039190505550600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001019190505550600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806001018281613b4591906141fe565b916000526020600020900160008890919091505550846006600088815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006009600088815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508473ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60016040518082815260200191505060405180910390a3505050505050565b600080600084878760006006600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508173ffffffffffffffffffffffffffffffffffffffff166009600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480613d4557508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b80613dd65750600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b1515613de157600080fd5b600660008a815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1696508a73ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16141515613e5157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff1614151515613e8d57600080fd5b3073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff1614151515613ec857600080fd5b613ed2898b6137ff565b893b95506000861415613ee4576140b4565b8973ffffffffffffffffffffffffffffffffffffffff1663f0b9e5ba8c8b8b6040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015613fa6578082015181840152602081019050613f8b565b50505050905090810190601f168015613fd35780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b1515613ff357600080fd5b5af1151561400057600080fd5b50505060405180519050945060405180807f6f6e455243373231526563656976656428616464726573732c75696e7432353681526020017f2c62797465732900000000000000000000000000000000000000000000000000815250602701905060405180910390207bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161415156140b357600080fd5b5b5050505050505050505050565b60005b6020821015156140e957825184526020840193506020830192506020820391506140c4565b6001826020036101000a0390508019835116818551168181178652505050505050565b60806040519081016040528060001515815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b602060405190810160405280600081525090565b6080604051908101604052806004905b60008019168152602001906001900390816141715790505090565b602060405190810160405280600081525090565b60a06040519081016040528060001515815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b81548183558181151161422557818360005260206000209182019101614224919061422a565b5b505050565b61424c91905b80821115614248576000816000905550600101614230565b5090565b905600a165627a7a723058207d601ad39c5cfe01a015dd4e417bfcf45705dcb9c931df9153eaee5dea60acd70029"}