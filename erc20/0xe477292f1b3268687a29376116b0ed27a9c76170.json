{"Runs": "0", "SwarmSource": "bzzr://5fcb08ea06eac693ba961a68be16cf0717a08e06227f44eca044be73123dd49c", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"stateControl\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"anyoneEndICO\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"abort\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"silencePeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistControl\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endICO\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"registerContest\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawControl\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startICO\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newWeiICOMinimum\",\"type\":\"uint256\"},{\"name\":\"_newWeiICOMaximum\",\"type\":\"uint256\"},{\"name\":\"_silencePeriod\",\"type\":\"uint256\"},{\"name\":\"_newEndBlock\",\"type\":\"uint256\"}],\"name\":\"updateEthICOThresholds\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"payRake\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"requestPayout\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startAcceptingFundsBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_HEROCOIN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resumeICO\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contests\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rakeEventPlaceholderAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"requestRefund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiICOMaximum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_whitelisted\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiICOMinimum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_stateControl\",\"type\":\"address\"},{\"name\":\"_whitelistControl\",\"type\":\"address\"},{\"name\":\"_withdraw\",\"type\":\"address\"},{\"name\":\"_initialHolder\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ContestAnnouncement\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"Whitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"txAmount\",\"type\":\"uint256\"}],\"name\":\"Credited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldState\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"newState\",\"type\":\"uint8\"}],\"name\":\"StateTransition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.11+commit.68ef5810", "ConstructorArguments": "00000000000000000000000010CA9409265c2938167856725945db35da3Ca149000000000000000000000000D076556513165EE138cFB054A84f7B48154c466700000000000000000000000052245Ee29f243ff3A55B720C32DEe77EB1DCe33400000000000000000000000038b50101cCE32A15e906A32bFda0939D01a1776f", "SourceCode": "library SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\ncontract HeroCoin is StandardToken {\r\n\r\n    // data structures\r\n    enum States {\r\n    Initial, // deployment time\r\n    ValuationSet,\r\n    Ico, // whitelist addresses, accept funds, update balances\r\n    Underfunded, // ICO time finished and minimal amount not raised\r\n    Operational, // manage contests\r\n    Paused         // for contract upgrades\r\n    }\r\n\r\n    //should be constant, but is not, to avoid compiler warning\r\n    address public  rakeEventPlaceholderAddress = 0x0000000000000000000000000000000000000000;\r\n\r\n    string public constant name = \"Herocoin\";\r\n\r\n    string public constant symbol = \"PLAY\";\r\n\r\n    uint8 public constant decimals = 18;\r\n\r\n    mapping (address => bool) public whitelist;\r\n\r\n    address public initialHolder;\r\n\r\n    address public stateControl;\r\n\r\n    address public whitelistControl;\r\n\r\n    address public withdrawControl;\r\n\r\n    States public state;\r\n\r\n    uint256 public weiICOMinimum;\r\n\r\n    uint256 public weiICOMaximum;\r\n\r\n    uint256 public silencePeriod;\r\n\r\n    uint256 public startAcceptingFundsBlock;\r\n\r\n    uint256 public endBlock;\r\n\r\n    uint256 public ETH_HEROCOIN; //number of herocoins per ETH\r\n\r\n    mapping (address => uint256) lastRakePoints;\r\n\r\n\r\n    uint256 pointMultiplier = 1e18; //100% = 1*10^18 points\r\n    uint256 totalRakePoints; //total amount of rakes ever paid out as a points value. increases monotonically, but the number range is 2^256, that's enough.\r\n    uint256 unclaimedRakes; //amount of coins unclaimed. acts like a special entry to balances\r\n    uint256 constant percentForSale = 30;\r\n\r\n    mapping (address => bool) public contests; // true if this address holds a contest\r\n\r\n    //this creates the contract and stores the owner. it also passes in 3 addresses to be used later during the lifetime of the contract.\r\n    function HeroCoin(address _stateControl, address _whitelistControl, address _withdraw, address _initialHolder) {\r\n        initialHolder = _initialHolder;\r\n        stateControl = _stateControl;\r\n        whitelistControl = _whitelistControl;\r\n        withdrawControl = _withdraw;\r\n        moveToState(States.Initial);\r\n        weiICOMinimum = 0;\r\n        //to be overridden\r\n        weiICOMaximum = 0;\r\n        endBlock = 0;\r\n        ETH_HEROCOIN = 0;\r\n        totalSupply = 2000000000 * pointMultiplier;\r\n        //sets the value in the superclass.\r\n        balances[initialHolder] = totalSupply;\r\n        //initially, initialHolder has 100%\r\n    }\r\n\r\n    event ContestAnnouncement(address addr);\r\n\r\n    event Whitelisted(address addr);\r\n\r\n    event Credited(address addr, uint balance, uint txAmount);\r\n\r\n    event StateTransition(States oldState, States newState);\r\n\r\n    modifier onlyWhitelist() {\r\n        require(msg.sender == whitelistControl);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == initialHolder);\r\n        _;\r\n    }\r\n\r\n    modifier onlyStateControl() {\r\n        require(msg.sender == stateControl);\r\n        _;\r\n    }\r\n\r\n    modifier onlyWithdraw() {\r\n        require(msg.sender == withdrawControl);\r\n        _;\r\n    }\r\n\r\n    modifier requireState(States _requiredState) {\r\n        require(state == _requiredState);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    BEGIN ICO functions\r\n    */\r\n\r\n    //this is the main funding function, it updates the balances of Herocoins during the ICO.\r\n    //no particular incentive schemes have been implemented here\r\n    //it is only accessible during the \"ICO\" phase.\r\n    function() payable\r\n    requireState(States.Ico)\r\n    {\r\n        require(whitelist[msg.sender] == true);\r\n        require(this.balance <= weiICOMaximum); //note that msg.value is already included in this.balance\r\n        require(block.number < endBlock);\r\n        require(block.number >= startAcceptingFundsBlock);\r\n        uint256 heroCoinIncrease = msg.value * ETH_HEROCOIN;\r\n        balances[initialHolder] -= heroCoinIncrease;\r\n        balances[msg.sender] += heroCoinIncrease;\r\n        Credited(msg.sender, balances[msg.sender], msg.value);\r\n    }\r\n\r\n    function moveToState(States _newState)\r\n    internal\r\n    {\r\n        StateTransition(state, _newState);\r\n        state = _newState;\r\n    }\r\n\r\n    // ICO contract configuration function\r\n    // newEthICOMinimum is the minimum amount of funds to raise\r\n    // newEthICOMaximum is the maximum amount of funds to raise\r\n    // silencePeriod is a number of blocks to wait after starting the ICO. No funds are accepted during the silence period. It can be set to zero.\r\n    // newEndBlock is the absolute block number at which the ICO must stop. It must be set after now + silence period.\r\n    function updateEthICOThresholds(uint256 _newWeiICOMinimum, uint256 _newWeiICOMaximum, uint256 _silencePeriod, uint256 _newEndBlock)\r\n    onlyStateControl\r\n    {\r\n        require(state == States.Initial || state == States.ValuationSet);\r\n        require(_newWeiICOMaximum > _newWeiICOMinimum);\r\n        require(block.number + silencePeriod < _newEndBlock);\r\n        require(block.number < _newEndBlock);\r\n        weiICOMinimum = _newWeiICOMinimum;\r\n        weiICOMaximum = _newWeiICOMaximum;\r\n        silencePeriod = _silencePeriod;\r\n        endBlock = _newEndBlock;\r\n        // initial conversion rate of ETH_HEROCOIN set now, this is used during the Ico phase.\r\n        ETH_HEROCOIN = ((totalSupply * percentForSale) / 100) / weiICOMaximum;\r\n        // check pointMultiplier\r\n        moveToState(States.ValuationSet);\r\n    }\r\n\r\n    function startICO()\r\n    onlyStateControl\r\n    requireState(States.ValuationSet)\r\n    {\r\n        require(block.number < endBlock);\r\n        require(block.number + silencePeriod < endBlock);\r\n        startAcceptingFundsBlock = block.number + silencePeriod;\r\n        moveToState(States.Ico);\r\n    }\r\n\r\n\r\n    function endICO()\r\n    onlyStateControl\r\n    requireState(States.Ico)\r\n    {\r\n        if (this.balance < weiICOMinimum) {\r\n            moveToState(States.Underfunded);\r\n        }\r\n        else {\r\n            burnUnsoldCoins();\r\n            moveToState(States.Operational);\r\n        }\r\n    }\r\n\r\n    function anyoneEndICO()\r\n    requireState(States.Ico)\r\n    {\r\n        require(block.number > endBlock);\r\n        if (this.balance < weiICOMinimum) {\r\n            moveToState(States.Underfunded);\r\n        }\r\n        else {\r\n            burnUnsoldCoins();\r\n            moveToState(States.Operational);\r\n        }\r\n    }\r\n\r\n    function burnUnsoldCoins()\r\n    internal\r\n    {\r\n        uint256 soldcoins = this.balance * ETH_HEROCOIN;\r\n        totalSupply = soldcoins * 100 / percentForSale;\r\n        balances[initialHolder] = totalSupply - soldcoins;\r\n        //slashing the initial supply, so that the ico is selling 30% total\r\n    }\r\n\r\n    function addToWhitelist(address _whitelisted)\r\n    onlyWhitelist\r\n        //    requireState(States.Ico)\r\n    {\r\n        whitelist[_whitelisted] = true;\r\n        Whitelisted(_whitelisted);\r\n    }\r\n\r\n\r\n    //emergency pause for the ICO\r\n    function pause()\r\n    onlyStateControl\r\n    requireState(States.Ico)\r\n    {\r\n        moveToState(States.Paused);\r\n    }\r\n\r\n    //in case we want to completely abort\r\n    function abort()\r\n    onlyStateControl\r\n    requireState(States.Paused)\r\n    {\r\n        moveToState(States.Underfunded);\r\n    }\r\n\r\n    //un-pause\r\n    function resumeICO()\r\n    onlyStateControl\r\n    requireState(States.Paused)\r\n    {\r\n        moveToState(States.Ico);\r\n    }\r\n\r\n    //in case of a failed/aborted ICO every investor can get back their money\r\n    function requestRefund()\r\n    requireState(States.Underfunded)\r\n    {\r\n        require(balances[msg.sender] > 0);\r\n        //there is no need for updateAccount(msg.sender) since the token never became active.\r\n        uint256 payout = balances[msg.sender] / ETH_HEROCOIN;\r\n        //reverse calculate the amount to pay out\r\n        balances[msg.sender] = 0;\r\n        msg.sender.transfer(payout);\r\n    }\r\n\r\n    //after the ico has run its course, the withdraw account can drain funds bit-by-bit as needed.\r\n    function requestPayout(uint _amount)\r\n    onlyWithdraw //very important!\r\n    requireState(States.Operational)\r\n    {\r\n        msg.sender.transfer(_amount);\r\n    }\r\n    /**\r\n    END ICO functions\r\n    */\r\n\r\n    /**\r\n    BEGIN ERC20 functions\r\n    */\r\n    function transfer(address _to, uint256 _value)\r\n    requireState(States.Operational)\r\n    updateAccount(msg.sender) //update senders rake before transfer, so they can access their full balance\r\n    updateAccount(_to) //update receivers rake before transfer as well, to avoid over-attributing rake\r\n    enforceRake(msg.sender, _value)\r\n    returns (bool success) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n    requireState(States.Operational)\r\n    updateAccount(_from) //update senders rake before transfer, so they can access their full balance\r\n    updateAccount(_to) //update receivers rake before transfer as well, to avoid over-attributing rake\r\n    enforceRake(_from, _value)\r\n    returns (bool success) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function balanceOf(address _account)\r\n    constant\r\n    returns (uint256 balance) {\r\n        return balances[_account] + rakesOwing(_account);\r\n    }\r\n\r\n    function payRake(uint256 _value)\r\n    requireState(States.Operational)\r\n    updateAccount(msg.sender)\r\n    returns (bool success) {\r\n        return payRakeInternal(msg.sender, _value);\r\n    }\r\n\r\n\r\n    function\r\n    payRakeInternal(address _sender, uint256 _value)\r\n    internal\r\n    returns (bool success) {\r\n\r\n        if (balances[_sender] <= _value) {\r\n            return false;\r\n        }\r\n        if (_value != 0) {\r\n            Transfer(_sender, rakeEventPlaceholderAddress, _value);\r\n            balances[_sender] -= _value;\r\n            unclaimedRakes += _value;\r\n            //   calc amount of points from total:\r\n            uint256 pointsPaid = _value * pointMultiplier / totalSupply;\r\n            totalRakePoints += pointsPaid;\r\n        }\r\n        return true;\r\n\r\n    }\r\n    /**\r\n    END ERC20 functions\r\n    */\r\n    /**\r\n    BEGIN Rake modifier updateAccount\r\n    */\r\n    modifier updateAccount(address _account) {\r\n        uint256 owing = rakesOwing(_account);\r\n        if (owing != 0) {\r\n            unclaimedRakes -= owing;\r\n            balances[_account] += owing;\r\n            Transfer(rakeEventPlaceholderAddress, _account, owing);\r\n        }\r\n        //also if 0 this needs to be called, since lastRakePoints need the right value\r\n        lastRakePoints[_account] = totalRakePoints;\r\n        _;\r\n    }\r\n\r\n    //todo use safemath.sol\r\n    function rakesOwing(address _account)\r\n    internal\r\n    constant\r\n    returns (uint256) {//returns always > 0 value\r\n        //how much is _account owed, denominated in points from total supply\r\n        uint256 newRakePoints = totalRakePoints - lastRakePoints[_account];\r\n        //always positive\r\n        //weigh by my balance (dimension HC*10^18)\r\n        uint256 basicPoints = balances[_account] * newRakePoints;\r\n        //still positive\r\n        //normalize to dimension HC by moving comma left by 18 places\r\n        return (basicPoints) / pointMultiplier;\r\n    }\r\n    /**\r\n    END Rake modifier updateAccount\r\n    */\r\n\r\n    // contest management functions\r\n\r\n    modifier enforceRake(address _contest, uint256 _value){\r\n        //we calculate 1% of the total value, rounded up. division would round down otherwise.\r\n        //explicit brackets illustrate that the calculation only round down when dividing by 100, to avoid an expression\r\n        // like value * (99/100)\r\n        if (contests[_contest]) {\r\n            uint256 toPay = _value - ((_value * 99) / 100);\r\n            bool paid = payRakeInternal(_contest, toPay);\r\n            require(paid);\r\n        }\r\n        _;\r\n    }\r\n\r\n    // all functions require HeroCoin operational state\r\n\r\n\r\n    // registerContest declares a contest to HeroCoin.\r\n    // It must be called from an address that has HeroCoin.\r\n    // This address is recorded as the contract admin.\r\n    function registerContest()\r\n    {\r\n        contests[msg.sender] = true;\r\n        ContestAnnouncement(msg.sender);\r\n    }\r\n}", "OptimizationUsed": "1", "ContractName": "HeroCoin", "ByteCode": ""}