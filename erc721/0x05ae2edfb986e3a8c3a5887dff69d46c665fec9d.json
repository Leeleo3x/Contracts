{"Runs": "200", "SwarmSource": "bzzr://3f81f84a475d04973bfe4f1d4d03f6cac94f88cdf837256e58c170fac9a4b908", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"_setTokenURI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getCryptodiamondWatchAddressById\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"InterfaceId_ERC165\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"CO\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getCryptoWatchETHAmountById\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"_burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCryptodiamondAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_cryptodiamondWatchAddress\",\"type\":\"address\"}],\"name\":\"_mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"ChangeOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}]", "Library": "", "CompilerVersion": "v0.4.24+commit.e67f0147", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000d43727970746f576174636865730000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000057761746368000000000000000000000000000000000000000000000000000000", "SourceCode": "//Copyright CryptoDiamond srl\r\n//Luigi Di Benedetto | Brescia (Italy) | CEO CryptoDiamond srl\r\n\r\n//social:   fb          - https://www.facebook.com/LuigiDiBenedettoBS\r\n//          linkedin    - https://www.linkedin.com/in/luigi-di-benedetto\r\n\r\n//          website     - https://www.cryptodiamond.it/\r\n\r\n//ERC-721 TOKEN - CRYPTOWATCHES PROJECT\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title ERC165\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n */\r\ninterface ERC165 {\r\n\r\n  /**\r\n   * @notice Query if a contract implements an interface\r\n   * @param _interfaceId The interface identifier, as specified in ERC-165\r\n   * @dev Interface identification is specified in ERC-165. This function\r\n   * uses less than 30,000 gas.\r\n   */\r\n  function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool);\r\n}\r\n\r\n\r\n\r\n\r\ncontract SupportsInterfaceWithLookup is ERC165 {\r\n  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\r\n\r\n  mapping(bytes4 => bool) internal supportedInterfaces;\r\n\r\n\r\n  constructor()\r\n    public\r\n  {\r\n    _registerInterface(InterfaceId_ERC165);\r\n  }\r\n\r\n  function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool)\r\n  {\r\n    return supportedInterfaces[_interfaceId];\r\n  }\r\n\r\n  function _registerInterface(bytes4 _interfaceId)\r\n    internal\r\n  {\r\n    require(_interfaceId != 0xffffffff);\r\n    supportedInterfaces[_interfaceId] = true;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   * as the code is not actually created until after the constructor finishes.\r\n   * @param addr address to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address addr) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(addr) }\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ncontract ERC721Receiver {\r\n  /**\r\n   * @dev Magic value to be returned upon successful reception of an NFT\r\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`,\r\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n   */\r\n  bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n  /**\r\n   * @notice Handle the receipt of an NFT\r\n   * @dev The ERC721 smart contract calls this function on the recipient\r\n   * after a `safetransfer`. This function MAY throw to revert and reject the\r\n   * transfer. Return of other than the magic value MUST result in the \r\n   * transaction being reverted.\r\n   * Note: the contract address is always the message sender.\r\n   * @param _operator The address which called `safeTransferFrom` function\r\n   * @param _from The address which previously owned the token\r\n   * @param _tokenId The NFT identifier which is being transfered\r\n   * @param _data Additional data with no specified format\r\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n   */\r\n  function onERC721Received(\r\n    address _operator,\r\n    address _from,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n    returns(bytes4);\r\n}\r\n\r\n\r\ncontract ERC721Basic is ERC165 {\r\n  event Transfer(\r\n    address indexed _from,\r\n    address indexed _to,\r\n    uint256 indexed _tokenId\r\n  );\r\n  event Approval(\r\n    address indexed _owner,\r\n    address indexed _approved,\r\n    uint256 indexed _tokenId\r\n  );\r\n  event ApprovalForAll(\r\n    address indexed _owner,\r\n    address indexed _operator,\r\n    bool _approved\r\n  );\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 _balance);\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n  function exists(uint256 _tokenId) public view returns (bool _exists);\r\n\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function getApproved(uint256 _tokenId)\r\n    public view returns (address _operator);\r\n\r\n  function setApprovalForAll(address _operator, bool _approved) public;\r\n  function isApprovedForAll(address _owner, address _operator)\r\n    public view returns (bool);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId)\r\n    public;\r\n\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public;\r\n}\r\n\r\n\r\ncontract ERC721Enumerable is ERC721Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function tokenOfOwnerByIndex(\r\n    address _owner,\r\n    uint256 _index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256 _tokenId);\r\n\r\n  function tokenByIndex(uint256 _index) public view returns (uint256);\r\n}\r\n\r\n\r\ncontract ERC721Metadata is ERC721Basic {\r\n  function name() external view returns (string _name);\r\n  function symbol() external view returns (string _symbol);\r\n  function tokenURI(uint256 _tokenId) public view returns (string);\r\n}\r\n\r\n\r\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\r\n}\r\n\r\ncontract cryptodiamondwatch{\r\n    function transferOwnershipTo(address _newOwner, string _comment) external;\r\n    function getAmount() external constant returns (uint);\r\n}\r\n\r\ncontract ERC721BasicToken is SupportsInterfaceWithLookup, ERC721Basic {\r\n    \r\n    \r\n  address private cryptodiamondAddress;\r\n  \r\n  bytes4 private constant InterfaceId_ERC721 = 0x80ac58cd;\r\n  bytes4 private constant InterfaceId_ERC721Exists = 0x4f558e79;\r\n\r\n\r\n  using SafeMath for uint256;\r\n  using AddressUtils for address;\r\n\r\n  bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\r\n  \r\n  \r\n  //Associo ad ogni id l'indirizzo del contratto corrispondente\r\n  mapping (uint256 => address) internal cryptodiamondID;\r\n\r\n  mapping (uint256 => address) internal tokenOwner;\r\n\r\n  mapping (uint256 => address) internal tokenApprovals;\r\n\r\n  mapping (address => uint256) internal ownedTokensCount;\r\n\r\n  mapping (address => mapping (address => bool)) internal operatorApprovals;\r\n\r\n\r\n  modifier onlyOwnerOf(uint256 _tokenId) {\r\n    require(ownerOf(_tokenId) == msg.sender);\r\n    _;\r\n  }\r\n\r\n  modifier canTransfer(uint256 _tokenId) {\r\n    require(isApprovedOrOwner(msg.sender, _tokenId));\r\n    _;\r\n  }\r\n\r\n  constructor()\r\n    public\r\n  {\r\n    // register the supported interfaces to conform to ERC721 via ERC165\r\n    _registerInterface(InterfaceId_ERC721);\r\n    _registerInterface(InterfaceId_ERC721Exists);\r\n  }\r\n  \r\n  modifier onlyCryptodiamond() { \r\n      require (msg.sender == cryptodiamondAddress); \r\n      _; \r\n    }\r\n\r\n\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    require(_owner != address(0));\r\n    return ownedTokensCount[_owner];\r\n  }\r\n\r\n\r\n  function ownerOf(uint256 _tokenId) public view returns (address) {\r\n    address owner = tokenOwner[_tokenId];\r\n    require(owner != address(0));\r\n    return owner;\r\n  }\r\n\r\n\r\n  function exists(uint256 _tokenId) public view returns (bool) {\r\n    address owner = tokenOwner[_tokenId];\r\n    return owner != address(0);\r\n  }\r\n\r\n  function approve(address _to, uint256 _tokenId) public {\r\n    address owner = ownerOf(_tokenId);\r\n    require(_to != owner);\r\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n    tokenApprovals[_tokenId] = _to;\r\n    emit Approval(owner, _to, _tokenId);\r\n  }\r\n\r\n\r\n  function getApproved(uint256 _tokenId) public view returns (address) {\r\n    return tokenApprovals[_tokenId];\r\n  }\r\n\r\n\r\n  function setApprovalForAll(address _to, bool _approved) public {\r\n    require(_to != msg.sender);\r\n    operatorApprovals[msg.sender][_to] = _approved;\r\n    emit ApprovalForAll(msg.sender, _to, _approved);\r\n  }\r\n\r\n  function isApprovedForAll(\r\n    address _owner,\r\n    address _operator\r\n  )\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return operatorApprovals[_owner][_operator];\r\n  }\r\n\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n    canTransfer(_tokenId)\r\n  {\r\n    require(_from != address(0));\r\n    require(_to != address(0));\r\n\r\n    clearApproval(_from, _tokenId);\r\n    removeTokenFrom(_from, _tokenId);\r\n    addTokenTo(_to, _tokenId);\r\n    \r\n    cryptodiamondwatch cryptowatch = cryptodiamondwatch(cryptodiamondID[_tokenId]);\r\n    cryptowatch.transferOwnershipTo(_to,\"Trasferimento propriet\u00e0 dal token\");\r\n    \r\n    emit Transfer(_from, _to, _tokenId);\r\n  }\r\n  \r\n  function getCryptoWatchETHAmountById(uint256 _tokenId) public constant returns(uint256){\r\n    cryptodiamondwatch cryptowatch = cryptodiamondwatch(cryptodiamondID[_tokenId]);\r\n    return cryptowatch.getAmount();\r\n  }\r\n\r\n  function safeTransferFrom(address _from,address _to,uint256 _tokenId) public canTransfer(_tokenId)\r\n  {\r\n    // solium-disable-next-line arg-overflow\r\n    safeTransferFrom(_from, _to, _tokenId, \"\");\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n    canTransfer(_tokenId)\r\n  {\r\n    transferFrom(_from, _to, _tokenId);\r\n    // solium-disable-next-line arg-overflow\r\n    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\r\n  }\r\n\r\n  function isApprovedOrOwner(\r\n    address _spender,\r\n    uint256 _tokenId\r\n  )\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    address owner = ownerOf(_tokenId);\r\n    // Disable solium check because of\r\n    // https://github.com/duaraghav8/Solium/issues/175\r\n    // solium-disable-next-line operator-whitespace\r\n    return (\r\n      _spender == owner ||\r\n      getApproved(_tokenId) == _spender ||\r\n      isApprovedForAll(owner, _spender)\r\n    );\r\n  }\r\n\r\n\r\n  function _mint(address _to, uint256 _tokenId, address _cryptodiamondWatchAddress) public onlyCryptodiamond{\r\n    require(_to != address(0));\r\n    addTokenTo(_to, _tokenId);\r\n    cryptodiamondID[_tokenId]=_cryptodiamondWatchAddress;\r\n    emit Transfer(address(0), _to, _tokenId);\r\n  }\r\n  \r\n  function getCryptodiamondWatchAddressById(uint256 _tokenId) constant public returns(address){\r\n      return cryptodiamondID[_tokenId];\r\n  }\r\n\r\n  function _burn(address _owner, uint256 _tokenId) public onlyCryptodiamond {\r\n    clearApproval(_owner, _tokenId);\r\n    removeTokenFrom(_owner, _tokenId);\r\n    emit Transfer(_owner, address(0), _tokenId);\r\n  }\r\n\r\n  function clearApproval(address _owner, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _owner);\r\n    if (tokenApprovals[_tokenId] != address(0)) {\r\n      tokenApprovals[_tokenId] = address(0);\r\n    }\r\n  }\r\n\r\n  \r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    require(tokenOwner[_tokenId] == address(0));\r\n    tokenOwner[_tokenId] = _to;\r\n    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\r\n  }\r\n\r\n\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _from);\r\n    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\r\n    tokenOwner[_tokenId] = address(0);\r\n  }\r\n\r\n  function checkAndCallSafeTransfer(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    internal\r\n    returns (bool)\r\n  {\r\n    if (!_to.isContract()) {\r\n      return true;\r\n    }\r\n    bytes4 retval = ERC721Receiver(_to).onERC721Received(\r\n      msg.sender, _from, _tokenId, _data);\r\n    return (retval == ERC721_RECEIVED);\r\n  }\r\n}\r\n\r\n\r\ncontract CryptoWatchesToken is SupportsInterfaceWithLookup, ERC721BasicToken, ERC721 {\r\n\r\n  bytes4 private constant InterfaceId_ERC721Enumerable = 0x780e9d63;\r\n  bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\r\n  \r\n  address private cryptodiamondAddress;\r\n  \r\n  event ChangeOwnership(address _oldAddress, address _newAddress);\r\n  \r\n  \r\n  // Token name\r\n  string internal name_;\r\n\r\n  // Token symbol\r\n  string internal symbol_;\r\n\r\n\r\n  mapping(address => uint256[]) internal ownedTokens;\r\n  mapping(uint256 => uint256) internal ownedTokensIndex;\r\n  uint256[] internal allTokens;\r\n  mapping(uint256 => uint256) internal allTokensIndex;\r\n  mapping(uint256 => string) internal tokenURIs;\r\n\r\n\r\n  constructor(string _name, string _symbol) public {\r\n    name_ = _name;\r\n    symbol_ = _symbol;\r\n    \r\n    cryptodiamondAddress = msg.sender;\r\n\r\n    // register the supported interfaces to conform to ERC721 via ERC165\r\n    _registerInterface(InterfaceId_ERC721Enumerable);\r\n    _registerInterface(InterfaceId_ERC721Metadata);\r\n  }\r\n  \r\n  modifier onlyCryptodiamond() { \r\n      require (msg.sender == cryptodiamondAddress); \r\n      _; \r\n    }\r\n\r\n  function name() external view returns (string) {\r\n    return name_;\r\n  }\r\n\r\n  function symbol() external view returns (string) {\r\n    return symbol_;\r\n  }\r\n\r\n  function tokenURI(uint256 _tokenId) public view returns (string) {\r\n    require(exists(_tokenId));\r\n    return tokenURIs[_tokenId];\r\n  }\r\n\r\n  function tokenOfOwnerByIndex(\r\n    address _owner,\r\n    uint256 _index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    require(_index < balanceOf(_owner));\r\n    return ownedTokens[_owner][_index];\r\n  }\r\n\r\n\r\n  function totalSupply() public view returns (uint256) {\r\n    return allTokens.length;\r\n  }\r\n\r\n  function tokenByIndex(uint256 _index) public view returns (uint256) {\r\n    require(_index < totalSupply());\r\n    return allTokens[_index];\r\n  }\r\n\r\n\r\n  function _setTokenURI(uint256 _tokenId, string _uri) public onlyCryptodiamond{\r\n    require(exists(_tokenId));\r\n    tokenURIs[_tokenId] = _uri;\r\n  }\r\n\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    super.addTokenTo(_to, _tokenId);\r\n    uint256 length = ownedTokens[_to].length;\r\n    ownedTokens[_to].push(_tokenId);\r\n    ownedTokensIndex[_tokenId] = length;\r\n  }\r\n\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    super.removeTokenFrom(_from, _tokenId);\r\n\r\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\r\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\r\n\r\n    ownedTokens[_from][tokenIndex] = lastToken;\r\n    ownedTokens[_from][lastTokenIndex] = 0;\r\n    ownedTokens[_from].length--;\r\n    ownedTokensIndex[_tokenId] = 0;\r\n    ownedTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n  function _mint(address _to, uint256 _tokenId, address _cryptodiamondWatchAddress) public onlyCryptodiamond{\r\n    super._mint(_to, _tokenId, _cryptodiamondWatchAddress);\r\n\r\n    allTokensIndex[_tokenId] = allTokens.length;\r\n    allTokens.push(_tokenId);\r\n  }\r\n\r\n\r\n  function _burn(address _owner, uint256 _tokenId) public onlyCryptodiamond{\r\n    super._burn(_owner, _tokenId);\r\n\r\n    // Clear metadata (if any)\r\n    if (bytes(tokenURIs[_tokenId]).length != 0) {\r\n      delete tokenURIs[_tokenId];\r\n    }\r\n\r\n    // Reorg all tokens array\r\n    uint256 tokenIndex = allTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = allTokens.length.sub(1);\r\n    uint256 lastToken = allTokens[lastTokenIndex];\r\n\r\n    allTokens[tokenIndex] = lastToken;\r\n    allTokens[lastTokenIndex] = 0;\r\n\r\n    allTokens.length--;\r\n    allTokensIndex[_tokenId] = 0;\r\n    allTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n  \r\n  //cambio la propriet\u00e0 di chi pu\u00f2 gestire il token.\r\n  function CO(address _address) public onlyCryptodiamond returns(bool){\r\n      require(_address != address(0));\r\n      require(_address!= cryptodiamondAddress);\r\n      emit ChangeOwnership(cryptodiamondAddress,_address);\r\n      cryptodiamondAddress = _address;\r\n      return true;\r\n  }\r\n  function getCryptodiamondAddress() public constant returns(address){\r\n      return cryptodiamondAddress;\r\n  }\r\n\r\n}", "OptimizationUsed": "1", "ContractName": "CryptoWatchesToken", "ByteCode": "0x6080604052600436106101485763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301538868811461014d57806301ffc9a7146101ad57806306fdde03146101e3578063081812fc1461026d578063095ea7b3146102a157806310f44658146102c557806318160ddd146102dd57806319fa8f501461030457806323b872dd146103365780632f745c591461036057806339e8df011461038457806342842e0e146103a55780634d43a124146103cf5780634f558e79146103e75780634f6ccce7146103ff5780636161eb18146104175780636352211e1461043b57806370a082311461045357806395d89b41146104745780639911929014610489578063a22cb4651461049e578063a55311b5146104c4578063b88d4fde146104ef578063c87b56dd1461055e578063e985e9c514610576575b600080fd5b34801561015957600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526101ab95833595369560449491939091019190819084018382808284375094975061059d9650505050505050565b005b3480156101b957600080fd5b506101cf600160e060020a0319600435166105ec565b604080519115158252519081900360200190f35b3480156101ef57600080fd5b506101f861060b565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561023257818101518382015260200161021a565b50505050905090810190601f16801561025f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561027957600080fd5b506102856004356106a2565b60408051600160a060020a039092168252519081900360200190f35b3480156102ad57600080fd5b506101ab600160a060020a03600435166024356106bd565b3480156102d157600080fd5b50610285600435610773565b3480156102e957600080fd5b506102f261078e565b60408051918252519081900360200190f35b34801561031057600080fd5b50610319610794565b60408051600160e060020a03199092168252519081900360200190f35b34801561034257600080fd5b506101ab600160a060020a03600435811690602435166044356107b8565b34801561036c57600080fd5b506102f2600160a060020a0360043516602435610942565b34801561039057600080fd5b506101cf600160a060020a036004351661098f565b3480156103b157600080fd5b506101ab600160a060020a0360043581169060243516604435610a53565b3480156103db57600080fd5b506102f2600435610a8b565b3480156103f357600080fd5b506101cf600435610b27565b34801561040b57600080fd5b506102f2600435610b44565b34801561042357600080fd5b506101ab600160a060020a0360043516602435610b79565b34801561044757600080fd5b50610285600435610c8c565b34801561045f57600080fd5b506102f2600160a060020a0360043516610cb6565b34801561048057600080fd5b506101f8610ce9565b34801561049557600080fd5b50610285610d4a565b3480156104aa57600080fd5b506101ab600160a060020a03600435166024351515610d59565b3480156104d057600080fd5b506101ab600160a060020a036004358116906024359060443516610ddd565b3480156104fb57600080fd5b50604080516020601f6064356004818101359283018490048402850184019095528184526101ab94600160a060020a038135811695602480359092169560443595369560849401918190840183828082843750949750610e459650505050505050565b34801561056a57600080fd5b506101f8600435610e84565b34801561058257600080fd5b506101cf600160a060020a0360043581169060243516610f39565b600754600160a060020a031633146105b457600080fd5b6105bd82610b27565b15156105c857600080fd5b6000828152600e6020908152604090912082516105e79284019061157e565b505050565b600160e060020a03191660009081526020819052604090205460ff1690565b60088054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156106975780601f1061066c57610100808354040283529160200191610697565b820191906000526020600020905b81548152906001019060200180831161067a57829003601f168201915b505050505090505b90565b600090815260046020526040902054600160a060020a031690565b60006106c882610c8c565b9050600160a060020a0383811690821614156106e357600080fd5b33600160a060020a03821614806106ff57506106ff8133610f39565b151561070a57600080fd5b600082815260046020526040808220805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b600090815260026020526040902054600160a060020a031690565b600c5490565b7f01ffc9a70000000000000000000000000000000000000000000000000000000081565b6000816107c53382610f67565b15156107d057600080fd5b600160a060020a03851615156107e557600080fd5b600160a060020a03841615156107fa57600080fd5b6108048584610fc6565b61080e8584611037565b6108188484611170565b6000838152600260205260408082205481517f9e29dc7f000000000000000000000000000000000000000000000000000000008152600160a060020a03888116600483015260248201849052602260448301527f54726173666572696d656e746f2070726f7072696574c3a02064616c20746f6b60648301527f656e000000000000000000000000000000000000000000000000000000000000608483015292519290911694508492639e29dc7f9260a48084019382900301818387803b1580156108e257600080fd5b505af11580156108f6573d6000803e3d6000fd5b505050508284600160a060020a031686600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050505050565b600061094d83610cb6565b821061095857600080fd5b600160a060020a0383166000908152600a6020526040902080548390811061097c57fe5b9060005260206000200154905092915050565b600754600090600160a060020a031633146109a957600080fd5b600160a060020a03821615156109be57600080fd5b600754600160a060020a03838116911614156109d957600080fd5b60075460408051600160a060020a039283168152918416602083015280517fdf73496bb06edd4685dc2027b9d115504a7130d57f4f33dfd66679517060f4579281900390910190a15060078054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff199091161790556001919050565b80610a5e3382610f67565b1515610a6957600080fd5b610a858484846020604051908101604052806000815250610e45565b50505050565b60008181526002602090815260408083205481517fd321fe290000000000000000000000000000000000000000000000000000000081529151600160a060020a0390911692839263d321fe29926004808301939282900301818887803b158015610af457600080fd5b505af1158015610b08573d6000803e3d6000fd5b505050506040513d6020811015610b1e57600080fd5b50519392505050565b600090815260036020526040902054600160a060020a0316151590565b6000610b4e61078e565b8210610b5957600080fd5b600c805483908110610b6757fe5b90600052602060002001549050919050565b60075460009081908190600160a060020a03163314610b9757600080fd5b610ba185856111b9565b6000848152600e60205260409020546002600019610100600184161502019091160415610bdf576000848152600e60205260408120610bdf916115fc565b6000848152600d6020526040902054600c54909350610c0590600163ffffffff61122016565b9150600c82815481101515610c1657fe5b9060005260206000200154905080600c84815481101515610c3357fe5b6000918252602082200191909155600c805484908110610c4f57fe5b600091825260209091200155600c805490610c6e906000198301611643565b506000938452600d6020526040808520859055908452909220555050565b600081815260036020526040812054600160a060020a0316801515610cb057600080fd5b92915050565b6000600160a060020a0382161515610ccd57600080fd5b50600160a060020a031660009081526005602052604090205490565b60098054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156106975780601f1061066c57610100808354040283529160200191610697565b600754600160a060020a031690565b600160a060020a038216331415610d6f57600080fd5b336000818152600660209081526040808320600160a060020a03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b600754600160a060020a03163314610df457600080fd5b610dff838383611232565b50600c80546000838152600d60205260408120829055600182018355919091527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c7015550565b81610e503382610f67565b1515610e5b57600080fd5b610e668585856107b8565b610e72858585856112d5565b1515610e7d57600080fd5b5050505050565b6060610e8f82610b27565b1515610e9a57600080fd5b6000828152600e602090815260409182902080548351601f600260001961010060018616150201909316929092049182018490048402810184019094528084529091830182828015610f2d5780601f10610f0257610100808354040283529160200191610f2d565b820191906000526020600020905b815481529060010190602001808311610f1057829003601f168201915b50505050509050919050565b600160a060020a03918216600090815260066020908152604080832093909416825291909152205460ff1690565b600080610f7383610c8c565b905080600160a060020a031684600160a060020a03161480610fae575083600160a060020a0316610fa3846106a2565b600160a060020a0316145b80610fbe5750610fbe8185610f39565b949350505050565b81600160a060020a0316610fd982610c8c565b600160a060020a031614610fec57600080fd5b600081815260046020526040902054600160a060020a031615611033576000818152600460205260409020805473ffffffffffffffffffffffffffffffffffffffff191690555b5050565b60008060006110468585611442565b6000848152600b6020908152604080832054600160a060020a0389168452600a9092529091205490935061108190600163ffffffff61122016565b600160a060020a0386166000908152600a60205260409020805491935090839081106110a957fe5b9060005260206000200154905080600a600087600160a060020a0316600160a060020a03168152602001908152602001600020848154811015156110e957fe5b6000918252602080832090910192909255600160a060020a0387168152600a9091526040812080548490811061111b57fe5b6000918252602080832090910192909255600160a060020a0387168152600a90915260409020805490611152906000198301611643565b506000938452600b6020526040808520859055908452909220555050565b600061117c83836114d8565b50600160a060020a039091166000908152600a6020908152604080832080546001810182559084528284208101859055938352600b909152902055565b600754600160a060020a031633146111d057600080fd5b6111da8282610fc6565b6111e48282611037565b6040518190600090600160a060020a038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b60008282111561122c57fe5b50900390565b600754600160a060020a0316331461124957600080fd5b600160a060020a038316151561125e57600080fd5b6112688383611170565b600082815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03858116919091179091559051849291861691907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4505050565b6000806112ea85600160a060020a0316611569565b15156112f95760019150611439565b6040517f150b7a020000000000000000000000000000000000000000000000000000000081523360048201818152600160a060020a03898116602485015260448401889052608060648501908152875160848601528751918a169463150b7a0294938c938b938b93909160a490910190602085019080838360005b8381101561138c578181015183820152602001611374565b50505050905090810190601f1680156113b95780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b1580156113db57600080fd5b505af11580156113ef573d6000803e3d6000fd5b505050506040513d602081101561140557600080fd5b5051600160e060020a031981167f150b7a020000000000000000000000000000000000000000000000000000000014925090505b50949350505050565b81600160a060020a031661145582610c8c565b600160a060020a03161461146857600080fd5b600160a060020a03821660009081526005602052604090205461149290600163ffffffff61122016565b600160a060020a03909216600090815260056020908152604080832094909455918152600390915220805473ffffffffffffffffffffffffffffffffffffffff19169055565b600081815260036020526040902054600160a060020a0316156114fa57600080fd5b6000818152600360209081526040808320805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03871690811790915583526005909152902054611549906001611571565b600160a060020a0390921660009081526005602052604090209190915550565b6000903b1190565b81810182811015610cb057fe5b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106115bf57805160ff19168380011785556115ec565b828001600101855582156115ec579182015b828111156115ec5782518255916020019190600101906115d1565b506115f8929150611663565b5090565b50805460018160011615610100020316600290046000825580601f106116225750611640565b601f0160209004906000526020600020908101906116409190611663565b50565b8154818355818111156105e7576000838152602090206105e79181019083015b61069f91905b808211156115f857600081556001016116695600a165627a7a723058203f81f84a475d04973bfe4f1d4d03f6cac94f88cdf837256e58c170fac9a4b9080029"}